// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MMOMapDataV1Data.proto

#ifndef PROTOBUF_MMOMapDataV1Data_2eproto__INCLUDED
#define PROTOBUF_MMOMapDataV1Data_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MMOMapDataV1Data_2eproto();
void protobuf_AssignDesc_MMOMapDataV1Data_2eproto();
void protobuf_ShutdownFile_MMOMapDataV1Data_2eproto();

class MMOMapDataBaseDataV1;
class MMOMapDataSpawnInfoV1;
class MMOMapDataMDVector3V1;
class MMOMapDataPortalInfoV1;
class MMOMapDataNodeInfoV1;
class MMOMapDataPointInfoV1;
class MMOMapDataInfoV1;
class MMOMapDataDefeatInfoV1;
class MMOMapDataUselessV1;

// ===================================================================

class MMOMapDataBaseDataV1 : public ::google::protobuf::Message {
 public:
  MMOMapDataBaseDataV1();
  virtual ~MMOMapDataBaseDataV1();

  MMOMapDataBaseDataV1(const MMOMapDataBaseDataV1& from);

  inline MMOMapDataBaseDataV1& operator=(const MMOMapDataBaseDataV1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MMOMapDataBaseDataV1& default_instance();

  void Swap(MMOMapDataBaseDataV1* other);

  // implements Message ----------------------------------------------

  MMOMapDataBaseDataV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MMOMapDataBaseDataV1& from);
  void MergeFrom(const MMOMapDataBaseDataV1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string DataName = 1;
  inline bool has_dataname() const;
  inline void clear_dataname();
  static const int kDataNameFieldNumber = 1;
  inline const ::std::string& dataname() const;
  inline void set_dataname(const ::std::string& value);
  inline void set_dataname(const char* value);
  inline void set_dataname(const char* value, size_t size);
  inline ::std::string* mutable_dataname();
  inline ::std::string* release_dataname();
  inline void set_allocated_dataname(::std::string* dataname);

  // @@protoc_insertion_point(class_scope:MMOMapDataBaseDataV1)
 private:
  inline void set_has_dataname();
  inline void clear_has_dataname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* dataname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MMOMapDataV1Data_2eproto();
  friend void protobuf_AssignDesc_MMOMapDataV1Data_2eproto();
  friend void protobuf_ShutdownFile_MMOMapDataV1Data_2eproto();

  void InitAsDefaultInstance();
  static MMOMapDataBaseDataV1* default_instance_;
};
// -------------------------------------------------------------------

class MMOMapDataSpawnInfoV1 : public ::google::protobuf::Message {
 public:
  MMOMapDataSpawnInfoV1();
  virtual ~MMOMapDataSpawnInfoV1();

  MMOMapDataSpawnInfoV1(const MMOMapDataSpawnInfoV1& from);

  inline MMOMapDataSpawnInfoV1& operator=(const MMOMapDataSpawnInfoV1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MMOMapDataSpawnInfoV1& default_instance();

  void Swap(MMOMapDataSpawnInfoV1* other);

  // implements Message ----------------------------------------------

  MMOMapDataSpawnInfoV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MMOMapDataSpawnInfoV1& from);
  void MergeFrom(const MMOMapDataSpawnInfoV1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MMOMapDataMDVector3V1 SpawnPos = 4;
  inline bool has_spawnpos() const;
  inline void clear_spawnpos();
  static const int kSpawnPosFieldNumber = 4;
  inline const ::MMOMapDataMDVector3V1& spawnpos() const;
  inline ::MMOMapDataMDVector3V1* mutable_spawnpos();
  inline ::MMOMapDataMDVector3V1* release_spawnpos();
  inline void set_allocated_spawnpos(::MMOMapDataMDVector3V1* spawnpos);

  // optional .MMOMapDataMDVector3V1 SpawnRot = 5;
  inline bool has_spawnrot() const;
  inline void clear_spawnrot();
  static const int kSpawnRotFieldNumber = 5;
  inline const ::MMOMapDataMDVector3V1& spawnrot() const;
  inline ::MMOMapDataMDVector3V1* mutable_spawnrot();
  inline ::MMOMapDataMDVector3V1* release_spawnrot();
  inline void set_allocated_spawnrot(::MMOMapDataMDVector3V1* spawnrot);

  // optional sint32 SpawnIndex = 6 [default = 0];
  inline bool has_spawnindex() const;
  inline void clear_spawnindex();
  static const int kSpawnIndexFieldNumber = 6;
  inline ::google::protobuf::int32 spawnindex() const;
  inline void set_spawnindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MMOMapDataSpawnInfoV1)
 private:
  inline void set_has_spawnpos();
  inline void clear_has_spawnpos();
  inline void set_has_spawnrot();
  inline void clear_has_spawnrot();
  inline void set_has_spawnindex();
  inline void clear_has_spawnindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::MMOMapDataMDVector3V1* spawnpos_;
  ::MMOMapDataMDVector3V1* spawnrot_;
  ::google::protobuf::int32 spawnindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MMOMapDataV1Data_2eproto();
  friend void protobuf_AssignDesc_MMOMapDataV1Data_2eproto();
  friend void protobuf_ShutdownFile_MMOMapDataV1Data_2eproto();

  void InitAsDefaultInstance();
  static MMOMapDataSpawnInfoV1* default_instance_;
};
// -------------------------------------------------------------------

class MMOMapDataMDVector3V1 : public ::google::protobuf::Message {
 public:
  MMOMapDataMDVector3V1();
  virtual ~MMOMapDataMDVector3V1();

  MMOMapDataMDVector3V1(const MMOMapDataMDVector3V1& from);

  inline MMOMapDataMDVector3V1& operator=(const MMOMapDataMDVector3V1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MMOMapDataMDVector3V1& default_instance();

  void Swap(MMOMapDataMDVector3V1* other);

  // implements Message ----------------------------------------------

  MMOMapDataMDVector3V1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MMOMapDataMDVector3V1& from);
  void MergeFrom(const MMOMapDataMDVector3V1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float X = 1 [default = 0];
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float Y = 2 [default = 0];
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float Z = 3 [default = 0];
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:MMOMapDataMDVector3V1)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MMOMapDataV1Data_2eproto();
  friend void protobuf_AssignDesc_MMOMapDataV1Data_2eproto();
  friend void protobuf_ShutdownFile_MMOMapDataV1Data_2eproto();

  void InitAsDefaultInstance();
  static MMOMapDataMDVector3V1* default_instance_;
};
// -------------------------------------------------------------------

class MMOMapDataPortalInfoV1 : public ::google::protobuf::Message {
 public:
  MMOMapDataPortalInfoV1();
  virtual ~MMOMapDataPortalInfoV1();

  MMOMapDataPortalInfoV1(const MMOMapDataPortalInfoV1& from);

  inline MMOMapDataPortalInfoV1& operator=(const MMOMapDataPortalInfoV1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MMOMapDataPortalInfoV1& default_instance();

  void Swap(MMOMapDataPortalInfoV1* other);

  // implements Message ----------------------------------------------

  MMOMapDataPortalInfoV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MMOMapDataPortalInfoV1& from);
  void MergeFrom(const MMOMapDataPortalInfoV1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MMOMapDataMDVector3V1 SourcePos = 1;
  inline bool has_sourcepos() const;
  inline void clear_sourcepos();
  static const int kSourcePosFieldNumber = 1;
  inline const ::MMOMapDataMDVector3V1& sourcepos() const;
  inline ::MMOMapDataMDVector3V1* mutable_sourcepos();
  inline ::MMOMapDataMDVector3V1* release_sourcepos();
  inline void set_allocated_sourcepos(::MMOMapDataMDVector3V1* sourcepos);

  // optional .MMOMapDataMDVector3V1 TargetPos = 2;
  inline bool has_targetpos() const;
  inline void clear_targetpos();
  static const int kTargetPosFieldNumber = 2;
  inline const ::MMOMapDataMDVector3V1& targetpos() const;
  inline ::MMOMapDataMDVector3V1* mutable_targetpos();
  inline ::MMOMapDataMDVector3V1* release_targetpos();
  inline void set_allocated_targetpos(::MMOMapDataMDVector3V1* targetpos);

  // optional .MMOMapDataMDVector3V1 TargetRot = 3;
  inline bool has_targetrot() const;
  inline void clear_targetrot();
  static const int kTargetRotFieldNumber = 3;
  inline const ::MMOMapDataMDVector3V1& targetrot() const;
  inline ::MMOMapDataMDVector3V1* mutable_targetrot();
  inline ::MMOMapDataMDVector3V1* release_targetrot();
  inline void set_allocated_targetrot(::MMOMapDataMDVector3V1* targetrot);

  // optional sint32 TargetDungeonID = 4 [default = 0];
  inline bool has_targetdungeonid() const;
  inline void clear_targetdungeonid();
  static const int kTargetDungeonIDFieldNumber = 4;
  inline ::google::protobuf::int32 targetdungeonid() const;
  inline void set_targetdungeonid(::google::protobuf::int32 value);

  // optional sint32 TargetSpawnIndex = 6 [default = 0];
  inline bool has_targetspawnindex() const;
  inline void clear_targetspawnindex();
  static const int kTargetSpawnIndexFieldNumber = 6;
  inline ::google::protobuf::int32 targetspawnindex() const;
  inline void set_targetspawnindex(::google::protobuf::int32 value);

  // optional sint32 PortalType = 7 [default = 0];
  inline bool has_portaltype() const;
  inline void clear_portaltype();
  static const int kPortalTypeFieldNumber = 7;
  inline ::google::protobuf::int32 portaltype() const;
  inline void set_portaltype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MMOMapDataPortalInfoV1)
 private:
  inline void set_has_sourcepos();
  inline void clear_has_sourcepos();
  inline void set_has_targetpos();
  inline void clear_has_targetpos();
  inline void set_has_targetrot();
  inline void clear_has_targetrot();
  inline void set_has_targetdungeonid();
  inline void clear_has_targetdungeonid();
  inline void set_has_targetspawnindex();
  inline void clear_has_targetspawnindex();
  inline void set_has_portaltype();
  inline void clear_has_portaltype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::MMOMapDataMDVector3V1* sourcepos_;
  ::MMOMapDataMDVector3V1* targetpos_;
  ::MMOMapDataMDVector3V1* targetrot_;
  ::google::protobuf::int32 targetdungeonid_;
  ::google::protobuf::int32 targetspawnindex_;
  ::google::protobuf::int32 portaltype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_MMOMapDataV1Data_2eproto();
  friend void protobuf_AssignDesc_MMOMapDataV1Data_2eproto();
  friend void protobuf_ShutdownFile_MMOMapDataV1Data_2eproto();

  void InitAsDefaultInstance();
  static MMOMapDataPortalInfoV1* default_instance_;
};
// -------------------------------------------------------------------

class MMOMapDataNodeInfoV1 : public ::google::protobuf::Message {
 public:
  MMOMapDataNodeInfoV1();
  virtual ~MMOMapDataNodeInfoV1();

  MMOMapDataNodeInfoV1(const MMOMapDataNodeInfoV1& from);

  inline MMOMapDataNodeInfoV1& operator=(const MMOMapDataNodeInfoV1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MMOMapDataNodeInfoV1& default_instance();

  void Swap(MMOMapDataNodeInfoV1* other);

  // implements Message ----------------------------------------------

  MMOMapDataNodeInfoV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MMOMapDataNodeInfoV1& from);
  void MergeFrom(const MMOMapDataNodeInfoV1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 RelevanceArea = 8 [default = 0];
  inline bool has_relevancearea() const;
  inline void clear_relevancearea();
  static const int kRelevanceAreaFieldNumber = 8;
  inline ::google::protobuf::int32 relevancearea() const;
  inline void set_relevancearea(::google::protobuf::int32 value);

  // optional sint32 PassKillEnemyID = 10 [default = 0];
  inline bool has_passkillenemyid() const;
  inline void clear_passkillenemyid();
  static const int kPassKillEnemyIDFieldNumber = 10;
  inline ::google::protobuf::int32 passkillenemyid() const;
  inline void set_passkillenemyid(::google::protobuf::int32 value);

  // optional sint32 PassKillEnemyNum = 11 [default = 0];
  inline bool has_passkillenemynum() const;
  inline void clear_passkillenemynum();
  static const int kPassKillEnemyNumFieldNumber = 11;
  inline ::google::protobuf::int32 passkillenemynum() const;
  inline void set_passkillenemynum(::google::protobuf::int32 value);

  // optional sint32 PassTime = 13 [default = 0];
  inline bool has_passtime() const;
  inline void clear_passtime();
  static const int kPassTimeFieldNumber = 13;
  inline ::google::protobuf::int32 passtime() const;
  inline void set_passtime(::google::protobuf::int32 value);

  // optional sint32 PassUseItemID = 16 [default = 0];
  inline bool has_passuseitemid() const;
  inline void clear_passuseitemid();
  static const int kPassUseItemIDFieldNumber = 16;
  inline ::google::protobuf::int32 passuseitemid() const;
  inline void set_passuseitemid(::google::protobuf::int32 value);

  // optional sint32 PassUseItemNum = 17 [default = 0];
  inline bool has_passuseitemnum() const;
  inline void clear_passuseitemnum();
  static const int kPassUseItemNumFieldNumber = 17;
  inline ::google::protobuf::int32 passuseitemnum() const;
  inline void set_passuseitemnum(::google::protobuf::int32 value);

  // optional sint32 PassCollectItemID = 18 [default = 0];
  inline bool has_passcollectitemid() const;
  inline void clear_passcollectitemid();
  static const int kPassCollectItemIDFieldNumber = 18;
  inline ::google::protobuf::int32 passcollectitemid() const;
  inline void set_passcollectitemid(::google::protobuf::int32 value);

  // optional sint32 PassCollectItemNum = 19 [default = 0];
  inline bool has_passcollectitemnum() const;
  inline void clear_passcollectitemnum();
  static const int kPassCollectItemNumFieldNumber = 19;
  inline ::google::protobuf::int32 passcollectitemnum() const;
  inline void set_passcollectitemnum(::google::protobuf::int32 value);

  // optional sint32 PassConditionType = 20 [default = 0];
  inline bool has_passconditiontype() const;
  inline void clear_passconditiontype();
  static const int kPassConditionTypeFieldNumber = 20;
  inline ::google::protobuf::int32 passconditiontype() const;
  inline void set_passconditiontype(::google::protobuf::int32 value);

  // optional .MMOMapDataMDVector3V1 NodePos1 = 21;
  inline bool has_nodepos1() const;
  inline void clear_nodepos1();
  static const int kNodePos1FieldNumber = 21;
  inline const ::MMOMapDataMDVector3V1& nodepos1() const;
  inline ::MMOMapDataMDVector3V1* mutable_nodepos1();
  inline ::MMOMapDataMDVector3V1* release_nodepos1();
  inline void set_allocated_nodepos1(::MMOMapDataMDVector3V1* nodepos1);

  // optional .MMOMapDataMDVector3V1 NodePos2 = 22;
  inline bool has_nodepos2() const;
  inline void clear_nodepos2();
  static const int kNodePos2FieldNumber = 22;
  inline const ::MMOMapDataMDVector3V1& nodepos2() const;
  inline ::MMOMapDataMDVector3V1* mutable_nodepos2();
  inline ::MMOMapDataMDVector3V1* release_nodepos2();
  inline void set_allocated_nodepos2(::MMOMapDataMDVector3V1* nodepos2);

  // @@protoc_insertion_point(class_scope:MMOMapDataNodeInfoV1)
 private:
  inline void set_has_relevancearea();
  inline void clear_has_relevancearea();
  inline void set_has_passkillenemyid();
  inline void clear_has_passkillenemyid();
  inline void set_has_passkillenemynum();
  inline void clear_has_passkillenemynum();
  inline void set_has_passtime();
  inline void clear_has_passtime();
  inline void set_has_passuseitemid();
  inline void clear_has_passuseitemid();
  inline void set_has_passuseitemnum();
  inline void clear_has_passuseitemnum();
  inline void set_has_passcollectitemid();
  inline void clear_has_passcollectitemid();
  inline void set_has_passcollectitemnum();
  inline void clear_has_passcollectitemnum();
  inline void set_has_passconditiontype();
  inline void clear_has_passconditiontype();
  inline void set_has_nodepos1();
  inline void clear_has_nodepos1();
  inline void set_has_nodepos2();
  inline void clear_has_nodepos2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 relevancearea_;
  ::google::protobuf::int32 passkillenemyid_;
  ::google::protobuf::int32 passkillenemynum_;
  ::google::protobuf::int32 passtime_;
  ::google::protobuf::int32 passuseitemid_;
  ::google::protobuf::int32 passuseitemnum_;
  ::google::protobuf::int32 passcollectitemid_;
  ::google::protobuf::int32 passcollectitemnum_;
  ::MMOMapDataMDVector3V1* nodepos1_;
  ::MMOMapDataMDVector3V1* nodepos2_;
  ::google::protobuf::int32 passconditiontype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_MMOMapDataV1Data_2eproto();
  friend void protobuf_AssignDesc_MMOMapDataV1Data_2eproto();
  friend void protobuf_ShutdownFile_MMOMapDataV1Data_2eproto();

  void InitAsDefaultInstance();
  static MMOMapDataNodeInfoV1* default_instance_;
};
// -------------------------------------------------------------------

class MMOMapDataPointInfoV1 : public ::google::protobuf::Message {
 public:
  MMOMapDataPointInfoV1();
  virtual ~MMOMapDataPointInfoV1();

  MMOMapDataPointInfoV1(const MMOMapDataPointInfoV1& from);

  inline MMOMapDataPointInfoV1& operator=(const MMOMapDataPointInfoV1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MMOMapDataPointInfoV1& default_instance();

  void Swap(MMOMapDataPointInfoV1* other);

  // implements Message ----------------------------------------------

  MMOMapDataPointInfoV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MMOMapDataPointInfoV1& from);
  void MergeFrom(const MMOMapDataPointInfoV1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 SpriteType = 1 [default = 0];
  inline bool has_spritetype() const;
  inline void clear_spritetype();
  static const int kSpriteTypeFieldNumber = 1;
  inline ::google::protobuf::int32 spritetype() const;
  inline void set_spritetype(::google::protobuf::int32 value);

  // optional sint32 SpriteID = 2 [default = 0];
  inline bool has_spriteid() const;
  inline void clear_spriteid();
  static const int kSpriteIDFieldNumber = 2;
  inline ::google::protobuf::int32 spriteid() const;
  inline void set_spriteid(::google::protobuf::int32 value);

  // optional sint32 Area = 3 [default = 0];
  inline bool has_area() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 3;
  inline ::google::protobuf::int32 area() const;
  inline void set_area(::google::protobuf::int32 value);

  // optional .MMOMapDataMDVector3V1 PointPos = 4;
  inline bool has_pointpos() const;
  inline void clear_pointpos();
  static const int kPointPosFieldNumber = 4;
  inline const ::MMOMapDataMDVector3V1& pointpos() const;
  inline ::MMOMapDataMDVector3V1* mutable_pointpos();
  inline ::MMOMapDataMDVector3V1* release_pointpos();
  inline void set_allocated_pointpos(::MMOMapDataMDVector3V1* pointpos);

  // optional .MMOMapDataMDVector3V1 PointRot = 5;
  inline bool has_pointrot() const;
  inline void clear_pointrot();
  static const int kPointRotFieldNumber = 5;
  inline const ::MMOMapDataMDVector3V1& pointrot() const;
  inline ::MMOMapDataMDVector3V1* mutable_pointrot();
  inline ::MMOMapDataMDVector3V1* release_pointrot();
  inline void set_allocated_pointrot(::MMOMapDataMDVector3V1* pointrot);

  // optional sint32 RefreshType = 6 [default = 0];
  inline bool has_refreshtype() const;
  inline void clear_refreshtype();
  static const int kRefreshTypeFieldNumber = 6;
  inline ::google::protobuf::int32 refreshtype() const;
  inline void set_refreshtype(::google::protobuf::int32 value);

  // optional sint32 UnlockTime = 7 [default = 0];
  inline bool has_unlocktime() const;
  inline void clear_unlocktime();
  static const int kUnlockTimeFieldNumber = 7;
  inline ::google::protobuf::int32 unlocktime() const;
  inline void set_unlocktime(::google::protobuf::int32 value);

  // optional sint32 EnemyID = 8 [default = 0];
  inline bool has_enemyid() const;
  inline void clear_enemyid();
  static const int kEnemyIDFieldNumber = 8;
  inline ::google::protobuf::int32 enemyid() const;
  inline void set_enemyid(::google::protobuf::int32 value);

  // optional sint32 EnemyNum = 9 [default = 0];
  inline bool has_enemynum() const;
  inline void clear_enemynum();
  static const int kEnemyNumFieldNumber = 9;
  inline ::google::protobuf::int32 enemynum() const;
  inline void set_enemynum(::google::protobuf::int32 value);

  // optional sint32 RebirthType = 10 [default = 0];
  inline bool has_rebirthtype() const;
  inline void clear_rebirthtype();
  static const int kRebirthTypeFieldNumber = 10;
  inline ::google::protobuf::int32 rebirthtype() const;
  inline void set_rebirthtype(::google::protobuf::int32 value);

  // optional sint32 RebirthEnemyID = 11 [default = 0];
  inline bool has_rebirthenemyid() const;
  inline void clear_rebirthenemyid();
  static const int kRebirthEnemyIDFieldNumber = 11;
  inline ::google::protobuf::int32 rebirthenemyid() const;
  inline void set_rebirthenemyid(::google::protobuf::int32 value);

  // optional sint32 RebirthEnemyNum = 12 [default = 0];
  inline bool has_rebirthenemynum() const;
  inline void clear_rebirthenemynum();
  static const int kRebirthEnemyNumFieldNumber = 12;
  inline ::google::protobuf::int32 rebirthenemynum() const;
  inline void set_rebirthenemynum(::google::protobuf::int32 value);

  // optional sint32 AfterDeathTime = 13 [default = 0];
  inline bool has_afterdeathtime() const;
  inline void clear_afterdeathtime();
  static const int kAfterDeathTimeFieldNumber = 13;
  inline ::google::protobuf::int32 afterdeathtime() const;
  inline void set_afterdeathtime(::google::protobuf::int32 value);

  // optional sint32 RebirthNum = 14 [default = -1];
  inline bool has_rebirthnum() const;
  inline void clear_rebirthnum();
  static const int kRebirthNumFieldNumber = 14;
  inline ::google::protobuf::int32 rebirthnum() const;
  inline void set_rebirthnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MMOMapDataPointInfoV1)
 private:
  inline void set_has_spritetype();
  inline void clear_has_spritetype();
  inline void set_has_spriteid();
  inline void clear_has_spriteid();
  inline void set_has_area();
  inline void clear_has_area();
  inline void set_has_pointpos();
  inline void clear_has_pointpos();
  inline void set_has_pointrot();
  inline void clear_has_pointrot();
  inline void set_has_refreshtype();
  inline void clear_has_refreshtype();
  inline void set_has_unlocktime();
  inline void clear_has_unlocktime();
  inline void set_has_enemyid();
  inline void clear_has_enemyid();
  inline void set_has_enemynum();
  inline void clear_has_enemynum();
  inline void set_has_rebirthtype();
  inline void clear_has_rebirthtype();
  inline void set_has_rebirthenemyid();
  inline void clear_has_rebirthenemyid();
  inline void set_has_rebirthenemynum();
  inline void clear_has_rebirthenemynum();
  inline void set_has_afterdeathtime();
  inline void clear_has_afterdeathtime();
  inline void set_has_rebirthnum();
  inline void clear_has_rebirthnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 spritetype_;
  ::google::protobuf::int32 spriteid_;
  ::MMOMapDataMDVector3V1* pointpos_;
  ::google::protobuf::int32 area_;
  ::google::protobuf::int32 refreshtype_;
  ::MMOMapDataMDVector3V1* pointrot_;
  ::google::protobuf::int32 unlocktime_;
  ::google::protobuf::int32 enemyid_;
  ::google::protobuf::int32 enemynum_;
  ::google::protobuf::int32 rebirthtype_;
  ::google::protobuf::int32 rebirthenemyid_;
  ::google::protobuf::int32 rebirthenemynum_;
  ::google::protobuf::int32 afterdeathtime_;
  ::google::protobuf::int32 rebirthnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_MMOMapDataV1Data_2eproto();
  friend void protobuf_AssignDesc_MMOMapDataV1Data_2eproto();
  friend void protobuf_ShutdownFile_MMOMapDataV1Data_2eproto();

  void InitAsDefaultInstance();
  static MMOMapDataPointInfoV1* default_instance_;
};
// -------------------------------------------------------------------

class MMOMapDataInfoV1 : public ::google::protobuf::Message {
 public:
  MMOMapDataInfoV1();
  virtual ~MMOMapDataInfoV1();

  MMOMapDataInfoV1(const MMOMapDataInfoV1& from);

  inline MMOMapDataInfoV1& operator=(const MMOMapDataInfoV1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MMOMapDataInfoV1& default_instance();

  void Swap(MMOMapDataInfoV1* other);

  // implements Message ----------------------------------------------

  MMOMapDataInfoV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MMOMapDataInfoV1& from);
  void MergeFrom(const MMOMapDataInfoV1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MMOMapDataBaseDataV1 BaseInfo = 1;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseInfoFieldNumber = 1;
  inline const ::MMOMapDataBaseDataV1& baseinfo() const;
  inline ::MMOMapDataBaseDataV1* mutable_baseinfo();
  inline ::MMOMapDataBaseDataV1* release_baseinfo();
  inline void set_allocated_baseinfo(::MMOMapDataBaseDataV1* baseinfo);

  // repeated .MMOMapDataSpawnInfoV1 SpawnArr = 2;
  inline int spawnarr_size() const;
  inline void clear_spawnarr();
  static const int kSpawnArrFieldNumber = 2;
  inline const ::MMOMapDataSpawnInfoV1& spawnarr(int index) const;
  inline ::MMOMapDataSpawnInfoV1* mutable_spawnarr(int index);
  inline ::MMOMapDataSpawnInfoV1* add_spawnarr();
  inline const ::google::protobuf::RepeatedPtrField< ::MMOMapDataSpawnInfoV1 >&
      spawnarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::MMOMapDataSpawnInfoV1 >*
      mutable_spawnarr();

  // repeated .MMOMapDataPortalInfoV1 PortalArr = 3;
  inline int portalarr_size() const;
  inline void clear_portalarr();
  static const int kPortalArrFieldNumber = 3;
  inline const ::MMOMapDataPortalInfoV1& portalarr(int index) const;
  inline ::MMOMapDataPortalInfoV1* mutable_portalarr(int index);
  inline ::MMOMapDataPortalInfoV1* add_portalarr();
  inline const ::google::protobuf::RepeatedPtrField< ::MMOMapDataPortalInfoV1 >&
      portalarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::MMOMapDataPortalInfoV1 >*
      mutable_portalarr();

  // optional .MMOMapDataDefeatInfoV1 DefeatInfo = 5;
  inline bool has_defeatinfo() const;
  inline void clear_defeatinfo();
  static const int kDefeatInfoFieldNumber = 5;
  inline const ::MMOMapDataDefeatInfoV1& defeatinfo() const;
  inline ::MMOMapDataDefeatInfoV1* mutable_defeatinfo();
  inline ::MMOMapDataDefeatInfoV1* release_defeatinfo();
  inline void set_allocated_defeatinfo(::MMOMapDataDefeatInfoV1* defeatinfo);

  // repeated .MMOMapDataNodeInfoV1 NodeArr = 6;
  inline int nodearr_size() const;
  inline void clear_nodearr();
  static const int kNodeArrFieldNumber = 6;
  inline const ::MMOMapDataNodeInfoV1& nodearr(int index) const;
  inline ::MMOMapDataNodeInfoV1* mutable_nodearr(int index);
  inline ::MMOMapDataNodeInfoV1* add_nodearr();
  inline const ::google::protobuf::RepeatedPtrField< ::MMOMapDataNodeInfoV1 >&
      nodearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::MMOMapDataNodeInfoV1 >*
      mutable_nodearr();

  // repeated .MMOMapDataPointInfoV1 PointArr = 7;
  inline int pointarr_size() const;
  inline void clear_pointarr();
  static const int kPointArrFieldNumber = 7;
  inline const ::MMOMapDataPointInfoV1& pointarr(int index) const;
  inline ::MMOMapDataPointInfoV1* mutable_pointarr(int index);
  inline ::MMOMapDataPointInfoV1* add_pointarr();
  inline const ::google::protobuf::RepeatedPtrField< ::MMOMapDataPointInfoV1 >&
      pointarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::MMOMapDataPointInfoV1 >*
      mutable_pointarr();

  // @@protoc_insertion_point(class_scope:MMOMapDataInfoV1)
 private:
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();
  inline void set_has_defeatinfo();
  inline void clear_has_defeatinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::MMOMapDataBaseDataV1* baseinfo_;
  ::google::protobuf::RepeatedPtrField< ::MMOMapDataSpawnInfoV1 > spawnarr_;
  ::google::protobuf::RepeatedPtrField< ::MMOMapDataPortalInfoV1 > portalarr_;
  ::MMOMapDataDefeatInfoV1* defeatinfo_;
  ::google::protobuf::RepeatedPtrField< ::MMOMapDataNodeInfoV1 > nodearr_;
  ::google::protobuf::RepeatedPtrField< ::MMOMapDataPointInfoV1 > pointarr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_MMOMapDataV1Data_2eproto();
  friend void protobuf_AssignDesc_MMOMapDataV1Data_2eproto();
  friend void protobuf_ShutdownFile_MMOMapDataV1Data_2eproto();

  void InitAsDefaultInstance();
  static MMOMapDataInfoV1* default_instance_;
};
// -------------------------------------------------------------------

class MMOMapDataDefeatInfoV1 : public ::google::protobuf::Message {
 public:
  MMOMapDataDefeatInfoV1();
  virtual ~MMOMapDataDefeatInfoV1();

  MMOMapDataDefeatInfoV1(const MMOMapDataDefeatInfoV1& from);

  inline MMOMapDataDefeatInfoV1& operator=(const MMOMapDataDefeatInfoV1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MMOMapDataDefeatInfoV1& default_instance();

  void Swap(MMOMapDataDefeatInfoV1* other);

  // implements Message ----------------------------------------------

  MMOMapDataDefeatInfoV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MMOMapDataDefeatInfoV1& from);
  void MergeFrom(const MMOMapDataDefeatInfoV1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool DefeatConditionSpared = 1 [default = false];
  inline bool has_defeatconditionspared() const;
  inline void clear_defeatconditionspared();
  static const int kDefeatConditionSparedFieldNumber = 1;
  inline bool defeatconditionspared() const;
  inline void set_defeatconditionspared(bool value);

  // optional bool DefeatConditionTimeOver = 2 [default = false];
  inline bool has_defeatconditiontimeover() const;
  inline void clear_defeatconditiontimeover();
  static const int kDefeatConditionTimeOverFieldNumber = 2;
  inline bool defeatconditiontimeover() const;
  inline void set_defeatconditiontimeover(bool value);

  // optional bool DefeatConditionHP = 3 [default = false];
  inline bool has_defeatconditionhp() const;
  inline void clear_defeatconditionhp();
  static const int kDefeatConditionHPFieldNumber = 3;
  inline bool defeatconditionhp() const;
  inline void set_defeatconditionhp(bool value);

  // optional sint32 DefeatTime = 4 [default = 0];
  inline bool has_defeattime() const;
  inline void clear_defeattime();
  static const int kDefeatTimeFieldNumber = 4;
  inline ::google::protobuf::int32 defeattime() const;
  inline void set_defeattime(::google::protobuf::int32 value);

  // optional sint32 DefeatID = 5 [default = 0];
  inline bool has_defeatid() const;
  inline void clear_defeatid();
  static const int kDefeatIDFieldNumber = 5;
  inline ::google::protobuf::int32 defeatid() const;
  inline void set_defeatid(::google::protobuf::int32 value);

  // optional sint32 DefeatHP = 6 [default = 0];
  inline bool has_defeathp() const;
  inline void clear_defeathp();
  static const int kDefeatHPFieldNumber = 6;
  inline ::google::protobuf::int32 defeathp() const;
  inline void set_defeathp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MMOMapDataDefeatInfoV1)
 private:
  inline void set_has_defeatconditionspared();
  inline void clear_has_defeatconditionspared();
  inline void set_has_defeatconditiontimeover();
  inline void clear_has_defeatconditiontimeover();
  inline void set_has_defeatconditionhp();
  inline void clear_has_defeatconditionhp();
  inline void set_has_defeattime();
  inline void clear_has_defeattime();
  inline void set_has_defeatid();
  inline void clear_has_defeatid();
  inline void set_has_defeathp();
  inline void clear_has_defeathp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool defeatconditionspared_;
  bool defeatconditiontimeover_;
  bool defeatconditionhp_;
  ::google::protobuf::int32 defeattime_;
  ::google::protobuf::int32 defeatid_;
  ::google::protobuf::int32 defeathp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_MMOMapDataV1Data_2eproto();
  friend void protobuf_AssignDesc_MMOMapDataV1Data_2eproto();
  friend void protobuf_ShutdownFile_MMOMapDataV1Data_2eproto();

  void InitAsDefaultInstance();
  static MMOMapDataDefeatInfoV1* default_instance_;
};
// -------------------------------------------------------------------

class MMOMapDataUselessV1 : public ::google::protobuf::Message {
 public:
  MMOMapDataUselessV1();
  virtual ~MMOMapDataUselessV1();

  MMOMapDataUselessV1(const MMOMapDataUselessV1& from);

  inline MMOMapDataUselessV1& operator=(const MMOMapDataUselessV1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MMOMapDataUselessV1& default_instance();

  void Swap(MMOMapDataUselessV1* other);

  // implements Message ----------------------------------------------

  MMOMapDataUselessV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MMOMapDataUselessV1& from);
  void MergeFrom(const MMOMapDataUselessV1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MMOMapDataUselessV1)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_MMOMapDataV1Data_2eproto();
  friend void protobuf_AssignDesc_MMOMapDataV1Data_2eproto();
  friend void protobuf_ShutdownFile_MMOMapDataV1Data_2eproto();

  void InitAsDefaultInstance();
  static MMOMapDataUselessV1* default_instance_;
};
// ===================================================================


// ===================================================================

// MMOMapDataBaseDataV1

// optional string DataName = 1;
inline bool MMOMapDataBaseDataV1::has_dataname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MMOMapDataBaseDataV1::set_has_dataname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MMOMapDataBaseDataV1::clear_has_dataname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MMOMapDataBaseDataV1::clear_dataname() {
  if (dataname_ != &::google::protobuf::internal::kEmptyString) {
    dataname_->clear();
  }
  clear_has_dataname();
}
inline const ::std::string& MMOMapDataBaseDataV1::dataname() const {
  return *dataname_;
}
inline void MMOMapDataBaseDataV1::set_dataname(const ::std::string& value) {
  set_has_dataname();
  if (dataname_ == &::google::protobuf::internal::kEmptyString) {
    dataname_ = new ::std::string;
  }
  dataname_->assign(value);
}
inline void MMOMapDataBaseDataV1::set_dataname(const char* value) {
  set_has_dataname();
  if (dataname_ == &::google::protobuf::internal::kEmptyString) {
    dataname_ = new ::std::string;
  }
  dataname_->assign(value);
}
inline void MMOMapDataBaseDataV1::set_dataname(const char* value, size_t size) {
  set_has_dataname();
  if (dataname_ == &::google::protobuf::internal::kEmptyString) {
    dataname_ = new ::std::string;
  }
  dataname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MMOMapDataBaseDataV1::mutable_dataname() {
  set_has_dataname();
  if (dataname_ == &::google::protobuf::internal::kEmptyString) {
    dataname_ = new ::std::string;
  }
  return dataname_;
}
inline ::std::string* MMOMapDataBaseDataV1::release_dataname() {
  clear_has_dataname();
  if (dataname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dataname_;
    dataname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MMOMapDataBaseDataV1::set_allocated_dataname(::std::string* dataname) {
  if (dataname_ != &::google::protobuf::internal::kEmptyString) {
    delete dataname_;
  }
  if (dataname) {
    set_has_dataname();
    dataname_ = dataname;
  } else {
    clear_has_dataname();
    dataname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MMOMapDataSpawnInfoV1

// optional .MMOMapDataMDVector3V1 SpawnPos = 4;
inline bool MMOMapDataSpawnInfoV1::has_spawnpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MMOMapDataSpawnInfoV1::set_has_spawnpos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MMOMapDataSpawnInfoV1::clear_has_spawnpos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MMOMapDataSpawnInfoV1::clear_spawnpos() {
  if (spawnpos_ != NULL) spawnpos_->::MMOMapDataMDVector3V1::Clear();
  clear_has_spawnpos();
}
inline const ::MMOMapDataMDVector3V1& MMOMapDataSpawnInfoV1::spawnpos() const {
  return spawnpos_ != NULL ? *spawnpos_ : *default_instance_->spawnpos_;
}
inline ::MMOMapDataMDVector3V1* MMOMapDataSpawnInfoV1::mutable_spawnpos() {
  set_has_spawnpos();
  if (spawnpos_ == NULL) spawnpos_ = new ::MMOMapDataMDVector3V1;
  return spawnpos_;
}
inline ::MMOMapDataMDVector3V1* MMOMapDataSpawnInfoV1::release_spawnpos() {
  clear_has_spawnpos();
  ::MMOMapDataMDVector3V1* temp = spawnpos_;
  spawnpos_ = NULL;
  return temp;
}
inline void MMOMapDataSpawnInfoV1::set_allocated_spawnpos(::MMOMapDataMDVector3V1* spawnpos) {
  delete spawnpos_;
  spawnpos_ = spawnpos;
  if (spawnpos) {
    set_has_spawnpos();
  } else {
    clear_has_spawnpos();
  }
}

// optional .MMOMapDataMDVector3V1 SpawnRot = 5;
inline bool MMOMapDataSpawnInfoV1::has_spawnrot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MMOMapDataSpawnInfoV1::set_has_spawnrot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MMOMapDataSpawnInfoV1::clear_has_spawnrot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MMOMapDataSpawnInfoV1::clear_spawnrot() {
  if (spawnrot_ != NULL) spawnrot_->::MMOMapDataMDVector3V1::Clear();
  clear_has_spawnrot();
}
inline const ::MMOMapDataMDVector3V1& MMOMapDataSpawnInfoV1::spawnrot() const {
  return spawnrot_ != NULL ? *spawnrot_ : *default_instance_->spawnrot_;
}
inline ::MMOMapDataMDVector3V1* MMOMapDataSpawnInfoV1::mutable_spawnrot() {
  set_has_spawnrot();
  if (spawnrot_ == NULL) spawnrot_ = new ::MMOMapDataMDVector3V1;
  return spawnrot_;
}
inline ::MMOMapDataMDVector3V1* MMOMapDataSpawnInfoV1::release_spawnrot() {
  clear_has_spawnrot();
  ::MMOMapDataMDVector3V1* temp = spawnrot_;
  spawnrot_ = NULL;
  return temp;
}
inline void MMOMapDataSpawnInfoV1::set_allocated_spawnrot(::MMOMapDataMDVector3V1* spawnrot) {
  delete spawnrot_;
  spawnrot_ = spawnrot;
  if (spawnrot) {
    set_has_spawnrot();
  } else {
    clear_has_spawnrot();
  }
}

// optional sint32 SpawnIndex = 6 [default = 0];
inline bool MMOMapDataSpawnInfoV1::has_spawnindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MMOMapDataSpawnInfoV1::set_has_spawnindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MMOMapDataSpawnInfoV1::clear_has_spawnindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MMOMapDataSpawnInfoV1::clear_spawnindex() {
  spawnindex_ = 0;
  clear_has_spawnindex();
}
inline ::google::protobuf::int32 MMOMapDataSpawnInfoV1::spawnindex() const {
  return spawnindex_;
}
inline void MMOMapDataSpawnInfoV1::set_spawnindex(::google::protobuf::int32 value) {
  set_has_spawnindex();
  spawnindex_ = value;
}

// -------------------------------------------------------------------

// MMOMapDataMDVector3V1

// optional float X = 1 [default = 0];
inline bool MMOMapDataMDVector3V1::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MMOMapDataMDVector3V1::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MMOMapDataMDVector3V1::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MMOMapDataMDVector3V1::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float MMOMapDataMDVector3V1::x() const {
  return x_;
}
inline void MMOMapDataMDVector3V1::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float Y = 2 [default = 0];
inline bool MMOMapDataMDVector3V1::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MMOMapDataMDVector3V1::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MMOMapDataMDVector3V1::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MMOMapDataMDVector3V1::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float MMOMapDataMDVector3V1::y() const {
  return y_;
}
inline void MMOMapDataMDVector3V1::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float Z = 3 [default = 0];
inline bool MMOMapDataMDVector3V1::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MMOMapDataMDVector3V1::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MMOMapDataMDVector3V1::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MMOMapDataMDVector3V1::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float MMOMapDataMDVector3V1::z() const {
  return z_;
}
inline void MMOMapDataMDVector3V1::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// MMOMapDataPortalInfoV1

// optional .MMOMapDataMDVector3V1 SourcePos = 1;
inline bool MMOMapDataPortalInfoV1::has_sourcepos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MMOMapDataPortalInfoV1::set_has_sourcepos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MMOMapDataPortalInfoV1::clear_has_sourcepos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MMOMapDataPortalInfoV1::clear_sourcepos() {
  if (sourcepos_ != NULL) sourcepos_->::MMOMapDataMDVector3V1::Clear();
  clear_has_sourcepos();
}
inline const ::MMOMapDataMDVector3V1& MMOMapDataPortalInfoV1::sourcepos() const {
  return sourcepos_ != NULL ? *sourcepos_ : *default_instance_->sourcepos_;
}
inline ::MMOMapDataMDVector3V1* MMOMapDataPortalInfoV1::mutable_sourcepos() {
  set_has_sourcepos();
  if (sourcepos_ == NULL) sourcepos_ = new ::MMOMapDataMDVector3V1;
  return sourcepos_;
}
inline ::MMOMapDataMDVector3V1* MMOMapDataPortalInfoV1::release_sourcepos() {
  clear_has_sourcepos();
  ::MMOMapDataMDVector3V1* temp = sourcepos_;
  sourcepos_ = NULL;
  return temp;
}
inline void MMOMapDataPortalInfoV1::set_allocated_sourcepos(::MMOMapDataMDVector3V1* sourcepos) {
  delete sourcepos_;
  sourcepos_ = sourcepos;
  if (sourcepos) {
    set_has_sourcepos();
  } else {
    clear_has_sourcepos();
  }
}

// optional .MMOMapDataMDVector3V1 TargetPos = 2;
inline bool MMOMapDataPortalInfoV1::has_targetpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MMOMapDataPortalInfoV1::set_has_targetpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MMOMapDataPortalInfoV1::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MMOMapDataPortalInfoV1::clear_targetpos() {
  if (targetpos_ != NULL) targetpos_->::MMOMapDataMDVector3V1::Clear();
  clear_has_targetpos();
}
inline const ::MMOMapDataMDVector3V1& MMOMapDataPortalInfoV1::targetpos() const {
  return targetpos_ != NULL ? *targetpos_ : *default_instance_->targetpos_;
}
inline ::MMOMapDataMDVector3V1* MMOMapDataPortalInfoV1::mutable_targetpos() {
  set_has_targetpos();
  if (targetpos_ == NULL) targetpos_ = new ::MMOMapDataMDVector3V1;
  return targetpos_;
}
inline ::MMOMapDataMDVector3V1* MMOMapDataPortalInfoV1::release_targetpos() {
  clear_has_targetpos();
  ::MMOMapDataMDVector3V1* temp = targetpos_;
  targetpos_ = NULL;
  return temp;
}
inline void MMOMapDataPortalInfoV1::set_allocated_targetpos(::MMOMapDataMDVector3V1* targetpos) {
  delete targetpos_;
  targetpos_ = targetpos;
  if (targetpos) {
    set_has_targetpos();
  } else {
    clear_has_targetpos();
  }
}

// optional .MMOMapDataMDVector3V1 TargetRot = 3;
inline bool MMOMapDataPortalInfoV1::has_targetrot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MMOMapDataPortalInfoV1::set_has_targetrot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MMOMapDataPortalInfoV1::clear_has_targetrot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MMOMapDataPortalInfoV1::clear_targetrot() {
  if (targetrot_ != NULL) targetrot_->::MMOMapDataMDVector3V1::Clear();
  clear_has_targetrot();
}
inline const ::MMOMapDataMDVector3V1& MMOMapDataPortalInfoV1::targetrot() const {
  return targetrot_ != NULL ? *targetrot_ : *default_instance_->targetrot_;
}
inline ::MMOMapDataMDVector3V1* MMOMapDataPortalInfoV1::mutable_targetrot() {
  set_has_targetrot();
  if (targetrot_ == NULL) targetrot_ = new ::MMOMapDataMDVector3V1;
  return targetrot_;
}
inline ::MMOMapDataMDVector3V1* MMOMapDataPortalInfoV1::release_targetrot() {
  clear_has_targetrot();
  ::MMOMapDataMDVector3V1* temp = targetrot_;
  targetrot_ = NULL;
  return temp;
}
inline void MMOMapDataPortalInfoV1::set_allocated_targetrot(::MMOMapDataMDVector3V1* targetrot) {
  delete targetrot_;
  targetrot_ = targetrot;
  if (targetrot) {
    set_has_targetrot();
  } else {
    clear_has_targetrot();
  }
}

// optional sint32 TargetDungeonID = 4 [default = 0];
inline bool MMOMapDataPortalInfoV1::has_targetdungeonid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MMOMapDataPortalInfoV1::set_has_targetdungeonid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MMOMapDataPortalInfoV1::clear_has_targetdungeonid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MMOMapDataPortalInfoV1::clear_targetdungeonid() {
  targetdungeonid_ = 0;
  clear_has_targetdungeonid();
}
inline ::google::protobuf::int32 MMOMapDataPortalInfoV1::targetdungeonid() const {
  return targetdungeonid_;
}
inline void MMOMapDataPortalInfoV1::set_targetdungeonid(::google::protobuf::int32 value) {
  set_has_targetdungeonid();
  targetdungeonid_ = value;
}

// optional sint32 TargetSpawnIndex = 6 [default = 0];
inline bool MMOMapDataPortalInfoV1::has_targetspawnindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MMOMapDataPortalInfoV1::set_has_targetspawnindex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MMOMapDataPortalInfoV1::clear_has_targetspawnindex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MMOMapDataPortalInfoV1::clear_targetspawnindex() {
  targetspawnindex_ = 0;
  clear_has_targetspawnindex();
}
inline ::google::protobuf::int32 MMOMapDataPortalInfoV1::targetspawnindex() const {
  return targetspawnindex_;
}
inline void MMOMapDataPortalInfoV1::set_targetspawnindex(::google::protobuf::int32 value) {
  set_has_targetspawnindex();
  targetspawnindex_ = value;
}

// optional sint32 PortalType = 7 [default = 0];
inline bool MMOMapDataPortalInfoV1::has_portaltype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MMOMapDataPortalInfoV1::set_has_portaltype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MMOMapDataPortalInfoV1::clear_has_portaltype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MMOMapDataPortalInfoV1::clear_portaltype() {
  portaltype_ = 0;
  clear_has_portaltype();
}
inline ::google::protobuf::int32 MMOMapDataPortalInfoV1::portaltype() const {
  return portaltype_;
}
inline void MMOMapDataPortalInfoV1::set_portaltype(::google::protobuf::int32 value) {
  set_has_portaltype();
  portaltype_ = value;
}

// -------------------------------------------------------------------

// MMOMapDataNodeInfoV1

// optional sint32 RelevanceArea = 8 [default = 0];
inline bool MMOMapDataNodeInfoV1::has_relevancearea() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MMOMapDataNodeInfoV1::set_has_relevancearea() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MMOMapDataNodeInfoV1::clear_has_relevancearea() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MMOMapDataNodeInfoV1::clear_relevancearea() {
  relevancearea_ = 0;
  clear_has_relevancearea();
}
inline ::google::protobuf::int32 MMOMapDataNodeInfoV1::relevancearea() const {
  return relevancearea_;
}
inline void MMOMapDataNodeInfoV1::set_relevancearea(::google::protobuf::int32 value) {
  set_has_relevancearea();
  relevancearea_ = value;
}

// optional sint32 PassKillEnemyID = 10 [default = 0];
inline bool MMOMapDataNodeInfoV1::has_passkillenemyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MMOMapDataNodeInfoV1::set_has_passkillenemyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MMOMapDataNodeInfoV1::clear_has_passkillenemyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MMOMapDataNodeInfoV1::clear_passkillenemyid() {
  passkillenemyid_ = 0;
  clear_has_passkillenemyid();
}
inline ::google::protobuf::int32 MMOMapDataNodeInfoV1::passkillenemyid() const {
  return passkillenemyid_;
}
inline void MMOMapDataNodeInfoV1::set_passkillenemyid(::google::protobuf::int32 value) {
  set_has_passkillenemyid();
  passkillenemyid_ = value;
}

// optional sint32 PassKillEnemyNum = 11 [default = 0];
inline bool MMOMapDataNodeInfoV1::has_passkillenemynum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MMOMapDataNodeInfoV1::set_has_passkillenemynum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MMOMapDataNodeInfoV1::clear_has_passkillenemynum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MMOMapDataNodeInfoV1::clear_passkillenemynum() {
  passkillenemynum_ = 0;
  clear_has_passkillenemynum();
}
inline ::google::protobuf::int32 MMOMapDataNodeInfoV1::passkillenemynum() const {
  return passkillenemynum_;
}
inline void MMOMapDataNodeInfoV1::set_passkillenemynum(::google::protobuf::int32 value) {
  set_has_passkillenemynum();
  passkillenemynum_ = value;
}

// optional sint32 PassTime = 13 [default = 0];
inline bool MMOMapDataNodeInfoV1::has_passtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MMOMapDataNodeInfoV1::set_has_passtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MMOMapDataNodeInfoV1::clear_has_passtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MMOMapDataNodeInfoV1::clear_passtime() {
  passtime_ = 0;
  clear_has_passtime();
}
inline ::google::protobuf::int32 MMOMapDataNodeInfoV1::passtime() const {
  return passtime_;
}
inline void MMOMapDataNodeInfoV1::set_passtime(::google::protobuf::int32 value) {
  set_has_passtime();
  passtime_ = value;
}

// optional sint32 PassUseItemID = 16 [default = 0];
inline bool MMOMapDataNodeInfoV1::has_passuseitemid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MMOMapDataNodeInfoV1::set_has_passuseitemid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MMOMapDataNodeInfoV1::clear_has_passuseitemid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MMOMapDataNodeInfoV1::clear_passuseitemid() {
  passuseitemid_ = 0;
  clear_has_passuseitemid();
}
inline ::google::protobuf::int32 MMOMapDataNodeInfoV1::passuseitemid() const {
  return passuseitemid_;
}
inline void MMOMapDataNodeInfoV1::set_passuseitemid(::google::protobuf::int32 value) {
  set_has_passuseitemid();
  passuseitemid_ = value;
}

// optional sint32 PassUseItemNum = 17 [default = 0];
inline bool MMOMapDataNodeInfoV1::has_passuseitemnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MMOMapDataNodeInfoV1::set_has_passuseitemnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MMOMapDataNodeInfoV1::clear_has_passuseitemnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MMOMapDataNodeInfoV1::clear_passuseitemnum() {
  passuseitemnum_ = 0;
  clear_has_passuseitemnum();
}
inline ::google::protobuf::int32 MMOMapDataNodeInfoV1::passuseitemnum() const {
  return passuseitemnum_;
}
inline void MMOMapDataNodeInfoV1::set_passuseitemnum(::google::protobuf::int32 value) {
  set_has_passuseitemnum();
  passuseitemnum_ = value;
}

// optional sint32 PassCollectItemID = 18 [default = 0];
inline bool MMOMapDataNodeInfoV1::has_passcollectitemid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MMOMapDataNodeInfoV1::set_has_passcollectitemid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MMOMapDataNodeInfoV1::clear_has_passcollectitemid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MMOMapDataNodeInfoV1::clear_passcollectitemid() {
  passcollectitemid_ = 0;
  clear_has_passcollectitemid();
}
inline ::google::protobuf::int32 MMOMapDataNodeInfoV1::passcollectitemid() const {
  return passcollectitemid_;
}
inline void MMOMapDataNodeInfoV1::set_passcollectitemid(::google::protobuf::int32 value) {
  set_has_passcollectitemid();
  passcollectitemid_ = value;
}

// optional sint32 PassCollectItemNum = 19 [default = 0];
inline bool MMOMapDataNodeInfoV1::has_passcollectitemnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MMOMapDataNodeInfoV1::set_has_passcollectitemnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MMOMapDataNodeInfoV1::clear_has_passcollectitemnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MMOMapDataNodeInfoV1::clear_passcollectitemnum() {
  passcollectitemnum_ = 0;
  clear_has_passcollectitemnum();
}
inline ::google::protobuf::int32 MMOMapDataNodeInfoV1::passcollectitemnum() const {
  return passcollectitemnum_;
}
inline void MMOMapDataNodeInfoV1::set_passcollectitemnum(::google::protobuf::int32 value) {
  set_has_passcollectitemnum();
  passcollectitemnum_ = value;
}

// optional sint32 PassConditionType = 20 [default = 0];
inline bool MMOMapDataNodeInfoV1::has_passconditiontype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MMOMapDataNodeInfoV1::set_has_passconditiontype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MMOMapDataNodeInfoV1::clear_has_passconditiontype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MMOMapDataNodeInfoV1::clear_passconditiontype() {
  passconditiontype_ = 0;
  clear_has_passconditiontype();
}
inline ::google::protobuf::int32 MMOMapDataNodeInfoV1::passconditiontype() const {
  return passconditiontype_;
}
inline void MMOMapDataNodeInfoV1::set_passconditiontype(::google::protobuf::int32 value) {
  set_has_passconditiontype();
  passconditiontype_ = value;
}

// optional .MMOMapDataMDVector3V1 NodePos1 = 21;
inline bool MMOMapDataNodeInfoV1::has_nodepos1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MMOMapDataNodeInfoV1::set_has_nodepos1() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MMOMapDataNodeInfoV1::clear_has_nodepos1() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MMOMapDataNodeInfoV1::clear_nodepos1() {
  if (nodepos1_ != NULL) nodepos1_->::MMOMapDataMDVector3V1::Clear();
  clear_has_nodepos1();
}
inline const ::MMOMapDataMDVector3V1& MMOMapDataNodeInfoV1::nodepos1() const {
  return nodepos1_ != NULL ? *nodepos1_ : *default_instance_->nodepos1_;
}
inline ::MMOMapDataMDVector3V1* MMOMapDataNodeInfoV1::mutable_nodepos1() {
  set_has_nodepos1();
  if (nodepos1_ == NULL) nodepos1_ = new ::MMOMapDataMDVector3V1;
  return nodepos1_;
}
inline ::MMOMapDataMDVector3V1* MMOMapDataNodeInfoV1::release_nodepos1() {
  clear_has_nodepos1();
  ::MMOMapDataMDVector3V1* temp = nodepos1_;
  nodepos1_ = NULL;
  return temp;
}
inline void MMOMapDataNodeInfoV1::set_allocated_nodepos1(::MMOMapDataMDVector3V1* nodepos1) {
  delete nodepos1_;
  nodepos1_ = nodepos1;
  if (nodepos1) {
    set_has_nodepos1();
  } else {
    clear_has_nodepos1();
  }
}

// optional .MMOMapDataMDVector3V1 NodePos2 = 22;
inline bool MMOMapDataNodeInfoV1::has_nodepos2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MMOMapDataNodeInfoV1::set_has_nodepos2() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MMOMapDataNodeInfoV1::clear_has_nodepos2() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MMOMapDataNodeInfoV1::clear_nodepos2() {
  if (nodepos2_ != NULL) nodepos2_->::MMOMapDataMDVector3V1::Clear();
  clear_has_nodepos2();
}
inline const ::MMOMapDataMDVector3V1& MMOMapDataNodeInfoV1::nodepos2() const {
  return nodepos2_ != NULL ? *nodepos2_ : *default_instance_->nodepos2_;
}
inline ::MMOMapDataMDVector3V1* MMOMapDataNodeInfoV1::mutable_nodepos2() {
  set_has_nodepos2();
  if (nodepos2_ == NULL) nodepos2_ = new ::MMOMapDataMDVector3V1;
  return nodepos2_;
}
inline ::MMOMapDataMDVector3V1* MMOMapDataNodeInfoV1::release_nodepos2() {
  clear_has_nodepos2();
  ::MMOMapDataMDVector3V1* temp = nodepos2_;
  nodepos2_ = NULL;
  return temp;
}
inline void MMOMapDataNodeInfoV1::set_allocated_nodepos2(::MMOMapDataMDVector3V1* nodepos2) {
  delete nodepos2_;
  nodepos2_ = nodepos2;
  if (nodepos2) {
    set_has_nodepos2();
  } else {
    clear_has_nodepos2();
  }
}

// -------------------------------------------------------------------

// MMOMapDataPointInfoV1

// optional sint32 SpriteType = 1 [default = 0];
inline bool MMOMapDataPointInfoV1::has_spritetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MMOMapDataPointInfoV1::set_has_spritetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MMOMapDataPointInfoV1::clear_has_spritetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MMOMapDataPointInfoV1::clear_spritetype() {
  spritetype_ = 0;
  clear_has_spritetype();
}
inline ::google::protobuf::int32 MMOMapDataPointInfoV1::spritetype() const {
  return spritetype_;
}
inline void MMOMapDataPointInfoV1::set_spritetype(::google::protobuf::int32 value) {
  set_has_spritetype();
  spritetype_ = value;
}

// optional sint32 SpriteID = 2 [default = 0];
inline bool MMOMapDataPointInfoV1::has_spriteid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MMOMapDataPointInfoV1::set_has_spriteid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MMOMapDataPointInfoV1::clear_has_spriteid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MMOMapDataPointInfoV1::clear_spriteid() {
  spriteid_ = 0;
  clear_has_spriteid();
}
inline ::google::protobuf::int32 MMOMapDataPointInfoV1::spriteid() const {
  return spriteid_;
}
inline void MMOMapDataPointInfoV1::set_spriteid(::google::protobuf::int32 value) {
  set_has_spriteid();
  spriteid_ = value;
}

// optional sint32 Area = 3 [default = 0];
inline bool MMOMapDataPointInfoV1::has_area() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MMOMapDataPointInfoV1::set_has_area() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MMOMapDataPointInfoV1::clear_has_area() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MMOMapDataPointInfoV1::clear_area() {
  area_ = 0;
  clear_has_area();
}
inline ::google::protobuf::int32 MMOMapDataPointInfoV1::area() const {
  return area_;
}
inline void MMOMapDataPointInfoV1::set_area(::google::protobuf::int32 value) {
  set_has_area();
  area_ = value;
}

// optional .MMOMapDataMDVector3V1 PointPos = 4;
inline bool MMOMapDataPointInfoV1::has_pointpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MMOMapDataPointInfoV1::set_has_pointpos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MMOMapDataPointInfoV1::clear_has_pointpos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MMOMapDataPointInfoV1::clear_pointpos() {
  if (pointpos_ != NULL) pointpos_->::MMOMapDataMDVector3V1::Clear();
  clear_has_pointpos();
}
inline const ::MMOMapDataMDVector3V1& MMOMapDataPointInfoV1::pointpos() const {
  return pointpos_ != NULL ? *pointpos_ : *default_instance_->pointpos_;
}
inline ::MMOMapDataMDVector3V1* MMOMapDataPointInfoV1::mutable_pointpos() {
  set_has_pointpos();
  if (pointpos_ == NULL) pointpos_ = new ::MMOMapDataMDVector3V1;
  return pointpos_;
}
inline ::MMOMapDataMDVector3V1* MMOMapDataPointInfoV1::release_pointpos() {
  clear_has_pointpos();
  ::MMOMapDataMDVector3V1* temp = pointpos_;
  pointpos_ = NULL;
  return temp;
}
inline void MMOMapDataPointInfoV1::set_allocated_pointpos(::MMOMapDataMDVector3V1* pointpos) {
  delete pointpos_;
  pointpos_ = pointpos;
  if (pointpos) {
    set_has_pointpos();
  } else {
    clear_has_pointpos();
  }
}

// optional .MMOMapDataMDVector3V1 PointRot = 5;
inline bool MMOMapDataPointInfoV1::has_pointrot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MMOMapDataPointInfoV1::set_has_pointrot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MMOMapDataPointInfoV1::clear_has_pointrot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MMOMapDataPointInfoV1::clear_pointrot() {
  if (pointrot_ != NULL) pointrot_->::MMOMapDataMDVector3V1::Clear();
  clear_has_pointrot();
}
inline const ::MMOMapDataMDVector3V1& MMOMapDataPointInfoV1::pointrot() const {
  return pointrot_ != NULL ? *pointrot_ : *default_instance_->pointrot_;
}
inline ::MMOMapDataMDVector3V1* MMOMapDataPointInfoV1::mutable_pointrot() {
  set_has_pointrot();
  if (pointrot_ == NULL) pointrot_ = new ::MMOMapDataMDVector3V1;
  return pointrot_;
}
inline ::MMOMapDataMDVector3V1* MMOMapDataPointInfoV1::release_pointrot() {
  clear_has_pointrot();
  ::MMOMapDataMDVector3V1* temp = pointrot_;
  pointrot_ = NULL;
  return temp;
}
inline void MMOMapDataPointInfoV1::set_allocated_pointrot(::MMOMapDataMDVector3V1* pointrot) {
  delete pointrot_;
  pointrot_ = pointrot;
  if (pointrot) {
    set_has_pointrot();
  } else {
    clear_has_pointrot();
  }
}

// optional sint32 RefreshType = 6 [default = 0];
inline bool MMOMapDataPointInfoV1::has_refreshtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MMOMapDataPointInfoV1::set_has_refreshtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MMOMapDataPointInfoV1::clear_has_refreshtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MMOMapDataPointInfoV1::clear_refreshtype() {
  refreshtype_ = 0;
  clear_has_refreshtype();
}
inline ::google::protobuf::int32 MMOMapDataPointInfoV1::refreshtype() const {
  return refreshtype_;
}
inline void MMOMapDataPointInfoV1::set_refreshtype(::google::protobuf::int32 value) {
  set_has_refreshtype();
  refreshtype_ = value;
}

// optional sint32 UnlockTime = 7 [default = 0];
inline bool MMOMapDataPointInfoV1::has_unlocktime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MMOMapDataPointInfoV1::set_has_unlocktime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MMOMapDataPointInfoV1::clear_has_unlocktime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MMOMapDataPointInfoV1::clear_unlocktime() {
  unlocktime_ = 0;
  clear_has_unlocktime();
}
inline ::google::protobuf::int32 MMOMapDataPointInfoV1::unlocktime() const {
  return unlocktime_;
}
inline void MMOMapDataPointInfoV1::set_unlocktime(::google::protobuf::int32 value) {
  set_has_unlocktime();
  unlocktime_ = value;
}

// optional sint32 EnemyID = 8 [default = 0];
inline bool MMOMapDataPointInfoV1::has_enemyid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MMOMapDataPointInfoV1::set_has_enemyid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MMOMapDataPointInfoV1::clear_has_enemyid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MMOMapDataPointInfoV1::clear_enemyid() {
  enemyid_ = 0;
  clear_has_enemyid();
}
inline ::google::protobuf::int32 MMOMapDataPointInfoV1::enemyid() const {
  return enemyid_;
}
inline void MMOMapDataPointInfoV1::set_enemyid(::google::protobuf::int32 value) {
  set_has_enemyid();
  enemyid_ = value;
}

// optional sint32 EnemyNum = 9 [default = 0];
inline bool MMOMapDataPointInfoV1::has_enemynum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MMOMapDataPointInfoV1::set_has_enemynum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MMOMapDataPointInfoV1::clear_has_enemynum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MMOMapDataPointInfoV1::clear_enemynum() {
  enemynum_ = 0;
  clear_has_enemynum();
}
inline ::google::protobuf::int32 MMOMapDataPointInfoV1::enemynum() const {
  return enemynum_;
}
inline void MMOMapDataPointInfoV1::set_enemynum(::google::protobuf::int32 value) {
  set_has_enemynum();
  enemynum_ = value;
}

// optional sint32 RebirthType = 10 [default = 0];
inline bool MMOMapDataPointInfoV1::has_rebirthtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MMOMapDataPointInfoV1::set_has_rebirthtype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MMOMapDataPointInfoV1::clear_has_rebirthtype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MMOMapDataPointInfoV1::clear_rebirthtype() {
  rebirthtype_ = 0;
  clear_has_rebirthtype();
}
inline ::google::protobuf::int32 MMOMapDataPointInfoV1::rebirthtype() const {
  return rebirthtype_;
}
inline void MMOMapDataPointInfoV1::set_rebirthtype(::google::protobuf::int32 value) {
  set_has_rebirthtype();
  rebirthtype_ = value;
}

// optional sint32 RebirthEnemyID = 11 [default = 0];
inline bool MMOMapDataPointInfoV1::has_rebirthenemyid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MMOMapDataPointInfoV1::set_has_rebirthenemyid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MMOMapDataPointInfoV1::clear_has_rebirthenemyid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MMOMapDataPointInfoV1::clear_rebirthenemyid() {
  rebirthenemyid_ = 0;
  clear_has_rebirthenemyid();
}
inline ::google::protobuf::int32 MMOMapDataPointInfoV1::rebirthenemyid() const {
  return rebirthenemyid_;
}
inline void MMOMapDataPointInfoV1::set_rebirthenemyid(::google::protobuf::int32 value) {
  set_has_rebirthenemyid();
  rebirthenemyid_ = value;
}

// optional sint32 RebirthEnemyNum = 12 [default = 0];
inline bool MMOMapDataPointInfoV1::has_rebirthenemynum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MMOMapDataPointInfoV1::set_has_rebirthenemynum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MMOMapDataPointInfoV1::clear_has_rebirthenemynum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MMOMapDataPointInfoV1::clear_rebirthenemynum() {
  rebirthenemynum_ = 0;
  clear_has_rebirthenemynum();
}
inline ::google::protobuf::int32 MMOMapDataPointInfoV1::rebirthenemynum() const {
  return rebirthenemynum_;
}
inline void MMOMapDataPointInfoV1::set_rebirthenemynum(::google::protobuf::int32 value) {
  set_has_rebirthenemynum();
  rebirthenemynum_ = value;
}

// optional sint32 AfterDeathTime = 13 [default = 0];
inline bool MMOMapDataPointInfoV1::has_afterdeathtime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MMOMapDataPointInfoV1::set_has_afterdeathtime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MMOMapDataPointInfoV1::clear_has_afterdeathtime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MMOMapDataPointInfoV1::clear_afterdeathtime() {
  afterdeathtime_ = 0;
  clear_has_afterdeathtime();
}
inline ::google::protobuf::int32 MMOMapDataPointInfoV1::afterdeathtime() const {
  return afterdeathtime_;
}
inline void MMOMapDataPointInfoV1::set_afterdeathtime(::google::protobuf::int32 value) {
  set_has_afterdeathtime();
  afterdeathtime_ = value;
}

// optional sint32 RebirthNum = 14 [default = -1];
inline bool MMOMapDataPointInfoV1::has_rebirthnum() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MMOMapDataPointInfoV1::set_has_rebirthnum() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MMOMapDataPointInfoV1::clear_has_rebirthnum() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MMOMapDataPointInfoV1::clear_rebirthnum() {
  rebirthnum_ = -1;
  clear_has_rebirthnum();
}
inline ::google::protobuf::int32 MMOMapDataPointInfoV1::rebirthnum() const {
  return rebirthnum_;
}
inline void MMOMapDataPointInfoV1::set_rebirthnum(::google::protobuf::int32 value) {
  set_has_rebirthnum();
  rebirthnum_ = value;
}

// -------------------------------------------------------------------

// MMOMapDataInfoV1

// optional .MMOMapDataBaseDataV1 BaseInfo = 1;
inline bool MMOMapDataInfoV1::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MMOMapDataInfoV1::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MMOMapDataInfoV1::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MMOMapDataInfoV1::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::MMOMapDataBaseDataV1::Clear();
  clear_has_baseinfo();
}
inline const ::MMOMapDataBaseDataV1& MMOMapDataInfoV1::baseinfo() const {
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::MMOMapDataBaseDataV1* MMOMapDataInfoV1::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::MMOMapDataBaseDataV1;
  return baseinfo_;
}
inline ::MMOMapDataBaseDataV1* MMOMapDataInfoV1::release_baseinfo() {
  clear_has_baseinfo();
  ::MMOMapDataBaseDataV1* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void MMOMapDataInfoV1::set_allocated_baseinfo(::MMOMapDataBaseDataV1* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
}

// repeated .MMOMapDataSpawnInfoV1 SpawnArr = 2;
inline int MMOMapDataInfoV1::spawnarr_size() const {
  return spawnarr_.size();
}
inline void MMOMapDataInfoV1::clear_spawnarr() {
  spawnarr_.Clear();
}
inline const ::MMOMapDataSpawnInfoV1& MMOMapDataInfoV1::spawnarr(int index) const {
  return spawnarr_.Get(index);
}
inline ::MMOMapDataSpawnInfoV1* MMOMapDataInfoV1::mutable_spawnarr(int index) {
  return spawnarr_.Mutable(index);
}
inline ::MMOMapDataSpawnInfoV1* MMOMapDataInfoV1::add_spawnarr() {
  return spawnarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MMOMapDataSpawnInfoV1 >&
MMOMapDataInfoV1::spawnarr() const {
  return spawnarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::MMOMapDataSpawnInfoV1 >*
MMOMapDataInfoV1::mutable_spawnarr() {
  return &spawnarr_;
}

// repeated .MMOMapDataPortalInfoV1 PortalArr = 3;
inline int MMOMapDataInfoV1::portalarr_size() const {
  return portalarr_.size();
}
inline void MMOMapDataInfoV1::clear_portalarr() {
  portalarr_.Clear();
}
inline const ::MMOMapDataPortalInfoV1& MMOMapDataInfoV1::portalarr(int index) const {
  return portalarr_.Get(index);
}
inline ::MMOMapDataPortalInfoV1* MMOMapDataInfoV1::mutable_portalarr(int index) {
  return portalarr_.Mutable(index);
}
inline ::MMOMapDataPortalInfoV1* MMOMapDataInfoV1::add_portalarr() {
  return portalarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MMOMapDataPortalInfoV1 >&
MMOMapDataInfoV1::portalarr() const {
  return portalarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::MMOMapDataPortalInfoV1 >*
MMOMapDataInfoV1::mutable_portalarr() {
  return &portalarr_;
}

// optional .MMOMapDataDefeatInfoV1 DefeatInfo = 5;
inline bool MMOMapDataInfoV1::has_defeatinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MMOMapDataInfoV1::set_has_defeatinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MMOMapDataInfoV1::clear_has_defeatinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MMOMapDataInfoV1::clear_defeatinfo() {
  if (defeatinfo_ != NULL) defeatinfo_->::MMOMapDataDefeatInfoV1::Clear();
  clear_has_defeatinfo();
}
inline const ::MMOMapDataDefeatInfoV1& MMOMapDataInfoV1::defeatinfo() const {
  return defeatinfo_ != NULL ? *defeatinfo_ : *default_instance_->defeatinfo_;
}
inline ::MMOMapDataDefeatInfoV1* MMOMapDataInfoV1::mutable_defeatinfo() {
  set_has_defeatinfo();
  if (defeatinfo_ == NULL) defeatinfo_ = new ::MMOMapDataDefeatInfoV1;
  return defeatinfo_;
}
inline ::MMOMapDataDefeatInfoV1* MMOMapDataInfoV1::release_defeatinfo() {
  clear_has_defeatinfo();
  ::MMOMapDataDefeatInfoV1* temp = defeatinfo_;
  defeatinfo_ = NULL;
  return temp;
}
inline void MMOMapDataInfoV1::set_allocated_defeatinfo(::MMOMapDataDefeatInfoV1* defeatinfo) {
  delete defeatinfo_;
  defeatinfo_ = defeatinfo;
  if (defeatinfo) {
    set_has_defeatinfo();
  } else {
    clear_has_defeatinfo();
  }
}

// repeated .MMOMapDataNodeInfoV1 NodeArr = 6;
inline int MMOMapDataInfoV1::nodearr_size() const {
  return nodearr_.size();
}
inline void MMOMapDataInfoV1::clear_nodearr() {
  nodearr_.Clear();
}
inline const ::MMOMapDataNodeInfoV1& MMOMapDataInfoV1::nodearr(int index) const {
  return nodearr_.Get(index);
}
inline ::MMOMapDataNodeInfoV1* MMOMapDataInfoV1::mutable_nodearr(int index) {
  return nodearr_.Mutable(index);
}
inline ::MMOMapDataNodeInfoV1* MMOMapDataInfoV1::add_nodearr() {
  return nodearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MMOMapDataNodeInfoV1 >&
MMOMapDataInfoV1::nodearr() const {
  return nodearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::MMOMapDataNodeInfoV1 >*
MMOMapDataInfoV1::mutable_nodearr() {
  return &nodearr_;
}

// repeated .MMOMapDataPointInfoV1 PointArr = 7;
inline int MMOMapDataInfoV1::pointarr_size() const {
  return pointarr_.size();
}
inline void MMOMapDataInfoV1::clear_pointarr() {
  pointarr_.Clear();
}
inline const ::MMOMapDataPointInfoV1& MMOMapDataInfoV1::pointarr(int index) const {
  return pointarr_.Get(index);
}
inline ::MMOMapDataPointInfoV1* MMOMapDataInfoV1::mutable_pointarr(int index) {
  return pointarr_.Mutable(index);
}
inline ::MMOMapDataPointInfoV1* MMOMapDataInfoV1::add_pointarr() {
  return pointarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MMOMapDataPointInfoV1 >&
MMOMapDataInfoV1::pointarr() const {
  return pointarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::MMOMapDataPointInfoV1 >*
MMOMapDataInfoV1::mutable_pointarr() {
  return &pointarr_;
}

// -------------------------------------------------------------------

// MMOMapDataDefeatInfoV1

// optional bool DefeatConditionSpared = 1 [default = false];
inline bool MMOMapDataDefeatInfoV1::has_defeatconditionspared() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MMOMapDataDefeatInfoV1::set_has_defeatconditionspared() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MMOMapDataDefeatInfoV1::clear_has_defeatconditionspared() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MMOMapDataDefeatInfoV1::clear_defeatconditionspared() {
  defeatconditionspared_ = false;
  clear_has_defeatconditionspared();
}
inline bool MMOMapDataDefeatInfoV1::defeatconditionspared() const {
  return defeatconditionspared_;
}
inline void MMOMapDataDefeatInfoV1::set_defeatconditionspared(bool value) {
  set_has_defeatconditionspared();
  defeatconditionspared_ = value;
}

// optional bool DefeatConditionTimeOver = 2 [default = false];
inline bool MMOMapDataDefeatInfoV1::has_defeatconditiontimeover() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MMOMapDataDefeatInfoV1::set_has_defeatconditiontimeover() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MMOMapDataDefeatInfoV1::clear_has_defeatconditiontimeover() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MMOMapDataDefeatInfoV1::clear_defeatconditiontimeover() {
  defeatconditiontimeover_ = false;
  clear_has_defeatconditiontimeover();
}
inline bool MMOMapDataDefeatInfoV1::defeatconditiontimeover() const {
  return defeatconditiontimeover_;
}
inline void MMOMapDataDefeatInfoV1::set_defeatconditiontimeover(bool value) {
  set_has_defeatconditiontimeover();
  defeatconditiontimeover_ = value;
}

// optional bool DefeatConditionHP = 3 [default = false];
inline bool MMOMapDataDefeatInfoV1::has_defeatconditionhp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MMOMapDataDefeatInfoV1::set_has_defeatconditionhp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MMOMapDataDefeatInfoV1::clear_has_defeatconditionhp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MMOMapDataDefeatInfoV1::clear_defeatconditionhp() {
  defeatconditionhp_ = false;
  clear_has_defeatconditionhp();
}
inline bool MMOMapDataDefeatInfoV1::defeatconditionhp() const {
  return defeatconditionhp_;
}
inline void MMOMapDataDefeatInfoV1::set_defeatconditionhp(bool value) {
  set_has_defeatconditionhp();
  defeatconditionhp_ = value;
}

// optional sint32 DefeatTime = 4 [default = 0];
inline bool MMOMapDataDefeatInfoV1::has_defeattime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MMOMapDataDefeatInfoV1::set_has_defeattime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MMOMapDataDefeatInfoV1::clear_has_defeattime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MMOMapDataDefeatInfoV1::clear_defeattime() {
  defeattime_ = 0;
  clear_has_defeattime();
}
inline ::google::protobuf::int32 MMOMapDataDefeatInfoV1::defeattime() const {
  return defeattime_;
}
inline void MMOMapDataDefeatInfoV1::set_defeattime(::google::protobuf::int32 value) {
  set_has_defeattime();
  defeattime_ = value;
}

// optional sint32 DefeatID = 5 [default = 0];
inline bool MMOMapDataDefeatInfoV1::has_defeatid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MMOMapDataDefeatInfoV1::set_has_defeatid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MMOMapDataDefeatInfoV1::clear_has_defeatid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MMOMapDataDefeatInfoV1::clear_defeatid() {
  defeatid_ = 0;
  clear_has_defeatid();
}
inline ::google::protobuf::int32 MMOMapDataDefeatInfoV1::defeatid() const {
  return defeatid_;
}
inline void MMOMapDataDefeatInfoV1::set_defeatid(::google::protobuf::int32 value) {
  set_has_defeatid();
  defeatid_ = value;
}

// optional sint32 DefeatHP = 6 [default = 0];
inline bool MMOMapDataDefeatInfoV1::has_defeathp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MMOMapDataDefeatInfoV1::set_has_defeathp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MMOMapDataDefeatInfoV1::clear_has_defeathp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MMOMapDataDefeatInfoV1::clear_defeathp() {
  defeathp_ = 0;
  clear_has_defeathp();
}
inline ::google::protobuf::int32 MMOMapDataDefeatInfoV1::defeathp() const {
  return defeathp_;
}
inline void MMOMapDataDefeatInfoV1::set_defeathp(::google::protobuf::int32 value) {
  set_has_defeathp();
  defeathp_ = value;
}

// -------------------------------------------------------------------

// MMOMapDataUselessV1


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MMOMapDataV1Data_2eproto__INCLUDED
