// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActionV1Data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ActionV1Data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ActionSkillInfoV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionSkillInfoV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionCommandInfoV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionCommandInfoV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionUselessV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionUselessV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionV2V1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionV2V1_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionV3V1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionV3V1_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionRangeV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionRangeV1_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ActionV1Data_2eproto() {
  protobuf_AddDesc_ActionV1Data_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ActionV1Data.proto");
  GOOGLE_CHECK(file != NULL);
  ActionSkillInfoV1_descriptor_ = file->message_type(0);
  static const int ActionSkillInfoV1_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSkillInfoV1, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSkillInfoV1, commandlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSkillInfoV1, totaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSkillInfoV1, issing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSkillInfoV1, singtime_),
  };
  ActionSkillInfoV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionSkillInfoV1_descriptor_,
      ActionSkillInfoV1::default_instance_,
      ActionSkillInfoV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSkillInfoV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSkillInfoV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionSkillInfoV1));
  ActionCommandInfoV1_descriptor_ = file->message_type(1);
  static const int ActionCommandInfoV1_offsets_[83] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, commandtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, durationtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, animationtriggercondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, effectname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, effectbonehook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, effectpositionoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, effectstayinlocalspace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, effectcontrolobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, translatecontrolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, translateoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, actorattackpart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, translateease_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackshowhiteffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackhiteffectname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackhiteffectduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackfragmentcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackfragmentintervaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackdamageradio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, buffselfactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, bufftargetactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackbehaviourbackdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackbehaviourairheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, effectrotationoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, flashcontrolobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackstifftime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackshake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackflash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackbehaviourbackspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackbehaviourairspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackbehaviourback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackbehaviourair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackbehaviourzoom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, soundname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, trigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, triggerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackhitdummy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackhitsound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, hitshakecameraxrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, hitshakecamerayrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, hitshakecameracount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, hitshakecameradurationtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, hiddenweaponmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, nextactionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, translatewrapmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, istriggersecondattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, ishitground_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, skillactionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, warningres1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, warningres2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, warningmaxscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, warningscalemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, warninglockaxle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, warningpositionoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, iseffectfollow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, iswarningtarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackbehaviourairdurationtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, iscolliderdestroy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, isattackrangefollow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, isanimationloop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, translateangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, isattackrangeshade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, isshowattackrect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, effectbulletlaunchangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, effectbulletspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, effectbulletlaunchtimeintervalrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, effectbulletmaxcout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, effectbulletlifetimeinteralrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, effectbullettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, effectbulletinitposlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, effectbulletlaunchmaxcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, effectbulletisfollow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackbehaviourairdownspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, effectdirectionlocktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, isirregularityeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, effectsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackrangepostion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackrangesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackshape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackcircleorigin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackcircleradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, attackcircleangle_),
  };
  ActionCommandInfoV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionCommandInfoV1_descriptor_,
      ActionCommandInfoV1::default_instance_,
      ActionCommandInfoV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCommandInfoV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionCommandInfoV1));
  ActionUselessV1_descriptor_ = file->message_type(2);
  static const int ActionUselessV1_offsets_[1] = {
  };
  ActionUselessV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionUselessV1_descriptor_,
      ActionUselessV1::default_instance_,
      ActionUselessV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionUselessV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionUselessV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionUselessV1));
  ActionV2V1_descriptor_ = file->message_type(3);
  static const int ActionV2V1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionV2V1, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionV2V1, y_),
  };
  ActionV2V1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionV2V1_descriptor_,
      ActionV2V1::default_instance_,
      ActionV2V1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionV2V1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionV2V1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionV2V1));
  ActionV3V1_descriptor_ = file->message_type(4);
  static const int ActionV3V1_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionV3V1, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionV3V1, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionV3V1, z_),
  };
  ActionV3V1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionV3V1_descriptor_,
      ActionV3V1::default_instance_,
      ActionV3V1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionV3V1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionV3V1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionV3V1));
  ActionRangeV1_descriptor_ = file->message_type(5);
  static const int ActionRangeV1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRangeV1, minvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRangeV1, maxvalue_),
  };
  ActionRangeV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionRangeV1_descriptor_,
      ActionRangeV1::default_instance_,
      ActionRangeV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRangeV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRangeV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionRangeV1));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ActionV1Data_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionSkillInfoV1_descriptor_, &ActionSkillInfoV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionCommandInfoV1_descriptor_, &ActionCommandInfoV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionUselessV1_descriptor_, &ActionUselessV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionV2V1_descriptor_, &ActionV2V1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionV3V1_descriptor_, &ActionV3V1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionRangeV1_descriptor_, &ActionRangeV1::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ActionV1Data_2eproto() {
  delete ActionSkillInfoV1::default_instance_;
  delete ActionSkillInfoV1_reflection_;
  delete ActionCommandInfoV1::default_instance_;
  delete ActionCommandInfoV1_reflection_;
  delete ActionUselessV1::default_instance_;
  delete ActionUselessV1_reflection_;
  delete ActionV2V1::default_instance_;
  delete ActionV2V1_reflection_;
  delete ActionV3V1::default_instance_;
  delete ActionV3V1_reflection_;
  delete ActionRangeV1::default_instance_;
  delete ActionRangeV1_reflection_;
}

void protobuf_AddDesc_ActionV1Data_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ActionV1Data.proto\032\022PublicStruct.proto"
    "\"\216\001\n\021ActionSkillInfoV1\022\014\n\004Name\030\001 \001(\t\022)\n\013"
    "CommandList\030\002 \003(\0132\024.ActionCommandInfoV1\022"
    "\024\n\tTotalTime\030\003 \001(\002:\0010\022\025\n\006IsSing\030\004 \001(\010:\005f"
    "alse\022\023\n\010SingTime\030\005 \001(\002:\0010\"\311\025\n\023ActionComm"
    "andInfoV1\022\027\n\013CommandType\030\002 \001(\021:\002-1\022\024\n\tSt"
    "artTime\030\003 \001(\002:\0010\022\027\n\014DurationTime\030\004 \001(\002:\001"
    "0\022$\n\031AnimationTriggerCondition\030\005 \001(\021:\0010\022"
    "\022\n\nEffectName\030\006 \001(\t\022\031\n\016EffectBoneHook\030\007 "
    "\001(\021:\0010\022)\n\024EffectPositionOffset\030\010 \001(\0132\013.A"
    "ctionV3V1\022%\n\026EffectStayInLocalSpace\030\t \001("
    "\010:\005false\022 \n\025EffectControlObjectId\030\n \001(\021:"
    "\0010\022\035\n\022TranslateControlId\030\013 \001(\021:\0010\022$\n\017Tra"
    "nslateOffset\030\014 \001(\0132\013.ActionV3V1\022\027\n\017Actor"
    "AttackPart\030\r \003(\021\022\030\n\rTranslateEase\030\016 \001(\021:"
    "\0011\022\"\n\023AttackShowHitEffect\030\017 \001(\010:\005false\022\033"
    "\n\023AttackHitEffectName\030\020 \001(\t\022$\n\027AttackHit"
    "EffectDuration\030\021 \001(\002:\0031.6\022\036\n\023AttackFragm"
    "entCount\030\022 \001(\021:\0011\022%\n\032AttackFragmentInter"
    "valTime\030\023 \001(\002:\0010\022\034\n\021AttackDamageRadio\030\024 "
    "\001(\002:\0011\022\035\n\016BuffSelfActive\030\025 \001(\010:\005false\022\037\n"
    "\020BuffTargetActive\030\026 \001(\010:\005false\022&\n\033Attack"
    "BehaviourBackDistance\030\030 \001(\002:\0010\022#\n\030Attack"
    "BehaviourAirHeight\030\031 \001(\002:\0010\022)\n\024EffectRot"
    "ationOffset\030\033 \001(\0132\013.ActionV3V1\022\037\n\024FlashC"
    "ontrolObjectId\030\034 \001(\021:\0010\022\032\n\017AttackStiffTi"
    "me\030\035 \001(\002:\0010\022\032\n\013AttackShake\030\036 \001(\010:\005false\022"
    "\032\n\013AttackFlash\030\037 \001(\010:\005false\022#\n\030AttackBeh"
    "aviourBackSpeed\030  \001(\002:\0011\022\"\n\027AttackBehavi"
    "ourAirSpeed\030! \001(\002:\0011\022\"\n\023AttackBehaviourB"
    "ack\030# \001(\010:\005false\022!\n\022AttackBehaviourAir\030$"
    " \001(\010:\005false\022\"\n\023AttackBehaviourZoom\030% \001(\010"
    ":\005false\022\021\n\tSoundName\030& \001(\t\022\026\n\007Trigger\030\' "
    "\001(\010:\005false\022\027\n\014TriggerIndex\030( \001(\021:\0011\022\031\n\016A"
    "ttackHitDummy\030) \001(\021:\0010\022\026\n\016AttackHitSound"
    "\030* \001(\t\022\037\n\024HitShakeCameraXRange\030, \001(\002:\0010\022"
    "\037\n\024HitShakeCameraYRange\030- \001(\002:\0010\022\036\n\023HitS"
    "hakeCameraCount\030. \001(\021:\0011\022\'\n\032HitShakeCame"
    "raDurationTime\030/ \001(\002:\0030.1\022\033\n\020HiddenWeapo"
    "nMode\0302 \001(\021:\0010\022\026\n\016NextActionName\0303 \001(\t\022\034"
    "\n\021TranslateWrapMode\0304 \001(\021:\0010\022$\n\025IsTrigge"
    "rSecondAttack\0305 \001(\010:\005false\022\032\n\013IsHitGroun"
    "d\0306 \001(\010:\005false\022\027\n\017SkillActionName\0307 \001(\t\022"
    "\023\n\013WarningRes1\0308 \001(\t\022\023\n\013WarningRes2\0309 \001("
    "\t\022$\n\017WarningMaxScale\030: \001(\0132\013.ActionV3V1\022"
    "\033\n\020WarningScaleMode\030; \001(\021:\0010\022\032\n\017WarningL"
    "ockAxle\030< \001(\021:\0010\022*\n\025WarningPositionOffse"
    "t\030= \001(\0132\013.ActionV3V1\022\035\n\016IsEffectFollow\030>"
    " \001(\010:\005false\022\036\n\017IsWarningTarget\030\? \001(\010:\005fa"
    "lse\022)\n\036AttackBehaviourAirDurationTime\030@ "
    "\001(\002:\0010\022 \n\021IsColliderDestroy\030B \001(\010:\005false"
    "\022\"\n\023IsAttackRangeFollow\030F \001(\010:\005false\022\036\n\017"
    "IsAnimationLoop\030G \001(\010:\005false\022\031\n\016Translat"
    "eAngle\030H \001(\002:\0010\022!\n\022IsAttackRangeShade\030I "
    "\001(\010:\005false\022\031\n\016AttackInterval\030K \001(\002:\0010\022\037\n"
    "\020IsShowAttackRect\030L \001(\010:\005false\022\"\n\027Effect"
    "BulletLaunchAngle\030N \001(\002:\0010\022\034\n\021EffectBull"
    "etSpeed\030O \001(\002:\0010\022;\n#EffectBulletLaunchTi"
    "meIntervalRange\030P \001(\0132\016.ActionRangeV1\022\036\n"
    "\023EffectBulletMaxCout\030R \001(\021:\0010\0228\n EffectB"
    "ulletLifeTimeInteralRange\030S \001(\0132\016.Action"
    "RangeV1\022\033\n\020EffectBulletType\030T \001(\021:\0010\022,\n\027"
    "EffectBulletInitPosList\030U \003(\0132\013.ActionV3"
    "V1\022%\n\032EffectBulletLaunchMaxCount\030V \001(\021:\001"
    "0\022#\n\024EffectBulletIsFollow\030X \001(\010:\005false\022&"
    "\n\033AttackBehaviourAirDownSpeed\030Y \001(\002:\0010\022\""
    "\n\027EffectDirectionLockType\030Z \001(\021:\0010\022#\n\024Is"
    "IrregularityEffect\030[ \001(\010:\005false\022\037\n\nEffec"
    "tSize\030\\ \001(\0132\013.ActionV3V1\022\'\n\022AttackRangeP"
    "ostion\030] \001(\0132\013.ActionV3V1\022$\n\017AttackRange"
    "Size\030^ \001(\0132\013.ActionV3V1\022\026\n\013AttackShape\030_"
    " \001(\021:\0010\022\'\n\022AttackCircleOrigin\030` \001(\0132\013.Ac"
    "tionV3V1\022\035\n\022AttackCircleRadius\030a \001(\002:\0010\022"
    "\034\n\021AttackCircleAngle\030b \001(\002:\0010\"\021\n\017ActionU"
    "selessV1\"(\n\nActionV2V1\022\014\n\001X\030\001 \001(\002:\0010\022\014\n\001"
    "Y\030\002 \001(\002:\0010\"6\n\nActionV3V1\022\014\n\001X\030\001 \001(\002:\0010\022\014"
    "\n\001Y\030\002 \001(\002:\0010\022\014\n\001Z\030\003 \001(\002:\0010\"9\n\rActionRang"
    "eV1\022\023\n\010MinValue\030\003 \001(\002:\0010\022\023\n\010MaxValue\030\005 \001"
    "(\002:\0010", 3125);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ActionV1Data.proto", &protobuf_RegisterTypes);
  ActionSkillInfoV1::default_instance_ = new ActionSkillInfoV1();
  ActionCommandInfoV1::default_instance_ = new ActionCommandInfoV1();
  ActionUselessV1::default_instance_ = new ActionUselessV1();
  ActionV2V1::default_instance_ = new ActionV2V1();
  ActionV3V1::default_instance_ = new ActionV3V1();
  ActionRangeV1::default_instance_ = new ActionRangeV1();
  ActionSkillInfoV1::default_instance_->InitAsDefaultInstance();
  ActionCommandInfoV1::default_instance_->InitAsDefaultInstance();
  ActionUselessV1::default_instance_->InitAsDefaultInstance();
  ActionV2V1::default_instance_->InitAsDefaultInstance();
  ActionV3V1::default_instance_->InitAsDefaultInstance();
  ActionRangeV1::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ActionV1Data_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ActionV1Data_2eproto {
  StaticDescriptorInitializer_ActionV1Data_2eproto() {
    protobuf_AddDesc_ActionV1Data_2eproto();
  }
} static_descriptor_initializer_ActionV1Data_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ActionSkillInfoV1::kNameFieldNumber;
const int ActionSkillInfoV1::kCommandListFieldNumber;
const int ActionSkillInfoV1::kTotalTimeFieldNumber;
const int ActionSkillInfoV1::kIsSingFieldNumber;
const int ActionSkillInfoV1::kSingTimeFieldNumber;
#endif  // !_MSC_VER

ActionSkillInfoV1::ActionSkillInfoV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionSkillInfoV1::InitAsDefaultInstance() {
}

ActionSkillInfoV1::ActionSkillInfoV1(const ActionSkillInfoV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionSkillInfoV1::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  totaltime_ = 0;
  issing_ = false;
  singtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionSkillInfoV1::~ActionSkillInfoV1() {
  SharedDtor();
}

void ActionSkillInfoV1::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ActionSkillInfoV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionSkillInfoV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionSkillInfoV1_descriptor_;
}

const ActionSkillInfoV1& ActionSkillInfoV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActionV1Data_2eproto();
  return *default_instance_;
}

ActionSkillInfoV1* ActionSkillInfoV1::default_instance_ = NULL;

ActionSkillInfoV1* ActionSkillInfoV1::New() const {
  return new ActionSkillInfoV1;
}

void ActionSkillInfoV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    totaltime_ = 0;
    issing_ = false;
    singtime_ = 0;
  }
  commandlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionSkillInfoV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CommandList;
        break;
      }

      // repeated .ActionCommandInfoV1 CommandList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CommandList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commandlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CommandList;
        if (input->ExpectTag(29)) goto parse_TotalTime;
        break;
      }

      // optional float TotalTime = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_TotalTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &totaltime_)));
          set_has_totaltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsSing;
        break;
      }

      // optional bool IsSing = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issing_)));
          set_has_issing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_SingTime;
        break;
      }

      // optional float SingTime = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_SingTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &singtime_)));
          set_has_singtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionSkillInfoV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .ActionCommandInfoV1 CommandList = 2;
  for (int i = 0; i < this->commandlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commandlist(i), output);
  }

  // optional float TotalTime = 3 [default = 0];
  if (has_totaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->totaltime(), output);
  }

  // optional bool IsSing = 4 [default = false];
  if (has_issing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->issing(), output);
  }

  // optional float SingTime = 5 [default = 0];
  if (has_singtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->singtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionSkillInfoV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .ActionCommandInfoV1 CommandList = 2;
  for (int i = 0; i < this->commandlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commandlist(i), target);
  }

  // optional float TotalTime = 3 [default = 0];
  if (has_totaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->totaltime(), target);
  }

  // optional bool IsSing = 4 [default = false];
  if (has_issing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->issing(), target);
  }

  // optional float SingTime = 5 [default = 0];
  if (has_singtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->singtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionSkillInfoV1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional float TotalTime = 3 [default = 0];
    if (has_totaltime()) {
      total_size += 1 + 4;
    }

    // optional bool IsSing = 4 [default = false];
    if (has_issing()) {
      total_size += 1 + 1;
    }

    // optional float SingTime = 5 [default = 0];
    if (has_singtime()) {
      total_size += 1 + 4;
    }

  }
  // repeated .ActionCommandInfoV1 CommandList = 2;
  total_size += 1 * this->commandlist_size();
  for (int i = 0; i < this->commandlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commandlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionSkillInfoV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionSkillInfoV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionSkillInfoV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionSkillInfoV1::MergeFrom(const ActionSkillInfoV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  commandlist_.MergeFrom(from.commandlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_totaltime()) {
      set_totaltime(from.totaltime());
    }
    if (from.has_issing()) {
      set_issing(from.issing());
    }
    if (from.has_singtime()) {
      set_singtime(from.singtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionSkillInfoV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSkillInfoV1::CopyFrom(const ActionSkillInfoV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSkillInfoV1::IsInitialized() const {

  return true;
}

void ActionSkillInfoV1::Swap(ActionSkillInfoV1* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    commandlist_.Swap(&other->commandlist_);
    std::swap(totaltime_, other->totaltime_);
    std::swap(issing_, other->issing_);
    std::swap(singtime_, other->singtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionSkillInfoV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionSkillInfoV1_descriptor_;
  metadata.reflection = ActionSkillInfoV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionCommandInfoV1::kCommandTypeFieldNumber;
const int ActionCommandInfoV1::kStartTimeFieldNumber;
const int ActionCommandInfoV1::kDurationTimeFieldNumber;
const int ActionCommandInfoV1::kAnimationTriggerConditionFieldNumber;
const int ActionCommandInfoV1::kEffectNameFieldNumber;
const int ActionCommandInfoV1::kEffectBoneHookFieldNumber;
const int ActionCommandInfoV1::kEffectPositionOffsetFieldNumber;
const int ActionCommandInfoV1::kEffectStayInLocalSpaceFieldNumber;
const int ActionCommandInfoV1::kEffectControlObjectIdFieldNumber;
const int ActionCommandInfoV1::kTranslateControlIdFieldNumber;
const int ActionCommandInfoV1::kTranslateOffsetFieldNumber;
const int ActionCommandInfoV1::kActorAttackPartFieldNumber;
const int ActionCommandInfoV1::kTranslateEaseFieldNumber;
const int ActionCommandInfoV1::kAttackShowHitEffectFieldNumber;
const int ActionCommandInfoV1::kAttackHitEffectNameFieldNumber;
const int ActionCommandInfoV1::kAttackHitEffectDurationFieldNumber;
const int ActionCommandInfoV1::kAttackFragmentCountFieldNumber;
const int ActionCommandInfoV1::kAttackFragmentIntervalTimeFieldNumber;
const int ActionCommandInfoV1::kAttackDamageRadioFieldNumber;
const int ActionCommandInfoV1::kBuffSelfActiveFieldNumber;
const int ActionCommandInfoV1::kBuffTargetActiveFieldNumber;
const int ActionCommandInfoV1::kAttackBehaviourBackDistanceFieldNumber;
const int ActionCommandInfoV1::kAttackBehaviourAirHeightFieldNumber;
const int ActionCommandInfoV1::kEffectRotationOffsetFieldNumber;
const int ActionCommandInfoV1::kFlashControlObjectIdFieldNumber;
const int ActionCommandInfoV1::kAttackStiffTimeFieldNumber;
const int ActionCommandInfoV1::kAttackShakeFieldNumber;
const int ActionCommandInfoV1::kAttackFlashFieldNumber;
const int ActionCommandInfoV1::kAttackBehaviourBackSpeedFieldNumber;
const int ActionCommandInfoV1::kAttackBehaviourAirSpeedFieldNumber;
const int ActionCommandInfoV1::kAttackBehaviourBackFieldNumber;
const int ActionCommandInfoV1::kAttackBehaviourAirFieldNumber;
const int ActionCommandInfoV1::kAttackBehaviourZoomFieldNumber;
const int ActionCommandInfoV1::kSoundNameFieldNumber;
const int ActionCommandInfoV1::kTriggerFieldNumber;
const int ActionCommandInfoV1::kTriggerIndexFieldNumber;
const int ActionCommandInfoV1::kAttackHitDummyFieldNumber;
const int ActionCommandInfoV1::kAttackHitSoundFieldNumber;
const int ActionCommandInfoV1::kHitShakeCameraXRangeFieldNumber;
const int ActionCommandInfoV1::kHitShakeCameraYRangeFieldNumber;
const int ActionCommandInfoV1::kHitShakeCameraCountFieldNumber;
const int ActionCommandInfoV1::kHitShakeCameraDurationTimeFieldNumber;
const int ActionCommandInfoV1::kHiddenWeaponModeFieldNumber;
const int ActionCommandInfoV1::kNextActionNameFieldNumber;
const int ActionCommandInfoV1::kTranslateWrapModeFieldNumber;
const int ActionCommandInfoV1::kIsTriggerSecondAttackFieldNumber;
const int ActionCommandInfoV1::kIsHitGroundFieldNumber;
const int ActionCommandInfoV1::kSkillActionNameFieldNumber;
const int ActionCommandInfoV1::kWarningRes1FieldNumber;
const int ActionCommandInfoV1::kWarningRes2FieldNumber;
const int ActionCommandInfoV1::kWarningMaxScaleFieldNumber;
const int ActionCommandInfoV1::kWarningScaleModeFieldNumber;
const int ActionCommandInfoV1::kWarningLockAxleFieldNumber;
const int ActionCommandInfoV1::kWarningPositionOffsetFieldNumber;
const int ActionCommandInfoV1::kIsEffectFollowFieldNumber;
const int ActionCommandInfoV1::kIsWarningTargetFieldNumber;
const int ActionCommandInfoV1::kAttackBehaviourAirDurationTimeFieldNumber;
const int ActionCommandInfoV1::kIsColliderDestroyFieldNumber;
const int ActionCommandInfoV1::kIsAttackRangeFollowFieldNumber;
const int ActionCommandInfoV1::kIsAnimationLoopFieldNumber;
const int ActionCommandInfoV1::kTranslateAngleFieldNumber;
const int ActionCommandInfoV1::kIsAttackRangeShadeFieldNumber;
const int ActionCommandInfoV1::kAttackIntervalFieldNumber;
const int ActionCommandInfoV1::kIsShowAttackRectFieldNumber;
const int ActionCommandInfoV1::kEffectBulletLaunchAngleFieldNumber;
const int ActionCommandInfoV1::kEffectBulletSpeedFieldNumber;
const int ActionCommandInfoV1::kEffectBulletLaunchTimeIntervalRangeFieldNumber;
const int ActionCommandInfoV1::kEffectBulletMaxCoutFieldNumber;
const int ActionCommandInfoV1::kEffectBulletLifeTimeInteralRangeFieldNumber;
const int ActionCommandInfoV1::kEffectBulletTypeFieldNumber;
const int ActionCommandInfoV1::kEffectBulletInitPosListFieldNumber;
const int ActionCommandInfoV1::kEffectBulletLaunchMaxCountFieldNumber;
const int ActionCommandInfoV1::kEffectBulletIsFollowFieldNumber;
const int ActionCommandInfoV1::kAttackBehaviourAirDownSpeedFieldNumber;
const int ActionCommandInfoV1::kEffectDirectionLockTypeFieldNumber;
const int ActionCommandInfoV1::kIsIrregularityEffectFieldNumber;
const int ActionCommandInfoV1::kEffectSizeFieldNumber;
const int ActionCommandInfoV1::kAttackRangePostionFieldNumber;
const int ActionCommandInfoV1::kAttackRangeSizeFieldNumber;
const int ActionCommandInfoV1::kAttackShapeFieldNumber;
const int ActionCommandInfoV1::kAttackCircleOriginFieldNumber;
const int ActionCommandInfoV1::kAttackCircleRadiusFieldNumber;
const int ActionCommandInfoV1::kAttackCircleAngleFieldNumber;
#endif  // !_MSC_VER

ActionCommandInfoV1::ActionCommandInfoV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionCommandInfoV1::InitAsDefaultInstance() {
  effectpositionoffset_ = const_cast< ::ActionV3V1*>(&::ActionV3V1::default_instance());
  translateoffset_ = const_cast< ::ActionV3V1*>(&::ActionV3V1::default_instance());
  effectrotationoffset_ = const_cast< ::ActionV3V1*>(&::ActionV3V1::default_instance());
  warningmaxscale_ = const_cast< ::ActionV3V1*>(&::ActionV3V1::default_instance());
  warningpositionoffset_ = const_cast< ::ActionV3V1*>(&::ActionV3V1::default_instance());
  effectbulletlaunchtimeintervalrange_ = const_cast< ::ActionRangeV1*>(&::ActionRangeV1::default_instance());
  effectbulletlifetimeinteralrange_ = const_cast< ::ActionRangeV1*>(&::ActionRangeV1::default_instance());
  effectsize_ = const_cast< ::ActionV3V1*>(&::ActionV3V1::default_instance());
  attackrangepostion_ = const_cast< ::ActionV3V1*>(&::ActionV3V1::default_instance());
  attackrangesize_ = const_cast< ::ActionV3V1*>(&::ActionV3V1::default_instance());
  attackcircleorigin_ = const_cast< ::ActionV3V1*>(&::ActionV3V1::default_instance());
}

ActionCommandInfoV1::ActionCommandInfoV1(const ActionCommandInfoV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionCommandInfoV1::SharedCtor() {
  _cached_size_ = 0;
  commandtype_ = -1;
  starttime_ = 0;
  durationtime_ = 0;
  animationtriggercondition_ = 0;
  effectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  effectbonehook_ = 0;
  effectpositionoffset_ = NULL;
  effectstayinlocalspace_ = false;
  effectcontrolobjectid_ = 0;
  translatecontrolid_ = 0;
  translateoffset_ = NULL;
  translateease_ = 1;
  attackshowhiteffect_ = false;
  attackhiteffectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attackhiteffectduration_ = 1.6f;
  attackfragmentcount_ = 1;
  attackfragmentintervaltime_ = 0;
  attackdamageradio_ = 1;
  buffselfactive_ = false;
  bufftargetactive_ = false;
  attackbehaviourbackdistance_ = 0;
  attackbehaviourairheight_ = 0;
  effectrotationoffset_ = NULL;
  flashcontrolobjectid_ = 0;
  attackstifftime_ = 0;
  attackshake_ = false;
  attackflash_ = false;
  attackbehaviourbackspeed_ = 1;
  attackbehaviourairspeed_ = 1;
  attackbehaviourback_ = false;
  attackbehaviourair_ = false;
  attackbehaviourzoom_ = false;
  soundname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trigger_ = false;
  triggerindex_ = 1;
  attackhitdummy_ = 0;
  attackhitsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hitshakecameraxrange_ = 0;
  hitshakecamerayrange_ = 0;
  hitshakecameracount_ = 1;
  hitshakecameradurationtime_ = 0.1f;
  hiddenweaponmode_ = 0;
  nextactionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  translatewrapmode_ = 0;
  istriggersecondattack_ = false;
  ishitground_ = false;
  skillactionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  warningres1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  warningres2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  warningmaxscale_ = NULL;
  warningscalemode_ = 0;
  warninglockaxle_ = 0;
  warningpositionoffset_ = NULL;
  iseffectfollow_ = false;
  iswarningtarget_ = false;
  attackbehaviourairdurationtime_ = 0;
  iscolliderdestroy_ = false;
  isattackrangefollow_ = false;
  isanimationloop_ = false;
  translateangle_ = 0;
  isattackrangeshade_ = false;
  attackinterval_ = 0;
  isshowattackrect_ = false;
  effectbulletlaunchangle_ = 0;
  effectbulletspeed_ = 0;
  effectbulletlaunchtimeintervalrange_ = NULL;
  effectbulletmaxcout_ = 0;
  effectbulletlifetimeinteralrange_ = NULL;
  effectbullettype_ = 0;
  effectbulletlaunchmaxcount_ = 0;
  effectbulletisfollow_ = false;
  attackbehaviourairdownspeed_ = 0;
  effectdirectionlocktype_ = 0;
  isirregularityeffect_ = false;
  effectsize_ = NULL;
  attackrangepostion_ = NULL;
  attackrangesize_ = NULL;
  attackshape_ = 0;
  attackcircleorigin_ = NULL;
  attackcircleradius_ = 0;
  attackcircleangle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionCommandInfoV1::~ActionCommandInfoV1() {
  SharedDtor();
}

void ActionCommandInfoV1::SharedDtor() {
  if (effectname_ != &::google::protobuf::internal::kEmptyString) {
    delete effectname_;
  }
  if (attackhiteffectname_ != &::google::protobuf::internal::kEmptyString) {
    delete attackhiteffectname_;
  }
  if (soundname_ != &::google::protobuf::internal::kEmptyString) {
    delete soundname_;
  }
  if (attackhitsound_ != &::google::protobuf::internal::kEmptyString) {
    delete attackhitsound_;
  }
  if (nextactionname_ != &::google::protobuf::internal::kEmptyString) {
    delete nextactionname_;
  }
  if (skillactionname_ != &::google::protobuf::internal::kEmptyString) {
    delete skillactionname_;
  }
  if (warningres1_ != &::google::protobuf::internal::kEmptyString) {
    delete warningres1_;
  }
  if (warningres2_ != &::google::protobuf::internal::kEmptyString) {
    delete warningres2_;
  }
  if (this != default_instance_) {
    delete effectpositionoffset_;
    delete translateoffset_;
    delete effectrotationoffset_;
    delete warningmaxscale_;
    delete warningpositionoffset_;
    delete effectbulletlaunchtimeintervalrange_;
    delete effectbulletlifetimeinteralrange_;
    delete effectsize_;
    delete attackrangepostion_;
    delete attackrangesize_;
    delete attackcircleorigin_;
  }
}

void ActionCommandInfoV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionCommandInfoV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionCommandInfoV1_descriptor_;
}

const ActionCommandInfoV1& ActionCommandInfoV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActionV1Data_2eproto();
  return *default_instance_;
}

ActionCommandInfoV1* ActionCommandInfoV1::default_instance_ = NULL;

ActionCommandInfoV1* ActionCommandInfoV1::New() const {
  return new ActionCommandInfoV1;
}

void ActionCommandInfoV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    commandtype_ = -1;
    starttime_ = 0;
    durationtime_ = 0;
    animationtriggercondition_ = 0;
    if (has_effectname()) {
      if (effectname_ != &::google::protobuf::internal::kEmptyString) {
        effectname_->clear();
      }
    }
    effectbonehook_ = 0;
    if (has_effectpositionoffset()) {
      if (effectpositionoffset_ != NULL) effectpositionoffset_->::ActionV3V1::Clear();
    }
    effectstayinlocalspace_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    effectcontrolobjectid_ = 0;
    translatecontrolid_ = 0;
    if (has_translateoffset()) {
      if (translateoffset_ != NULL) translateoffset_->::ActionV3V1::Clear();
    }
    translateease_ = 1;
    attackshowhiteffect_ = false;
    if (has_attackhiteffectname()) {
      if (attackhiteffectname_ != &::google::protobuf::internal::kEmptyString) {
        attackhiteffectname_->clear();
      }
    }
    attackhiteffectduration_ = 1.6f;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    attackfragmentcount_ = 1;
    attackfragmentintervaltime_ = 0;
    attackdamageradio_ = 1;
    buffselfactive_ = false;
    bufftargetactive_ = false;
    attackbehaviourbackdistance_ = 0;
    attackbehaviourairheight_ = 0;
    if (has_effectrotationoffset()) {
      if (effectrotationoffset_ != NULL) effectrotationoffset_->::ActionV3V1::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    flashcontrolobjectid_ = 0;
    attackstifftime_ = 0;
    attackshake_ = false;
    attackflash_ = false;
    attackbehaviourbackspeed_ = 1;
    attackbehaviourairspeed_ = 1;
    attackbehaviourback_ = false;
    attackbehaviourair_ = false;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    attackbehaviourzoom_ = false;
    if (has_soundname()) {
      if (soundname_ != &::google::protobuf::internal::kEmptyString) {
        soundname_->clear();
      }
    }
    trigger_ = false;
    triggerindex_ = 1;
    attackhitdummy_ = 0;
    if (has_attackhitsound()) {
      if (attackhitsound_ != &::google::protobuf::internal::kEmptyString) {
        attackhitsound_->clear();
      }
    }
    hitshakecameraxrange_ = 0;
    hitshakecamerayrange_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    hitshakecameracount_ = 1;
    hitshakecameradurationtime_ = 0.1f;
    hiddenweaponmode_ = 0;
    if (has_nextactionname()) {
      if (nextactionname_ != &::google::protobuf::internal::kEmptyString) {
        nextactionname_->clear();
      }
    }
    translatewrapmode_ = 0;
    istriggersecondattack_ = false;
    ishitground_ = false;
    if (has_skillactionname()) {
      if (skillactionname_ != &::google::protobuf::internal::kEmptyString) {
        skillactionname_->clear();
      }
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_warningres1()) {
      if (warningres1_ != &::google::protobuf::internal::kEmptyString) {
        warningres1_->clear();
      }
    }
    if (has_warningres2()) {
      if (warningres2_ != &::google::protobuf::internal::kEmptyString) {
        warningres2_->clear();
      }
    }
    if (has_warningmaxscale()) {
      if (warningmaxscale_ != NULL) warningmaxscale_->::ActionV3V1::Clear();
    }
    warningscalemode_ = 0;
    warninglockaxle_ = 0;
    if (has_warningpositionoffset()) {
      if (warningpositionoffset_ != NULL) warningpositionoffset_->::ActionV3V1::Clear();
    }
    iseffectfollow_ = false;
    iswarningtarget_ = false;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    attackbehaviourairdurationtime_ = 0;
    iscolliderdestroy_ = false;
    isattackrangefollow_ = false;
    isanimationloop_ = false;
    translateangle_ = 0;
    isattackrangeshade_ = false;
    attackinterval_ = 0;
    isshowattackrect_ = false;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    effectbulletlaunchangle_ = 0;
    effectbulletspeed_ = 0;
    if (has_effectbulletlaunchtimeintervalrange()) {
      if (effectbulletlaunchtimeintervalrange_ != NULL) effectbulletlaunchtimeintervalrange_->::ActionRangeV1::Clear();
    }
    effectbulletmaxcout_ = 0;
    if (has_effectbulletlifetimeinteralrange()) {
      if (effectbulletlifetimeinteralrange_ != NULL) effectbulletlifetimeinteralrange_->::ActionRangeV1::Clear();
    }
    effectbullettype_ = 0;
    effectbulletlaunchmaxcount_ = 0;
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    effectbulletisfollow_ = false;
    attackbehaviourairdownspeed_ = 0;
    effectdirectionlocktype_ = 0;
    isirregularityeffect_ = false;
    if (has_effectsize()) {
      if (effectsize_ != NULL) effectsize_->::ActionV3V1::Clear();
    }
    if (has_attackrangepostion()) {
      if (attackrangepostion_ != NULL) attackrangepostion_->::ActionV3V1::Clear();
    }
    if (has_attackrangesize()) {
      if (attackrangesize_ != NULL) attackrangesize_->::ActionV3V1::Clear();
    }
    attackshape_ = 0;
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (has_attackcircleorigin()) {
      if (attackcircleorigin_ != NULL) attackcircleorigin_->::ActionV3V1::Clear();
    }
    attackcircleradius_ = 0;
    attackcircleangle_ = 0;
  }
  actorattackpart_.Clear();
  effectbulletinitposlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionCommandInfoV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 CommandType = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &commandtype_)));
          set_has_commandtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_StartTime;
        break;
      }

      // optional float StartTime = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_DurationTime;
        break;
      }

      // optional float DurationTime = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DurationTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &durationtime_)));
          set_has_durationtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_AnimationTriggerCondition;
        break;
      }

      // optional sint32 AnimationTriggerCondition = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AnimationTriggerCondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &animationtriggercondition_)));
          set_has_animationtriggercondition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_EffectName;
        break;
      }

      // optional string EffectName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EffectName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effectname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->effectname().data(), this->effectname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_EffectBoneHook;
        break;
      }

      // optional sint32 EffectBoneHook = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffectBoneHook:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &effectbonehook_)));
          set_has_effectbonehook();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_EffectPositionOffset;
        break;
      }

      // optional .ActionV3V1 EffectPositionOffset = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EffectPositionOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effectpositionoffset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_EffectStayInLocalSpace;
        break;
      }

      // optional bool EffectStayInLocalSpace = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffectStayInLocalSpace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &effectstayinlocalspace_)));
          set_has_effectstayinlocalspace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_EffectControlObjectId;
        break;
      }

      // optional sint32 EffectControlObjectId = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffectControlObjectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &effectcontrolobjectid_)));
          set_has_effectcontrolobjectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_TranslateControlId;
        break;
      }

      // optional sint32 TranslateControlId = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TranslateControlId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &translatecontrolid_)));
          set_has_translatecontrolid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_TranslateOffset;
        break;
      }

      // optional .ActionV3V1 TranslateOffset = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TranslateOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translateoffset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_ActorAttackPart;
        break;
      }

      // repeated sint32 ActorAttackPart = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActorAttackPart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 104, input, this->mutable_actorattackpart())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_actorattackpart())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_ActorAttackPart;
        if (input->ExpectTag(112)) goto parse_TranslateEase;
        break;
      }

      // optional sint32 TranslateEase = 14 [default = 1];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TranslateEase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &translateease_)));
          set_has_translateease();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_AttackShowHitEffect;
        break;
      }

      // optional bool AttackShowHitEffect = 15 [default = false];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttackShowHitEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attackshowhiteffect_)));
          set_has_attackshowhiteffect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_AttackHitEffectName;
        break;
      }

      // optional string AttackHitEffectName = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AttackHitEffectName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attackhiteffectname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attackhiteffectname().data(), this->attackhiteffectname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_AttackHitEffectDuration;
        break;
      }

      // optional float AttackHitEffectDuration = 17 [default = 1.6];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AttackHitEffectDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attackhiteffectduration_)));
          set_has_attackhiteffectduration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_AttackFragmentCount;
        break;
      }

      // optional sint32 AttackFragmentCount = 18 [default = 1];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttackFragmentCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &attackfragmentcount_)));
          set_has_attackfragmentcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_AttackFragmentIntervalTime;
        break;
      }

      // optional float AttackFragmentIntervalTime = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AttackFragmentIntervalTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attackfragmentintervaltime_)));
          set_has_attackfragmentintervaltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_AttackDamageRadio;
        break;
      }

      // optional float AttackDamageRadio = 20 [default = 1];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AttackDamageRadio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attackdamageradio_)));
          set_has_attackdamageradio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_BuffSelfActive;
        break;
      }

      // optional bool BuffSelfActive = 21 [default = false];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuffSelfActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &buffselfactive_)));
          set_has_buffselfactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_BuffTargetActive;
        break;
      }

      // optional bool BuffTargetActive = 22 [default = false];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuffTargetActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bufftargetactive_)));
          set_has_bufftargetactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_AttackBehaviourBackDistance;
        break;
      }

      // optional float AttackBehaviourBackDistance = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AttackBehaviourBackDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attackbehaviourbackdistance_)));
          set_has_attackbehaviourbackdistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_AttackBehaviourAirHeight;
        break;
      }

      // optional float AttackBehaviourAirHeight = 25 [default = 0];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AttackBehaviourAirHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attackbehaviourairheight_)));
          set_has_attackbehaviourairheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_EffectRotationOffset;
        break;
      }

      // optional .ActionV3V1 EffectRotationOffset = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EffectRotationOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effectrotationoffset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_FlashControlObjectId;
        break;
      }

      // optional sint32 FlashControlObjectId = 28 [default = 0];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FlashControlObjectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &flashcontrolobjectid_)));
          set_has_flashcontrolobjectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(237)) goto parse_AttackStiffTime;
        break;
      }

      // optional float AttackStiffTime = 29 [default = 0];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AttackStiffTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attackstifftime_)));
          set_has_attackstifftime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_AttackShake;
        break;
      }

      // optional bool AttackShake = 30 [default = false];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttackShake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attackshake_)));
          set_has_attackshake();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_AttackFlash;
        break;
      }

      // optional bool AttackFlash = 31 [default = false];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttackFlash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attackflash_)));
          set_has_attackflash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(261)) goto parse_AttackBehaviourBackSpeed;
        break;
      }

      // optional float AttackBehaviourBackSpeed = 32 [default = 1];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AttackBehaviourBackSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attackbehaviourbackspeed_)));
          set_has_attackbehaviourbackspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(269)) goto parse_AttackBehaviourAirSpeed;
        break;
      }

      // optional float AttackBehaviourAirSpeed = 33 [default = 1];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AttackBehaviourAirSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attackbehaviourairspeed_)));
          set_has_attackbehaviourairspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_AttackBehaviourBack;
        break;
      }

      // optional bool AttackBehaviourBack = 35 [default = false];
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttackBehaviourBack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attackbehaviourback_)));
          set_has_attackbehaviourback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_AttackBehaviourAir;
        break;
      }

      // optional bool AttackBehaviourAir = 36 [default = false];
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttackBehaviourAir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attackbehaviourair_)));
          set_has_attackbehaviourair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_AttackBehaviourZoom;
        break;
      }

      // optional bool AttackBehaviourZoom = 37 [default = false];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttackBehaviourZoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attackbehaviourzoom_)));
          set_has_attackbehaviourzoom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_SoundName;
        break;
      }

      // optional string SoundName = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SoundName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soundname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soundname().data(), this->soundname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_Trigger;
        break;
      }

      // optional bool Trigger = 39 [default = false];
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Trigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trigger_)));
          set_has_trigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_TriggerIndex;
        break;
      }

      // optional sint32 TriggerIndex = 40 [default = 1];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TriggerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &triggerindex_)));
          set_has_triggerindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_AttackHitDummy;
        break;
      }

      // optional sint32 AttackHitDummy = 41 [default = 0];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttackHitDummy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &attackhitdummy_)));
          set_has_attackhitdummy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_AttackHitSound;
        break;
      }

      // optional string AttackHitSound = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AttackHitSound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attackhitsound()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attackhitsound().data(), this->attackhitsound().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(357)) goto parse_HitShakeCameraXRange;
        break;
      }

      // optional float HitShakeCameraXRange = 44 [default = 0];
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_HitShakeCameraXRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hitshakecameraxrange_)));
          set_has_hitshakecameraxrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(365)) goto parse_HitShakeCameraYRange;
        break;
      }

      // optional float HitShakeCameraYRange = 45 [default = 0];
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_HitShakeCameraYRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hitshakecamerayrange_)));
          set_has_hitshakecamerayrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_HitShakeCameraCount;
        break;
      }

      // optional sint32 HitShakeCameraCount = 46 [default = 1];
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HitShakeCameraCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &hitshakecameracount_)));
          set_has_hitshakecameracount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(381)) goto parse_HitShakeCameraDurationTime;
        break;
      }

      // optional float HitShakeCameraDurationTime = 47 [default = 0.1];
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_HitShakeCameraDurationTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hitshakecameradurationtime_)));
          set_has_hitshakecameradurationtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_HiddenWeaponMode;
        break;
      }

      // optional sint32 HiddenWeaponMode = 50 [default = 0];
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HiddenWeaponMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &hiddenweaponmode_)));
          set_has_hiddenweaponmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_NextActionName;
        break;
      }

      // optional string NextActionName = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NextActionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nextactionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nextactionname().data(), this->nextactionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_TranslateWrapMode;
        break;
      }

      // optional sint32 TranslateWrapMode = 52 [default = 0];
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TranslateWrapMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &translatewrapmode_)));
          set_has_translatewrapmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_IsTriggerSecondAttack;
        break;
      }

      // optional bool IsTriggerSecondAttack = 53 [default = false];
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsTriggerSecondAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istriggersecondattack_)));
          set_has_istriggersecondattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_IsHitGround;
        break;
      }

      // optional bool IsHitGround = 54 [default = false];
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsHitGround:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishitground_)));
          set_has_ishitground();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_SkillActionName;
        break;
      }

      // optional string SkillActionName = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SkillActionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skillactionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->skillactionname().data(), this->skillactionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(450)) goto parse_WarningRes1;
        break;
      }

      // optional string WarningRes1 = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WarningRes1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_warningres1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->warningres1().data(), this->warningres1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(458)) goto parse_WarningRes2;
        break;
      }

      // optional string WarningRes2 = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WarningRes2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_warningres2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->warningres2().data(), this->warningres2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(466)) goto parse_WarningMaxScale;
        break;
      }

      // optional .ActionV3V1 WarningMaxScale = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WarningMaxScale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warningmaxscale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_WarningScaleMode;
        break;
      }

      // optional sint32 WarningScaleMode = 59 [default = 0];
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WarningScaleMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &warningscalemode_)));
          set_has_warningscalemode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_WarningLockAxle;
        break;
      }

      // optional sint32 WarningLockAxle = 60 [default = 0];
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WarningLockAxle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &warninglockaxle_)));
          set_has_warninglockaxle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(490)) goto parse_WarningPositionOffset;
        break;
      }

      // optional .ActionV3V1 WarningPositionOffset = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WarningPositionOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warningpositionoffset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_IsEffectFollow;
        break;
      }

      // optional bool IsEffectFollow = 62 [default = false];
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsEffectFollow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iseffectfollow_)));
          set_has_iseffectfollow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_IsWarningTarget;
        break;
      }

      // optional bool IsWarningTarget = 63 [default = false];
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsWarningTarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswarningtarget_)));
          set_has_iswarningtarget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(517)) goto parse_AttackBehaviourAirDurationTime;
        break;
      }

      // optional float AttackBehaviourAirDurationTime = 64 [default = 0];
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AttackBehaviourAirDurationTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attackbehaviourairdurationtime_)));
          set_has_attackbehaviourairdurationtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_IsColliderDestroy;
        break;
      }

      // optional bool IsColliderDestroy = 66 [default = false];
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsColliderDestroy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscolliderdestroy_)));
          set_has_iscolliderdestroy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_IsAttackRangeFollow;
        break;
      }

      // optional bool IsAttackRangeFollow = 70 [default = false];
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsAttackRangeFollow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isattackrangefollow_)));
          set_has_isattackrangefollow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_IsAnimationLoop;
        break;
      }

      // optional bool IsAnimationLoop = 71 [default = false];
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsAnimationLoop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isanimationloop_)));
          set_has_isanimationloop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(581)) goto parse_TranslateAngle;
        break;
      }

      // optional float TranslateAngle = 72 [default = 0];
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_TranslateAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &translateangle_)));
          set_has_translateangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_IsAttackRangeShade;
        break;
      }

      // optional bool IsAttackRangeShade = 73 [default = false];
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsAttackRangeShade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isattackrangeshade_)));
          set_has_isattackrangeshade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(605)) goto parse_AttackInterval;
        break;
      }

      // optional float AttackInterval = 75 [default = 0];
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AttackInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attackinterval_)));
          set_has_attackinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(608)) goto parse_IsShowAttackRect;
        break;
      }

      // optional bool IsShowAttackRect = 76 [default = false];
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsShowAttackRect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshowattackrect_)));
          set_has_isshowattackrect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(629)) goto parse_EffectBulletLaunchAngle;
        break;
      }

      // optional float EffectBulletLaunchAngle = 78 [default = 0];
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_EffectBulletLaunchAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effectbulletlaunchangle_)));
          set_has_effectbulletlaunchangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(637)) goto parse_EffectBulletSpeed;
        break;
      }

      // optional float EffectBulletSpeed = 79 [default = 0];
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_EffectBulletSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effectbulletspeed_)));
          set_has_effectbulletspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_EffectBulletLaunchTimeIntervalRange;
        break;
      }

      // optional .ActionRangeV1 EffectBulletLaunchTimeIntervalRange = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EffectBulletLaunchTimeIntervalRange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effectbulletlaunchtimeintervalrange()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(656)) goto parse_EffectBulletMaxCout;
        break;
      }

      // optional sint32 EffectBulletMaxCout = 82 [default = 0];
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffectBulletMaxCout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &effectbulletmaxcout_)));
          set_has_effectbulletmaxcout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(666)) goto parse_EffectBulletLifeTimeInteralRange;
        break;
      }

      // optional .ActionRangeV1 EffectBulletLifeTimeInteralRange = 83;
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EffectBulletLifeTimeInteralRange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effectbulletlifetimeinteralrange()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(672)) goto parse_EffectBulletType;
        break;
      }

      // optional sint32 EffectBulletType = 84 [default = 0];
      case 84: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffectBulletType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &effectbullettype_)));
          set_has_effectbullettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(682)) goto parse_EffectBulletInitPosList;
        break;
      }

      // repeated .ActionV3V1 EffectBulletInitPosList = 85;
      case 85: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EffectBulletInitPosList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effectbulletinitposlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(682)) goto parse_EffectBulletInitPosList;
        if (input->ExpectTag(688)) goto parse_EffectBulletLaunchMaxCount;
        break;
      }

      // optional sint32 EffectBulletLaunchMaxCount = 86 [default = 0];
      case 86: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffectBulletLaunchMaxCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &effectbulletlaunchmaxcount_)));
          set_has_effectbulletlaunchmaxcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(704)) goto parse_EffectBulletIsFollow;
        break;
      }

      // optional bool EffectBulletIsFollow = 88 [default = false];
      case 88: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffectBulletIsFollow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &effectbulletisfollow_)));
          set_has_effectbulletisfollow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(717)) goto parse_AttackBehaviourAirDownSpeed;
        break;
      }

      // optional float AttackBehaviourAirDownSpeed = 89 [default = 0];
      case 89: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AttackBehaviourAirDownSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attackbehaviourairdownspeed_)));
          set_has_attackbehaviourairdownspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(720)) goto parse_EffectDirectionLockType;
        break;
      }

      // optional sint32 EffectDirectionLockType = 90 [default = 0];
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffectDirectionLockType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &effectdirectionlocktype_)));
          set_has_effectdirectionlocktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(728)) goto parse_IsIrregularityEffect;
        break;
      }

      // optional bool IsIrregularityEffect = 91 [default = false];
      case 91: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsIrregularityEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isirregularityeffect_)));
          set_has_isirregularityeffect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(738)) goto parse_EffectSize;
        break;
      }

      // optional .ActionV3V1 EffectSize = 92;
      case 92: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EffectSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effectsize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(746)) goto parse_AttackRangePostion;
        break;
      }

      // optional .ActionV3V1 AttackRangePostion = 93;
      case 93: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AttackRangePostion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attackrangepostion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(754)) goto parse_AttackRangeSize;
        break;
      }

      // optional .ActionV3V1 AttackRangeSize = 94;
      case 94: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AttackRangeSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attackrangesize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(760)) goto parse_AttackShape;
        break;
      }

      // optional sint32 AttackShape = 95 [default = 0];
      case 95: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttackShape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &attackshape_)));
          set_has_attackshape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(770)) goto parse_AttackCircleOrigin;
        break;
      }

      // optional .ActionV3V1 AttackCircleOrigin = 96;
      case 96: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AttackCircleOrigin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attackcircleorigin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(781)) goto parse_AttackCircleRadius;
        break;
      }

      // optional float AttackCircleRadius = 97 [default = 0];
      case 97: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AttackCircleRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attackcircleradius_)));
          set_has_attackcircleradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(789)) goto parse_AttackCircleAngle;
        break;
      }

      // optional float AttackCircleAngle = 98 [default = 0];
      case 98: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_AttackCircleAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attackcircleangle_)));
          set_has_attackcircleangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionCommandInfoV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 CommandType = 2 [default = -1];
  if (has_commandtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->commandtype(), output);
  }

  // optional float StartTime = 3 [default = 0];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->starttime(), output);
  }

  // optional float DurationTime = 4 [default = 0];
  if (has_durationtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->durationtime(), output);
  }

  // optional sint32 AnimationTriggerCondition = 5 [default = 0];
  if (has_animationtriggercondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->animationtriggercondition(), output);
  }

  // optional string EffectName = 6;
  if (has_effectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effectname().data(), this->effectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->effectname(), output);
  }

  // optional sint32 EffectBoneHook = 7 [default = 0];
  if (has_effectbonehook()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->effectbonehook(), output);
  }

  // optional .ActionV3V1 EffectPositionOffset = 8;
  if (has_effectpositionoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->effectpositionoffset(), output);
  }

  // optional bool EffectStayInLocalSpace = 9 [default = false];
  if (has_effectstayinlocalspace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->effectstayinlocalspace(), output);
  }

  // optional sint32 EffectControlObjectId = 10 [default = 0];
  if (has_effectcontrolobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->effectcontrolobjectid(), output);
  }

  // optional sint32 TranslateControlId = 11 [default = 0];
  if (has_translatecontrolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->translatecontrolid(), output);
  }

  // optional .ActionV3V1 TranslateOffset = 12;
  if (has_translateoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->translateoffset(), output);
  }

  // repeated sint32 ActorAttackPart = 13;
  for (int i = 0; i < this->actorattackpart_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      13, this->actorattackpart(i), output);
  }

  // optional sint32 TranslateEase = 14 [default = 1];
  if (has_translateease()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(14, this->translateease(), output);
  }

  // optional bool AttackShowHitEffect = 15 [default = false];
  if (has_attackshowhiteffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->attackshowhiteffect(), output);
  }

  // optional string AttackHitEffectName = 16;
  if (has_attackhiteffectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackhiteffectname().data(), this->attackhiteffectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->attackhiteffectname(), output);
  }

  // optional float AttackHitEffectDuration = 17 [default = 1.6];
  if (has_attackhiteffectduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->attackhiteffectduration(), output);
  }

  // optional sint32 AttackFragmentCount = 18 [default = 1];
  if (has_attackfragmentcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(18, this->attackfragmentcount(), output);
  }

  // optional float AttackFragmentIntervalTime = 19 [default = 0];
  if (has_attackfragmentintervaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->attackfragmentintervaltime(), output);
  }

  // optional float AttackDamageRadio = 20 [default = 1];
  if (has_attackdamageradio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->attackdamageradio(), output);
  }

  // optional bool BuffSelfActive = 21 [default = false];
  if (has_buffselfactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->buffselfactive(), output);
  }

  // optional bool BuffTargetActive = 22 [default = false];
  if (has_bufftargetactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->bufftargetactive(), output);
  }

  // optional float AttackBehaviourBackDistance = 24 [default = 0];
  if (has_attackbehaviourbackdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->attackbehaviourbackdistance(), output);
  }

  // optional float AttackBehaviourAirHeight = 25 [default = 0];
  if (has_attackbehaviourairheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->attackbehaviourairheight(), output);
  }

  // optional .ActionV3V1 EffectRotationOffset = 27;
  if (has_effectrotationoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->effectrotationoffset(), output);
  }

  // optional sint32 FlashControlObjectId = 28 [default = 0];
  if (has_flashcontrolobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(28, this->flashcontrolobjectid(), output);
  }

  // optional float AttackStiffTime = 29 [default = 0];
  if (has_attackstifftime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->attackstifftime(), output);
  }

  // optional bool AttackShake = 30 [default = false];
  if (has_attackshake()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->attackshake(), output);
  }

  // optional bool AttackFlash = 31 [default = false];
  if (has_attackflash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->attackflash(), output);
  }

  // optional float AttackBehaviourBackSpeed = 32 [default = 1];
  if (has_attackbehaviourbackspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->attackbehaviourbackspeed(), output);
  }

  // optional float AttackBehaviourAirSpeed = 33 [default = 1];
  if (has_attackbehaviourairspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->attackbehaviourairspeed(), output);
  }

  // optional bool AttackBehaviourBack = 35 [default = false];
  if (has_attackbehaviourback()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->attackbehaviourback(), output);
  }

  // optional bool AttackBehaviourAir = 36 [default = false];
  if (has_attackbehaviourair()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->attackbehaviourair(), output);
  }

  // optional bool AttackBehaviourZoom = 37 [default = false];
  if (has_attackbehaviourzoom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->attackbehaviourzoom(), output);
  }

  // optional string SoundName = 38;
  if (has_soundname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soundname().data(), this->soundname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      38, this->soundname(), output);
  }

  // optional bool Trigger = 39 [default = false];
  if (has_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->trigger(), output);
  }

  // optional sint32 TriggerIndex = 40 [default = 1];
  if (has_triggerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(40, this->triggerindex(), output);
  }

  // optional sint32 AttackHitDummy = 41 [default = 0];
  if (has_attackhitdummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(41, this->attackhitdummy(), output);
  }

  // optional string AttackHitSound = 42;
  if (has_attackhitsound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackhitsound().data(), this->attackhitsound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      42, this->attackhitsound(), output);
  }

  // optional float HitShakeCameraXRange = 44 [default = 0];
  if (has_hitshakecameraxrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->hitshakecameraxrange(), output);
  }

  // optional float HitShakeCameraYRange = 45 [default = 0];
  if (has_hitshakecamerayrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(45, this->hitshakecamerayrange(), output);
  }

  // optional sint32 HitShakeCameraCount = 46 [default = 1];
  if (has_hitshakecameracount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(46, this->hitshakecameracount(), output);
  }

  // optional float HitShakeCameraDurationTime = 47 [default = 0.1];
  if (has_hitshakecameradurationtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(47, this->hitshakecameradurationtime(), output);
  }

  // optional sint32 HiddenWeaponMode = 50 [default = 0];
  if (has_hiddenweaponmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(50, this->hiddenweaponmode(), output);
  }

  // optional string NextActionName = 51;
  if (has_nextactionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nextactionname().data(), this->nextactionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      51, this->nextactionname(), output);
  }

  // optional sint32 TranslateWrapMode = 52 [default = 0];
  if (has_translatewrapmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(52, this->translatewrapmode(), output);
  }

  // optional bool IsTriggerSecondAttack = 53 [default = false];
  if (has_istriggersecondattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->istriggersecondattack(), output);
  }

  // optional bool IsHitGround = 54 [default = false];
  if (has_ishitground()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(54, this->ishitground(), output);
  }

  // optional string SkillActionName = 55;
  if (has_skillactionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skillactionname().data(), this->skillactionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      55, this->skillactionname(), output);
  }

  // optional string WarningRes1 = 56;
  if (has_warningres1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->warningres1().data(), this->warningres1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      56, this->warningres1(), output);
  }

  // optional string WarningRes2 = 57;
  if (has_warningres2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->warningres2().data(), this->warningres2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      57, this->warningres2(), output);
  }

  // optional .ActionV3V1 WarningMaxScale = 58;
  if (has_warningmaxscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->warningmaxscale(), output);
  }

  // optional sint32 WarningScaleMode = 59 [default = 0];
  if (has_warningscalemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(59, this->warningscalemode(), output);
  }

  // optional sint32 WarningLockAxle = 60 [default = 0];
  if (has_warninglockaxle()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(60, this->warninglockaxle(), output);
  }

  // optional .ActionV3V1 WarningPositionOffset = 61;
  if (has_warningpositionoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->warningpositionoffset(), output);
  }

  // optional bool IsEffectFollow = 62 [default = false];
  if (has_iseffectfollow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(62, this->iseffectfollow(), output);
  }

  // optional bool IsWarningTarget = 63 [default = false];
  if (has_iswarningtarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(63, this->iswarningtarget(), output);
  }

  // optional float AttackBehaviourAirDurationTime = 64 [default = 0];
  if (has_attackbehaviourairdurationtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(64, this->attackbehaviourairdurationtime(), output);
  }

  // optional bool IsColliderDestroy = 66 [default = false];
  if (has_iscolliderdestroy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->iscolliderdestroy(), output);
  }

  // optional bool IsAttackRangeFollow = 70 [default = false];
  if (has_isattackrangefollow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(70, this->isattackrangefollow(), output);
  }

  // optional bool IsAnimationLoop = 71 [default = false];
  if (has_isanimationloop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(71, this->isanimationloop(), output);
  }

  // optional float TranslateAngle = 72 [default = 0];
  if (has_translateangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(72, this->translateangle(), output);
  }

  // optional bool IsAttackRangeShade = 73 [default = false];
  if (has_isattackrangeshade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(73, this->isattackrangeshade(), output);
  }

  // optional float AttackInterval = 75 [default = 0];
  if (has_attackinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(75, this->attackinterval(), output);
  }

  // optional bool IsShowAttackRect = 76 [default = false];
  if (has_isshowattackrect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(76, this->isshowattackrect(), output);
  }

  // optional float EffectBulletLaunchAngle = 78 [default = 0];
  if (has_effectbulletlaunchangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(78, this->effectbulletlaunchangle(), output);
  }

  // optional float EffectBulletSpeed = 79 [default = 0];
  if (has_effectbulletspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(79, this->effectbulletspeed(), output);
  }

  // optional .ActionRangeV1 EffectBulletLaunchTimeIntervalRange = 80;
  if (has_effectbulletlaunchtimeintervalrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      80, this->effectbulletlaunchtimeintervalrange(), output);
  }

  // optional sint32 EffectBulletMaxCout = 82 [default = 0];
  if (has_effectbulletmaxcout()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(82, this->effectbulletmaxcout(), output);
  }

  // optional .ActionRangeV1 EffectBulletLifeTimeInteralRange = 83;
  if (has_effectbulletlifetimeinteralrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      83, this->effectbulletlifetimeinteralrange(), output);
  }

  // optional sint32 EffectBulletType = 84 [default = 0];
  if (has_effectbullettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(84, this->effectbullettype(), output);
  }

  // repeated .ActionV3V1 EffectBulletInitPosList = 85;
  for (int i = 0; i < this->effectbulletinitposlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      85, this->effectbulletinitposlist(i), output);
  }

  // optional sint32 EffectBulletLaunchMaxCount = 86 [default = 0];
  if (has_effectbulletlaunchmaxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(86, this->effectbulletlaunchmaxcount(), output);
  }

  // optional bool EffectBulletIsFollow = 88 [default = false];
  if (has_effectbulletisfollow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(88, this->effectbulletisfollow(), output);
  }

  // optional float AttackBehaviourAirDownSpeed = 89 [default = 0];
  if (has_attackbehaviourairdownspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(89, this->attackbehaviourairdownspeed(), output);
  }

  // optional sint32 EffectDirectionLockType = 90 [default = 0];
  if (has_effectdirectionlocktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(90, this->effectdirectionlocktype(), output);
  }

  // optional bool IsIrregularityEffect = 91 [default = false];
  if (has_isirregularityeffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(91, this->isirregularityeffect(), output);
  }

  // optional .ActionV3V1 EffectSize = 92;
  if (has_effectsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      92, this->effectsize(), output);
  }

  // optional .ActionV3V1 AttackRangePostion = 93;
  if (has_attackrangepostion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      93, this->attackrangepostion(), output);
  }

  // optional .ActionV3V1 AttackRangeSize = 94;
  if (has_attackrangesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      94, this->attackrangesize(), output);
  }

  // optional sint32 AttackShape = 95 [default = 0];
  if (has_attackshape()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(95, this->attackshape(), output);
  }

  // optional .ActionV3V1 AttackCircleOrigin = 96;
  if (has_attackcircleorigin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      96, this->attackcircleorigin(), output);
  }

  // optional float AttackCircleRadius = 97 [default = 0];
  if (has_attackcircleradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(97, this->attackcircleradius(), output);
  }

  // optional float AttackCircleAngle = 98 [default = 0];
  if (has_attackcircleangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(98, this->attackcircleangle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionCommandInfoV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 CommandType = 2 [default = -1];
  if (has_commandtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->commandtype(), target);
  }

  // optional float StartTime = 3 [default = 0];
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->starttime(), target);
  }

  // optional float DurationTime = 4 [default = 0];
  if (has_durationtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->durationtime(), target);
  }

  // optional sint32 AnimationTriggerCondition = 5 [default = 0];
  if (has_animationtriggercondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->animationtriggercondition(), target);
  }

  // optional string EffectName = 6;
  if (has_effectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effectname().data(), this->effectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->effectname(), target);
  }

  // optional sint32 EffectBoneHook = 7 [default = 0];
  if (has_effectbonehook()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->effectbonehook(), target);
  }

  // optional .ActionV3V1 EffectPositionOffset = 8;
  if (has_effectpositionoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->effectpositionoffset(), target);
  }

  // optional bool EffectStayInLocalSpace = 9 [default = false];
  if (has_effectstayinlocalspace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->effectstayinlocalspace(), target);
  }

  // optional sint32 EffectControlObjectId = 10 [default = 0];
  if (has_effectcontrolobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->effectcontrolobjectid(), target);
  }

  // optional sint32 TranslateControlId = 11 [default = 0];
  if (has_translatecontrolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->translatecontrolid(), target);
  }

  // optional .ActionV3V1 TranslateOffset = 12;
  if (has_translateoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->translateoffset(), target);
  }

  // repeated sint32 ActorAttackPart = 13;
  for (int i = 0; i < this->actorattackpart_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(13, this->actorattackpart(i), target);
  }

  // optional sint32 TranslateEase = 14 [default = 1];
  if (has_translateease()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(14, this->translateease(), target);
  }

  // optional bool AttackShowHitEffect = 15 [default = false];
  if (has_attackshowhiteffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->attackshowhiteffect(), target);
  }

  // optional string AttackHitEffectName = 16;
  if (has_attackhiteffectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackhiteffectname().data(), this->attackhiteffectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->attackhiteffectname(), target);
  }

  // optional float AttackHitEffectDuration = 17 [default = 1.6];
  if (has_attackhiteffectduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->attackhiteffectduration(), target);
  }

  // optional sint32 AttackFragmentCount = 18 [default = 1];
  if (has_attackfragmentcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(18, this->attackfragmentcount(), target);
  }

  // optional float AttackFragmentIntervalTime = 19 [default = 0];
  if (has_attackfragmentintervaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->attackfragmentintervaltime(), target);
  }

  // optional float AttackDamageRadio = 20 [default = 1];
  if (has_attackdamageradio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->attackdamageradio(), target);
  }

  // optional bool BuffSelfActive = 21 [default = false];
  if (has_buffselfactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->buffselfactive(), target);
  }

  // optional bool BuffTargetActive = 22 [default = false];
  if (has_bufftargetactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->bufftargetactive(), target);
  }

  // optional float AttackBehaviourBackDistance = 24 [default = 0];
  if (has_attackbehaviourbackdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->attackbehaviourbackdistance(), target);
  }

  // optional float AttackBehaviourAirHeight = 25 [default = 0];
  if (has_attackbehaviourairheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->attackbehaviourairheight(), target);
  }

  // optional .ActionV3V1 EffectRotationOffset = 27;
  if (has_effectrotationoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->effectrotationoffset(), target);
  }

  // optional sint32 FlashControlObjectId = 28 [default = 0];
  if (has_flashcontrolobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(28, this->flashcontrolobjectid(), target);
  }

  // optional float AttackStiffTime = 29 [default = 0];
  if (has_attackstifftime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->attackstifftime(), target);
  }

  // optional bool AttackShake = 30 [default = false];
  if (has_attackshake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->attackshake(), target);
  }

  // optional bool AttackFlash = 31 [default = false];
  if (has_attackflash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->attackflash(), target);
  }

  // optional float AttackBehaviourBackSpeed = 32 [default = 1];
  if (has_attackbehaviourbackspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->attackbehaviourbackspeed(), target);
  }

  // optional float AttackBehaviourAirSpeed = 33 [default = 1];
  if (has_attackbehaviourairspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->attackbehaviourairspeed(), target);
  }

  // optional bool AttackBehaviourBack = 35 [default = false];
  if (has_attackbehaviourback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->attackbehaviourback(), target);
  }

  // optional bool AttackBehaviourAir = 36 [default = false];
  if (has_attackbehaviourair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->attackbehaviourair(), target);
  }

  // optional bool AttackBehaviourZoom = 37 [default = false];
  if (has_attackbehaviourzoom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->attackbehaviourzoom(), target);
  }

  // optional string SoundName = 38;
  if (has_soundname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soundname().data(), this->soundname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->soundname(), target);
  }

  // optional bool Trigger = 39 [default = false];
  if (has_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->trigger(), target);
  }

  // optional sint32 TriggerIndex = 40 [default = 1];
  if (has_triggerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(40, this->triggerindex(), target);
  }

  // optional sint32 AttackHitDummy = 41 [default = 0];
  if (has_attackhitdummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(41, this->attackhitdummy(), target);
  }

  // optional string AttackHitSound = 42;
  if (has_attackhitsound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackhitsound().data(), this->attackhitsound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->attackhitsound(), target);
  }

  // optional float HitShakeCameraXRange = 44 [default = 0];
  if (has_hitshakecameraxrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(44, this->hitshakecameraxrange(), target);
  }

  // optional float HitShakeCameraYRange = 45 [default = 0];
  if (has_hitshakecamerayrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(45, this->hitshakecamerayrange(), target);
  }

  // optional sint32 HitShakeCameraCount = 46 [default = 1];
  if (has_hitshakecameracount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(46, this->hitshakecameracount(), target);
  }

  // optional float HitShakeCameraDurationTime = 47 [default = 0.1];
  if (has_hitshakecameradurationtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(47, this->hitshakecameradurationtime(), target);
  }

  // optional sint32 HiddenWeaponMode = 50 [default = 0];
  if (has_hiddenweaponmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(50, this->hiddenweaponmode(), target);
  }

  // optional string NextActionName = 51;
  if (has_nextactionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nextactionname().data(), this->nextactionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->nextactionname(), target);
  }

  // optional sint32 TranslateWrapMode = 52 [default = 0];
  if (has_translatewrapmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(52, this->translatewrapmode(), target);
  }

  // optional bool IsTriggerSecondAttack = 53 [default = false];
  if (has_istriggersecondattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->istriggersecondattack(), target);
  }

  // optional bool IsHitGround = 54 [default = false];
  if (has_ishitground()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(54, this->ishitground(), target);
  }

  // optional string SkillActionName = 55;
  if (has_skillactionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skillactionname().data(), this->skillactionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        55, this->skillactionname(), target);
  }

  // optional string WarningRes1 = 56;
  if (has_warningres1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->warningres1().data(), this->warningres1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        56, this->warningres1(), target);
  }

  // optional string WarningRes2 = 57;
  if (has_warningres2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->warningres2().data(), this->warningres2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        57, this->warningres2(), target);
  }

  // optional .ActionV3V1 WarningMaxScale = 58;
  if (has_warningmaxscale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->warningmaxscale(), target);
  }

  // optional sint32 WarningScaleMode = 59 [default = 0];
  if (has_warningscalemode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(59, this->warningscalemode(), target);
  }

  // optional sint32 WarningLockAxle = 60 [default = 0];
  if (has_warninglockaxle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(60, this->warninglockaxle(), target);
  }

  // optional .ActionV3V1 WarningPositionOffset = 61;
  if (has_warningpositionoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->warningpositionoffset(), target);
  }

  // optional bool IsEffectFollow = 62 [default = false];
  if (has_iseffectfollow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(62, this->iseffectfollow(), target);
  }

  // optional bool IsWarningTarget = 63 [default = false];
  if (has_iswarningtarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(63, this->iswarningtarget(), target);
  }

  // optional float AttackBehaviourAirDurationTime = 64 [default = 0];
  if (has_attackbehaviourairdurationtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(64, this->attackbehaviourairdurationtime(), target);
  }

  // optional bool IsColliderDestroy = 66 [default = false];
  if (has_iscolliderdestroy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->iscolliderdestroy(), target);
  }

  // optional bool IsAttackRangeFollow = 70 [default = false];
  if (has_isattackrangefollow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(70, this->isattackrangefollow(), target);
  }

  // optional bool IsAnimationLoop = 71 [default = false];
  if (has_isanimationloop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(71, this->isanimationloop(), target);
  }

  // optional float TranslateAngle = 72 [default = 0];
  if (has_translateangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(72, this->translateangle(), target);
  }

  // optional bool IsAttackRangeShade = 73 [default = false];
  if (has_isattackrangeshade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(73, this->isattackrangeshade(), target);
  }

  // optional float AttackInterval = 75 [default = 0];
  if (has_attackinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(75, this->attackinterval(), target);
  }

  // optional bool IsShowAttackRect = 76 [default = false];
  if (has_isshowattackrect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(76, this->isshowattackrect(), target);
  }

  // optional float EffectBulletLaunchAngle = 78 [default = 0];
  if (has_effectbulletlaunchangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(78, this->effectbulletlaunchangle(), target);
  }

  // optional float EffectBulletSpeed = 79 [default = 0];
  if (has_effectbulletspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(79, this->effectbulletspeed(), target);
  }

  // optional .ActionRangeV1 EffectBulletLaunchTimeIntervalRange = 80;
  if (has_effectbulletlaunchtimeintervalrange()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        80, this->effectbulletlaunchtimeintervalrange(), target);
  }

  // optional sint32 EffectBulletMaxCout = 82 [default = 0];
  if (has_effectbulletmaxcout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(82, this->effectbulletmaxcout(), target);
  }

  // optional .ActionRangeV1 EffectBulletLifeTimeInteralRange = 83;
  if (has_effectbulletlifetimeinteralrange()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        83, this->effectbulletlifetimeinteralrange(), target);
  }

  // optional sint32 EffectBulletType = 84 [default = 0];
  if (has_effectbullettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(84, this->effectbullettype(), target);
  }

  // repeated .ActionV3V1 EffectBulletInitPosList = 85;
  for (int i = 0; i < this->effectbulletinitposlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        85, this->effectbulletinitposlist(i), target);
  }

  // optional sint32 EffectBulletLaunchMaxCount = 86 [default = 0];
  if (has_effectbulletlaunchmaxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(86, this->effectbulletlaunchmaxcount(), target);
  }

  // optional bool EffectBulletIsFollow = 88 [default = false];
  if (has_effectbulletisfollow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(88, this->effectbulletisfollow(), target);
  }

  // optional float AttackBehaviourAirDownSpeed = 89 [default = 0];
  if (has_attackbehaviourairdownspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(89, this->attackbehaviourairdownspeed(), target);
  }

  // optional sint32 EffectDirectionLockType = 90 [default = 0];
  if (has_effectdirectionlocktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(90, this->effectdirectionlocktype(), target);
  }

  // optional bool IsIrregularityEffect = 91 [default = false];
  if (has_isirregularityeffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(91, this->isirregularityeffect(), target);
  }

  // optional .ActionV3V1 EffectSize = 92;
  if (has_effectsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        92, this->effectsize(), target);
  }

  // optional .ActionV3V1 AttackRangePostion = 93;
  if (has_attackrangepostion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        93, this->attackrangepostion(), target);
  }

  // optional .ActionV3V1 AttackRangeSize = 94;
  if (has_attackrangesize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        94, this->attackrangesize(), target);
  }

  // optional sint32 AttackShape = 95 [default = 0];
  if (has_attackshape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(95, this->attackshape(), target);
  }

  // optional .ActionV3V1 AttackCircleOrigin = 96;
  if (has_attackcircleorigin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        96, this->attackcircleorigin(), target);
  }

  // optional float AttackCircleRadius = 97 [default = 0];
  if (has_attackcircleradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(97, this->attackcircleradius(), target);
  }

  // optional float AttackCircleAngle = 98 [default = 0];
  if (has_attackcircleangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(98, this->attackcircleangle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionCommandInfoV1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 CommandType = 2 [default = -1];
    if (has_commandtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->commandtype());
    }

    // optional float StartTime = 3 [default = 0];
    if (has_starttime()) {
      total_size += 1 + 4;
    }

    // optional float DurationTime = 4 [default = 0];
    if (has_durationtime()) {
      total_size += 1 + 4;
    }

    // optional sint32 AnimationTriggerCondition = 5 [default = 0];
    if (has_animationtriggercondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->animationtriggercondition());
    }

    // optional string EffectName = 6;
    if (has_effectname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effectname());
    }

    // optional sint32 EffectBoneHook = 7 [default = 0];
    if (has_effectbonehook()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->effectbonehook());
    }

    // optional .ActionV3V1 EffectPositionOffset = 8;
    if (has_effectpositionoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->effectpositionoffset());
    }

    // optional bool EffectStayInLocalSpace = 9 [default = false];
    if (has_effectstayinlocalspace()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 EffectControlObjectId = 10 [default = 0];
    if (has_effectcontrolobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->effectcontrolobjectid());
    }

    // optional sint32 TranslateControlId = 11 [default = 0];
    if (has_translatecontrolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->translatecontrolid());
    }

    // optional .ActionV3V1 TranslateOffset = 12;
    if (has_translateoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->translateoffset());
    }

    // optional sint32 TranslateEase = 14 [default = 1];
    if (has_translateease()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->translateease());
    }

    // optional bool AttackShowHitEffect = 15 [default = false];
    if (has_attackshowhiteffect()) {
      total_size += 1 + 1;
    }

    // optional string AttackHitEffectName = 16;
    if (has_attackhiteffectname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attackhiteffectname());
    }

    // optional float AttackHitEffectDuration = 17 [default = 1.6];
    if (has_attackhiteffectduration()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional sint32 AttackFragmentCount = 18 [default = 1];
    if (has_attackfragmentcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->attackfragmentcount());
    }

    // optional float AttackFragmentIntervalTime = 19 [default = 0];
    if (has_attackfragmentintervaltime()) {
      total_size += 2 + 4;
    }

    // optional float AttackDamageRadio = 20 [default = 1];
    if (has_attackdamageradio()) {
      total_size += 2 + 4;
    }

    // optional bool BuffSelfActive = 21 [default = false];
    if (has_buffselfactive()) {
      total_size += 2 + 1;
    }

    // optional bool BuffTargetActive = 22 [default = false];
    if (has_bufftargetactive()) {
      total_size += 2 + 1;
    }

    // optional float AttackBehaviourBackDistance = 24 [default = 0];
    if (has_attackbehaviourbackdistance()) {
      total_size += 2 + 4;
    }

    // optional float AttackBehaviourAirHeight = 25 [default = 0];
    if (has_attackbehaviourairheight()) {
      total_size += 2 + 4;
    }

    // optional .ActionV3V1 EffectRotationOffset = 27;
    if (has_effectrotationoffset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->effectrotationoffset());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional sint32 FlashControlObjectId = 28 [default = 0];
    if (has_flashcontrolobjectid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->flashcontrolobjectid());
    }

    // optional float AttackStiffTime = 29 [default = 0];
    if (has_attackstifftime()) {
      total_size += 2 + 4;
    }

    // optional bool AttackShake = 30 [default = false];
    if (has_attackshake()) {
      total_size += 2 + 1;
    }

    // optional bool AttackFlash = 31 [default = false];
    if (has_attackflash()) {
      total_size += 2 + 1;
    }

    // optional float AttackBehaviourBackSpeed = 32 [default = 1];
    if (has_attackbehaviourbackspeed()) {
      total_size += 2 + 4;
    }

    // optional float AttackBehaviourAirSpeed = 33 [default = 1];
    if (has_attackbehaviourairspeed()) {
      total_size += 2 + 4;
    }

    // optional bool AttackBehaviourBack = 35 [default = false];
    if (has_attackbehaviourback()) {
      total_size += 2 + 1;
    }

    // optional bool AttackBehaviourAir = 36 [default = false];
    if (has_attackbehaviourair()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool AttackBehaviourZoom = 37 [default = false];
    if (has_attackbehaviourzoom()) {
      total_size += 2 + 1;
    }

    // optional string SoundName = 38;
    if (has_soundname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soundname());
    }

    // optional bool Trigger = 39 [default = false];
    if (has_trigger()) {
      total_size += 2 + 1;
    }

    // optional sint32 TriggerIndex = 40 [default = 1];
    if (has_triggerindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->triggerindex());
    }

    // optional sint32 AttackHitDummy = 41 [default = 0];
    if (has_attackhitdummy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->attackhitdummy());
    }

    // optional string AttackHitSound = 42;
    if (has_attackhitsound()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attackhitsound());
    }

    // optional float HitShakeCameraXRange = 44 [default = 0];
    if (has_hitshakecameraxrange()) {
      total_size += 2 + 4;
    }

    // optional float HitShakeCameraYRange = 45 [default = 0];
    if (has_hitshakecamerayrange()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional sint32 HitShakeCameraCount = 46 [default = 1];
    if (has_hitshakecameracount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->hitshakecameracount());
    }

    // optional float HitShakeCameraDurationTime = 47 [default = 0.1];
    if (has_hitshakecameradurationtime()) {
      total_size += 2 + 4;
    }

    // optional sint32 HiddenWeaponMode = 50 [default = 0];
    if (has_hiddenweaponmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->hiddenweaponmode());
    }

    // optional string NextActionName = 51;
    if (has_nextactionname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nextactionname());
    }

    // optional sint32 TranslateWrapMode = 52 [default = 0];
    if (has_translatewrapmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->translatewrapmode());
    }

    // optional bool IsTriggerSecondAttack = 53 [default = false];
    if (has_istriggersecondattack()) {
      total_size += 2 + 1;
    }

    // optional bool IsHitGround = 54 [default = false];
    if (has_ishitground()) {
      total_size += 2 + 1;
    }

    // optional string SkillActionName = 55;
    if (has_skillactionname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skillactionname());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional string WarningRes1 = 56;
    if (has_warningres1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->warningres1());
    }

    // optional string WarningRes2 = 57;
    if (has_warningres2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->warningres2());
    }

    // optional .ActionV3V1 WarningMaxScale = 58;
    if (has_warningmaxscale()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->warningmaxscale());
    }

    // optional sint32 WarningScaleMode = 59 [default = 0];
    if (has_warningscalemode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->warningscalemode());
    }

    // optional sint32 WarningLockAxle = 60 [default = 0];
    if (has_warninglockaxle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->warninglockaxle());
    }

    // optional .ActionV3V1 WarningPositionOffset = 61;
    if (has_warningpositionoffset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->warningpositionoffset());
    }

    // optional bool IsEffectFollow = 62 [default = false];
    if (has_iseffectfollow()) {
      total_size += 2 + 1;
    }

    // optional bool IsWarningTarget = 63 [default = false];
    if (has_iswarningtarget()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional float AttackBehaviourAirDurationTime = 64 [default = 0];
    if (has_attackbehaviourairdurationtime()) {
      total_size += 2 + 4;
    }

    // optional bool IsColliderDestroy = 66 [default = false];
    if (has_iscolliderdestroy()) {
      total_size += 2 + 1;
    }

    // optional bool IsAttackRangeFollow = 70 [default = false];
    if (has_isattackrangefollow()) {
      total_size += 2 + 1;
    }

    // optional bool IsAnimationLoop = 71 [default = false];
    if (has_isanimationloop()) {
      total_size += 2 + 1;
    }

    // optional float TranslateAngle = 72 [default = 0];
    if (has_translateangle()) {
      total_size += 2 + 4;
    }

    // optional bool IsAttackRangeShade = 73 [default = false];
    if (has_isattackrangeshade()) {
      total_size += 2 + 1;
    }

    // optional float AttackInterval = 75 [default = 0];
    if (has_attackinterval()) {
      total_size += 2 + 4;
    }

    // optional bool IsShowAttackRect = 76 [default = false];
    if (has_isshowattackrect()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional float EffectBulletLaunchAngle = 78 [default = 0];
    if (has_effectbulletlaunchangle()) {
      total_size += 2 + 4;
    }

    // optional float EffectBulletSpeed = 79 [default = 0];
    if (has_effectbulletspeed()) {
      total_size += 2 + 4;
    }

    // optional .ActionRangeV1 EffectBulletLaunchTimeIntervalRange = 80;
    if (has_effectbulletlaunchtimeintervalrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->effectbulletlaunchtimeintervalrange());
    }

    // optional sint32 EffectBulletMaxCout = 82 [default = 0];
    if (has_effectbulletmaxcout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->effectbulletmaxcout());
    }

    // optional .ActionRangeV1 EffectBulletLifeTimeInteralRange = 83;
    if (has_effectbulletlifetimeinteralrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->effectbulletlifetimeinteralrange());
    }

    // optional sint32 EffectBulletType = 84 [default = 0];
    if (has_effectbullettype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->effectbullettype());
    }

    // optional sint32 EffectBulletLaunchMaxCount = 86 [default = 0];
    if (has_effectbulletlaunchmaxcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->effectbulletlaunchmaxcount());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional bool EffectBulletIsFollow = 88 [default = false];
    if (has_effectbulletisfollow()) {
      total_size += 2 + 1;
    }

    // optional float AttackBehaviourAirDownSpeed = 89 [default = 0];
    if (has_attackbehaviourairdownspeed()) {
      total_size += 2 + 4;
    }

    // optional sint32 EffectDirectionLockType = 90 [default = 0];
    if (has_effectdirectionlocktype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->effectdirectionlocktype());
    }

    // optional bool IsIrregularityEffect = 91 [default = false];
    if (has_isirregularityeffect()) {
      total_size += 2 + 1;
    }

    // optional .ActionV3V1 EffectSize = 92;
    if (has_effectsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->effectsize());
    }

    // optional .ActionV3V1 AttackRangePostion = 93;
    if (has_attackrangepostion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attackrangepostion());
    }

    // optional .ActionV3V1 AttackRangeSize = 94;
    if (has_attackrangesize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attackrangesize());
    }

    // optional sint32 AttackShape = 95 [default = 0];
    if (has_attackshape()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->attackshape());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional .ActionV3V1 AttackCircleOrigin = 96;
    if (has_attackcircleorigin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attackcircleorigin());
    }

    // optional float AttackCircleRadius = 97 [default = 0];
    if (has_attackcircleradius()) {
      total_size += 2 + 4;
    }

    // optional float AttackCircleAngle = 98 [default = 0];
    if (has_attackcircleangle()) {
      total_size += 2 + 4;
    }

  }
  // repeated sint32 ActorAttackPart = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->actorattackpart_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->actorattackpart(i));
    }
    total_size += 1 * this->actorattackpart_size() + data_size;
  }

  // repeated .ActionV3V1 EffectBulletInitPosList = 85;
  total_size += 2 * this->effectbulletinitposlist_size();
  for (int i = 0; i < this->effectbulletinitposlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effectbulletinitposlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionCommandInfoV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionCommandInfoV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionCommandInfoV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionCommandInfoV1::MergeFrom(const ActionCommandInfoV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  actorattackpart_.MergeFrom(from.actorattackpart_);
  effectbulletinitposlist_.MergeFrom(from.effectbulletinitposlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commandtype()) {
      set_commandtype(from.commandtype());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_durationtime()) {
      set_durationtime(from.durationtime());
    }
    if (from.has_animationtriggercondition()) {
      set_animationtriggercondition(from.animationtriggercondition());
    }
    if (from.has_effectname()) {
      set_effectname(from.effectname());
    }
    if (from.has_effectbonehook()) {
      set_effectbonehook(from.effectbonehook());
    }
    if (from.has_effectpositionoffset()) {
      mutable_effectpositionoffset()->::ActionV3V1::MergeFrom(from.effectpositionoffset());
    }
    if (from.has_effectstayinlocalspace()) {
      set_effectstayinlocalspace(from.effectstayinlocalspace());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_effectcontrolobjectid()) {
      set_effectcontrolobjectid(from.effectcontrolobjectid());
    }
    if (from.has_translatecontrolid()) {
      set_translatecontrolid(from.translatecontrolid());
    }
    if (from.has_translateoffset()) {
      mutable_translateoffset()->::ActionV3V1::MergeFrom(from.translateoffset());
    }
    if (from.has_translateease()) {
      set_translateease(from.translateease());
    }
    if (from.has_attackshowhiteffect()) {
      set_attackshowhiteffect(from.attackshowhiteffect());
    }
    if (from.has_attackhiteffectname()) {
      set_attackhiteffectname(from.attackhiteffectname());
    }
    if (from.has_attackhiteffectduration()) {
      set_attackhiteffectduration(from.attackhiteffectduration());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_attackfragmentcount()) {
      set_attackfragmentcount(from.attackfragmentcount());
    }
    if (from.has_attackfragmentintervaltime()) {
      set_attackfragmentintervaltime(from.attackfragmentintervaltime());
    }
    if (from.has_attackdamageradio()) {
      set_attackdamageradio(from.attackdamageradio());
    }
    if (from.has_buffselfactive()) {
      set_buffselfactive(from.buffselfactive());
    }
    if (from.has_bufftargetactive()) {
      set_bufftargetactive(from.bufftargetactive());
    }
    if (from.has_attackbehaviourbackdistance()) {
      set_attackbehaviourbackdistance(from.attackbehaviourbackdistance());
    }
    if (from.has_attackbehaviourairheight()) {
      set_attackbehaviourairheight(from.attackbehaviourairheight());
    }
    if (from.has_effectrotationoffset()) {
      mutable_effectrotationoffset()->::ActionV3V1::MergeFrom(from.effectrotationoffset());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_flashcontrolobjectid()) {
      set_flashcontrolobjectid(from.flashcontrolobjectid());
    }
    if (from.has_attackstifftime()) {
      set_attackstifftime(from.attackstifftime());
    }
    if (from.has_attackshake()) {
      set_attackshake(from.attackshake());
    }
    if (from.has_attackflash()) {
      set_attackflash(from.attackflash());
    }
    if (from.has_attackbehaviourbackspeed()) {
      set_attackbehaviourbackspeed(from.attackbehaviourbackspeed());
    }
    if (from.has_attackbehaviourairspeed()) {
      set_attackbehaviourairspeed(from.attackbehaviourairspeed());
    }
    if (from.has_attackbehaviourback()) {
      set_attackbehaviourback(from.attackbehaviourback());
    }
    if (from.has_attackbehaviourair()) {
      set_attackbehaviourair(from.attackbehaviourair());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_attackbehaviourzoom()) {
      set_attackbehaviourzoom(from.attackbehaviourzoom());
    }
    if (from.has_soundname()) {
      set_soundname(from.soundname());
    }
    if (from.has_trigger()) {
      set_trigger(from.trigger());
    }
    if (from.has_triggerindex()) {
      set_triggerindex(from.triggerindex());
    }
    if (from.has_attackhitdummy()) {
      set_attackhitdummy(from.attackhitdummy());
    }
    if (from.has_attackhitsound()) {
      set_attackhitsound(from.attackhitsound());
    }
    if (from.has_hitshakecameraxrange()) {
      set_hitshakecameraxrange(from.hitshakecameraxrange());
    }
    if (from.has_hitshakecamerayrange()) {
      set_hitshakecamerayrange(from.hitshakecamerayrange());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_hitshakecameracount()) {
      set_hitshakecameracount(from.hitshakecameracount());
    }
    if (from.has_hitshakecameradurationtime()) {
      set_hitshakecameradurationtime(from.hitshakecameradurationtime());
    }
    if (from.has_hiddenweaponmode()) {
      set_hiddenweaponmode(from.hiddenweaponmode());
    }
    if (from.has_nextactionname()) {
      set_nextactionname(from.nextactionname());
    }
    if (from.has_translatewrapmode()) {
      set_translatewrapmode(from.translatewrapmode());
    }
    if (from.has_istriggersecondattack()) {
      set_istriggersecondattack(from.istriggersecondattack());
    }
    if (from.has_ishitground()) {
      set_ishitground(from.ishitground());
    }
    if (from.has_skillactionname()) {
      set_skillactionname(from.skillactionname());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_warningres1()) {
      set_warningres1(from.warningres1());
    }
    if (from.has_warningres2()) {
      set_warningres2(from.warningres2());
    }
    if (from.has_warningmaxscale()) {
      mutable_warningmaxscale()->::ActionV3V1::MergeFrom(from.warningmaxscale());
    }
    if (from.has_warningscalemode()) {
      set_warningscalemode(from.warningscalemode());
    }
    if (from.has_warninglockaxle()) {
      set_warninglockaxle(from.warninglockaxle());
    }
    if (from.has_warningpositionoffset()) {
      mutable_warningpositionoffset()->::ActionV3V1::MergeFrom(from.warningpositionoffset());
    }
    if (from.has_iseffectfollow()) {
      set_iseffectfollow(from.iseffectfollow());
    }
    if (from.has_iswarningtarget()) {
      set_iswarningtarget(from.iswarningtarget());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_attackbehaviourairdurationtime()) {
      set_attackbehaviourairdurationtime(from.attackbehaviourairdurationtime());
    }
    if (from.has_iscolliderdestroy()) {
      set_iscolliderdestroy(from.iscolliderdestroy());
    }
    if (from.has_isattackrangefollow()) {
      set_isattackrangefollow(from.isattackrangefollow());
    }
    if (from.has_isanimationloop()) {
      set_isanimationloop(from.isanimationloop());
    }
    if (from.has_translateangle()) {
      set_translateangle(from.translateangle());
    }
    if (from.has_isattackrangeshade()) {
      set_isattackrangeshade(from.isattackrangeshade());
    }
    if (from.has_attackinterval()) {
      set_attackinterval(from.attackinterval());
    }
    if (from.has_isshowattackrect()) {
      set_isshowattackrect(from.isshowattackrect());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_effectbulletlaunchangle()) {
      set_effectbulletlaunchangle(from.effectbulletlaunchangle());
    }
    if (from.has_effectbulletspeed()) {
      set_effectbulletspeed(from.effectbulletspeed());
    }
    if (from.has_effectbulletlaunchtimeintervalrange()) {
      mutable_effectbulletlaunchtimeintervalrange()->::ActionRangeV1::MergeFrom(from.effectbulletlaunchtimeintervalrange());
    }
    if (from.has_effectbulletmaxcout()) {
      set_effectbulletmaxcout(from.effectbulletmaxcout());
    }
    if (from.has_effectbulletlifetimeinteralrange()) {
      mutable_effectbulletlifetimeinteralrange()->::ActionRangeV1::MergeFrom(from.effectbulletlifetimeinteralrange());
    }
    if (from.has_effectbullettype()) {
      set_effectbullettype(from.effectbullettype());
    }
    if (from.has_effectbulletlaunchmaxcount()) {
      set_effectbulletlaunchmaxcount(from.effectbulletlaunchmaxcount());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_effectbulletisfollow()) {
      set_effectbulletisfollow(from.effectbulletisfollow());
    }
    if (from.has_attackbehaviourairdownspeed()) {
      set_attackbehaviourairdownspeed(from.attackbehaviourairdownspeed());
    }
    if (from.has_effectdirectionlocktype()) {
      set_effectdirectionlocktype(from.effectdirectionlocktype());
    }
    if (from.has_isirregularityeffect()) {
      set_isirregularityeffect(from.isirregularityeffect());
    }
    if (from.has_effectsize()) {
      mutable_effectsize()->::ActionV3V1::MergeFrom(from.effectsize());
    }
    if (from.has_attackrangepostion()) {
      mutable_attackrangepostion()->::ActionV3V1::MergeFrom(from.attackrangepostion());
    }
    if (from.has_attackrangesize()) {
      mutable_attackrangesize()->::ActionV3V1::MergeFrom(from.attackrangesize());
    }
    if (from.has_attackshape()) {
      set_attackshape(from.attackshape());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_attackcircleorigin()) {
      mutable_attackcircleorigin()->::ActionV3V1::MergeFrom(from.attackcircleorigin());
    }
    if (from.has_attackcircleradius()) {
      set_attackcircleradius(from.attackcircleradius());
    }
    if (from.has_attackcircleangle()) {
      set_attackcircleangle(from.attackcircleangle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionCommandInfoV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionCommandInfoV1::CopyFrom(const ActionCommandInfoV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionCommandInfoV1::IsInitialized() const {

  return true;
}

void ActionCommandInfoV1::Swap(ActionCommandInfoV1* other) {
  if (other != this) {
    std::swap(commandtype_, other->commandtype_);
    std::swap(starttime_, other->starttime_);
    std::swap(durationtime_, other->durationtime_);
    std::swap(animationtriggercondition_, other->animationtriggercondition_);
    std::swap(effectname_, other->effectname_);
    std::swap(effectbonehook_, other->effectbonehook_);
    std::swap(effectpositionoffset_, other->effectpositionoffset_);
    std::swap(effectstayinlocalspace_, other->effectstayinlocalspace_);
    std::swap(effectcontrolobjectid_, other->effectcontrolobjectid_);
    std::swap(translatecontrolid_, other->translatecontrolid_);
    std::swap(translateoffset_, other->translateoffset_);
    actorattackpart_.Swap(&other->actorattackpart_);
    std::swap(translateease_, other->translateease_);
    std::swap(attackshowhiteffect_, other->attackshowhiteffect_);
    std::swap(attackhiteffectname_, other->attackhiteffectname_);
    std::swap(attackhiteffectduration_, other->attackhiteffectduration_);
    std::swap(attackfragmentcount_, other->attackfragmentcount_);
    std::swap(attackfragmentintervaltime_, other->attackfragmentintervaltime_);
    std::swap(attackdamageradio_, other->attackdamageradio_);
    std::swap(buffselfactive_, other->buffselfactive_);
    std::swap(bufftargetactive_, other->bufftargetactive_);
    std::swap(attackbehaviourbackdistance_, other->attackbehaviourbackdistance_);
    std::swap(attackbehaviourairheight_, other->attackbehaviourairheight_);
    std::swap(effectrotationoffset_, other->effectrotationoffset_);
    std::swap(flashcontrolobjectid_, other->flashcontrolobjectid_);
    std::swap(attackstifftime_, other->attackstifftime_);
    std::swap(attackshake_, other->attackshake_);
    std::swap(attackflash_, other->attackflash_);
    std::swap(attackbehaviourbackspeed_, other->attackbehaviourbackspeed_);
    std::swap(attackbehaviourairspeed_, other->attackbehaviourairspeed_);
    std::swap(attackbehaviourback_, other->attackbehaviourback_);
    std::swap(attackbehaviourair_, other->attackbehaviourair_);
    std::swap(attackbehaviourzoom_, other->attackbehaviourzoom_);
    std::swap(soundname_, other->soundname_);
    std::swap(trigger_, other->trigger_);
    std::swap(triggerindex_, other->triggerindex_);
    std::swap(attackhitdummy_, other->attackhitdummy_);
    std::swap(attackhitsound_, other->attackhitsound_);
    std::swap(hitshakecameraxrange_, other->hitshakecameraxrange_);
    std::swap(hitshakecamerayrange_, other->hitshakecamerayrange_);
    std::swap(hitshakecameracount_, other->hitshakecameracount_);
    std::swap(hitshakecameradurationtime_, other->hitshakecameradurationtime_);
    std::swap(hiddenweaponmode_, other->hiddenweaponmode_);
    std::swap(nextactionname_, other->nextactionname_);
    std::swap(translatewrapmode_, other->translatewrapmode_);
    std::swap(istriggersecondattack_, other->istriggersecondattack_);
    std::swap(ishitground_, other->ishitground_);
    std::swap(skillactionname_, other->skillactionname_);
    std::swap(warningres1_, other->warningres1_);
    std::swap(warningres2_, other->warningres2_);
    std::swap(warningmaxscale_, other->warningmaxscale_);
    std::swap(warningscalemode_, other->warningscalemode_);
    std::swap(warninglockaxle_, other->warninglockaxle_);
    std::swap(warningpositionoffset_, other->warningpositionoffset_);
    std::swap(iseffectfollow_, other->iseffectfollow_);
    std::swap(iswarningtarget_, other->iswarningtarget_);
    std::swap(attackbehaviourairdurationtime_, other->attackbehaviourairdurationtime_);
    std::swap(iscolliderdestroy_, other->iscolliderdestroy_);
    std::swap(isattackrangefollow_, other->isattackrangefollow_);
    std::swap(isanimationloop_, other->isanimationloop_);
    std::swap(translateangle_, other->translateangle_);
    std::swap(isattackrangeshade_, other->isattackrangeshade_);
    std::swap(attackinterval_, other->attackinterval_);
    std::swap(isshowattackrect_, other->isshowattackrect_);
    std::swap(effectbulletlaunchangle_, other->effectbulletlaunchangle_);
    std::swap(effectbulletspeed_, other->effectbulletspeed_);
    std::swap(effectbulletlaunchtimeintervalrange_, other->effectbulletlaunchtimeintervalrange_);
    std::swap(effectbulletmaxcout_, other->effectbulletmaxcout_);
    std::swap(effectbulletlifetimeinteralrange_, other->effectbulletlifetimeinteralrange_);
    std::swap(effectbullettype_, other->effectbullettype_);
    effectbulletinitposlist_.Swap(&other->effectbulletinitposlist_);
    std::swap(effectbulletlaunchmaxcount_, other->effectbulletlaunchmaxcount_);
    std::swap(effectbulletisfollow_, other->effectbulletisfollow_);
    std::swap(attackbehaviourairdownspeed_, other->attackbehaviourairdownspeed_);
    std::swap(effectdirectionlocktype_, other->effectdirectionlocktype_);
    std::swap(isirregularityeffect_, other->isirregularityeffect_);
    std::swap(effectsize_, other->effectsize_);
    std::swap(attackrangepostion_, other->attackrangepostion_);
    std::swap(attackrangesize_, other->attackrangesize_);
    std::swap(attackshape_, other->attackshape_);
    std::swap(attackcircleorigin_, other->attackcircleorigin_);
    std::swap(attackcircleradius_, other->attackcircleradius_);
    std::swap(attackcircleangle_, other->attackcircleangle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionCommandInfoV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionCommandInfoV1_descriptor_;
  metadata.reflection = ActionCommandInfoV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ActionUselessV1::ActionUselessV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionUselessV1::InitAsDefaultInstance() {
}

ActionUselessV1::ActionUselessV1(const ActionUselessV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionUselessV1::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionUselessV1::~ActionUselessV1() {
  SharedDtor();
}

void ActionUselessV1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionUselessV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionUselessV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionUselessV1_descriptor_;
}

const ActionUselessV1& ActionUselessV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActionV1Data_2eproto();
  return *default_instance_;
}

ActionUselessV1* ActionUselessV1::default_instance_ = NULL;

ActionUselessV1* ActionUselessV1::New() const {
  return new ActionUselessV1;
}

void ActionUselessV1::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionUselessV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ActionUselessV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionUselessV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionUselessV1::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionUselessV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionUselessV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionUselessV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionUselessV1::MergeFrom(const ActionUselessV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionUselessV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionUselessV1::CopyFrom(const ActionUselessV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionUselessV1::IsInitialized() const {

  return true;
}

void ActionUselessV1::Swap(ActionUselessV1* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionUselessV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionUselessV1_descriptor_;
  metadata.reflection = ActionUselessV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionV2V1::kXFieldNumber;
const int ActionV2V1::kYFieldNumber;
#endif  // !_MSC_VER

ActionV2V1::ActionV2V1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionV2V1::InitAsDefaultInstance() {
}

ActionV2V1::ActionV2V1(const ActionV2V1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionV2V1::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionV2V1::~ActionV2V1() {
  SharedDtor();
}

void ActionV2V1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionV2V1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionV2V1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionV2V1_descriptor_;
}

const ActionV2V1& ActionV2V1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActionV1Data_2eproto();
  return *default_instance_;
}

ActionV2V1* ActionV2V1::default_instance_ = NULL;

ActionV2V1* ActionV2V1::New() const {
  return new ActionV2V1;
}

void ActionV2V1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionV2V1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float X = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Y;
        break;
      }

      // optional float Y = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionV2V1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float X = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float Y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionV2V1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float X = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float Y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionV2V1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float X = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float Y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionV2V1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionV2V1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionV2V1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionV2V1::MergeFrom(const ActionV2V1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionV2V1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionV2V1::CopyFrom(const ActionV2V1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionV2V1::IsInitialized() const {

  return true;
}

void ActionV2V1::Swap(ActionV2V1* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionV2V1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionV2V1_descriptor_;
  metadata.reflection = ActionV2V1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionV3V1::kXFieldNumber;
const int ActionV3V1::kYFieldNumber;
const int ActionV3V1::kZFieldNumber;
#endif  // !_MSC_VER

ActionV3V1::ActionV3V1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionV3V1::InitAsDefaultInstance() {
}

ActionV3V1::ActionV3V1(const ActionV3V1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionV3V1::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionV3V1::~ActionV3V1() {
  SharedDtor();
}

void ActionV3V1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionV3V1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionV3V1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionV3V1_descriptor_;
}

const ActionV3V1& ActionV3V1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActionV1Data_2eproto();
  return *default_instance_;
}

ActionV3V1* ActionV3V1::default_instance_ = NULL;

ActionV3V1* ActionV3V1::New() const {
  return new ActionV3V1;
}

void ActionV3V1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionV3V1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float X = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Y;
        break;
      }

      // optional float Y = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Z;
        break;
      }

      // optional float Z = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionV3V1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float X = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float Y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float Z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionV3V1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float X = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float Y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float Z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionV3V1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float X = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float Y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float Z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionV3V1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionV3V1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionV3V1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionV3V1::MergeFrom(const ActionV3V1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionV3V1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionV3V1::CopyFrom(const ActionV3V1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionV3V1::IsInitialized() const {

  return true;
}

void ActionV3V1::Swap(ActionV3V1* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionV3V1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionV3V1_descriptor_;
  metadata.reflection = ActionV3V1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionRangeV1::kMinValueFieldNumber;
const int ActionRangeV1::kMaxValueFieldNumber;
#endif  // !_MSC_VER

ActionRangeV1::ActionRangeV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionRangeV1::InitAsDefaultInstance() {
}

ActionRangeV1::ActionRangeV1(const ActionRangeV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionRangeV1::SharedCtor() {
  _cached_size_ = 0;
  minvalue_ = 0;
  maxvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionRangeV1::~ActionRangeV1() {
  SharedDtor();
}

void ActionRangeV1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionRangeV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionRangeV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionRangeV1_descriptor_;
}

const ActionRangeV1& ActionRangeV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActionV1Data_2eproto();
  return *default_instance_;
}

ActionRangeV1* ActionRangeV1::default_instance_ = NULL;

ActionRangeV1* ActionRangeV1::New() const {
  return new ActionRangeV1;
}

void ActionRangeV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    minvalue_ = 0;
    maxvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionRangeV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float MinValue = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minvalue_)));
          set_has_minvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_MaxValue;
        break;
      }

      // optional float MaxValue = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MaxValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxvalue_)));
          set_has_maxvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionRangeV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float MinValue = 3 [default = 0];
  if (has_minvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->minvalue(), output);
  }

  // optional float MaxValue = 5 [default = 0];
  if (has_maxvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->maxvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionRangeV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float MinValue = 3 [default = 0];
  if (has_minvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->minvalue(), target);
  }

  // optional float MaxValue = 5 [default = 0];
  if (has_maxvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->maxvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionRangeV1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float MinValue = 3 [default = 0];
    if (has_minvalue()) {
      total_size += 1 + 4;
    }

    // optional float MaxValue = 5 [default = 0];
    if (has_maxvalue()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionRangeV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionRangeV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionRangeV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionRangeV1::MergeFrom(const ActionRangeV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minvalue()) {
      set_minvalue(from.minvalue());
    }
    if (from.has_maxvalue()) {
      set_maxvalue(from.maxvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionRangeV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionRangeV1::CopyFrom(const ActionRangeV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionRangeV1::IsInitialized() const {

  return true;
}

void ActionRangeV1::Swap(ActionRangeV1* other) {
  if (other != this) {
    std::swap(minvalue_, other->minvalue_);
    std::swap(maxvalue_, other->maxvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionRangeV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionRangeV1_descriptor_;
  metadata.reflection = ActionRangeV1_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
