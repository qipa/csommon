// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MMOMapDataV1Data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MMOMapDataV1Data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MMOMapDataBaseDataV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MMOMapDataBaseDataV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* MMOMapDataSpawnInfoV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MMOMapDataSpawnInfoV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* MMOMapDataMDVector3V1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MMOMapDataMDVector3V1_reflection_ = NULL;
const ::google::protobuf::Descriptor* MMOMapDataPortalInfoV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MMOMapDataPortalInfoV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* MMOMapDataNodeInfoV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MMOMapDataNodeInfoV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* MMOMapDataPointInfoV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MMOMapDataPointInfoV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* MMOMapDataInfoV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MMOMapDataInfoV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* MMOMapDataDefeatInfoV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MMOMapDataDefeatInfoV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* MMOMapDataUselessV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MMOMapDataUselessV1_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MMOMapDataV1Data_2eproto() {
  protobuf_AddDesc_MMOMapDataV1Data_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MMOMapDataV1Data.proto");
  GOOGLE_CHECK(file != NULL);
  MMOMapDataBaseDataV1_descriptor_ = file->message_type(0);
  static const int MMOMapDataBaseDataV1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataBaseDataV1, dataname_),
  };
  MMOMapDataBaseDataV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MMOMapDataBaseDataV1_descriptor_,
      MMOMapDataBaseDataV1::default_instance_,
      MMOMapDataBaseDataV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataBaseDataV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataBaseDataV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MMOMapDataBaseDataV1));
  MMOMapDataSpawnInfoV1_descriptor_ = file->message_type(1);
  static const int MMOMapDataSpawnInfoV1_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataSpawnInfoV1, spawnpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataSpawnInfoV1, spawnrot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataSpawnInfoV1, spawnindex_),
  };
  MMOMapDataSpawnInfoV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MMOMapDataSpawnInfoV1_descriptor_,
      MMOMapDataSpawnInfoV1::default_instance_,
      MMOMapDataSpawnInfoV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataSpawnInfoV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataSpawnInfoV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MMOMapDataSpawnInfoV1));
  MMOMapDataMDVector3V1_descriptor_ = file->message_type(2);
  static const int MMOMapDataMDVector3V1_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataMDVector3V1, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataMDVector3V1, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataMDVector3V1, z_),
  };
  MMOMapDataMDVector3V1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MMOMapDataMDVector3V1_descriptor_,
      MMOMapDataMDVector3V1::default_instance_,
      MMOMapDataMDVector3V1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataMDVector3V1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataMDVector3V1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MMOMapDataMDVector3V1));
  MMOMapDataPortalInfoV1_descriptor_ = file->message_type(3);
  static const int MMOMapDataPortalInfoV1_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPortalInfoV1, sourcepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPortalInfoV1, targetpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPortalInfoV1, targetrot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPortalInfoV1, targetdungeonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPortalInfoV1, targetspawnindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPortalInfoV1, portaltype_),
  };
  MMOMapDataPortalInfoV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MMOMapDataPortalInfoV1_descriptor_,
      MMOMapDataPortalInfoV1::default_instance_,
      MMOMapDataPortalInfoV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPortalInfoV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPortalInfoV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MMOMapDataPortalInfoV1));
  MMOMapDataNodeInfoV1_descriptor_ = file->message_type(4);
  static const int MMOMapDataNodeInfoV1_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataNodeInfoV1, relevancearea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataNodeInfoV1, passkillenemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataNodeInfoV1, passkillenemynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataNodeInfoV1, passtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataNodeInfoV1, passuseitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataNodeInfoV1, passuseitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataNodeInfoV1, passcollectitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataNodeInfoV1, passcollectitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataNodeInfoV1, passconditiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataNodeInfoV1, nodepos1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataNodeInfoV1, nodepos2_),
  };
  MMOMapDataNodeInfoV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MMOMapDataNodeInfoV1_descriptor_,
      MMOMapDataNodeInfoV1::default_instance_,
      MMOMapDataNodeInfoV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataNodeInfoV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataNodeInfoV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MMOMapDataNodeInfoV1));
  MMOMapDataPointInfoV1_descriptor_ = file->message_type(5);
  static const int MMOMapDataPointInfoV1_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPointInfoV1, spritetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPointInfoV1, spriteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPointInfoV1, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPointInfoV1, pointpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPointInfoV1, pointrot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPointInfoV1, refreshtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPointInfoV1, unlocktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPointInfoV1, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPointInfoV1, enemynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPointInfoV1, rebirthtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPointInfoV1, rebirthenemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPointInfoV1, rebirthenemynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPointInfoV1, afterdeathtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPointInfoV1, rebirthnum_),
  };
  MMOMapDataPointInfoV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MMOMapDataPointInfoV1_descriptor_,
      MMOMapDataPointInfoV1::default_instance_,
      MMOMapDataPointInfoV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPointInfoV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataPointInfoV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MMOMapDataPointInfoV1));
  MMOMapDataInfoV1_descriptor_ = file->message_type(6);
  static const int MMOMapDataInfoV1_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataInfoV1, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataInfoV1, spawnarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataInfoV1, portalarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataInfoV1, defeatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataInfoV1, nodearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataInfoV1, pointarr_),
  };
  MMOMapDataInfoV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MMOMapDataInfoV1_descriptor_,
      MMOMapDataInfoV1::default_instance_,
      MMOMapDataInfoV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataInfoV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataInfoV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MMOMapDataInfoV1));
  MMOMapDataDefeatInfoV1_descriptor_ = file->message_type(7);
  static const int MMOMapDataDefeatInfoV1_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataDefeatInfoV1, defeatconditionspared_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataDefeatInfoV1, defeatconditiontimeover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataDefeatInfoV1, defeatconditionhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataDefeatInfoV1, defeattime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataDefeatInfoV1, defeatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataDefeatInfoV1, defeathp_),
  };
  MMOMapDataDefeatInfoV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MMOMapDataDefeatInfoV1_descriptor_,
      MMOMapDataDefeatInfoV1::default_instance_,
      MMOMapDataDefeatInfoV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataDefeatInfoV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataDefeatInfoV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MMOMapDataDefeatInfoV1));
  MMOMapDataUselessV1_descriptor_ = file->message_type(8);
  static const int MMOMapDataUselessV1_offsets_[1] = {
  };
  MMOMapDataUselessV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MMOMapDataUselessV1_descriptor_,
      MMOMapDataUselessV1::default_instance_,
      MMOMapDataUselessV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataUselessV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MMOMapDataUselessV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MMOMapDataUselessV1));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MMOMapDataV1Data_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MMOMapDataBaseDataV1_descriptor_, &MMOMapDataBaseDataV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MMOMapDataSpawnInfoV1_descriptor_, &MMOMapDataSpawnInfoV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MMOMapDataMDVector3V1_descriptor_, &MMOMapDataMDVector3V1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MMOMapDataPortalInfoV1_descriptor_, &MMOMapDataPortalInfoV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MMOMapDataNodeInfoV1_descriptor_, &MMOMapDataNodeInfoV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MMOMapDataPointInfoV1_descriptor_, &MMOMapDataPointInfoV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MMOMapDataInfoV1_descriptor_, &MMOMapDataInfoV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MMOMapDataDefeatInfoV1_descriptor_, &MMOMapDataDefeatInfoV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MMOMapDataUselessV1_descriptor_, &MMOMapDataUselessV1::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MMOMapDataV1Data_2eproto() {
  delete MMOMapDataBaseDataV1::default_instance_;
  delete MMOMapDataBaseDataV1_reflection_;
  delete MMOMapDataSpawnInfoV1::default_instance_;
  delete MMOMapDataSpawnInfoV1_reflection_;
  delete MMOMapDataMDVector3V1::default_instance_;
  delete MMOMapDataMDVector3V1_reflection_;
  delete MMOMapDataPortalInfoV1::default_instance_;
  delete MMOMapDataPortalInfoV1_reflection_;
  delete MMOMapDataNodeInfoV1::default_instance_;
  delete MMOMapDataNodeInfoV1_reflection_;
  delete MMOMapDataPointInfoV1::default_instance_;
  delete MMOMapDataPointInfoV1_reflection_;
  delete MMOMapDataInfoV1::default_instance_;
  delete MMOMapDataInfoV1_reflection_;
  delete MMOMapDataDefeatInfoV1::default_instance_;
  delete MMOMapDataDefeatInfoV1_reflection_;
  delete MMOMapDataUselessV1::default_instance_;
  delete MMOMapDataUselessV1_reflection_;
}

void protobuf_AddDesc_MMOMapDataV1Data_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026MMOMapDataV1Data.proto\032\022PublicStruct.p"
    "roto\"(\n\024MMOMapDataBaseDataV1\022\020\n\010DataName"
    "\030\001 \001(\t\"\202\001\n\025MMOMapDataSpawnInfoV1\022(\n\010Spaw"
    "nPos\030\004 \001(\0132\026.MMOMapDataMDVector3V1\022(\n\010Sp"
    "awnRot\030\005 \001(\0132\026.MMOMapDataMDVector3V1\022\025\n\n"
    "SpawnIndex\030\006 \001(\021:\0010\"A\n\025MMOMapDataMDVecto"
    "r3V1\022\014\n\001X\030\001 \001(\002:\0010\022\014\n\001Y\030\002 \001(\002:\0010\022\014\n\001Z\030\003 "
    "\001(\002:\0010\"\351\001\n\026MMOMapDataPortalInfoV1\022)\n\tSou"
    "rcePos\030\001 \001(\0132\026.MMOMapDataMDVector3V1\022)\n\t"
    "TargetPos\030\002 \001(\0132\026.MMOMapDataMDVector3V1\022"
    ")\n\tTargetRot\030\003 \001(\0132\026.MMOMapDataMDVector3"
    "V1\022\032\n\017TargetDungeonID\030\004 \001(\021:\0010\022\033\n\020Target"
    "SpawnIndex\030\006 \001(\021:\0010\022\025\n\nPortalType\030\007 \001(\021:"
    "\0010\"\342\002\n\024MMOMapDataNodeInfoV1\022\030\n\rRelevance"
    "Area\030\010 \001(\021:\0010\022\032\n\017PassKillEnemyID\030\n \001(\021:\001"
    "0\022\033\n\020PassKillEnemyNum\030\013 \001(\021:\0010\022\023\n\010PassTi"
    "me\030\r \001(\021:\0010\022\030\n\rPassUseItemID\030\020 \001(\021:\0010\022\031\n"
    "\016PassUseItemNum\030\021 \001(\021:\0010\022\034\n\021PassCollectI"
    "temID\030\022 \001(\021:\0010\022\035\n\022PassCollectItemNum\030\023 \001"
    "(\021:\0010\022\034\n\021PassConditionType\030\024 \001(\021:\0010\022(\n\010N"
    "odePos1\030\025 \001(\0132\026.MMOMapDataMDVector3V1\022(\n"
    "\010NodePos2\030\026 \001(\0132\026.MMOMapDataMDVector3V1\""
    "\202\003\n\025MMOMapDataPointInfoV1\022\025\n\nSpriteType\030"
    "\001 \001(\021:\0010\022\023\n\010SpriteID\030\002 \001(\021:\0010\022\017\n\004Area\030\003 "
    "\001(\021:\0010\022(\n\010PointPos\030\004 \001(\0132\026.MMOMapDataMDV"
    "ector3V1\022(\n\010PointRot\030\005 \001(\0132\026.MMOMapDataM"
    "DVector3V1\022\026\n\013RefreshType\030\006 \001(\021:\0010\022\025\n\nUn"
    "lockTime\030\007 \001(\021:\0010\022\022\n\007EnemyID\030\010 \001(\021:\0010\022\023\n"
    "\010EnemyNum\030\t \001(\021:\0010\022\026\n\013RebirthType\030\n \001(\021:"
    "\0010\022\031\n\016RebirthEnemyID\030\013 \001(\021:\0010\022\032\n\017Rebirth"
    "EnemyNum\030\014 \001(\021:\0010\022\031\n\016AfterDeathTime\030\r \001("
    "\021:\0010\022\026\n\nRebirthNum\030\016 \001(\021:\002-1\"\220\002\n\020MMOMapD"
    "ataInfoV1\022\'\n\010BaseInfo\030\001 \001(\0132\025.MMOMapData"
    "BaseDataV1\022(\n\010SpawnArr\030\002 \003(\0132\026.MMOMapDat"
    "aSpawnInfoV1\022*\n\tPortalArr\030\003 \003(\0132\027.MMOMap"
    "DataPortalInfoV1\022+\n\nDefeatInfo\030\005 \001(\0132\027.M"
    "MOMapDataDefeatInfoV1\022&\n\007NodeArr\030\006 \003(\0132\025"
    ".MMOMapDataNodeInfoV1\022(\n\010PointArr\030\007 \003(\0132"
    "\026.MMOMapDataPointInfoV1\"\311\001\n\026MMOMapDataDe"
    "featInfoV1\022$\n\025DefeatConditionSpared\030\001 \001("
    "\010:\005false\022&\n\027DefeatConditionTimeOver\030\002 \001("
    "\010:\005false\022 \n\021DefeatConditionHP\030\003 \001(\010:\005fal"
    "se\022\025\n\nDefeatTime\030\004 \001(\021:\0010\022\023\n\010DefeatID\030\005 "
    "\001(\021:\0010\022\023\n\010DefeatHP\030\006 \001(\021:\0010\"\025\n\023MMOMapDat"
    "aUselessV1", 1770);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MMOMapDataV1Data.proto", &protobuf_RegisterTypes);
  MMOMapDataBaseDataV1::default_instance_ = new MMOMapDataBaseDataV1();
  MMOMapDataSpawnInfoV1::default_instance_ = new MMOMapDataSpawnInfoV1();
  MMOMapDataMDVector3V1::default_instance_ = new MMOMapDataMDVector3V1();
  MMOMapDataPortalInfoV1::default_instance_ = new MMOMapDataPortalInfoV1();
  MMOMapDataNodeInfoV1::default_instance_ = new MMOMapDataNodeInfoV1();
  MMOMapDataPointInfoV1::default_instance_ = new MMOMapDataPointInfoV1();
  MMOMapDataInfoV1::default_instance_ = new MMOMapDataInfoV1();
  MMOMapDataDefeatInfoV1::default_instance_ = new MMOMapDataDefeatInfoV1();
  MMOMapDataUselessV1::default_instance_ = new MMOMapDataUselessV1();
  MMOMapDataBaseDataV1::default_instance_->InitAsDefaultInstance();
  MMOMapDataSpawnInfoV1::default_instance_->InitAsDefaultInstance();
  MMOMapDataMDVector3V1::default_instance_->InitAsDefaultInstance();
  MMOMapDataPortalInfoV1::default_instance_->InitAsDefaultInstance();
  MMOMapDataNodeInfoV1::default_instance_->InitAsDefaultInstance();
  MMOMapDataPointInfoV1::default_instance_->InitAsDefaultInstance();
  MMOMapDataInfoV1::default_instance_->InitAsDefaultInstance();
  MMOMapDataDefeatInfoV1::default_instance_->InitAsDefaultInstance();
  MMOMapDataUselessV1::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MMOMapDataV1Data_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MMOMapDataV1Data_2eproto {
  StaticDescriptorInitializer_MMOMapDataV1Data_2eproto() {
    protobuf_AddDesc_MMOMapDataV1Data_2eproto();
  }
} static_descriptor_initializer_MMOMapDataV1Data_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MMOMapDataBaseDataV1::kDataNameFieldNumber;
#endif  // !_MSC_VER

MMOMapDataBaseDataV1::MMOMapDataBaseDataV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MMOMapDataBaseDataV1::InitAsDefaultInstance() {
}

MMOMapDataBaseDataV1::MMOMapDataBaseDataV1(const MMOMapDataBaseDataV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MMOMapDataBaseDataV1::SharedCtor() {
  _cached_size_ = 0;
  dataname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MMOMapDataBaseDataV1::~MMOMapDataBaseDataV1() {
  SharedDtor();
}

void MMOMapDataBaseDataV1::SharedDtor() {
  if (dataname_ != &::google::protobuf::internal::kEmptyString) {
    delete dataname_;
  }
  if (this != default_instance_) {
  }
}

void MMOMapDataBaseDataV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MMOMapDataBaseDataV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MMOMapDataBaseDataV1_descriptor_;
}

const MMOMapDataBaseDataV1& MMOMapDataBaseDataV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MMOMapDataV1Data_2eproto();
  return *default_instance_;
}

MMOMapDataBaseDataV1* MMOMapDataBaseDataV1::default_instance_ = NULL;

MMOMapDataBaseDataV1* MMOMapDataBaseDataV1::New() const {
  return new MMOMapDataBaseDataV1;
}

void MMOMapDataBaseDataV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dataname()) {
      if (dataname_ != &::google::protobuf::internal::kEmptyString) {
        dataname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MMOMapDataBaseDataV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DataName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dataname().data(), this->dataname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MMOMapDataBaseDataV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string DataName = 1;
  if (has_dataname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataname().data(), this->dataname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dataname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MMOMapDataBaseDataV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string DataName = 1;
  if (has_dataname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataname().data(), this->dataname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dataname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MMOMapDataBaseDataV1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string DataName = 1;
    if (has_dataname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MMOMapDataBaseDataV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MMOMapDataBaseDataV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MMOMapDataBaseDataV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MMOMapDataBaseDataV1::MergeFrom(const MMOMapDataBaseDataV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataname()) {
      set_dataname(from.dataname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MMOMapDataBaseDataV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MMOMapDataBaseDataV1::CopyFrom(const MMOMapDataBaseDataV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MMOMapDataBaseDataV1::IsInitialized() const {

  return true;
}

void MMOMapDataBaseDataV1::Swap(MMOMapDataBaseDataV1* other) {
  if (other != this) {
    std::swap(dataname_, other->dataname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MMOMapDataBaseDataV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MMOMapDataBaseDataV1_descriptor_;
  metadata.reflection = MMOMapDataBaseDataV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MMOMapDataSpawnInfoV1::kSpawnPosFieldNumber;
const int MMOMapDataSpawnInfoV1::kSpawnRotFieldNumber;
const int MMOMapDataSpawnInfoV1::kSpawnIndexFieldNumber;
#endif  // !_MSC_VER

MMOMapDataSpawnInfoV1::MMOMapDataSpawnInfoV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MMOMapDataSpawnInfoV1::InitAsDefaultInstance() {
  spawnpos_ = const_cast< ::MMOMapDataMDVector3V1*>(&::MMOMapDataMDVector3V1::default_instance());
  spawnrot_ = const_cast< ::MMOMapDataMDVector3V1*>(&::MMOMapDataMDVector3V1::default_instance());
}

MMOMapDataSpawnInfoV1::MMOMapDataSpawnInfoV1(const MMOMapDataSpawnInfoV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MMOMapDataSpawnInfoV1::SharedCtor() {
  _cached_size_ = 0;
  spawnpos_ = NULL;
  spawnrot_ = NULL;
  spawnindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MMOMapDataSpawnInfoV1::~MMOMapDataSpawnInfoV1() {
  SharedDtor();
}

void MMOMapDataSpawnInfoV1::SharedDtor() {
  if (this != default_instance_) {
    delete spawnpos_;
    delete spawnrot_;
  }
}

void MMOMapDataSpawnInfoV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MMOMapDataSpawnInfoV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MMOMapDataSpawnInfoV1_descriptor_;
}

const MMOMapDataSpawnInfoV1& MMOMapDataSpawnInfoV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MMOMapDataV1Data_2eproto();
  return *default_instance_;
}

MMOMapDataSpawnInfoV1* MMOMapDataSpawnInfoV1::default_instance_ = NULL;

MMOMapDataSpawnInfoV1* MMOMapDataSpawnInfoV1::New() const {
  return new MMOMapDataSpawnInfoV1;
}

void MMOMapDataSpawnInfoV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_spawnpos()) {
      if (spawnpos_ != NULL) spawnpos_->::MMOMapDataMDVector3V1::Clear();
    }
    if (has_spawnrot()) {
      if (spawnrot_ != NULL) spawnrot_->::MMOMapDataMDVector3V1::Clear();
    }
    spawnindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MMOMapDataSpawnInfoV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MMOMapDataMDVector3V1 SpawnPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spawnpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_SpawnRot;
        break;
      }

      // optional .MMOMapDataMDVector3V1 SpawnRot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SpawnRot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spawnrot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_SpawnIndex;
        break;
      }

      // optional sint32 SpawnIndex = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SpawnIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &spawnindex_)));
          set_has_spawnindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MMOMapDataSpawnInfoV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MMOMapDataMDVector3V1 SpawnPos = 4;
  if (has_spawnpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->spawnpos(), output);
  }

  // optional .MMOMapDataMDVector3V1 SpawnRot = 5;
  if (has_spawnrot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->spawnrot(), output);
  }

  // optional sint32 SpawnIndex = 6 [default = 0];
  if (has_spawnindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->spawnindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MMOMapDataSpawnInfoV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MMOMapDataMDVector3V1 SpawnPos = 4;
  if (has_spawnpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->spawnpos(), target);
  }

  // optional .MMOMapDataMDVector3V1 SpawnRot = 5;
  if (has_spawnrot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->spawnrot(), target);
  }

  // optional sint32 SpawnIndex = 6 [default = 0];
  if (has_spawnindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->spawnindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MMOMapDataSpawnInfoV1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MMOMapDataMDVector3V1 SpawnPos = 4;
    if (has_spawnpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spawnpos());
    }

    // optional .MMOMapDataMDVector3V1 SpawnRot = 5;
    if (has_spawnrot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spawnrot());
    }

    // optional sint32 SpawnIndex = 6 [default = 0];
    if (has_spawnindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->spawnindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MMOMapDataSpawnInfoV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MMOMapDataSpawnInfoV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MMOMapDataSpawnInfoV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MMOMapDataSpawnInfoV1::MergeFrom(const MMOMapDataSpawnInfoV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spawnpos()) {
      mutable_spawnpos()->::MMOMapDataMDVector3V1::MergeFrom(from.spawnpos());
    }
    if (from.has_spawnrot()) {
      mutable_spawnrot()->::MMOMapDataMDVector3V1::MergeFrom(from.spawnrot());
    }
    if (from.has_spawnindex()) {
      set_spawnindex(from.spawnindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MMOMapDataSpawnInfoV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MMOMapDataSpawnInfoV1::CopyFrom(const MMOMapDataSpawnInfoV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MMOMapDataSpawnInfoV1::IsInitialized() const {

  return true;
}

void MMOMapDataSpawnInfoV1::Swap(MMOMapDataSpawnInfoV1* other) {
  if (other != this) {
    std::swap(spawnpos_, other->spawnpos_);
    std::swap(spawnrot_, other->spawnrot_);
    std::swap(spawnindex_, other->spawnindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MMOMapDataSpawnInfoV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MMOMapDataSpawnInfoV1_descriptor_;
  metadata.reflection = MMOMapDataSpawnInfoV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MMOMapDataMDVector3V1::kXFieldNumber;
const int MMOMapDataMDVector3V1::kYFieldNumber;
const int MMOMapDataMDVector3V1::kZFieldNumber;
#endif  // !_MSC_VER

MMOMapDataMDVector3V1::MMOMapDataMDVector3V1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MMOMapDataMDVector3V1::InitAsDefaultInstance() {
}

MMOMapDataMDVector3V1::MMOMapDataMDVector3V1(const MMOMapDataMDVector3V1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MMOMapDataMDVector3V1::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MMOMapDataMDVector3V1::~MMOMapDataMDVector3V1() {
  SharedDtor();
}

void MMOMapDataMDVector3V1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MMOMapDataMDVector3V1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MMOMapDataMDVector3V1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MMOMapDataMDVector3V1_descriptor_;
}

const MMOMapDataMDVector3V1& MMOMapDataMDVector3V1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MMOMapDataV1Data_2eproto();
  return *default_instance_;
}

MMOMapDataMDVector3V1* MMOMapDataMDVector3V1::default_instance_ = NULL;

MMOMapDataMDVector3V1* MMOMapDataMDVector3V1::New() const {
  return new MMOMapDataMDVector3V1;
}

void MMOMapDataMDVector3V1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MMOMapDataMDVector3V1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float X = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Y;
        break;
      }

      // optional float Y = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Z;
        break;
      }

      // optional float Z = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MMOMapDataMDVector3V1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float X = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float Y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float Z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MMOMapDataMDVector3V1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float X = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float Y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float Z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MMOMapDataMDVector3V1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float X = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float Y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float Z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MMOMapDataMDVector3V1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MMOMapDataMDVector3V1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MMOMapDataMDVector3V1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MMOMapDataMDVector3V1::MergeFrom(const MMOMapDataMDVector3V1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MMOMapDataMDVector3V1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MMOMapDataMDVector3V1::CopyFrom(const MMOMapDataMDVector3V1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MMOMapDataMDVector3V1::IsInitialized() const {

  return true;
}

void MMOMapDataMDVector3V1::Swap(MMOMapDataMDVector3V1* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MMOMapDataMDVector3V1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MMOMapDataMDVector3V1_descriptor_;
  metadata.reflection = MMOMapDataMDVector3V1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MMOMapDataPortalInfoV1::kSourcePosFieldNumber;
const int MMOMapDataPortalInfoV1::kTargetPosFieldNumber;
const int MMOMapDataPortalInfoV1::kTargetRotFieldNumber;
const int MMOMapDataPortalInfoV1::kTargetDungeonIDFieldNumber;
const int MMOMapDataPortalInfoV1::kTargetSpawnIndexFieldNumber;
const int MMOMapDataPortalInfoV1::kPortalTypeFieldNumber;
#endif  // !_MSC_VER

MMOMapDataPortalInfoV1::MMOMapDataPortalInfoV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MMOMapDataPortalInfoV1::InitAsDefaultInstance() {
  sourcepos_ = const_cast< ::MMOMapDataMDVector3V1*>(&::MMOMapDataMDVector3V1::default_instance());
  targetpos_ = const_cast< ::MMOMapDataMDVector3V1*>(&::MMOMapDataMDVector3V1::default_instance());
  targetrot_ = const_cast< ::MMOMapDataMDVector3V1*>(&::MMOMapDataMDVector3V1::default_instance());
}

MMOMapDataPortalInfoV1::MMOMapDataPortalInfoV1(const MMOMapDataPortalInfoV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MMOMapDataPortalInfoV1::SharedCtor() {
  _cached_size_ = 0;
  sourcepos_ = NULL;
  targetpos_ = NULL;
  targetrot_ = NULL;
  targetdungeonid_ = 0;
  targetspawnindex_ = 0;
  portaltype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MMOMapDataPortalInfoV1::~MMOMapDataPortalInfoV1() {
  SharedDtor();
}

void MMOMapDataPortalInfoV1::SharedDtor() {
  if (this != default_instance_) {
    delete sourcepos_;
    delete targetpos_;
    delete targetrot_;
  }
}

void MMOMapDataPortalInfoV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MMOMapDataPortalInfoV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MMOMapDataPortalInfoV1_descriptor_;
}

const MMOMapDataPortalInfoV1& MMOMapDataPortalInfoV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MMOMapDataV1Data_2eproto();
  return *default_instance_;
}

MMOMapDataPortalInfoV1* MMOMapDataPortalInfoV1::default_instance_ = NULL;

MMOMapDataPortalInfoV1* MMOMapDataPortalInfoV1::New() const {
  return new MMOMapDataPortalInfoV1;
}

void MMOMapDataPortalInfoV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sourcepos()) {
      if (sourcepos_ != NULL) sourcepos_->::MMOMapDataMDVector3V1::Clear();
    }
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::MMOMapDataMDVector3V1::Clear();
    }
    if (has_targetrot()) {
      if (targetrot_ != NULL) targetrot_->::MMOMapDataMDVector3V1::Clear();
    }
    targetdungeonid_ = 0;
    targetspawnindex_ = 0;
    portaltype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MMOMapDataPortalInfoV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MMOMapDataMDVector3V1 SourcePos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sourcepos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TargetPos;
        break;
      }

      // optional .MMOMapDataMDVector3V1 TargetPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TargetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_TargetRot;
        break;
      }

      // optional .MMOMapDataMDVector3V1 TargetRot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TargetRot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetrot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TargetDungeonID;
        break;
      }

      // optional sint32 TargetDungeonID = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetDungeonID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &targetdungeonid_)));
          set_has_targetdungeonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TargetSpawnIndex;
        break;
      }

      // optional sint32 TargetSpawnIndex = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetSpawnIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &targetspawnindex_)));
          set_has_targetspawnindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_PortalType;
        break;
      }

      // optional sint32 PortalType = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PortalType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &portaltype_)));
          set_has_portaltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MMOMapDataPortalInfoV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MMOMapDataMDVector3V1 SourcePos = 1;
  if (has_sourcepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sourcepos(), output);
  }

  // optional .MMOMapDataMDVector3V1 TargetPos = 2;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targetpos(), output);
  }

  // optional .MMOMapDataMDVector3V1 TargetRot = 3;
  if (has_targetrot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->targetrot(), output);
  }

  // optional sint32 TargetDungeonID = 4 [default = 0];
  if (has_targetdungeonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->targetdungeonid(), output);
  }

  // optional sint32 TargetSpawnIndex = 6 [default = 0];
  if (has_targetspawnindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->targetspawnindex(), output);
  }

  // optional sint32 PortalType = 7 [default = 0];
  if (has_portaltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->portaltype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MMOMapDataPortalInfoV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MMOMapDataMDVector3V1 SourcePos = 1;
  if (has_sourcepos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sourcepos(), target);
  }

  // optional .MMOMapDataMDVector3V1 TargetPos = 2;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targetpos(), target);
  }

  // optional .MMOMapDataMDVector3V1 TargetRot = 3;
  if (has_targetrot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->targetrot(), target);
  }

  // optional sint32 TargetDungeonID = 4 [default = 0];
  if (has_targetdungeonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->targetdungeonid(), target);
  }

  // optional sint32 TargetSpawnIndex = 6 [default = 0];
  if (has_targetspawnindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->targetspawnindex(), target);
  }

  // optional sint32 PortalType = 7 [default = 0];
  if (has_portaltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->portaltype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MMOMapDataPortalInfoV1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MMOMapDataMDVector3V1 SourcePos = 1;
    if (has_sourcepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sourcepos());
    }

    // optional .MMOMapDataMDVector3V1 TargetPos = 2;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

    // optional .MMOMapDataMDVector3V1 TargetRot = 3;
    if (has_targetrot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetrot());
    }

    // optional sint32 TargetDungeonID = 4 [default = 0];
    if (has_targetdungeonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->targetdungeonid());
    }

    // optional sint32 TargetSpawnIndex = 6 [default = 0];
    if (has_targetspawnindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->targetspawnindex());
    }

    // optional sint32 PortalType = 7 [default = 0];
    if (has_portaltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->portaltype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MMOMapDataPortalInfoV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MMOMapDataPortalInfoV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MMOMapDataPortalInfoV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MMOMapDataPortalInfoV1::MergeFrom(const MMOMapDataPortalInfoV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourcepos()) {
      mutable_sourcepos()->::MMOMapDataMDVector3V1::MergeFrom(from.sourcepos());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::MMOMapDataMDVector3V1::MergeFrom(from.targetpos());
    }
    if (from.has_targetrot()) {
      mutable_targetrot()->::MMOMapDataMDVector3V1::MergeFrom(from.targetrot());
    }
    if (from.has_targetdungeonid()) {
      set_targetdungeonid(from.targetdungeonid());
    }
    if (from.has_targetspawnindex()) {
      set_targetspawnindex(from.targetspawnindex());
    }
    if (from.has_portaltype()) {
      set_portaltype(from.portaltype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MMOMapDataPortalInfoV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MMOMapDataPortalInfoV1::CopyFrom(const MMOMapDataPortalInfoV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MMOMapDataPortalInfoV1::IsInitialized() const {

  return true;
}

void MMOMapDataPortalInfoV1::Swap(MMOMapDataPortalInfoV1* other) {
  if (other != this) {
    std::swap(sourcepos_, other->sourcepos_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(targetrot_, other->targetrot_);
    std::swap(targetdungeonid_, other->targetdungeonid_);
    std::swap(targetspawnindex_, other->targetspawnindex_);
    std::swap(portaltype_, other->portaltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MMOMapDataPortalInfoV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MMOMapDataPortalInfoV1_descriptor_;
  metadata.reflection = MMOMapDataPortalInfoV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MMOMapDataNodeInfoV1::kRelevanceAreaFieldNumber;
const int MMOMapDataNodeInfoV1::kPassKillEnemyIDFieldNumber;
const int MMOMapDataNodeInfoV1::kPassKillEnemyNumFieldNumber;
const int MMOMapDataNodeInfoV1::kPassTimeFieldNumber;
const int MMOMapDataNodeInfoV1::kPassUseItemIDFieldNumber;
const int MMOMapDataNodeInfoV1::kPassUseItemNumFieldNumber;
const int MMOMapDataNodeInfoV1::kPassCollectItemIDFieldNumber;
const int MMOMapDataNodeInfoV1::kPassCollectItemNumFieldNumber;
const int MMOMapDataNodeInfoV1::kPassConditionTypeFieldNumber;
const int MMOMapDataNodeInfoV1::kNodePos1FieldNumber;
const int MMOMapDataNodeInfoV1::kNodePos2FieldNumber;
#endif  // !_MSC_VER

MMOMapDataNodeInfoV1::MMOMapDataNodeInfoV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MMOMapDataNodeInfoV1::InitAsDefaultInstance() {
  nodepos1_ = const_cast< ::MMOMapDataMDVector3V1*>(&::MMOMapDataMDVector3V1::default_instance());
  nodepos2_ = const_cast< ::MMOMapDataMDVector3V1*>(&::MMOMapDataMDVector3V1::default_instance());
}

MMOMapDataNodeInfoV1::MMOMapDataNodeInfoV1(const MMOMapDataNodeInfoV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MMOMapDataNodeInfoV1::SharedCtor() {
  _cached_size_ = 0;
  relevancearea_ = 0;
  passkillenemyid_ = 0;
  passkillenemynum_ = 0;
  passtime_ = 0;
  passuseitemid_ = 0;
  passuseitemnum_ = 0;
  passcollectitemid_ = 0;
  passcollectitemnum_ = 0;
  passconditiontype_ = 0;
  nodepos1_ = NULL;
  nodepos2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MMOMapDataNodeInfoV1::~MMOMapDataNodeInfoV1() {
  SharedDtor();
}

void MMOMapDataNodeInfoV1::SharedDtor() {
  if (this != default_instance_) {
    delete nodepos1_;
    delete nodepos2_;
  }
}

void MMOMapDataNodeInfoV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MMOMapDataNodeInfoV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MMOMapDataNodeInfoV1_descriptor_;
}

const MMOMapDataNodeInfoV1& MMOMapDataNodeInfoV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MMOMapDataV1Data_2eproto();
  return *default_instance_;
}

MMOMapDataNodeInfoV1* MMOMapDataNodeInfoV1::default_instance_ = NULL;

MMOMapDataNodeInfoV1* MMOMapDataNodeInfoV1::New() const {
  return new MMOMapDataNodeInfoV1;
}

void MMOMapDataNodeInfoV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    relevancearea_ = 0;
    passkillenemyid_ = 0;
    passkillenemynum_ = 0;
    passtime_ = 0;
    passuseitemid_ = 0;
    passuseitemnum_ = 0;
    passcollectitemid_ = 0;
    passcollectitemnum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    passconditiontype_ = 0;
    if (has_nodepos1()) {
      if (nodepos1_ != NULL) nodepos1_->::MMOMapDataMDVector3V1::Clear();
    }
    if (has_nodepos2()) {
      if (nodepos2_ != NULL) nodepos2_->::MMOMapDataMDVector3V1::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MMOMapDataNodeInfoV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 RelevanceArea = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &relevancearea_)));
          set_has_relevancearea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_PassKillEnemyID;
        break;
      }

      // optional sint32 PassKillEnemyID = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PassKillEnemyID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &passkillenemyid_)));
          set_has_passkillenemyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_PassKillEnemyNum;
        break;
      }

      // optional sint32 PassKillEnemyNum = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PassKillEnemyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &passkillenemynum_)));
          set_has_passkillenemynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_PassTime;
        break;
      }

      // optional sint32 PassTime = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PassTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &passtime_)));
          set_has_passtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_PassUseItemID;
        break;
      }

      // optional sint32 PassUseItemID = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PassUseItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &passuseitemid_)));
          set_has_passuseitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_PassUseItemNum;
        break;
      }

      // optional sint32 PassUseItemNum = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PassUseItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &passuseitemnum_)));
          set_has_passuseitemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_PassCollectItemID;
        break;
      }

      // optional sint32 PassCollectItemID = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PassCollectItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &passcollectitemid_)));
          set_has_passcollectitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_PassCollectItemNum;
        break;
      }

      // optional sint32 PassCollectItemNum = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PassCollectItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &passcollectitemnum_)));
          set_has_passcollectitemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_PassConditionType;
        break;
      }

      // optional sint32 PassConditionType = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PassConditionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &passconditiontype_)));
          set_has_passconditiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_NodePos1;
        break;
      }

      // optional .MMOMapDataMDVector3V1 NodePos1 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NodePos1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nodepos1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_NodePos2;
        break;
      }

      // optional .MMOMapDataMDVector3V1 NodePos2 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NodePos2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nodepos2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MMOMapDataNodeInfoV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 RelevanceArea = 8 [default = 0];
  if (has_relevancearea()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->relevancearea(), output);
  }

  // optional sint32 PassKillEnemyID = 10 [default = 0];
  if (has_passkillenemyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->passkillenemyid(), output);
  }

  // optional sint32 PassKillEnemyNum = 11 [default = 0];
  if (has_passkillenemynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->passkillenemynum(), output);
  }

  // optional sint32 PassTime = 13 [default = 0];
  if (has_passtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->passtime(), output);
  }

  // optional sint32 PassUseItemID = 16 [default = 0];
  if (has_passuseitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(16, this->passuseitemid(), output);
  }

  // optional sint32 PassUseItemNum = 17 [default = 0];
  if (has_passuseitemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(17, this->passuseitemnum(), output);
  }

  // optional sint32 PassCollectItemID = 18 [default = 0];
  if (has_passcollectitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(18, this->passcollectitemid(), output);
  }

  // optional sint32 PassCollectItemNum = 19 [default = 0];
  if (has_passcollectitemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(19, this->passcollectitemnum(), output);
  }

  // optional sint32 PassConditionType = 20 [default = 0];
  if (has_passconditiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(20, this->passconditiontype(), output);
  }

  // optional .MMOMapDataMDVector3V1 NodePos1 = 21;
  if (has_nodepos1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->nodepos1(), output);
  }

  // optional .MMOMapDataMDVector3V1 NodePos2 = 22;
  if (has_nodepos2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->nodepos2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MMOMapDataNodeInfoV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 RelevanceArea = 8 [default = 0];
  if (has_relevancearea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->relevancearea(), target);
  }

  // optional sint32 PassKillEnemyID = 10 [default = 0];
  if (has_passkillenemyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->passkillenemyid(), target);
  }

  // optional sint32 PassKillEnemyNum = 11 [default = 0];
  if (has_passkillenemynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->passkillenemynum(), target);
  }

  // optional sint32 PassTime = 13 [default = 0];
  if (has_passtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->passtime(), target);
  }

  // optional sint32 PassUseItemID = 16 [default = 0];
  if (has_passuseitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(16, this->passuseitemid(), target);
  }

  // optional sint32 PassUseItemNum = 17 [default = 0];
  if (has_passuseitemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(17, this->passuseitemnum(), target);
  }

  // optional sint32 PassCollectItemID = 18 [default = 0];
  if (has_passcollectitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(18, this->passcollectitemid(), target);
  }

  // optional sint32 PassCollectItemNum = 19 [default = 0];
  if (has_passcollectitemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(19, this->passcollectitemnum(), target);
  }

  // optional sint32 PassConditionType = 20 [default = 0];
  if (has_passconditiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(20, this->passconditiontype(), target);
  }

  // optional .MMOMapDataMDVector3V1 NodePos1 = 21;
  if (has_nodepos1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->nodepos1(), target);
  }

  // optional .MMOMapDataMDVector3V1 NodePos2 = 22;
  if (has_nodepos2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->nodepos2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MMOMapDataNodeInfoV1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 RelevanceArea = 8 [default = 0];
    if (has_relevancearea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->relevancearea());
    }

    // optional sint32 PassKillEnemyID = 10 [default = 0];
    if (has_passkillenemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->passkillenemyid());
    }

    // optional sint32 PassKillEnemyNum = 11 [default = 0];
    if (has_passkillenemynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->passkillenemynum());
    }

    // optional sint32 PassTime = 13 [default = 0];
    if (has_passtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->passtime());
    }

    // optional sint32 PassUseItemID = 16 [default = 0];
    if (has_passuseitemid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->passuseitemid());
    }

    // optional sint32 PassUseItemNum = 17 [default = 0];
    if (has_passuseitemnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->passuseitemnum());
    }

    // optional sint32 PassCollectItemID = 18 [default = 0];
    if (has_passcollectitemid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->passcollectitemid());
    }

    // optional sint32 PassCollectItemNum = 19 [default = 0];
    if (has_passcollectitemnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->passcollectitemnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 PassConditionType = 20 [default = 0];
    if (has_passconditiontype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->passconditiontype());
    }

    // optional .MMOMapDataMDVector3V1 NodePos1 = 21;
    if (has_nodepos1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodepos1());
    }

    // optional .MMOMapDataMDVector3V1 NodePos2 = 22;
    if (has_nodepos2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodepos2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MMOMapDataNodeInfoV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MMOMapDataNodeInfoV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MMOMapDataNodeInfoV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MMOMapDataNodeInfoV1::MergeFrom(const MMOMapDataNodeInfoV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_relevancearea()) {
      set_relevancearea(from.relevancearea());
    }
    if (from.has_passkillenemyid()) {
      set_passkillenemyid(from.passkillenemyid());
    }
    if (from.has_passkillenemynum()) {
      set_passkillenemynum(from.passkillenemynum());
    }
    if (from.has_passtime()) {
      set_passtime(from.passtime());
    }
    if (from.has_passuseitemid()) {
      set_passuseitemid(from.passuseitemid());
    }
    if (from.has_passuseitemnum()) {
      set_passuseitemnum(from.passuseitemnum());
    }
    if (from.has_passcollectitemid()) {
      set_passcollectitemid(from.passcollectitemid());
    }
    if (from.has_passcollectitemnum()) {
      set_passcollectitemnum(from.passcollectitemnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_passconditiontype()) {
      set_passconditiontype(from.passconditiontype());
    }
    if (from.has_nodepos1()) {
      mutable_nodepos1()->::MMOMapDataMDVector3V1::MergeFrom(from.nodepos1());
    }
    if (from.has_nodepos2()) {
      mutable_nodepos2()->::MMOMapDataMDVector3V1::MergeFrom(from.nodepos2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MMOMapDataNodeInfoV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MMOMapDataNodeInfoV1::CopyFrom(const MMOMapDataNodeInfoV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MMOMapDataNodeInfoV1::IsInitialized() const {

  return true;
}

void MMOMapDataNodeInfoV1::Swap(MMOMapDataNodeInfoV1* other) {
  if (other != this) {
    std::swap(relevancearea_, other->relevancearea_);
    std::swap(passkillenemyid_, other->passkillenemyid_);
    std::swap(passkillenemynum_, other->passkillenemynum_);
    std::swap(passtime_, other->passtime_);
    std::swap(passuseitemid_, other->passuseitemid_);
    std::swap(passuseitemnum_, other->passuseitemnum_);
    std::swap(passcollectitemid_, other->passcollectitemid_);
    std::swap(passcollectitemnum_, other->passcollectitemnum_);
    std::swap(passconditiontype_, other->passconditiontype_);
    std::swap(nodepos1_, other->nodepos1_);
    std::swap(nodepos2_, other->nodepos2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MMOMapDataNodeInfoV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MMOMapDataNodeInfoV1_descriptor_;
  metadata.reflection = MMOMapDataNodeInfoV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MMOMapDataPointInfoV1::kSpriteTypeFieldNumber;
const int MMOMapDataPointInfoV1::kSpriteIDFieldNumber;
const int MMOMapDataPointInfoV1::kAreaFieldNumber;
const int MMOMapDataPointInfoV1::kPointPosFieldNumber;
const int MMOMapDataPointInfoV1::kPointRotFieldNumber;
const int MMOMapDataPointInfoV1::kRefreshTypeFieldNumber;
const int MMOMapDataPointInfoV1::kUnlockTimeFieldNumber;
const int MMOMapDataPointInfoV1::kEnemyIDFieldNumber;
const int MMOMapDataPointInfoV1::kEnemyNumFieldNumber;
const int MMOMapDataPointInfoV1::kRebirthTypeFieldNumber;
const int MMOMapDataPointInfoV1::kRebirthEnemyIDFieldNumber;
const int MMOMapDataPointInfoV1::kRebirthEnemyNumFieldNumber;
const int MMOMapDataPointInfoV1::kAfterDeathTimeFieldNumber;
const int MMOMapDataPointInfoV1::kRebirthNumFieldNumber;
#endif  // !_MSC_VER

MMOMapDataPointInfoV1::MMOMapDataPointInfoV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MMOMapDataPointInfoV1::InitAsDefaultInstance() {
  pointpos_ = const_cast< ::MMOMapDataMDVector3V1*>(&::MMOMapDataMDVector3V1::default_instance());
  pointrot_ = const_cast< ::MMOMapDataMDVector3V1*>(&::MMOMapDataMDVector3V1::default_instance());
}

MMOMapDataPointInfoV1::MMOMapDataPointInfoV1(const MMOMapDataPointInfoV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MMOMapDataPointInfoV1::SharedCtor() {
  _cached_size_ = 0;
  spritetype_ = 0;
  spriteid_ = 0;
  area_ = 0;
  pointpos_ = NULL;
  pointrot_ = NULL;
  refreshtype_ = 0;
  unlocktime_ = 0;
  enemyid_ = 0;
  enemynum_ = 0;
  rebirthtype_ = 0;
  rebirthenemyid_ = 0;
  rebirthenemynum_ = 0;
  afterdeathtime_ = 0;
  rebirthnum_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MMOMapDataPointInfoV1::~MMOMapDataPointInfoV1() {
  SharedDtor();
}

void MMOMapDataPointInfoV1::SharedDtor() {
  if (this != default_instance_) {
    delete pointpos_;
    delete pointrot_;
  }
}

void MMOMapDataPointInfoV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MMOMapDataPointInfoV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MMOMapDataPointInfoV1_descriptor_;
}

const MMOMapDataPointInfoV1& MMOMapDataPointInfoV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MMOMapDataV1Data_2eproto();
  return *default_instance_;
}

MMOMapDataPointInfoV1* MMOMapDataPointInfoV1::default_instance_ = NULL;

MMOMapDataPointInfoV1* MMOMapDataPointInfoV1::New() const {
  return new MMOMapDataPointInfoV1;
}

void MMOMapDataPointInfoV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    spritetype_ = 0;
    spriteid_ = 0;
    area_ = 0;
    if (has_pointpos()) {
      if (pointpos_ != NULL) pointpos_->::MMOMapDataMDVector3V1::Clear();
    }
    if (has_pointrot()) {
      if (pointrot_ != NULL) pointrot_->::MMOMapDataMDVector3V1::Clear();
    }
    refreshtype_ = 0;
    unlocktime_ = 0;
    enemyid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    enemynum_ = 0;
    rebirthtype_ = 0;
    rebirthenemyid_ = 0;
    rebirthenemynum_ = 0;
    afterdeathtime_ = 0;
    rebirthnum_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MMOMapDataPointInfoV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 SpriteType = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &spritetype_)));
          set_has_spritetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SpriteID;
        break;
      }

      // optional sint32 SpriteID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SpriteID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &spriteid_)));
          set_has_spriteid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Area;
        break;
      }

      // optional sint32 Area = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &area_)));
          set_has_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_PointPos;
        break;
      }

      // optional .MMOMapDataMDVector3V1 PointPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PointPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pointpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_PointRot;
        break;
      }

      // optional .MMOMapDataMDVector3V1 PointRot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PointRot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pointrot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_RefreshType;
        break;
      }

      // optional sint32 RefreshType = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RefreshType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &refreshtype_)));
          set_has_refreshtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_UnlockTime;
        break;
      }

      // optional sint32 UnlockTime = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UnlockTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &unlocktime_)));
          set_has_unlocktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_EnemyID;
        break;
      }

      // optional sint32 EnemyID = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EnemyID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &enemyid_)));
          set_has_enemyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_EnemyNum;
        break;
      }

      // optional sint32 EnemyNum = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EnemyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &enemynum_)));
          set_has_enemynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_RebirthType;
        break;
      }

      // optional sint32 RebirthType = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RebirthType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rebirthtype_)));
          set_has_rebirthtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_RebirthEnemyID;
        break;
      }

      // optional sint32 RebirthEnemyID = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RebirthEnemyID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rebirthenemyid_)));
          set_has_rebirthenemyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_RebirthEnemyNum;
        break;
      }

      // optional sint32 RebirthEnemyNum = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RebirthEnemyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rebirthenemynum_)));
          set_has_rebirthenemynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_AfterDeathTime;
        break;
      }

      // optional sint32 AfterDeathTime = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AfterDeathTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &afterdeathtime_)));
          set_has_afterdeathtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_RebirthNum;
        break;
      }

      // optional sint32 RebirthNum = 14 [default = -1];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RebirthNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rebirthnum_)));
          set_has_rebirthnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MMOMapDataPointInfoV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 SpriteType = 1 [default = 0];
  if (has_spritetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->spritetype(), output);
  }

  // optional sint32 SpriteID = 2 [default = 0];
  if (has_spriteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->spriteid(), output);
  }

  // optional sint32 Area = 3 [default = 0];
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->area(), output);
  }

  // optional .MMOMapDataMDVector3V1 PointPos = 4;
  if (has_pointpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pointpos(), output);
  }

  // optional .MMOMapDataMDVector3V1 PointRot = 5;
  if (has_pointrot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pointrot(), output);
  }

  // optional sint32 RefreshType = 6 [default = 0];
  if (has_refreshtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->refreshtype(), output);
  }

  // optional sint32 UnlockTime = 7 [default = 0];
  if (has_unlocktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->unlocktime(), output);
  }

  // optional sint32 EnemyID = 8 [default = 0];
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->enemyid(), output);
  }

  // optional sint32 EnemyNum = 9 [default = 0];
  if (has_enemynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->enemynum(), output);
  }

  // optional sint32 RebirthType = 10 [default = 0];
  if (has_rebirthtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->rebirthtype(), output);
  }

  // optional sint32 RebirthEnemyID = 11 [default = 0];
  if (has_rebirthenemyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->rebirthenemyid(), output);
  }

  // optional sint32 RebirthEnemyNum = 12 [default = 0];
  if (has_rebirthenemynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->rebirthenemynum(), output);
  }

  // optional sint32 AfterDeathTime = 13 [default = 0];
  if (has_afterdeathtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->afterdeathtime(), output);
  }

  // optional sint32 RebirthNum = 14 [default = -1];
  if (has_rebirthnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(14, this->rebirthnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MMOMapDataPointInfoV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 SpriteType = 1 [default = 0];
  if (has_spritetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->spritetype(), target);
  }

  // optional sint32 SpriteID = 2 [default = 0];
  if (has_spriteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->spriteid(), target);
  }

  // optional sint32 Area = 3 [default = 0];
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->area(), target);
  }

  // optional .MMOMapDataMDVector3V1 PointPos = 4;
  if (has_pointpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pointpos(), target);
  }

  // optional .MMOMapDataMDVector3V1 PointRot = 5;
  if (has_pointrot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pointrot(), target);
  }

  // optional sint32 RefreshType = 6 [default = 0];
  if (has_refreshtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->refreshtype(), target);
  }

  // optional sint32 UnlockTime = 7 [default = 0];
  if (has_unlocktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->unlocktime(), target);
  }

  // optional sint32 EnemyID = 8 [default = 0];
  if (has_enemyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->enemyid(), target);
  }

  // optional sint32 EnemyNum = 9 [default = 0];
  if (has_enemynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->enemynum(), target);
  }

  // optional sint32 RebirthType = 10 [default = 0];
  if (has_rebirthtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->rebirthtype(), target);
  }

  // optional sint32 RebirthEnemyID = 11 [default = 0];
  if (has_rebirthenemyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->rebirthenemyid(), target);
  }

  // optional sint32 RebirthEnemyNum = 12 [default = 0];
  if (has_rebirthenemynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->rebirthenemynum(), target);
  }

  // optional sint32 AfterDeathTime = 13 [default = 0];
  if (has_afterdeathtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->afterdeathtime(), target);
  }

  // optional sint32 RebirthNum = 14 [default = -1];
  if (has_rebirthnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(14, this->rebirthnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MMOMapDataPointInfoV1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 SpriteType = 1 [default = 0];
    if (has_spritetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->spritetype());
    }

    // optional sint32 SpriteID = 2 [default = 0];
    if (has_spriteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->spriteid());
    }

    // optional sint32 Area = 3 [default = 0];
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->area());
    }

    // optional .MMOMapDataMDVector3V1 PointPos = 4;
    if (has_pointpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pointpos());
    }

    // optional .MMOMapDataMDVector3V1 PointRot = 5;
    if (has_pointrot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pointrot());
    }

    // optional sint32 RefreshType = 6 [default = 0];
    if (has_refreshtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->refreshtype());
    }

    // optional sint32 UnlockTime = 7 [default = 0];
    if (has_unlocktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->unlocktime());
    }

    // optional sint32 EnemyID = 8 [default = 0];
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->enemyid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 EnemyNum = 9 [default = 0];
    if (has_enemynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->enemynum());
    }

    // optional sint32 RebirthType = 10 [default = 0];
    if (has_rebirthtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rebirthtype());
    }

    // optional sint32 RebirthEnemyID = 11 [default = 0];
    if (has_rebirthenemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rebirthenemyid());
    }

    // optional sint32 RebirthEnemyNum = 12 [default = 0];
    if (has_rebirthenemynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rebirthenemynum());
    }

    // optional sint32 AfterDeathTime = 13 [default = 0];
    if (has_afterdeathtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->afterdeathtime());
    }

    // optional sint32 RebirthNum = 14 [default = -1];
    if (has_rebirthnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rebirthnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MMOMapDataPointInfoV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MMOMapDataPointInfoV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MMOMapDataPointInfoV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MMOMapDataPointInfoV1::MergeFrom(const MMOMapDataPointInfoV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spritetype()) {
      set_spritetype(from.spritetype());
    }
    if (from.has_spriteid()) {
      set_spriteid(from.spriteid());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
    if (from.has_pointpos()) {
      mutable_pointpos()->::MMOMapDataMDVector3V1::MergeFrom(from.pointpos());
    }
    if (from.has_pointrot()) {
      mutable_pointrot()->::MMOMapDataMDVector3V1::MergeFrom(from.pointrot());
    }
    if (from.has_refreshtype()) {
      set_refreshtype(from.refreshtype());
    }
    if (from.has_unlocktime()) {
      set_unlocktime(from.unlocktime());
    }
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_enemynum()) {
      set_enemynum(from.enemynum());
    }
    if (from.has_rebirthtype()) {
      set_rebirthtype(from.rebirthtype());
    }
    if (from.has_rebirthenemyid()) {
      set_rebirthenemyid(from.rebirthenemyid());
    }
    if (from.has_rebirthenemynum()) {
      set_rebirthenemynum(from.rebirthenemynum());
    }
    if (from.has_afterdeathtime()) {
      set_afterdeathtime(from.afterdeathtime());
    }
    if (from.has_rebirthnum()) {
      set_rebirthnum(from.rebirthnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MMOMapDataPointInfoV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MMOMapDataPointInfoV1::CopyFrom(const MMOMapDataPointInfoV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MMOMapDataPointInfoV1::IsInitialized() const {

  return true;
}

void MMOMapDataPointInfoV1::Swap(MMOMapDataPointInfoV1* other) {
  if (other != this) {
    std::swap(spritetype_, other->spritetype_);
    std::swap(spriteid_, other->spriteid_);
    std::swap(area_, other->area_);
    std::swap(pointpos_, other->pointpos_);
    std::swap(pointrot_, other->pointrot_);
    std::swap(refreshtype_, other->refreshtype_);
    std::swap(unlocktime_, other->unlocktime_);
    std::swap(enemyid_, other->enemyid_);
    std::swap(enemynum_, other->enemynum_);
    std::swap(rebirthtype_, other->rebirthtype_);
    std::swap(rebirthenemyid_, other->rebirthenemyid_);
    std::swap(rebirthenemynum_, other->rebirthenemynum_);
    std::swap(afterdeathtime_, other->afterdeathtime_);
    std::swap(rebirthnum_, other->rebirthnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MMOMapDataPointInfoV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MMOMapDataPointInfoV1_descriptor_;
  metadata.reflection = MMOMapDataPointInfoV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MMOMapDataInfoV1::kBaseInfoFieldNumber;
const int MMOMapDataInfoV1::kSpawnArrFieldNumber;
const int MMOMapDataInfoV1::kPortalArrFieldNumber;
const int MMOMapDataInfoV1::kDefeatInfoFieldNumber;
const int MMOMapDataInfoV1::kNodeArrFieldNumber;
const int MMOMapDataInfoV1::kPointArrFieldNumber;
#endif  // !_MSC_VER

MMOMapDataInfoV1::MMOMapDataInfoV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MMOMapDataInfoV1::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::MMOMapDataBaseDataV1*>(&::MMOMapDataBaseDataV1::default_instance());
  defeatinfo_ = const_cast< ::MMOMapDataDefeatInfoV1*>(&::MMOMapDataDefeatInfoV1::default_instance());
}

MMOMapDataInfoV1::MMOMapDataInfoV1(const MMOMapDataInfoV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MMOMapDataInfoV1::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  defeatinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MMOMapDataInfoV1::~MMOMapDataInfoV1() {
  SharedDtor();
}

void MMOMapDataInfoV1::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete defeatinfo_;
  }
}

void MMOMapDataInfoV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MMOMapDataInfoV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MMOMapDataInfoV1_descriptor_;
}

const MMOMapDataInfoV1& MMOMapDataInfoV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MMOMapDataV1Data_2eproto();
  return *default_instance_;
}

MMOMapDataInfoV1* MMOMapDataInfoV1::default_instance_ = NULL;

MMOMapDataInfoV1* MMOMapDataInfoV1::New() const {
  return new MMOMapDataInfoV1;
}

void MMOMapDataInfoV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::MMOMapDataBaseDataV1::Clear();
    }
    if (has_defeatinfo()) {
      if (defeatinfo_ != NULL) defeatinfo_->::MMOMapDataDefeatInfoV1::Clear();
    }
  }
  spawnarr_.Clear();
  portalarr_.Clear();
  nodearr_.Clear();
  pointarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MMOMapDataInfoV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MMOMapDataBaseDataV1 BaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SpawnArr;
        break;
      }

      // repeated .MMOMapDataSpawnInfoV1 SpawnArr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SpawnArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spawnarr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SpawnArr;
        if (input->ExpectTag(26)) goto parse_PortalArr;
        break;
      }

      // repeated .MMOMapDataPortalInfoV1 PortalArr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PortalArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_portalarr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_PortalArr;
        if (input->ExpectTag(42)) goto parse_DefeatInfo;
        break;
      }

      // optional .MMOMapDataDefeatInfoV1 DefeatInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DefeatInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defeatinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_NodeArr;
        break;
      }

      // repeated .MMOMapDataNodeInfoV1 NodeArr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NodeArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodearr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_NodeArr;
        if (input->ExpectTag(58)) goto parse_PointArr;
        break;
      }

      // repeated .MMOMapDataPointInfoV1 PointArr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PointArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pointarr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_PointArr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MMOMapDataInfoV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MMOMapDataBaseDataV1 BaseInfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // repeated .MMOMapDataSpawnInfoV1 SpawnArr = 2;
  for (int i = 0; i < this->spawnarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->spawnarr(i), output);
  }

  // repeated .MMOMapDataPortalInfoV1 PortalArr = 3;
  for (int i = 0; i < this->portalarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->portalarr(i), output);
  }

  // optional .MMOMapDataDefeatInfoV1 DefeatInfo = 5;
  if (has_defeatinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->defeatinfo(), output);
  }

  // repeated .MMOMapDataNodeInfoV1 NodeArr = 6;
  for (int i = 0; i < this->nodearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->nodearr(i), output);
  }

  // repeated .MMOMapDataPointInfoV1 PointArr = 7;
  for (int i = 0; i < this->pointarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pointarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MMOMapDataInfoV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MMOMapDataBaseDataV1 BaseInfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // repeated .MMOMapDataSpawnInfoV1 SpawnArr = 2;
  for (int i = 0; i < this->spawnarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->spawnarr(i), target);
  }

  // repeated .MMOMapDataPortalInfoV1 PortalArr = 3;
  for (int i = 0; i < this->portalarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->portalarr(i), target);
  }

  // optional .MMOMapDataDefeatInfoV1 DefeatInfo = 5;
  if (has_defeatinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->defeatinfo(), target);
  }

  // repeated .MMOMapDataNodeInfoV1 NodeArr = 6;
  for (int i = 0; i < this->nodearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->nodearr(i), target);
  }

  // repeated .MMOMapDataPointInfoV1 PointArr = 7;
  for (int i = 0; i < this->pointarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pointarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MMOMapDataInfoV1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MMOMapDataBaseDataV1 BaseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .MMOMapDataDefeatInfoV1 DefeatInfo = 5;
    if (has_defeatinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defeatinfo());
    }

  }
  // repeated .MMOMapDataSpawnInfoV1 SpawnArr = 2;
  total_size += 1 * this->spawnarr_size();
  for (int i = 0; i < this->spawnarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spawnarr(i));
  }

  // repeated .MMOMapDataPortalInfoV1 PortalArr = 3;
  total_size += 1 * this->portalarr_size();
  for (int i = 0; i < this->portalarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->portalarr(i));
  }

  // repeated .MMOMapDataNodeInfoV1 NodeArr = 6;
  total_size += 1 * this->nodearr_size();
  for (int i = 0; i < this->nodearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodearr(i));
  }

  // repeated .MMOMapDataPointInfoV1 PointArr = 7;
  total_size += 1 * this->pointarr_size();
  for (int i = 0; i < this->pointarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MMOMapDataInfoV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MMOMapDataInfoV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MMOMapDataInfoV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MMOMapDataInfoV1::MergeFrom(const MMOMapDataInfoV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  spawnarr_.MergeFrom(from.spawnarr_);
  portalarr_.MergeFrom(from.portalarr_);
  nodearr_.MergeFrom(from.nodearr_);
  pointarr_.MergeFrom(from.pointarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::MMOMapDataBaseDataV1::MergeFrom(from.baseinfo());
    }
    if (from.has_defeatinfo()) {
      mutable_defeatinfo()->::MMOMapDataDefeatInfoV1::MergeFrom(from.defeatinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MMOMapDataInfoV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MMOMapDataInfoV1::CopyFrom(const MMOMapDataInfoV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MMOMapDataInfoV1::IsInitialized() const {

  return true;
}

void MMOMapDataInfoV1::Swap(MMOMapDataInfoV1* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    spawnarr_.Swap(&other->spawnarr_);
    portalarr_.Swap(&other->portalarr_);
    std::swap(defeatinfo_, other->defeatinfo_);
    nodearr_.Swap(&other->nodearr_);
    pointarr_.Swap(&other->pointarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MMOMapDataInfoV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MMOMapDataInfoV1_descriptor_;
  metadata.reflection = MMOMapDataInfoV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MMOMapDataDefeatInfoV1::kDefeatConditionSparedFieldNumber;
const int MMOMapDataDefeatInfoV1::kDefeatConditionTimeOverFieldNumber;
const int MMOMapDataDefeatInfoV1::kDefeatConditionHPFieldNumber;
const int MMOMapDataDefeatInfoV1::kDefeatTimeFieldNumber;
const int MMOMapDataDefeatInfoV1::kDefeatIDFieldNumber;
const int MMOMapDataDefeatInfoV1::kDefeatHPFieldNumber;
#endif  // !_MSC_VER

MMOMapDataDefeatInfoV1::MMOMapDataDefeatInfoV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MMOMapDataDefeatInfoV1::InitAsDefaultInstance() {
}

MMOMapDataDefeatInfoV1::MMOMapDataDefeatInfoV1(const MMOMapDataDefeatInfoV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MMOMapDataDefeatInfoV1::SharedCtor() {
  _cached_size_ = 0;
  defeatconditionspared_ = false;
  defeatconditiontimeover_ = false;
  defeatconditionhp_ = false;
  defeattime_ = 0;
  defeatid_ = 0;
  defeathp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MMOMapDataDefeatInfoV1::~MMOMapDataDefeatInfoV1() {
  SharedDtor();
}

void MMOMapDataDefeatInfoV1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MMOMapDataDefeatInfoV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MMOMapDataDefeatInfoV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MMOMapDataDefeatInfoV1_descriptor_;
}

const MMOMapDataDefeatInfoV1& MMOMapDataDefeatInfoV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MMOMapDataV1Data_2eproto();
  return *default_instance_;
}

MMOMapDataDefeatInfoV1* MMOMapDataDefeatInfoV1::default_instance_ = NULL;

MMOMapDataDefeatInfoV1* MMOMapDataDefeatInfoV1::New() const {
  return new MMOMapDataDefeatInfoV1;
}

void MMOMapDataDefeatInfoV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    defeatconditionspared_ = false;
    defeatconditiontimeover_ = false;
    defeatconditionhp_ = false;
    defeattime_ = 0;
    defeatid_ = 0;
    defeathp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MMOMapDataDefeatInfoV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool DefeatConditionSpared = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &defeatconditionspared_)));
          set_has_defeatconditionspared();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DefeatConditionTimeOver;
        break;
      }

      // optional bool DefeatConditionTimeOver = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefeatConditionTimeOver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &defeatconditiontimeover_)));
          set_has_defeatconditiontimeover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DefeatConditionHP;
        break;
      }

      // optional bool DefeatConditionHP = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefeatConditionHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &defeatconditionhp_)));
          set_has_defeatconditionhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_DefeatTime;
        break;
      }

      // optional sint32 DefeatTime = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefeatTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &defeattime_)));
          set_has_defeattime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DefeatID;
        break;
      }

      // optional sint32 DefeatID = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefeatID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &defeatid_)));
          set_has_defeatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DefeatHP;
        break;
      }

      // optional sint32 DefeatHP = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefeatHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &defeathp_)));
          set_has_defeathp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MMOMapDataDefeatInfoV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool DefeatConditionSpared = 1 [default = false];
  if (has_defeatconditionspared()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->defeatconditionspared(), output);
  }

  // optional bool DefeatConditionTimeOver = 2 [default = false];
  if (has_defeatconditiontimeover()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->defeatconditiontimeover(), output);
  }

  // optional bool DefeatConditionHP = 3 [default = false];
  if (has_defeatconditionhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->defeatconditionhp(), output);
  }

  // optional sint32 DefeatTime = 4 [default = 0];
  if (has_defeattime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->defeattime(), output);
  }

  // optional sint32 DefeatID = 5 [default = 0];
  if (has_defeatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->defeatid(), output);
  }

  // optional sint32 DefeatHP = 6 [default = 0];
  if (has_defeathp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->defeathp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MMOMapDataDefeatInfoV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool DefeatConditionSpared = 1 [default = false];
  if (has_defeatconditionspared()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->defeatconditionspared(), target);
  }

  // optional bool DefeatConditionTimeOver = 2 [default = false];
  if (has_defeatconditiontimeover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->defeatconditiontimeover(), target);
  }

  // optional bool DefeatConditionHP = 3 [default = false];
  if (has_defeatconditionhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->defeatconditionhp(), target);
  }

  // optional sint32 DefeatTime = 4 [default = 0];
  if (has_defeattime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->defeattime(), target);
  }

  // optional sint32 DefeatID = 5 [default = 0];
  if (has_defeatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->defeatid(), target);
  }

  // optional sint32 DefeatHP = 6 [default = 0];
  if (has_defeathp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->defeathp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MMOMapDataDefeatInfoV1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool DefeatConditionSpared = 1 [default = false];
    if (has_defeatconditionspared()) {
      total_size += 1 + 1;
    }

    // optional bool DefeatConditionTimeOver = 2 [default = false];
    if (has_defeatconditiontimeover()) {
      total_size += 1 + 1;
    }

    // optional bool DefeatConditionHP = 3 [default = false];
    if (has_defeatconditionhp()) {
      total_size += 1 + 1;
    }

    // optional sint32 DefeatTime = 4 [default = 0];
    if (has_defeattime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->defeattime());
    }

    // optional sint32 DefeatID = 5 [default = 0];
    if (has_defeatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->defeatid());
    }

    // optional sint32 DefeatHP = 6 [default = 0];
    if (has_defeathp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->defeathp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MMOMapDataDefeatInfoV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MMOMapDataDefeatInfoV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MMOMapDataDefeatInfoV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MMOMapDataDefeatInfoV1::MergeFrom(const MMOMapDataDefeatInfoV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_defeatconditionspared()) {
      set_defeatconditionspared(from.defeatconditionspared());
    }
    if (from.has_defeatconditiontimeover()) {
      set_defeatconditiontimeover(from.defeatconditiontimeover());
    }
    if (from.has_defeatconditionhp()) {
      set_defeatconditionhp(from.defeatconditionhp());
    }
    if (from.has_defeattime()) {
      set_defeattime(from.defeattime());
    }
    if (from.has_defeatid()) {
      set_defeatid(from.defeatid());
    }
    if (from.has_defeathp()) {
      set_defeathp(from.defeathp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MMOMapDataDefeatInfoV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MMOMapDataDefeatInfoV1::CopyFrom(const MMOMapDataDefeatInfoV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MMOMapDataDefeatInfoV1::IsInitialized() const {

  return true;
}

void MMOMapDataDefeatInfoV1::Swap(MMOMapDataDefeatInfoV1* other) {
  if (other != this) {
    std::swap(defeatconditionspared_, other->defeatconditionspared_);
    std::swap(defeatconditiontimeover_, other->defeatconditiontimeover_);
    std::swap(defeatconditionhp_, other->defeatconditionhp_);
    std::swap(defeattime_, other->defeattime_);
    std::swap(defeatid_, other->defeatid_);
    std::swap(defeathp_, other->defeathp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MMOMapDataDefeatInfoV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MMOMapDataDefeatInfoV1_descriptor_;
  metadata.reflection = MMOMapDataDefeatInfoV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MMOMapDataUselessV1::MMOMapDataUselessV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MMOMapDataUselessV1::InitAsDefaultInstance() {
}

MMOMapDataUselessV1::MMOMapDataUselessV1(const MMOMapDataUselessV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MMOMapDataUselessV1::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MMOMapDataUselessV1::~MMOMapDataUselessV1() {
  SharedDtor();
}

void MMOMapDataUselessV1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MMOMapDataUselessV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MMOMapDataUselessV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MMOMapDataUselessV1_descriptor_;
}

const MMOMapDataUselessV1& MMOMapDataUselessV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MMOMapDataV1Data_2eproto();
  return *default_instance_;
}

MMOMapDataUselessV1* MMOMapDataUselessV1::default_instance_ = NULL;

MMOMapDataUselessV1* MMOMapDataUselessV1::New() const {
  return new MMOMapDataUselessV1;
}

void MMOMapDataUselessV1::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MMOMapDataUselessV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MMOMapDataUselessV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MMOMapDataUselessV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MMOMapDataUselessV1::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MMOMapDataUselessV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MMOMapDataUselessV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MMOMapDataUselessV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MMOMapDataUselessV1::MergeFrom(const MMOMapDataUselessV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MMOMapDataUselessV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MMOMapDataUselessV1::CopyFrom(const MMOMapDataUselessV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MMOMapDataUselessV1::IsInitialized() const {

  return true;
}

void MMOMapDataUselessV1::Swap(MMOMapDataUselessV1* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MMOMapDataUselessV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MMOMapDataUselessV1_descriptor_;
  metadata.reflection = MMOMapDataUselessV1_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
