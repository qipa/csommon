// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OneVSOneV1Data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OneVSOneV1Data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class OneVSOneOneVSOneDateV1DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OneVSOneOneVSOneDateV1>
     _instance;
} _OneVSOneOneVSOneDateV1_default_instance_;

namespace protobuf_OneVSOneV1Data_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneOneVSOneDateV1, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneOneVSOneDateV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneOneVSOneDateV1, skilldate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneOneVSOneDateV1, log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneOneVSOneDateV1, onevsonenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneOneVSOneDateV1, savetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneOneVSOneDateV1, ranking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneOneVSOneDateV1, rankingtimes_),
  ~0u,
  ~0u,
  1,
  2,
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(OneVSOneOneVSOneDateV1)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneVSOneOneVSOneDateV1_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "OneVSOneV1Data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_PublicStruct_2eproto::InitDefaults();
  _OneVSOneOneVSOneDateV1_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OneVSOneOneVSOneDateV1_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024OneVSOneV1Data.proto\032\022PublicStruct.pro"
      "to\"\263\001\n\026OneVSOneOneVSOneDateV1\022\034\n\tSkillDa"
      "te\030\004 \003(\0132\t.OneSData\022\030\n\003Log\030\005 \003(\0132\013.ActMe"
      "ssage\022\027\n\013OneVSOneNum\030\006 \001(\021:\002-1\022\024\n\010SaveTi"
      "me\030\007 \001(\022:\002-1\022\022\n\007Ranking\030\010 \001(\021:\0010\022\036\n\014Rank"
      "ingTimes\030\n \003(\0132\010.TimeTop"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 224);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OneVSOneV1Data.proto", &protobuf_RegisterTypes);
  ::protobuf_PublicStruct_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_OneVSOneV1Data_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneVSOneOneVSOneDateV1::kSkillDateFieldNumber;
const int OneVSOneOneVSOneDateV1::kLogFieldNumber;
const int OneVSOneOneVSOneDateV1::kOneVSOneNumFieldNumber;
const int OneVSOneOneVSOneDateV1::kSaveTimeFieldNumber;
const int OneVSOneOneVSOneDateV1::kRankingFieldNumber;
const int OneVSOneOneVSOneDateV1::kRankingTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneVSOneOneVSOneDateV1::OneVSOneOneVSOneDateV1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_OneVSOneV1Data_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneVSOneOneVSOneDateV1)
}
OneVSOneOneVSOneDateV1::OneVSOneOneVSOneDateV1(const OneVSOneOneVSOneDateV1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      skilldate_(from.skilldate_),
      log_(from.log_),
      rankingtimes_(from.rankingtimes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ranking_, &from.ranking_,
    static_cast<size_t>(reinterpret_cast<char*>(&savetime_) -
    reinterpret_cast<char*>(&ranking_)) + sizeof(savetime_));
  // @@protoc_insertion_point(copy_constructor:OneVSOneOneVSOneDateV1)
}

void OneVSOneOneVSOneDateV1::SharedCtor() {
  _cached_size_ = 0;
  ranking_ = 0;
  onevsonenum_ = -1;
  savetime_ = GOOGLE_LONGLONG(-1);
}

OneVSOneOneVSOneDateV1::~OneVSOneOneVSOneDateV1() {
  // @@protoc_insertion_point(destructor:OneVSOneOneVSOneDateV1)
  SharedDtor();
}

void OneVSOneOneVSOneDateV1::SharedDtor() {
}

void OneVSOneOneVSOneDateV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneVSOneOneVSOneDateV1::descriptor() {
  protobuf_OneVSOneV1Data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneV1Data_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneVSOneOneVSOneDateV1& OneVSOneOneVSOneDateV1::default_instance() {
  protobuf_OneVSOneV1Data_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneVSOneOneVSOneDateV1* OneVSOneOneVSOneDateV1::New(::google::protobuf::Arena* arena) const {
  OneVSOneOneVSOneDateV1* n = new OneVSOneOneVSOneDateV1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneVSOneOneVSOneDateV1::Clear() {
// @@protoc_insertion_point(message_clear_start:OneVSOneOneVSOneDateV1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skilldate_.Clear();
  log_.Clear();
  rankingtimes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ranking_ = 0;
    onevsonenum_ = -1;
    savetime_ = GOOGLE_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneVSOneOneVSOneDateV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneVSOneOneVSOneDateV1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OneSData SkillDate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilldate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ActMessage Log = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 OneVSOneNum = 6 [default = -1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_onevsonenum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &onevsonenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 SaveTime = 7 [default = -1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_savetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &savetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Ranking = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_ranking();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ranking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TimeTop RankingTimes = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankingtimes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OneVSOneOneVSOneDateV1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneVSOneOneVSOneDateV1)
  return false;
#undef DO_
}

void OneVSOneOneVSOneDateV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneVSOneOneVSOneDateV1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OneSData SkillDate = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skilldate_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->skilldate(static_cast<int>(i)), output);
  }

  // repeated .ActMessage Log = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->log_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->log(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional sint32 OneVSOneNum = 6 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->onevsonenum(), output);
  }

  // optional sint64 SaveTime = 7 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(7, this->savetime(), output);
  }

  // optional sint32 Ranking = 8 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->ranking(), output);
  }

  // repeated .TimeTop RankingTimes = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rankingtimes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->rankingtimes(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneVSOneOneVSOneDateV1)
}

::google::protobuf::uint8* OneVSOneOneVSOneDateV1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OneVSOneOneVSOneDateV1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OneSData SkillDate = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skilldate_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->skilldate(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ActMessage Log = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->log_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->log(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional sint32 OneVSOneNum = 6 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->onevsonenum(), target);
  }

  // optional sint64 SaveTime = 7 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(7, this->savetime(), target);
  }

  // optional sint32 Ranking = 8 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->ranking(), target);
  }

  // repeated .TimeTop RankingTimes = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rankingtimes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->rankingtimes(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneVSOneOneVSOneDateV1)
  return target;
}

size_t OneVSOneOneVSOneDateV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneVSOneOneVSOneDateV1)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .OneSData SkillDate = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->skilldate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skilldate(static_cast<int>(i)));
    }
  }

  // repeated .ActMessage Log = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->log_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log(static_cast<int>(i)));
    }
  }

  // repeated .TimeTop RankingTimes = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->rankingtimes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankingtimes(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional sint32 Ranking = 8 [default = 0];
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ranking());
    }

    // optional sint32 OneVSOneNum = 6 [default = -1];
    if (has_onevsonenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->onevsonenum());
    }

    // optional sint64 SaveTime = 7 [default = -1];
    if (has_savetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->savetime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneVSOneOneVSOneDateV1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneVSOneOneVSOneDateV1)
  GOOGLE_DCHECK_NE(&from, this);
  const OneVSOneOneVSOneDateV1* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneVSOneOneVSOneDateV1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneVSOneOneVSOneDateV1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneVSOneOneVSOneDateV1)
    MergeFrom(*source);
  }
}

void OneVSOneOneVSOneDateV1::MergeFrom(const OneVSOneOneVSOneDateV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneVSOneOneVSOneDateV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skilldate_.MergeFrom(from.skilldate_);
  log_.MergeFrom(from.log_);
  rankingtimes_.MergeFrom(from.rankingtimes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ranking_ = from.ranking_;
    }
    if (cached_has_bits & 0x00000002u) {
      onevsonenum_ = from.onevsonenum_;
    }
    if (cached_has_bits & 0x00000004u) {
      savetime_ = from.savetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OneVSOneOneVSOneDateV1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneVSOneOneVSOneDateV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneVSOneOneVSOneDateV1::CopyFrom(const OneVSOneOneVSOneDateV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneVSOneOneVSOneDateV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVSOneOneVSOneDateV1::IsInitialized() const {
  return true;
}

void OneVSOneOneVSOneDateV1::Swap(OneVSOneOneVSOneDateV1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneVSOneOneVSOneDateV1::InternalSwap(OneVSOneOneVSOneDateV1* other) {
  using std::swap;
  skilldate_.InternalSwap(&other->skilldate_);
  log_.InternalSwap(&other->log_);
  rankingtimes_.InternalSwap(&other->rankingtimes_);
  swap(ranking_, other->ranking_);
  swap(onevsonenum_, other->onevsonenum_);
  swap(savetime_, other->savetime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneVSOneOneVSOneDateV1::GetMetadata() const {
  protobuf_OneVSOneV1Data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneV1Data_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneVSOneOneVSOneDateV1

// repeated .OneSData SkillDate = 4;
int OneVSOneOneVSOneDateV1::skilldate_size() const {
  return skilldate_.size();
}
void OneVSOneOneVSOneDateV1::clear_skilldate() {
  skilldate_.Clear();
}
const ::OneSData& OneVSOneOneVSOneDateV1::skilldate(int index) const {
  // @@protoc_insertion_point(field_get:OneVSOneOneVSOneDateV1.SkillDate)
  return skilldate_.Get(index);
}
::OneSData* OneVSOneOneVSOneDateV1::mutable_skilldate(int index) {
  // @@protoc_insertion_point(field_mutable:OneVSOneOneVSOneDateV1.SkillDate)
  return skilldate_.Mutable(index);
}
::OneSData* OneVSOneOneVSOneDateV1::add_skilldate() {
  // @@protoc_insertion_point(field_add:OneVSOneOneVSOneDateV1.SkillDate)
  return skilldate_.Add();
}
::google::protobuf::RepeatedPtrField< ::OneSData >*
OneVSOneOneVSOneDateV1::mutable_skilldate() {
  // @@protoc_insertion_point(field_mutable_list:OneVSOneOneVSOneDateV1.SkillDate)
  return &skilldate_;
}
const ::google::protobuf::RepeatedPtrField< ::OneSData >&
OneVSOneOneVSOneDateV1::skilldate() const {
  // @@protoc_insertion_point(field_list:OneVSOneOneVSOneDateV1.SkillDate)
  return skilldate_;
}

// repeated .ActMessage Log = 5;
int OneVSOneOneVSOneDateV1::log_size() const {
  return log_.size();
}
void OneVSOneOneVSOneDateV1::clear_log() {
  log_.Clear();
}
const ::ActMessage& OneVSOneOneVSOneDateV1::log(int index) const {
  // @@protoc_insertion_point(field_get:OneVSOneOneVSOneDateV1.Log)
  return log_.Get(index);
}
::ActMessage* OneVSOneOneVSOneDateV1::mutable_log(int index) {
  // @@protoc_insertion_point(field_mutable:OneVSOneOneVSOneDateV1.Log)
  return log_.Mutable(index);
}
::ActMessage* OneVSOneOneVSOneDateV1::add_log() {
  // @@protoc_insertion_point(field_add:OneVSOneOneVSOneDateV1.Log)
  return log_.Add();
}
::google::protobuf::RepeatedPtrField< ::ActMessage >*
OneVSOneOneVSOneDateV1::mutable_log() {
  // @@protoc_insertion_point(field_mutable_list:OneVSOneOneVSOneDateV1.Log)
  return &log_;
}
const ::google::protobuf::RepeatedPtrField< ::ActMessage >&
OneVSOneOneVSOneDateV1::log() const {
  // @@protoc_insertion_point(field_list:OneVSOneOneVSOneDateV1.Log)
  return log_;
}

// optional sint32 OneVSOneNum = 6 [default = -1];
bool OneVSOneOneVSOneDateV1::has_onevsonenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OneVSOneOneVSOneDateV1::set_has_onevsonenum() {
  _has_bits_[0] |= 0x00000002u;
}
void OneVSOneOneVSOneDateV1::clear_has_onevsonenum() {
  _has_bits_[0] &= ~0x00000002u;
}
void OneVSOneOneVSOneDateV1::clear_onevsonenum() {
  onevsonenum_ = -1;
  clear_has_onevsonenum();
}
::google::protobuf::int32 OneVSOneOneVSOneDateV1::onevsonenum() const {
  // @@protoc_insertion_point(field_get:OneVSOneOneVSOneDateV1.OneVSOneNum)
  return onevsonenum_;
}
void OneVSOneOneVSOneDateV1::set_onevsonenum(::google::protobuf::int32 value) {
  set_has_onevsonenum();
  onevsonenum_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneOneVSOneDateV1.OneVSOneNum)
}

// optional sint64 SaveTime = 7 [default = -1];
bool OneVSOneOneVSOneDateV1::has_savetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OneVSOneOneVSOneDateV1::set_has_savetime() {
  _has_bits_[0] |= 0x00000004u;
}
void OneVSOneOneVSOneDateV1::clear_has_savetime() {
  _has_bits_[0] &= ~0x00000004u;
}
void OneVSOneOneVSOneDateV1::clear_savetime() {
  savetime_ = GOOGLE_LONGLONG(-1);
  clear_has_savetime();
}
::google::protobuf::int64 OneVSOneOneVSOneDateV1::savetime() const {
  // @@protoc_insertion_point(field_get:OneVSOneOneVSOneDateV1.SaveTime)
  return savetime_;
}
void OneVSOneOneVSOneDateV1::set_savetime(::google::protobuf::int64 value) {
  set_has_savetime();
  savetime_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneOneVSOneDateV1.SaveTime)
}

// optional sint32 Ranking = 8 [default = 0];
bool OneVSOneOneVSOneDateV1::has_ranking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OneVSOneOneVSOneDateV1::set_has_ranking() {
  _has_bits_[0] |= 0x00000001u;
}
void OneVSOneOneVSOneDateV1::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000001u;
}
void OneVSOneOneVSOneDateV1::clear_ranking() {
  ranking_ = 0;
  clear_has_ranking();
}
::google::protobuf::int32 OneVSOneOneVSOneDateV1::ranking() const {
  // @@protoc_insertion_point(field_get:OneVSOneOneVSOneDateV1.Ranking)
  return ranking_;
}
void OneVSOneOneVSOneDateV1::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneOneVSOneDateV1.Ranking)
}

// repeated .TimeTop RankingTimes = 10;
int OneVSOneOneVSOneDateV1::rankingtimes_size() const {
  return rankingtimes_.size();
}
void OneVSOneOneVSOneDateV1::clear_rankingtimes() {
  rankingtimes_.Clear();
}
const ::TimeTop& OneVSOneOneVSOneDateV1::rankingtimes(int index) const {
  // @@protoc_insertion_point(field_get:OneVSOneOneVSOneDateV1.RankingTimes)
  return rankingtimes_.Get(index);
}
::TimeTop* OneVSOneOneVSOneDateV1::mutable_rankingtimes(int index) {
  // @@protoc_insertion_point(field_mutable:OneVSOneOneVSOneDateV1.RankingTimes)
  return rankingtimes_.Mutable(index);
}
::TimeTop* OneVSOneOneVSOneDateV1::add_rankingtimes() {
  // @@protoc_insertion_point(field_add:OneVSOneOneVSOneDateV1.RankingTimes)
  return rankingtimes_.Add();
}
::google::protobuf::RepeatedPtrField< ::TimeTop >*
OneVSOneOneVSOneDateV1::mutable_rankingtimes() {
  // @@protoc_insertion_point(field_mutable_list:OneVSOneOneVSOneDateV1.RankingTimes)
  return &rankingtimes_;
}
const ::google::protobuf::RepeatedPtrField< ::TimeTop >&
OneVSOneOneVSOneDateV1::rankingtimes() const {
  // @@protoc_insertion_point(field_list:OneVSOneOneVSOneDateV1.RankingTimes)
  return rankingtimes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
