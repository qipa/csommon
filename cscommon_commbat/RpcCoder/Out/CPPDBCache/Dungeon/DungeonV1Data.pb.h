// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DungeonV1Data.proto

#ifndef PROTOBUF_DungeonV1Data_2eproto__INCLUDED
#define PROTOBUF_DungeonV1Data_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)
class DungeonDungeonInfoV1;
class DungeonDungeonInfoV1DefaultTypeInternal;
extern DungeonDungeonInfoV1DefaultTypeInternal _DungeonDungeonInfoV1_default_instance_;

namespace protobuf_DungeonV1Data_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_DungeonV1Data_2eproto

// ===================================================================

class DungeonDungeonInfoV1 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DungeonDungeonInfoV1) */ {
 public:
  DungeonDungeonInfoV1();
  virtual ~DungeonDungeonInfoV1();

  DungeonDungeonInfoV1(const DungeonDungeonInfoV1& from);

  inline DungeonDungeonInfoV1& operator=(const DungeonDungeonInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonDungeonInfoV1(DungeonDungeonInfoV1&& from) noexcept
    : DungeonDungeonInfoV1() {
    *this = ::std::move(from);
  }

  inline DungeonDungeonInfoV1& operator=(DungeonDungeonInfoV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonDungeonInfoV1& default_instance();

  static inline const DungeonDungeonInfoV1* internal_default_instance() {
    return reinterpret_cast<const DungeonDungeonInfoV1*>(
               &_DungeonDungeonInfoV1_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DungeonDungeonInfoV1* other);
  friend void swap(DungeonDungeonInfoV1& a, DungeonDungeonInfoV1& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonDungeonInfoV1* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonDungeonInfoV1* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonDungeonInfoV1& from);
  void MergeFrom(const DungeonDungeonInfoV1& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonDungeonInfoV1* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string DungeonKey = 1;
  bool has_dungeonkey() const;
  void clear_dungeonkey();
  static const int kDungeonKeyFieldNumber = 1;
  const ::std::string& dungeonkey() const;
  void set_dungeonkey(const ::std::string& value);
  #if LANG_CXX11
  void set_dungeonkey(::std::string&& value);
  #endif
  void set_dungeonkey(const char* value);
  void set_dungeonkey(const char* value, size_t size);
  ::std::string* mutable_dungeonkey();
  ::std::string* release_dungeonkey();
  void set_allocated_dungeonkey(::std::string* dungeonkey);

  // optional string Host = 5;
  bool has_host() const;
  void clear_host();
  static const int kHostFieldNumber = 5;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // optional sint32 Guild = 7 [default = -1];
  bool has_guild() const;
  void clear_guild();
  static const int kGuildFieldNumber = 7;
  ::google::protobuf::int32 guild() const;
  void set_guild(::google::protobuf::int32 value);

  // optional sint32 DungeonId = 2 [default = -1];
  bool has_dungeonid() const;
  void clear_dungeonid();
  static const int kDungeonIdFieldNumber = 2;
  ::google::protobuf::int32 dungeonid() const;
  void set_dungeonid(::google::protobuf::int32 value);

  // optional sint32 DungeonType = 3 [default = -1];
  bool has_dungeontype() const;
  void clear_dungeontype();
  static const int kDungeonTypeFieldNumber = 3;
  ::google::protobuf::int32 dungeontype() const;
  void set_dungeontype(::google::protobuf::int32 value);

  // optional sint32 KeyId = 4 [default = -1];
  bool has_keyid() const;
  void clear_keyid();
  static const int kKeyIdFieldNumber = 4;
  ::google::protobuf::int32 keyid() const;
  void set_keyid(::google::protobuf::int32 value);

  // optional sint32 Port = 6 [default = -1];
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 6;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DungeonDungeonInfoV1)
 private:
  void set_has_dungeonkey();
  void clear_has_dungeonkey();
  void set_has_dungeonid();
  void clear_has_dungeonid();
  void set_has_dungeontype();
  void clear_has_dungeontype();
  void set_has_keyid();
  void clear_has_keyid();
  void set_has_host();
  void clear_has_host();
  void set_has_port();
  void clear_has_port();
  void set_has_guild();
  void clear_has_guild();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dungeonkey_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::int32 guild_;
  ::google::protobuf::int32 dungeonid_;
  ::google::protobuf::int32 dungeontype_;
  ::google::protobuf::int32 keyid_;
  ::google::protobuf::int32 port_;
  friend struct protobuf_DungeonV1Data_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DungeonDungeonInfoV1

// optional string DungeonKey = 1;
inline bool DungeonDungeonInfoV1::has_dungeonkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DungeonDungeonInfoV1::set_has_dungeonkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DungeonDungeonInfoV1::clear_has_dungeonkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DungeonDungeonInfoV1::clear_dungeonkey() {
  dungeonkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dungeonkey();
}
inline const ::std::string& DungeonDungeonInfoV1::dungeonkey() const {
  // @@protoc_insertion_point(field_get:DungeonDungeonInfoV1.DungeonKey)
  return dungeonkey_.GetNoArena();
}
inline void DungeonDungeonInfoV1::set_dungeonkey(const ::std::string& value) {
  set_has_dungeonkey();
  dungeonkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DungeonDungeonInfoV1.DungeonKey)
}
#if LANG_CXX11
inline void DungeonDungeonInfoV1::set_dungeonkey(::std::string&& value) {
  set_has_dungeonkey();
  dungeonkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DungeonDungeonInfoV1.DungeonKey)
}
#endif
inline void DungeonDungeonInfoV1::set_dungeonkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dungeonkey();
  dungeonkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DungeonDungeonInfoV1.DungeonKey)
}
inline void DungeonDungeonInfoV1::set_dungeonkey(const char* value, size_t size) {
  set_has_dungeonkey();
  dungeonkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DungeonDungeonInfoV1.DungeonKey)
}
inline ::std::string* DungeonDungeonInfoV1::mutable_dungeonkey() {
  set_has_dungeonkey();
  // @@protoc_insertion_point(field_mutable:DungeonDungeonInfoV1.DungeonKey)
  return dungeonkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DungeonDungeonInfoV1::release_dungeonkey() {
  // @@protoc_insertion_point(field_release:DungeonDungeonInfoV1.DungeonKey)
  clear_has_dungeonkey();
  return dungeonkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DungeonDungeonInfoV1::set_allocated_dungeonkey(::std::string* dungeonkey) {
  if (dungeonkey != NULL) {
    set_has_dungeonkey();
  } else {
    clear_has_dungeonkey();
  }
  dungeonkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dungeonkey);
  // @@protoc_insertion_point(field_set_allocated:DungeonDungeonInfoV1.DungeonKey)
}

// optional sint32 DungeonId = 2 [default = -1];
inline bool DungeonDungeonInfoV1::has_dungeonid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DungeonDungeonInfoV1::set_has_dungeonid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DungeonDungeonInfoV1::clear_has_dungeonid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DungeonDungeonInfoV1::clear_dungeonid() {
  dungeonid_ = -1;
  clear_has_dungeonid();
}
inline ::google::protobuf::int32 DungeonDungeonInfoV1::dungeonid() const {
  // @@protoc_insertion_point(field_get:DungeonDungeonInfoV1.DungeonId)
  return dungeonid_;
}
inline void DungeonDungeonInfoV1::set_dungeonid(::google::protobuf::int32 value) {
  set_has_dungeonid();
  dungeonid_ = value;
  // @@protoc_insertion_point(field_set:DungeonDungeonInfoV1.DungeonId)
}

// optional sint32 DungeonType = 3 [default = -1];
inline bool DungeonDungeonInfoV1::has_dungeontype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DungeonDungeonInfoV1::set_has_dungeontype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DungeonDungeonInfoV1::clear_has_dungeontype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DungeonDungeonInfoV1::clear_dungeontype() {
  dungeontype_ = -1;
  clear_has_dungeontype();
}
inline ::google::protobuf::int32 DungeonDungeonInfoV1::dungeontype() const {
  // @@protoc_insertion_point(field_get:DungeonDungeonInfoV1.DungeonType)
  return dungeontype_;
}
inline void DungeonDungeonInfoV1::set_dungeontype(::google::protobuf::int32 value) {
  set_has_dungeontype();
  dungeontype_ = value;
  // @@protoc_insertion_point(field_set:DungeonDungeonInfoV1.DungeonType)
}

// optional sint32 KeyId = 4 [default = -1];
inline bool DungeonDungeonInfoV1::has_keyid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DungeonDungeonInfoV1::set_has_keyid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DungeonDungeonInfoV1::clear_has_keyid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DungeonDungeonInfoV1::clear_keyid() {
  keyid_ = -1;
  clear_has_keyid();
}
inline ::google::protobuf::int32 DungeonDungeonInfoV1::keyid() const {
  // @@protoc_insertion_point(field_get:DungeonDungeonInfoV1.KeyId)
  return keyid_;
}
inline void DungeonDungeonInfoV1::set_keyid(::google::protobuf::int32 value) {
  set_has_keyid();
  keyid_ = value;
  // @@protoc_insertion_point(field_set:DungeonDungeonInfoV1.KeyId)
}

// optional string Host = 5;
inline bool DungeonDungeonInfoV1::has_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DungeonDungeonInfoV1::set_has_host() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DungeonDungeonInfoV1::clear_has_host() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DungeonDungeonInfoV1::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
inline const ::std::string& DungeonDungeonInfoV1::host() const {
  // @@protoc_insertion_point(field_get:DungeonDungeonInfoV1.Host)
  return host_.GetNoArena();
}
inline void DungeonDungeonInfoV1::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DungeonDungeonInfoV1.Host)
}
#if LANG_CXX11
inline void DungeonDungeonInfoV1::set_host(::std::string&& value) {
  set_has_host();
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DungeonDungeonInfoV1.Host)
}
#endif
inline void DungeonDungeonInfoV1::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DungeonDungeonInfoV1.Host)
}
inline void DungeonDungeonInfoV1::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DungeonDungeonInfoV1.Host)
}
inline ::std::string* DungeonDungeonInfoV1::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:DungeonDungeonInfoV1.Host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DungeonDungeonInfoV1::release_host() {
  // @@protoc_insertion_point(field_release:DungeonDungeonInfoV1.Host)
  clear_has_host();
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DungeonDungeonInfoV1::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:DungeonDungeonInfoV1.Host)
}

// optional sint32 Port = 6 [default = -1];
inline bool DungeonDungeonInfoV1::has_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DungeonDungeonInfoV1::set_has_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DungeonDungeonInfoV1::clear_has_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DungeonDungeonInfoV1::clear_port() {
  port_ = -1;
  clear_has_port();
}
inline ::google::protobuf::int32 DungeonDungeonInfoV1::port() const {
  // @@protoc_insertion_point(field_get:DungeonDungeonInfoV1.Port)
  return port_;
}
inline void DungeonDungeonInfoV1::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:DungeonDungeonInfoV1.Port)
}

// optional sint32 Guild = 7 [default = -1];
inline bool DungeonDungeonInfoV1::has_guild() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DungeonDungeonInfoV1::set_has_guild() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DungeonDungeonInfoV1::clear_has_guild() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DungeonDungeonInfoV1::clear_guild() {
  guild_ = -1;
  clear_has_guild();
}
inline ::google::protobuf::int32 DungeonDungeonInfoV1::guild() const {
  // @@protoc_insertion_point(field_get:DungeonDungeonInfoV1.Guild)
  return guild_;
}
inline void DungeonDungeonInfoV1::set_guild(::google::protobuf::int32 value) {
  set_has_guild();
  guild_ = value;
  // @@protoc_insertion_point(field_set:DungeonDungeonInfoV1.Guild)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DungeonV1Data_2eproto__INCLUDED
