// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DramaModuleV1Data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DramaModuleV1Data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DramaModuleDramaInfoV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DramaModuleDramaInfoV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* DramaModuleUseLessV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DramaModuleUseLessV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* DramaModuleCommandInfoV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DramaModuleCommandInfoV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* DramaModuleV3V1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DramaModuleV3V1_reflection_ = NULL;
const ::google::protobuf::Descriptor* DramaModuleTransformV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DramaModuleTransformV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* DramaModuleCameraPointV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DramaModuleCameraPointV1_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DramaModuleV1Data_2eproto() {
  protobuf_AddDesc_DramaModuleV1Data_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DramaModuleV1Data.proto");
  GOOGLE_CHECK(file != NULL);
  DramaModuleDramaInfoV1_descriptor_ = file->message_type(0);
  static const int DramaModuleDramaInfoV1_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleDramaInfoV1, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleDramaInfoV1, totaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleDramaInfoV1, commandlist_),
  };
  DramaModuleDramaInfoV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DramaModuleDramaInfoV1_descriptor_,
      DramaModuleDramaInfoV1::default_instance_,
      DramaModuleDramaInfoV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleDramaInfoV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleDramaInfoV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DramaModuleDramaInfoV1));
  DramaModuleUseLessV1_descriptor_ = file->message_type(1);
  static const int DramaModuleUseLessV1_offsets_[1] = {
  };
  DramaModuleUseLessV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DramaModuleUseLessV1_descriptor_,
      DramaModuleUseLessV1::default_instance_,
      DramaModuleUseLessV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleUseLessV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleUseLessV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DramaModuleUseLessV1));
  DramaModuleCommandInfoV1_descriptor_ = file->message_type(2);
  static const int DramaModuleCommandInfoV1_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, commandtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, durationtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, createobjecttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, createnpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, createnpctransform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, trigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, subtitlestyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, subtitleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, subtitletargettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, subtitletargetconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, translatepostion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, translatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, translatecurve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, translatetargettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, translatetargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, sklltargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, skillpostion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, skilltargettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, musicfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, soundfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, camerapointtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, camerapoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, freetype_),
  };
  DramaModuleCommandInfoV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DramaModuleCommandInfoV1_descriptor_,
      DramaModuleCommandInfoV1::default_instance_,
      DramaModuleCommandInfoV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCommandInfoV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DramaModuleCommandInfoV1));
  DramaModuleV3V1_descriptor_ = file->message_type(3);
  static const int DramaModuleV3V1_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleV3V1, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleV3V1, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleV3V1, z_),
  };
  DramaModuleV3V1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DramaModuleV3V1_descriptor_,
      DramaModuleV3V1::default_instance_,
      DramaModuleV3V1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleV3V1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleV3V1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DramaModuleV3V1));
  DramaModuleTransformV1_descriptor_ = file->message_type(4);
  static const int DramaModuleTransformV1_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleTransformV1, postion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleTransformV1, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleTransformV1, scale_),
  };
  DramaModuleTransformV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DramaModuleTransformV1_descriptor_,
      DramaModuleTransformV1::default_instance_,
      DramaModuleTransformV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleTransformV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleTransformV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DramaModuleTransformV1));
  DramaModuleCameraPointV1_descriptor_ = file->message_type(5);
  static const int DramaModuleCameraPointV1_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCameraPointV1, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCameraPointV1, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCameraPointV1, time_),
  };
  DramaModuleCameraPointV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DramaModuleCameraPointV1_descriptor_,
      DramaModuleCameraPointV1::default_instance_,
      DramaModuleCameraPointV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCameraPointV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DramaModuleCameraPointV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DramaModuleCameraPointV1));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DramaModuleV1Data_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DramaModuleDramaInfoV1_descriptor_, &DramaModuleDramaInfoV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DramaModuleUseLessV1_descriptor_, &DramaModuleUseLessV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DramaModuleCommandInfoV1_descriptor_, &DramaModuleCommandInfoV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DramaModuleV3V1_descriptor_, &DramaModuleV3V1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DramaModuleTransformV1_descriptor_, &DramaModuleTransformV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DramaModuleCameraPointV1_descriptor_, &DramaModuleCameraPointV1::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DramaModuleV1Data_2eproto() {
  delete DramaModuleDramaInfoV1::default_instance_;
  delete DramaModuleDramaInfoV1_reflection_;
  delete DramaModuleUseLessV1::default_instance_;
  delete DramaModuleUseLessV1_reflection_;
  delete DramaModuleCommandInfoV1::default_instance_;
  delete DramaModuleCommandInfoV1_reflection_;
  delete DramaModuleV3V1::default_instance_;
  delete DramaModuleV3V1_reflection_;
  delete DramaModuleTransformV1::default_instance_;
  delete DramaModuleTransformV1_reflection_;
  delete DramaModuleCameraPointV1::default_instance_;
  delete DramaModuleCameraPointV1_reflection_;
}

void protobuf_AddDesc_DramaModuleV1Data_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027DramaModuleV1Data.proto\032\022PublicStruct."
    "proto\"l\n\026DramaModuleDramaInfoV1\022\014\n\004Name\030"
    "\005 \001(\t\022\024\n\tTotalTime\030\006 \001(\002:\0010\022.\n\013CommandLi"
    "st\030\007 \003(\0132\031.DramaModuleCommandInfoV1\"\026\n\024D"
    "ramaModuleUseLessV1\"\375\005\n\030DramaModuleComma"
    "ndInfoV1\022\027\n\013CommandType\030\001 \001(\021:\002-1\022\024\n\tSta"
    "rtTime\030\002 \001(\002:\0010\022\027\n\014DurationTime\030\003 \001(\002:\0010"
    "\022\033\n\020CreateObjectType\030\004 \001(\021:\0010\022\027\n\013CreateN"
    "PCid\030\005 \001(\021:\002-1\0223\n\022CreateNpcTransform\030\t \001"
    "(\0132\027.DramaModuleTransformV1\022\026\n\007Trigger\030\n"
    " \001(\010:\005false\022\030\n\rSubtitleStyle\030\013 \001(\021:\0010\022\026\n"
    "\nSubtitleID\030\014 \001(\021:\002-1\022\035\n\022SubtitleTargetT"
    "ype\030\r \001(\021:\0010\022\"\n\026SubtitleTargetConfigId\030\016"
    " \001(\021:\002-1\022*\n\020TranslatePostion\030\017 \001(\0132\020.Dra"
    "maModuleV3V1\022\030\n\rTranslateTime\030\020 \001(\002:\0010\022\031"
    "\n\016TranslateCurve\030\021 \001(\021:\0010\022\036\n\023TranslateTa"
    "rgetType\030\022 \001(\021:\0010\022\035\n\021TranslateTargetId\030\023"
    " \001(\021:\002-1\022\023\n\007SkillId\030\024 \001(\021:\002-1\022\030\n\014SkllTar"
    "getId\030\025 \001(\021:\002-1\022&\n\014SkillPostion\030\026 \001(\0132\020."
    "DramaModuleV3V1\022\032\n\017SkillTargetType\030\027 \001(\021"
    ":\0010\022\025\n\rMusicFileName\030\030 \001(\t\022\025\n\rSoundFileN"
    "ame\030\031 \001(\t\022\032\n\017CameraPointType\030\032 \001(\021:\0010\022/\n"
    "\014CameraPoints\030\033 \003(\0132\031.DramaModuleCameraP"
    "ointV1\022\023\n\010FreeType\030\037 \001(\021:\0010\";\n\017DramaModu"
    "leV3V1\022\014\n\001X\030\001 \001(\002:\0010\022\014\n\001Y\030\002 \001(\002:\0010\022\014\n\001Z\030"
    "\003 \001(\002:\0010\"\200\001\n\026DramaModuleTransformV1\022!\n\007P"
    "ostion\030\001 \001(\0132\020.DramaModuleV3V1\022\"\n\010Rotati"
    "on\030\002 \001(\0132\020.DramaModuleV3V1\022\037\n\005Scale\030\003 \001("
    "\0132\020.DramaModuleV3V1\"k\n\030DramaModuleCamera"
    "PointV1\022\035\n\003Pos\030\001 \001(\0132\020.DramaModuleV3V1\022\037"
    "\n\005Angle\030\002 \001(\0132\020.DramaModuleV3V1\022\017\n\004Time\030"
    "\003 \001(\002:\0010", 1248);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DramaModuleV1Data.proto", &protobuf_RegisterTypes);
  DramaModuleDramaInfoV1::default_instance_ = new DramaModuleDramaInfoV1();
  DramaModuleUseLessV1::default_instance_ = new DramaModuleUseLessV1();
  DramaModuleCommandInfoV1::default_instance_ = new DramaModuleCommandInfoV1();
  DramaModuleV3V1::default_instance_ = new DramaModuleV3V1();
  DramaModuleTransformV1::default_instance_ = new DramaModuleTransformV1();
  DramaModuleCameraPointV1::default_instance_ = new DramaModuleCameraPointV1();
  DramaModuleDramaInfoV1::default_instance_->InitAsDefaultInstance();
  DramaModuleUseLessV1::default_instance_->InitAsDefaultInstance();
  DramaModuleCommandInfoV1::default_instance_->InitAsDefaultInstance();
  DramaModuleV3V1::default_instance_->InitAsDefaultInstance();
  DramaModuleTransformV1::default_instance_->InitAsDefaultInstance();
  DramaModuleCameraPointV1::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DramaModuleV1Data_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DramaModuleV1Data_2eproto {
  StaticDescriptorInitializer_DramaModuleV1Data_2eproto() {
    protobuf_AddDesc_DramaModuleV1Data_2eproto();
  }
} static_descriptor_initializer_DramaModuleV1Data_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DramaModuleDramaInfoV1::kNameFieldNumber;
const int DramaModuleDramaInfoV1::kTotalTimeFieldNumber;
const int DramaModuleDramaInfoV1::kCommandListFieldNumber;
#endif  // !_MSC_VER

DramaModuleDramaInfoV1::DramaModuleDramaInfoV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DramaModuleDramaInfoV1::InitAsDefaultInstance() {
}

DramaModuleDramaInfoV1::DramaModuleDramaInfoV1(const DramaModuleDramaInfoV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DramaModuleDramaInfoV1::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  totaltime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DramaModuleDramaInfoV1::~DramaModuleDramaInfoV1() {
  SharedDtor();
}

void DramaModuleDramaInfoV1::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DramaModuleDramaInfoV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DramaModuleDramaInfoV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DramaModuleDramaInfoV1_descriptor_;
}

const DramaModuleDramaInfoV1& DramaModuleDramaInfoV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DramaModuleV1Data_2eproto();
  return *default_instance_;
}

DramaModuleDramaInfoV1* DramaModuleDramaInfoV1::default_instance_ = NULL;

DramaModuleDramaInfoV1* DramaModuleDramaInfoV1::New() const {
  return new DramaModuleDramaInfoV1;
}

void DramaModuleDramaInfoV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    totaltime_ = 0;
  }
  commandlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DramaModuleDramaInfoV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_TotalTime;
        break;
      }

      // optional float TotalTime = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_TotalTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &totaltime_)));
          set_has_totaltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_CommandList;
        break;
      }

      // repeated .DramaModuleCommandInfoV1 CommandList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CommandList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commandlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_CommandList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DramaModuleDramaInfoV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // optional float TotalTime = 6 [default = 0];
  if (has_totaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->totaltime(), output);
  }

  // repeated .DramaModuleCommandInfoV1 CommandList = 7;
  for (int i = 0; i < this->commandlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->commandlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DramaModuleDramaInfoV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional float TotalTime = 6 [default = 0];
  if (has_totaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->totaltime(), target);
  }

  // repeated .DramaModuleCommandInfoV1 CommandList = 7;
  for (int i = 0; i < this->commandlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->commandlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DramaModuleDramaInfoV1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional float TotalTime = 6 [default = 0];
    if (has_totaltime()) {
      total_size += 1 + 4;
    }

  }
  // repeated .DramaModuleCommandInfoV1 CommandList = 7;
  total_size += 1 * this->commandlist_size();
  for (int i = 0; i < this->commandlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commandlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DramaModuleDramaInfoV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DramaModuleDramaInfoV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DramaModuleDramaInfoV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DramaModuleDramaInfoV1::MergeFrom(const DramaModuleDramaInfoV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  commandlist_.MergeFrom(from.commandlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_totaltime()) {
      set_totaltime(from.totaltime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DramaModuleDramaInfoV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DramaModuleDramaInfoV1::CopyFrom(const DramaModuleDramaInfoV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DramaModuleDramaInfoV1::IsInitialized() const {

  return true;
}

void DramaModuleDramaInfoV1::Swap(DramaModuleDramaInfoV1* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(totaltime_, other->totaltime_);
    commandlist_.Swap(&other->commandlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DramaModuleDramaInfoV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DramaModuleDramaInfoV1_descriptor_;
  metadata.reflection = DramaModuleDramaInfoV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DramaModuleUseLessV1::DramaModuleUseLessV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DramaModuleUseLessV1::InitAsDefaultInstance() {
}

DramaModuleUseLessV1::DramaModuleUseLessV1(const DramaModuleUseLessV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DramaModuleUseLessV1::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DramaModuleUseLessV1::~DramaModuleUseLessV1() {
  SharedDtor();
}

void DramaModuleUseLessV1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DramaModuleUseLessV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DramaModuleUseLessV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DramaModuleUseLessV1_descriptor_;
}

const DramaModuleUseLessV1& DramaModuleUseLessV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DramaModuleV1Data_2eproto();
  return *default_instance_;
}

DramaModuleUseLessV1* DramaModuleUseLessV1::default_instance_ = NULL;

DramaModuleUseLessV1* DramaModuleUseLessV1::New() const {
  return new DramaModuleUseLessV1;
}

void DramaModuleUseLessV1::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DramaModuleUseLessV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DramaModuleUseLessV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DramaModuleUseLessV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DramaModuleUseLessV1::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DramaModuleUseLessV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DramaModuleUseLessV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DramaModuleUseLessV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DramaModuleUseLessV1::MergeFrom(const DramaModuleUseLessV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DramaModuleUseLessV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DramaModuleUseLessV1::CopyFrom(const DramaModuleUseLessV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DramaModuleUseLessV1::IsInitialized() const {

  return true;
}

void DramaModuleUseLessV1::Swap(DramaModuleUseLessV1* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DramaModuleUseLessV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DramaModuleUseLessV1_descriptor_;
  metadata.reflection = DramaModuleUseLessV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DramaModuleCommandInfoV1::kCommandTypeFieldNumber;
const int DramaModuleCommandInfoV1::kStartTimeFieldNumber;
const int DramaModuleCommandInfoV1::kDurationTimeFieldNumber;
const int DramaModuleCommandInfoV1::kCreateObjectTypeFieldNumber;
const int DramaModuleCommandInfoV1::kCreateNPCidFieldNumber;
const int DramaModuleCommandInfoV1::kCreateNpcTransformFieldNumber;
const int DramaModuleCommandInfoV1::kTriggerFieldNumber;
const int DramaModuleCommandInfoV1::kSubtitleStyleFieldNumber;
const int DramaModuleCommandInfoV1::kSubtitleIDFieldNumber;
const int DramaModuleCommandInfoV1::kSubtitleTargetTypeFieldNumber;
const int DramaModuleCommandInfoV1::kSubtitleTargetConfigIdFieldNumber;
const int DramaModuleCommandInfoV1::kTranslatePostionFieldNumber;
const int DramaModuleCommandInfoV1::kTranslateTimeFieldNumber;
const int DramaModuleCommandInfoV1::kTranslateCurveFieldNumber;
const int DramaModuleCommandInfoV1::kTranslateTargetTypeFieldNumber;
const int DramaModuleCommandInfoV1::kTranslateTargetIdFieldNumber;
const int DramaModuleCommandInfoV1::kSkillIdFieldNumber;
const int DramaModuleCommandInfoV1::kSkllTargetIdFieldNumber;
const int DramaModuleCommandInfoV1::kSkillPostionFieldNumber;
const int DramaModuleCommandInfoV1::kSkillTargetTypeFieldNumber;
const int DramaModuleCommandInfoV1::kMusicFileNameFieldNumber;
const int DramaModuleCommandInfoV1::kSoundFileNameFieldNumber;
const int DramaModuleCommandInfoV1::kCameraPointTypeFieldNumber;
const int DramaModuleCommandInfoV1::kCameraPointsFieldNumber;
const int DramaModuleCommandInfoV1::kFreeTypeFieldNumber;
#endif  // !_MSC_VER

DramaModuleCommandInfoV1::DramaModuleCommandInfoV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DramaModuleCommandInfoV1::InitAsDefaultInstance() {
  createnpctransform_ = const_cast< ::DramaModuleTransformV1*>(&::DramaModuleTransformV1::default_instance());
  translatepostion_ = const_cast< ::DramaModuleV3V1*>(&::DramaModuleV3V1::default_instance());
  skillpostion_ = const_cast< ::DramaModuleV3V1*>(&::DramaModuleV3V1::default_instance());
}

DramaModuleCommandInfoV1::DramaModuleCommandInfoV1(const DramaModuleCommandInfoV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DramaModuleCommandInfoV1::SharedCtor() {
  _cached_size_ = 0;
  commandtype_ = -1;
  starttime_ = 0;
  durationtime_ = 0;
  createobjecttype_ = 0;
  createnpcid_ = -1;
  createnpctransform_ = NULL;
  trigger_ = false;
  subtitlestyle_ = 0;
  subtitleid_ = -1;
  subtitletargettype_ = 0;
  subtitletargetconfigid_ = -1;
  translatepostion_ = NULL;
  translatetime_ = 0;
  translatecurve_ = 0;
  translatetargettype_ = 0;
  translatetargetid_ = -1;
  skillid_ = -1;
  sklltargetid_ = -1;
  skillpostion_ = NULL;
  skilltargettype_ = 0;
  musicfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  soundfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  camerapointtype_ = 0;
  freetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DramaModuleCommandInfoV1::~DramaModuleCommandInfoV1() {
  SharedDtor();
}

void DramaModuleCommandInfoV1::SharedDtor() {
  if (musicfilename_ != &::google::protobuf::internal::kEmptyString) {
    delete musicfilename_;
  }
  if (soundfilename_ != &::google::protobuf::internal::kEmptyString) {
    delete soundfilename_;
  }
  if (this != default_instance_) {
    delete createnpctransform_;
    delete translatepostion_;
    delete skillpostion_;
  }
}

void DramaModuleCommandInfoV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DramaModuleCommandInfoV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DramaModuleCommandInfoV1_descriptor_;
}

const DramaModuleCommandInfoV1& DramaModuleCommandInfoV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DramaModuleV1Data_2eproto();
  return *default_instance_;
}

DramaModuleCommandInfoV1* DramaModuleCommandInfoV1::default_instance_ = NULL;

DramaModuleCommandInfoV1* DramaModuleCommandInfoV1::New() const {
  return new DramaModuleCommandInfoV1;
}

void DramaModuleCommandInfoV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    commandtype_ = -1;
    starttime_ = 0;
    durationtime_ = 0;
    createobjecttype_ = 0;
    createnpcid_ = -1;
    if (has_createnpctransform()) {
      if (createnpctransform_ != NULL) createnpctransform_->::DramaModuleTransformV1::Clear();
    }
    trigger_ = false;
    subtitlestyle_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    subtitleid_ = -1;
    subtitletargettype_ = 0;
    subtitletargetconfigid_ = -1;
    if (has_translatepostion()) {
      if (translatepostion_ != NULL) translatepostion_->::DramaModuleV3V1::Clear();
    }
    translatetime_ = 0;
    translatecurve_ = 0;
    translatetargettype_ = 0;
    translatetargetid_ = -1;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    skillid_ = -1;
    sklltargetid_ = -1;
    if (has_skillpostion()) {
      if (skillpostion_ != NULL) skillpostion_->::DramaModuleV3V1::Clear();
    }
    skilltargettype_ = 0;
    if (has_musicfilename()) {
      if (musicfilename_ != &::google::protobuf::internal::kEmptyString) {
        musicfilename_->clear();
      }
    }
    if (has_soundfilename()) {
      if (soundfilename_ != &::google::protobuf::internal::kEmptyString) {
        soundfilename_->clear();
      }
    }
    camerapointtype_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    freetype_ = 0;
  }
  camerapoints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DramaModuleCommandInfoV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 CommandType = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &commandtype_)));
          set_has_commandtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_StartTime;
        break;
      }

      // optional float StartTime = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_DurationTime;
        break;
      }

      // optional float DurationTime = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DurationTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &durationtime_)));
          set_has_durationtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CreateObjectType;
        break;
      }

      // optional sint32 CreateObjectType = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateObjectType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &createobjecttype_)));
          set_has_createobjecttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_CreateNPCid;
        break;
      }

      // optional sint32 CreateNPCid = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateNPCid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &createnpcid_)));
          set_has_createnpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_CreateNpcTransform;
        break;
      }

      // optional .DramaModuleTransformV1 CreateNpcTransform = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CreateNpcTransform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createnpctransform()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Trigger;
        break;
      }

      // optional bool Trigger = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Trigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trigger_)));
          set_has_trigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_SubtitleStyle;
        break;
      }

      // optional sint32 SubtitleStyle = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SubtitleStyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &subtitlestyle_)));
          set_has_subtitlestyle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_SubtitleID;
        break;
      }

      // optional sint32 SubtitleID = 12 [default = -1];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SubtitleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &subtitleid_)));
          set_has_subtitleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_SubtitleTargetType;
        break;
      }

      // optional sint32 SubtitleTargetType = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SubtitleTargetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &subtitletargettype_)));
          set_has_subtitletargettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_SubtitleTargetConfigId;
        break;
      }

      // optional sint32 SubtitleTargetConfigId = 14 [default = -1];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SubtitleTargetConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &subtitletargetconfigid_)));
          set_has_subtitletargetconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_TranslatePostion;
        break;
      }

      // optional .DramaModuleV3V1 TranslatePostion = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TranslatePostion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translatepostion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_TranslateTime;
        break;
      }

      // optional float TranslateTime = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_TranslateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &translatetime_)));
          set_has_translatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_TranslateCurve;
        break;
      }

      // optional sint32 TranslateCurve = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TranslateCurve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &translatecurve_)));
          set_has_translatecurve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_TranslateTargetType;
        break;
      }

      // optional sint32 TranslateTargetType = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TranslateTargetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &translatetargettype_)));
          set_has_translatetargettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_TranslateTargetId;
        break;
      }

      // optional sint32 TranslateTargetId = 19 [default = -1];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TranslateTargetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &translatetargetid_)));
          set_has_translatetargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_SkillId;
        break;
      }

      // optional sint32 SkillId = 20 [default = -1];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_SkllTargetId;
        break;
      }

      // optional sint32 SkllTargetId = 21 [default = -1];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkllTargetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sklltargetid_)));
          set_has_sklltargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_SkillPostion;
        break;
      }

      // optional .DramaModuleV3V1 SkillPostion = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SkillPostion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skillpostion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_SkillTargetType;
        break;
      }

      // optional sint32 SkillTargetType = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillTargetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skilltargettype_)));
          set_has_skilltargettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_MusicFileName;
        break;
      }

      // optional string MusicFileName = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MusicFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_musicfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->musicfilename().data(), this->musicfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_SoundFileName;
        break;
      }

      // optional string SoundFileName = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SoundFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soundfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soundfilename().data(), this->soundfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_CameraPointType;
        break;
      }

      // optional sint32 CameraPointType = 26 [default = 0];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CameraPointType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &camerapointtype_)));
          set_has_camerapointtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_CameraPoints;
        break;
      }

      // repeated .DramaModuleCameraPointV1 CameraPoints = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CameraPoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camerapoints()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_CameraPoints;
        if (input->ExpectTag(248)) goto parse_FreeType;
        break;
      }

      // optional sint32 FreeType = 31 [default = 0];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FreeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &freetype_)));
          set_has_freetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DramaModuleCommandInfoV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 CommandType = 1 [default = -1];
  if (has_commandtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->commandtype(), output);
  }

  // optional float StartTime = 2 [default = 0];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->starttime(), output);
  }

  // optional float DurationTime = 3 [default = 0];
  if (has_durationtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->durationtime(), output);
  }

  // optional sint32 CreateObjectType = 4 [default = 0];
  if (has_createobjecttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->createobjecttype(), output);
  }

  // optional sint32 CreateNPCid = 5 [default = -1];
  if (has_createnpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->createnpcid(), output);
  }

  // optional .DramaModuleTransformV1 CreateNpcTransform = 9;
  if (has_createnpctransform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->createnpctransform(), output);
  }

  // optional bool Trigger = 10 [default = false];
  if (has_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->trigger(), output);
  }

  // optional sint32 SubtitleStyle = 11 [default = 0];
  if (has_subtitlestyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->subtitlestyle(), output);
  }

  // optional sint32 SubtitleID = 12 [default = -1];
  if (has_subtitleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->subtitleid(), output);
  }

  // optional sint32 SubtitleTargetType = 13 [default = 0];
  if (has_subtitletargettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->subtitletargettype(), output);
  }

  // optional sint32 SubtitleTargetConfigId = 14 [default = -1];
  if (has_subtitletargetconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(14, this->subtitletargetconfigid(), output);
  }

  // optional .DramaModuleV3V1 TranslatePostion = 15;
  if (has_translatepostion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->translatepostion(), output);
  }

  // optional float TranslateTime = 16 [default = 0];
  if (has_translatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->translatetime(), output);
  }

  // optional sint32 TranslateCurve = 17 [default = 0];
  if (has_translatecurve()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(17, this->translatecurve(), output);
  }

  // optional sint32 TranslateTargetType = 18 [default = 0];
  if (has_translatetargettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(18, this->translatetargettype(), output);
  }

  // optional sint32 TranslateTargetId = 19 [default = -1];
  if (has_translatetargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(19, this->translatetargetid(), output);
  }

  // optional sint32 SkillId = 20 [default = -1];
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(20, this->skillid(), output);
  }

  // optional sint32 SkllTargetId = 21 [default = -1];
  if (has_sklltargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(21, this->sklltargetid(), output);
  }

  // optional .DramaModuleV3V1 SkillPostion = 22;
  if (has_skillpostion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->skillpostion(), output);
  }

  // optional sint32 SkillTargetType = 23 [default = 0];
  if (has_skilltargettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(23, this->skilltargettype(), output);
  }

  // optional string MusicFileName = 24;
  if (has_musicfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->musicfilename().data(), this->musicfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->musicfilename(), output);
  }

  // optional string SoundFileName = 25;
  if (has_soundfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soundfilename().data(), this->soundfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->soundfilename(), output);
  }

  // optional sint32 CameraPointType = 26 [default = 0];
  if (has_camerapointtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(26, this->camerapointtype(), output);
  }

  // repeated .DramaModuleCameraPointV1 CameraPoints = 27;
  for (int i = 0; i < this->camerapoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->camerapoints(i), output);
  }

  // optional sint32 FreeType = 31 [default = 0];
  if (has_freetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(31, this->freetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DramaModuleCommandInfoV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 CommandType = 1 [default = -1];
  if (has_commandtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->commandtype(), target);
  }

  // optional float StartTime = 2 [default = 0];
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->starttime(), target);
  }

  // optional float DurationTime = 3 [default = 0];
  if (has_durationtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->durationtime(), target);
  }

  // optional sint32 CreateObjectType = 4 [default = 0];
  if (has_createobjecttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->createobjecttype(), target);
  }

  // optional sint32 CreateNPCid = 5 [default = -1];
  if (has_createnpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->createnpcid(), target);
  }

  // optional .DramaModuleTransformV1 CreateNpcTransform = 9;
  if (has_createnpctransform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->createnpctransform(), target);
  }

  // optional bool Trigger = 10 [default = false];
  if (has_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->trigger(), target);
  }

  // optional sint32 SubtitleStyle = 11 [default = 0];
  if (has_subtitlestyle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->subtitlestyle(), target);
  }

  // optional sint32 SubtitleID = 12 [default = -1];
  if (has_subtitleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->subtitleid(), target);
  }

  // optional sint32 SubtitleTargetType = 13 [default = 0];
  if (has_subtitletargettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->subtitletargettype(), target);
  }

  // optional sint32 SubtitleTargetConfigId = 14 [default = -1];
  if (has_subtitletargetconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(14, this->subtitletargetconfigid(), target);
  }

  // optional .DramaModuleV3V1 TranslatePostion = 15;
  if (has_translatepostion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->translatepostion(), target);
  }

  // optional float TranslateTime = 16 [default = 0];
  if (has_translatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->translatetime(), target);
  }

  // optional sint32 TranslateCurve = 17 [default = 0];
  if (has_translatecurve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(17, this->translatecurve(), target);
  }

  // optional sint32 TranslateTargetType = 18 [default = 0];
  if (has_translatetargettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(18, this->translatetargettype(), target);
  }

  // optional sint32 TranslateTargetId = 19 [default = -1];
  if (has_translatetargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(19, this->translatetargetid(), target);
  }

  // optional sint32 SkillId = 20 [default = -1];
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(20, this->skillid(), target);
  }

  // optional sint32 SkllTargetId = 21 [default = -1];
  if (has_sklltargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(21, this->sklltargetid(), target);
  }

  // optional .DramaModuleV3V1 SkillPostion = 22;
  if (has_skillpostion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->skillpostion(), target);
  }

  // optional sint32 SkillTargetType = 23 [default = 0];
  if (has_skilltargettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(23, this->skilltargettype(), target);
  }

  // optional string MusicFileName = 24;
  if (has_musicfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->musicfilename().data(), this->musicfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->musicfilename(), target);
  }

  // optional string SoundFileName = 25;
  if (has_soundfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soundfilename().data(), this->soundfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->soundfilename(), target);
  }

  // optional sint32 CameraPointType = 26 [default = 0];
  if (has_camerapointtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(26, this->camerapointtype(), target);
  }

  // repeated .DramaModuleCameraPointV1 CameraPoints = 27;
  for (int i = 0; i < this->camerapoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->camerapoints(i), target);
  }

  // optional sint32 FreeType = 31 [default = 0];
  if (has_freetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(31, this->freetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DramaModuleCommandInfoV1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 CommandType = 1 [default = -1];
    if (has_commandtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->commandtype());
    }

    // optional float StartTime = 2 [default = 0];
    if (has_starttime()) {
      total_size += 1 + 4;
    }

    // optional float DurationTime = 3 [default = 0];
    if (has_durationtime()) {
      total_size += 1 + 4;
    }

    // optional sint32 CreateObjectType = 4 [default = 0];
    if (has_createobjecttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->createobjecttype());
    }

    // optional sint32 CreateNPCid = 5 [default = -1];
    if (has_createnpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->createnpcid());
    }

    // optional .DramaModuleTransformV1 CreateNpcTransform = 9;
    if (has_createnpctransform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->createnpctransform());
    }

    // optional bool Trigger = 10 [default = false];
    if (has_trigger()) {
      total_size += 1 + 1;
    }

    // optional sint32 SubtitleStyle = 11 [default = 0];
    if (has_subtitlestyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->subtitlestyle());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 SubtitleID = 12 [default = -1];
    if (has_subtitleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->subtitleid());
    }

    // optional sint32 SubtitleTargetType = 13 [default = 0];
    if (has_subtitletargettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->subtitletargettype());
    }

    // optional sint32 SubtitleTargetConfigId = 14 [default = -1];
    if (has_subtitletargetconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->subtitletargetconfigid());
    }

    // optional .DramaModuleV3V1 TranslatePostion = 15;
    if (has_translatepostion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->translatepostion());
    }

    // optional float TranslateTime = 16 [default = 0];
    if (has_translatetime()) {
      total_size += 2 + 4;
    }

    // optional sint32 TranslateCurve = 17 [default = 0];
    if (has_translatecurve()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->translatecurve());
    }

    // optional sint32 TranslateTargetType = 18 [default = 0];
    if (has_translatetargettype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->translatetargettype());
    }

    // optional sint32 TranslateTargetId = 19 [default = -1];
    if (has_translatetargetid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->translatetargetid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional sint32 SkillId = 20 [default = -1];
    if (has_skillid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skillid());
    }

    // optional sint32 SkllTargetId = 21 [default = -1];
    if (has_sklltargetid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sklltargetid());
    }

    // optional .DramaModuleV3V1 SkillPostion = 22;
    if (has_skillpostion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skillpostion());
    }

    // optional sint32 SkillTargetType = 23 [default = 0];
    if (has_skilltargettype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skilltargettype());
    }

    // optional string MusicFileName = 24;
    if (has_musicfilename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->musicfilename());
    }

    // optional string SoundFileName = 25;
    if (has_soundfilename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soundfilename());
    }

    // optional sint32 CameraPointType = 26 [default = 0];
    if (has_camerapointtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->camerapointtype());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional sint32 FreeType = 31 [default = 0];
    if (has_freetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->freetype());
    }

  }
  // repeated .DramaModuleCameraPointV1 CameraPoints = 27;
  total_size += 2 * this->camerapoints_size();
  for (int i = 0; i < this->camerapoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camerapoints(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DramaModuleCommandInfoV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DramaModuleCommandInfoV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DramaModuleCommandInfoV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DramaModuleCommandInfoV1::MergeFrom(const DramaModuleCommandInfoV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  camerapoints_.MergeFrom(from.camerapoints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commandtype()) {
      set_commandtype(from.commandtype());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_durationtime()) {
      set_durationtime(from.durationtime());
    }
    if (from.has_createobjecttype()) {
      set_createobjecttype(from.createobjecttype());
    }
    if (from.has_createnpcid()) {
      set_createnpcid(from.createnpcid());
    }
    if (from.has_createnpctransform()) {
      mutable_createnpctransform()->::DramaModuleTransformV1::MergeFrom(from.createnpctransform());
    }
    if (from.has_trigger()) {
      set_trigger(from.trigger());
    }
    if (from.has_subtitlestyle()) {
      set_subtitlestyle(from.subtitlestyle());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_subtitleid()) {
      set_subtitleid(from.subtitleid());
    }
    if (from.has_subtitletargettype()) {
      set_subtitletargettype(from.subtitletargettype());
    }
    if (from.has_subtitletargetconfigid()) {
      set_subtitletargetconfigid(from.subtitletargetconfigid());
    }
    if (from.has_translatepostion()) {
      mutable_translatepostion()->::DramaModuleV3V1::MergeFrom(from.translatepostion());
    }
    if (from.has_translatetime()) {
      set_translatetime(from.translatetime());
    }
    if (from.has_translatecurve()) {
      set_translatecurve(from.translatecurve());
    }
    if (from.has_translatetargettype()) {
      set_translatetargettype(from.translatetargettype());
    }
    if (from.has_translatetargetid()) {
      set_translatetargetid(from.translatetargetid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_sklltargetid()) {
      set_sklltargetid(from.sklltargetid());
    }
    if (from.has_skillpostion()) {
      mutable_skillpostion()->::DramaModuleV3V1::MergeFrom(from.skillpostion());
    }
    if (from.has_skilltargettype()) {
      set_skilltargettype(from.skilltargettype());
    }
    if (from.has_musicfilename()) {
      set_musicfilename(from.musicfilename());
    }
    if (from.has_soundfilename()) {
      set_soundfilename(from.soundfilename());
    }
    if (from.has_camerapointtype()) {
      set_camerapointtype(from.camerapointtype());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_freetype()) {
      set_freetype(from.freetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DramaModuleCommandInfoV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DramaModuleCommandInfoV1::CopyFrom(const DramaModuleCommandInfoV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DramaModuleCommandInfoV1::IsInitialized() const {

  return true;
}

void DramaModuleCommandInfoV1::Swap(DramaModuleCommandInfoV1* other) {
  if (other != this) {
    std::swap(commandtype_, other->commandtype_);
    std::swap(starttime_, other->starttime_);
    std::swap(durationtime_, other->durationtime_);
    std::swap(createobjecttype_, other->createobjecttype_);
    std::swap(createnpcid_, other->createnpcid_);
    std::swap(createnpctransform_, other->createnpctransform_);
    std::swap(trigger_, other->trigger_);
    std::swap(subtitlestyle_, other->subtitlestyle_);
    std::swap(subtitleid_, other->subtitleid_);
    std::swap(subtitletargettype_, other->subtitletargettype_);
    std::swap(subtitletargetconfigid_, other->subtitletargetconfigid_);
    std::swap(translatepostion_, other->translatepostion_);
    std::swap(translatetime_, other->translatetime_);
    std::swap(translatecurve_, other->translatecurve_);
    std::swap(translatetargettype_, other->translatetargettype_);
    std::swap(translatetargetid_, other->translatetargetid_);
    std::swap(skillid_, other->skillid_);
    std::swap(sklltargetid_, other->sklltargetid_);
    std::swap(skillpostion_, other->skillpostion_);
    std::swap(skilltargettype_, other->skilltargettype_);
    std::swap(musicfilename_, other->musicfilename_);
    std::swap(soundfilename_, other->soundfilename_);
    std::swap(camerapointtype_, other->camerapointtype_);
    camerapoints_.Swap(&other->camerapoints_);
    std::swap(freetype_, other->freetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DramaModuleCommandInfoV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DramaModuleCommandInfoV1_descriptor_;
  metadata.reflection = DramaModuleCommandInfoV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DramaModuleV3V1::kXFieldNumber;
const int DramaModuleV3V1::kYFieldNumber;
const int DramaModuleV3V1::kZFieldNumber;
#endif  // !_MSC_VER

DramaModuleV3V1::DramaModuleV3V1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DramaModuleV3V1::InitAsDefaultInstance() {
}

DramaModuleV3V1::DramaModuleV3V1(const DramaModuleV3V1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DramaModuleV3V1::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DramaModuleV3V1::~DramaModuleV3V1() {
  SharedDtor();
}

void DramaModuleV3V1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DramaModuleV3V1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DramaModuleV3V1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DramaModuleV3V1_descriptor_;
}

const DramaModuleV3V1& DramaModuleV3V1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DramaModuleV1Data_2eproto();
  return *default_instance_;
}

DramaModuleV3V1* DramaModuleV3V1::default_instance_ = NULL;

DramaModuleV3V1* DramaModuleV3V1::New() const {
  return new DramaModuleV3V1;
}

void DramaModuleV3V1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DramaModuleV3V1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float X = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Y;
        break;
      }

      // optional float Y = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Z;
        break;
      }

      // optional float Z = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DramaModuleV3V1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float X = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float Y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float Z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DramaModuleV3V1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float X = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float Y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float Z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DramaModuleV3V1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float X = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float Y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float Z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DramaModuleV3V1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DramaModuleV3V1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DramaModuleV3V1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DramaModuleV3V1::MergeFrom(const DramaModuleV3V1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DramaModuleV3V1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DramaModuleV3V1::CopyFrom(const DramaModuleV3V1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DramaModuleV3V1::IsInitialized() const {

  return true;
}

void DramaModuleV3V1::Swap(DramaModuleV3V1* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DramaModuleV3V1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DramaModuleV3V1_descriptor_;
  metadata.reflection = DramaModuleV3V1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DramaModuleTransformV1::kPostionFieldNumber;
const int DramaModuleTransformV1::kRotationFieldNumber;
const int DramaModuleTransformV1::kScaleFieldNumber;
#endif  // !_MSC_VER

DramaModuleTransformV1::DramaModuleTransformV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DramaModuleTransformV1::InitAsDefaultInstance() {
  postion_ = const_cast< ::DramaModuleV3V1*>(&::DramaModuleV3V1::default_instance());
  rotation_ = const_cast< ::DramaModuleV3V1*>(&::DramaModuleV3V1::default_instance());
  scale_ = const_cast< ::DramaModuleV3V1*>(&::DramaModuleV3V1::default_instance());
}

DramaModuleTransformV1::DramaModuleTransformV1(const DramaModuleTransformV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DramaModuleTransformV1::SharedCtor() {
  _cached_size_ = 0;
  postion_ = NULL;
  rotation_ = NULL;
  scale_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DramaModuleTransformV1::~DramaModuleTransformV1() {
  SharedDtor();
}

void DramaModuleTransformV1::SharedDtor() {
  if (this != default_instance_) {
    delete postion_;
    delete rotation_;
    delete scale_;
  }
}

void DramaModuleTransformV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DramaModuleTransformV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DramaModuleTransformV1_descriptor_;
}

const DramaModuleTransformV1& DramaModuleTransformV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DramaModuleV1Data_2eproto();
  return *default_instance_;
}

DramaModuleTransformV1* DramaModuleTransformV1::default_instance_ = NULL;

DramaModuleTransformV1* DramaModuleTransformV1::New() const {
  return new DramaModuleTransformV1;
}

void DramaModuleTransformV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_postion()) {
      if (postion_ != NULL) postion_->::DramaModuleV3V1::Clear();
    }
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::DramaModuleV3V1::Clear();
    }
    if (has_scale()) {
      if (scale_ != NULL) scale_->::DramaModuleV3V1::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DramaModuleTransformV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DramaModuleV3V1 Postion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_postion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Rotation;
        break;
      }

      // optional .DramaModuleV3V1 Rotation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Scale;
        break;
      }

      // optional .DramaModuleV3V1 Scale = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DramaModuleTransformV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .DramaModuleV3V1 Postion = 1;
  if (has_postion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->postion(), output);
  }

  // optional .DramaModuleV3V1 Rotation = 2;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rotation(), output);
  }

  // optional .DramaModuleV3V1 Scale = 3;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->scale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DramaModuleTransformV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DramaModuleV3V1 Postion = 1;
  if (has_postion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->postion(), target);
  }

  // optional .DramaModuleV3V1 Rotation = 2;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rotation(), target);
  }

  // optional .DramaModuleV3V1 Scale = 3;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->scale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DramaModuleTransformV1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DramaModuleV3V1 Postion = 1;
    if (has_postion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->postion());
    }

    // optional .DramaModuleV3V1 Rotation = 2;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }

    // optional .DramaModuleV3V1 Scale = 3;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DramaModuleTransformV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DramaModuleTransformV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DramaModuleTransformV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DramaModuleTransformV1::MergeFrom(const DramaModuleTransformV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_postion()) {
      mutable_postion()->::DramaModuleV3V1::MergeFrom(from.postion());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::DramaModuleV3V1::MergeFrom(from.rotation());
    }
    if (from.has_scale()) {
      mutable_scale()->::DramaModuleV3V1::MergeFrom(from.scale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DramaModuleTransformV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DramaModuleTransformV1::CopyFrom(const DramaModuleTransformV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DramaModuleTransformV1::IsInitialized() const {

  return true;
}

void DramaModuleTransformV1::Swap(DramaModuleTransformV1* other) {
  if (other != this) {
    std::swap(postion_, other->postion_);
    std::swap(rotation_, other->rotation_);
    std::swap(scale_, other->scale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DramaModuleTransformV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DramaModuleTransformV1_descriptor_;
  metadata.reflection = DramaModuleTransformV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DramaModuleCameraPointV1::kPosFieldNumber;
const int DramaModuleCameraPointV1::kAngleFieldNumber;
const int DramaModuleCameraPointV1::kTimeFieldNumber;
#endif  // !_MSC_VER

DramaModuleCameraPointV1::DramaModuleCameraPointV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DramaModuleCameraPointV1::InitAsDefaultInstance() {
  pos_ = const_cast< ::DramaModuleV3V1*>(&::DramaModuleV3V1::default_instance());
  angle_ = const_cast< ::DramaModuleV3V1*>(&::DramaModuleV3V1::default_instance());
}

DramaModuleCameraPointV1::DramaModuleCameraPointV1(const DramaModuleCameraPointV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DramaModuleCameraPointV1::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
  angle_ = NULL;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DramaModuleCameraPointV1::~DramaModuleCameraPointV1() {
  SharedDtor();
}

void DramaModuleCameraPointV1::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete angle_;
  }
}

void DramaModuleCameraPointV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DramaModuleCameraPointV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DramaModuleCameraPointV1_descriptor_;
}

const DramaModuleCameraPointV1& DramaModuleCameraPointV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DramaModuleV1Data_2eproto();
  return *default_instance_;
}

DramaModuleCameraPointV1* DramaModuleCameraPointV1::default_instance_ = NULL;

DramaModuleCameraPointV1* DramaModuleCameraPointV1::New() const {
  return new DramaModuleCameraPointV1;
}

void DramaModuleCameraPointV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pos()) {
      if (pos_ != NULL) pos_->::DramaModuleV3V1::Clear();
    }
    if (has_angle()) {
      if (angle_ != NULL) angle_->::DramaModuleV3V1::Clear();
    }
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DramaModuleCameraPointV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DramaModuleV3V1 Pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Angle;
        break;
      }

      // optional .DramaModuleV3V1 Angle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Angle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Time;
        break;
      }

      // optional float Time = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DramaModuleCameraPointV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .DramaModuleV3V1 Pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pos(), output);
  }

  // optional .DramaModuleV3V1 Angle = 2;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->angle(), output);
  }

  // optional float Time = 3 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DramaModuleCameraPointV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DramaModuleV3V1 Pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pos(), target);
  }

  // optional .DramaModuleV3V1 Angle = 2;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->angle(), target);
  }

  // optional float Time = 3 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DramaModuleCameraPointV1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DramaModuleV3V1 Pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .DramaModuleV3V1 Angle = 2;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->angle());
    }

    // optional float Time = 3 [default = 0];
    if (has_time()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DramaModuleCameraPointV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DramaModuleCameraPointV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DramaModuleCameraPointV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DramaModuleCameraPointV1::MergeFrom(const DramaModuleCameraPointV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::DramaModuleV3V1::MergeFrom(from.pos());
    }
    if (from.has_angle()) {
      mutable_angle()->::DramaModuleV3V1::MergeFrom(from.angle());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DramaModuleCameraPointV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DramaModuleCameraPointV1::CopyFrom(const DramaModuleCameraPointV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DramaModuleCameraPointV1::IsInitialized() const {

  return true;
}

void DramaModuleCameraPointV1::Swap(DramaModuleCameraPointV1* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(angle_, other->angle_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DramaModuleCameraPointV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DramaModuleCameraPointV1_descriptor_;
  metadata.reflection = DramaModuleCameraPointV1_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
