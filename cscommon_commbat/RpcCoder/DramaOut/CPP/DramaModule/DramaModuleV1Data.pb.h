// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DramaModuleV1Data.proto

#ifndef PROTOBUF_DramaModuleV1Data_2eproto__INCLUDED
#define PROTOBUF_DramaModuleV1Data_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DramaModuleV1Data_2eproto();
void protobuf_AssignDesc_DramaModuleV1Data_2eproto();
void protobuf_ShutdownFile_DramaModuleV1Data_2eproto();

class DramaModuleDramaInfoV1;
class DramaModuleUseLessV1;
class DramaModuleCommandInfoV1;
class DramaModuleV3V1;
class DramaModuleTransformV1;
class DramaModuleCameraPointV1;

// ===================================================================

class DramaModuleDramaInfoV1 : public ::google::protobuf::Message {
 public:
  DramaModuleDramaInfoV1();
  virtual ~DramaModuleDramaInfoV1();

  DramaModuleDramaInfoV1(const DramaModuleDramaInfoV1& from);

  inline DramaModuleDramaInfoV1& operator=(const DramaModuleDramaInfoV1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DramaModuleDramaInfoV1& default_instance();

  void Swap(DramaModuleDramaInfoV1* other);

  // implements Message ----------------------------------------------

  DramaModuleDramaInfoV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DramaModuleDramaInfoV1& from);
  void MergeFrom(const DramaModuleDramaInfoV1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional float TotalTime = 6 [default = 0];
  inline bool has_totaltime() const;
  inline void clear_totaltime();
  static const int kTotalTimeFieldNumber = 6;
  inline float totaltime() const;
  inline void set_totaltime(float value);

  // repeated .DramaModuleCommandInfoV1 CommandList = 7;
  inline int commandlist_size() const;
  inline void clear_commandlist();
  static const int kCommandListFieldNumber = 7;
  inline const ::DramaModuleCommandInfoV1& commandlist(int index) const;
  inline ::DramaModuleCommandInfoV1* mutable_commandlist(int index);
  inline ::DramaModuleCommandInfoV1* add_commandlist();
  inline const ::google::protobuf::RepeatedPtrField< ::DramaModuleCommandInfoV1 >&
      commandlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::DramaModuleCommandInfoV1 >*
      mutable_commandlist();

  // @@protoc_insertion_point(class_scope:DramaModuleDramaInfoV1)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_totaltime();
  inline void clear_has_totaltime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::DramaModuleCommandInfoV1 > commandlist_;
  float totaltime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DramaModuleV1Data_2eproto();
  friend void protobuf_AssignDesc_DramaModuleV1Data_2eproto();
  friend void protobuf_ShutdownFile_DramaModuleV1Data_2eproto();

  void InitAsDefaultInstance();
  static DramaModuleDramaInfoV1* default_instance_;
};
// -------------------------------------------------------------------

class DramaModuleUseLessV1 : public ::google::protobuf::Message {
 public:
  DramaModuleUseLessV1();
  virtual ~DramaModuleUseLessV1();

  DramaModuleUseLessV1(const DramaModuleUseLessV1& from);

  inline DramaModuleUseLessV1& operator=(const DramaModuleUseLessV1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DramaModuleUseLessV1& default_instance();

  void Swap(DramaModuleUseLessV1* other);

  // implements Message ----------------------------------------------

  DramaModuleUseLessV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DramaModuleUseLessV1& from);
  void MergeFrom(const DramaModuleUseLessV1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DramaModuleUseLessV1)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_DramaModuleV1Data_2eproto();
  friend void protobuf_AssignDesc_DramaModuleV1Data_2eproto();
  friend void protobuf_ShutdownFile_DramaModuleV1Data_2eproto();

  void InitAsDefaultInstance();
  static DramaModuleUseLessV1* default_instance_;
};
// -------------------------------------------------------------------

class DramaModuleCommandInfoV1 : public ::google::protobuf::Message {
 public:
  DramaModuleCommandInfoV1();
  virtual ~DramaModuleCommandInfoV1();

  DramaModuleCommandInfoV1(const DramaModuleCommandInfoV1& from);

  inline DramaModuleCommandInfoV1& operator=(const DramaModuleCommandInfoV1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DramaModuleCommandInfoV1& default_instance();

  void Swap(DramaModuleCommandInfoV1* other);

  // implements Message ----------------------------------------------

  DramaModuleCommandInfoV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DramaModuleCommandInfoV1& from);
  void MergeFrom(const DramaModuleCommandInfoV1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 CommandType = 1 [default = -1];
  inline bool has_commandtype() const;
  inline void clear_commandtype();
  static const int kCommandTypeFieldNumber = 1;
  inline ::google::protobuf::int32 commandtype() const;
  inline void set_commandtype(::google::protobuf::int32 value);

  // optional float StartTime = 2 [default = 0];
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 2;
  inline float starttime() const;
  inline void set_starttime(float value);

  // optional float DurationTime = 3 [default = 0];
  inline bool has_durationtime() const;
  inline void clear_durationtime();
  static const int kDurationTimeFieldNumber = 3;
  inline float durationtime() const;
  inline void set_durationtime(float value);

  // optional sint32 CreateObjectType = 4 [default = 0];
  inline bool has_createobjecttype() const;
  inline void clear_createobjecttype();
  static const int kCreateObjectTypeFieldNumber = 4;
  inline ::google::protobuf::int32 createobjecttype() const;
  inline void set_createobjecttype(::google::protobuf::int32 value);

  // optional sint32 CreateNPCid = 5 [default = -1];
  inline bool has_createnpcid() const;
  inline void clear_createnpcid();
  static const int kCreateNPCidFieldNumber = 5;
  inline ::google::protobuf::int32 createnpcid() const;
  inline void set_createnpcid(::google::protobuf::int32 value);

  // optional .DramaModuleTransformV1 CreateNpcTransform = 9;
  inline bool has_createnpctransform() const;
  inline void clear_createnpctransform();
  static const int kCreateNpcTransformFieldNumber = 9;
  inline const ::DramaModuleTransformV1& createnpctransform() const;
  inline ::DramaModuleTransformV1* mutable_createnpctransform();
  inline ::DramaModuleTransformV1* release_createnpctransform();
  inline void set_allocated_createnpctransform(::DramaModuleTransformV1* createnpctransform);

  // optional bool Trigger = 10 [default = false];
  inline bool has_trigger() const;
  inline void clear_trigger();
  static const int kTriggerFieldNumber = 10;
  inline bool trigger() const;
  inline void set_trigger(bool value);

  // optional sint32 SubtitleStyle = 11 [default = 0];
  inline bool has_subtitlestyle() const;
  inline void clear_subtitlestyle();
  static const int kSubtitleStyleFieldNumber = 11;
  inline ::google::protobuf::int32 subtitlestyle() const;
  inline void set_subtitlestyle(::google::protobuf::int32 value);

  // optional sint32 SubtitleID = 12 [default = -1];
  inline bool has_subtitleid() const;
  inline void clear_subtitleid();
  static const int kSubtitleIDFieldNumber = 12;
  inline ::google::protobuf::int32 subtitleid() const;
  inline void set_subtitleid(::google::protobuf::int32 value);

  // optional sint32 SubtitleTargetType = 13 [default = 0];
  inline bool has_subtitletargettype() const;
  inline void clear_subtitletargettype();
  static const int kSubtitleTargetTypeFieldNumber = 13;
  inline ::google::protobuf::int32 subtitletargettype() const;
  inline void set_subtitletargettype(::google::protobuf::int32 value);

  // optional sint32 SubtitleTargetConfigId = 14 [default = -1];
  inline bool has_subtitletargetconfigid() const;
  inline void clear_subtitletargetconfigid();
  static const int kSubtitleTargetConfigIdFieldNumber = 14;
  inline ::google::protobuf::int32 subtitletargetconfigid() const;
  inline void set_subtitletargetconfigid(::google::protobuf::int32 value);

  // optional .DramaModuleV3V1 TranslatePostion = 15;
  inline bool has_translatepostion() const;
  inline void clear_translatepostion();
  static const int kTranslatePostionFieldNumber = 15;
  inline const ::DramaModuleV3V1& translatepostion() const;
  inline ::DramaModuleV3V1* mutable_translatepostion();
  inline ::DramaModuleV3V1* release_translatepostion();
  inline void set_allocated_translatepostion(::DramaModuleV3V1* translatepostion);

  // optional float TranslateTime = 16 [default = 0];
  inline bool has_translatetime() const;
  inline void clear_translatetime();
  static const int kTranslateTimeFieldNumber = 16;
  inline float translatetime() const;
  inline void set_translatetime(float value);

  // optional sint32 TranslateCurve = 17 [default = 0];
  inline bool has_translatecurve() const;
  inline void clear_translatecurve();
  static const int kTranslateCurveFieldNumber = 17;
  inline ::google::protobuf::int32 translatecurve() const;
  inline void set_translatecurve(::google::protobuf::int32 value);

  // optional sint32 TranslateTargetType = 18 [default = 0];
  inline bool has_translatetargettype() const;
  inline void clear_translatetargettype();
  static const int kTranslateTargetTypeFieldNumber = 18;
  inline ::google::protobuf::int32 translatetargettype() const;
  inline void set_translatetargettype(::google::protobuf::int32 value);

  // optional sint32 TranslateTargetId = 19 [default = -1];
  inline bool has_translatetargetid() const;
  inline void clear_translatetargetid();
  static const int kTranslateTargetIdFieldNumber = 19;
  inline ::google::protobuf::int32 translatetargetid() const;
  inline void set_translatetargetid(::google::protobuf::int32 value);

  // optional sint32 SkillId = 20 [default = -1];
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 20;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // optional sint32 SkllTargetId = 21 [default = -1];
  inline bool has_sklltargetid() const;
  inline void clear_sklltargetid();
  static const int kSkllTargetIdFieldNumber = 21;
  inline ::google::protobuf::int32 sklltargetid() const;
  inline void set_sklltargetid(::google::protobuf::int32 value);

  // optional .DramaModuleV3V1 SkillPostion = 22;
  inline bool has_skillpostion() const;
  inline void clear_skillpostion();
  static const int kSkillPostionFieldNumber = 22;
  inline const ::DramaModuleV3V1& skillpostion() const;
  inline ::DramaModuleV3V1* mutable_skillpostion();
  inline ::DramaModuleV3V1* release_skillpostion();
  inline void set_allocated_skillpostion(::DramaModuleV3V1* skillpostion);

  // optional sint32 SkillTargetType = 23 [default = 0];
  inline bool has_skilltargettype() const;
  inline void clear_skilltargettype();
  static const int kSkillTargetTypeFieldNumber = 23;
  inline ::google::protobuf::int32 skilltargettype() const;
  inline void set_skilltargettype(::google::protobuf::int32 value);

  // optional string MusicFileName = 24;
  inline bool has_musicfilename() const;
  inline void clear_musicfilename();
  static const int kMusicFileNameFieldNumber = 24;
  inline const ::std::string& musicfilename() const;
  inline void set_musicfilename(const ::std::string& value);
  inline void set_musicfilename(const char* value);
  inline void set_musicfilename(const char* value, size_t size);
  inline ::std::string* mutable_musicfilename();
  inline ::std::string* release_musicfilename();
  inline void set_allocated_musicfilename(::std::string* musicfilename);

  // optional string SoundFileName = 25;
  inline bool has_soundfilename() const;
  inline void clear_soundfilename();
  static const int kSoundFileNameFieldNumber = 25;
  inline const ::std::string& soundfilename() const;
  inline void set_soundfilename(const ::std::string& value);
  inline void set_soundfilename(const char* value);
  inline void set_soundfilename(const char* value, size_t size);
  inline ::std::string* mutable_soundfilename();
  inline ::std::string* release_soundfilename();
  inline void set_allocated_soundfilename(::std::string* soundfilename);

  // optional sint32 CameraPointType = 26 [default = 0];
  inline bool has_camerapointtype() const;
  inline void clear_camerapointtype();
  static const int kCameraPointTypeFieldNumber = 26;
  inline ::google::protobuf::int32 camerapointtype() const;
  inline void set_camerapointtype(::google::protobuf::int32 value);

  // repeated .DramaModuleCameraPointV1 CameraPoints = 27;
  inline int camerapoints_size() const;
  inline void clear_camerapoints();
  static const int kCameraPointsFieldNumber = 27;
  inline const ::DramaModuleCameraPointV1& camerapoints(int index) const;
  inline ::DramaModuleCameraPointV1* mutable_camerapoints(int index);
  inline ::DramaModuleCameraPointV1* add_camerapoints();
  inline const ::google::protobuf::RepeatedPtrField< ::DramaModuleCameraPointV1 >&
      camerapoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::DramaModuleCameraPointV1 >*
      mutable_camerapoints();

  // optional sint32 FreeType = 31 [default = 0];
  inline bool has_freetype() const;
  inline void clear_freetype();
  static const int kFreeTypeFieldNumber = 31;
  inline ::google::protobuf::int32 freetype() const;
  inline void set_freetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DramaModuleCommandInfoV1)
 private:
  inline void set_has_commandtype();
  inline void clear_has_commandtype();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_durationtime();
  inline void clear_has_durationtime();
  inline void set_has_createobjecttype();
  inline void clear_has_createobjecttype();
  inline void set_has_createnpcid();
  inline void clear_has_createnpcid();
  inline void set_has_createnpctransform();
  inline void clear_has_createnpctransform();
  inline void set_has_trigger();
  inline void clear_has_trigger();
  inline void set_has_subtitlestyle();
  inline void clear_has_subtitlestyle();
  inline void set_has_subtitleid();
  inline void clear_has_subtitleid();
  inline void set_has_subtitletargettype();
  inline void clear_has_subtitletargettype();
  inline void set_has_subtitletargetconfigid();
  inline void clear_has_subtitletargetconfigid();
  inline void set_has_translatepostion();
  inline void clear_has_translatepostion();
  inline void set_has_translatetime();
  inline void clear_has_translatetime();
  inline void set_has_translatecurve();
  inline void clear_has_translatecurve();
  inline void set_has_translatetargettype();
  inline void clear_has_translatetargettype();
  inline void set_has_translatetargetid();
  inline void clear_has_translatetargetid();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_sklltargetid();
  inline void clear_has_sklltargetid();
  inline void set_has_skillpostion();
  inline void clear_has_skillpostion();
  inline void set_has_skilltargettype();
  inline void clear_has_skilltargettype();
  inline void set_has_musicfilename();
  inline void clear_has_musicfilename();
  inline void set_has_soundfilename();
  inline void clear_has_soundfilename();
  inline void set_has_camerapointtype();
  inline void clear_has_camerapointtype();
  inline void set_has_freetype();
  inline void clear_has_freetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 commandtype_;
  float starttime_;
  float durationtime_;
  ::google::protobuf::int32 createobjecttype_;
  ::DramaModuleTransformV1* createnpctransform_;
  ::google::protobuf::int32 createnpcid_;
  bool trigger_;
  ::google::protobuf::int32 subtitlestyle_;
  ::google::protobuf::int32 subtitleid_;
  ::google::protobuf::int32 subtitletargettype_;
  ::google::protobuf::int32 subtitletargetconfigid_;
  ::DramaModuleV3V1* translatepostion_;
  float translatetime_;
  ::google::protobuf::int32 translatecurve_;
  ::google::protobuf::int32 translatetargettype_;
  ::google::protobuf::int32 translatetargetid_;
  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 sklltargetid_;
  ::DramaModuleV3V1* skillpostion_;
  ::std::string* musicfilename_;
  ::google::protobuf::int32 skilltargettype_;
  ::google::protobuf::int32 camerapointtype_;
  ::std::string* soundfilename_;
  ::google::protobuf::RepeatedPtrField< ::DramaModuleCameraPointV1 > camerapoints_;
  ::google::protobuf::int32 freetype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(25 + 31) / 32];

  friend void  protobuf_AddDesc_DramaModuleV1Data_2eproto();
  friend void protobuf_AssignDesc_DramaModuleV1Data_2eproto();
  friend void protobuf_ShutdownFile_DramaModuleV1Data_2eproto();

  void InitAsDefaultInstance();
  static DramaModuleCommandInfoV1* default_instance_;
};
// -------------------------------------------------------------------

class DramaModuleV3V1 : public ::google::protobuf::Message {
 public:
  DramaModuleV3V1();
  virtual ~DramaModuleV3V1();

  DramaModuleV3V1(const DramaModuleV3V1& from);

  inline DramaModuleV3V1& operator=(const DramaModuleV3V1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DramaModuleV3V1& default_instance();

  void Swap(DramaModuleV3V1* other);

  // implements Message ----------------------------------------------

  DramaModuleV3V1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DramaModuleV3V1& from);
  void MergeFrom(const DramaModuleV3V1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float X = 1 [default = 0];
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float Y = 2 [default = 0];
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float Z = 3 [default = 0];
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:DramaModuleV3V1)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DramaModuleV1Data_2eproto();
  friend void protobuf_AssignDesc_DramaModuleV1Data_2eproto();
  friend void protobuf_ShutdownFile_DramaModuleV1Data_2eproto();

  void InitAsDefaultInstance();
  static DramaModuleV3V1* default_instance_;
};
// -------------------------------------------------------------------

class DramaModuleTransformV1 : public ::google::protobuf::Message {
 public:
  DramaModuleTransformV1();
  virtual ~DramaModuleTransformV1();

  DramaModuleTransformV1(const DramaModuleTransformV1& from);

  inline DramaModuleTransformV1& operator=(const DramaModuleTransformV1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DramaModuleTransformV1& default_instance();

  void Swap(DramaModuleTransformV1* other);

  // implements Message ----------------------------------------------

  DramaModuleTransformV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DramaModuleTransformV1& from);
  void MergeFrom(const DramaModuleTransformV1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DramaModuleV3V1 Postion = 1;
  inline bool has_postion() const;
  inline void clear_postion();
  static const int kPostionFieldNumber = 1;
  inline const ::DramaModuleV3V1& postion() const;
  inline ::DramaModuleV3V1* mutable_postion();
  inline ::DramaModuleV3V1* release_postion();
  inline void set_allocated_postion(::DramaModuleV3V1* postion);

  // optional .DramaModuleV3V1 Rotation = 2;
  inline bool has_rotation() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 2;
  inline const ::DramaModuleV3V1& rotation() const;
  inline ::DramaModuleV3V1* mutable_rotation();
  inline ::DramaModuleV3V1* release_rotation();
  inline void set_allocated_rotation(::DramaModuleV3V1* rotation);

  // optional .DramaModuleV3V1 Scale = 3;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 3;
  inline const ::DramaModuleV3V1& scale() const;
  inline ::DramaModuleV3V1* mutable_scale();
  inline ::DramaModuleV3V1* release_scale();
  inline void set_allocated_scale(::DramaModuleV3V1* scale);

  // @@protoc_insertion_point(class_scope:DramaModuleTransformV1)
 private:
  inline void set_has_postion();
  inline void clear_has_postion();
  inline void set_has_rotation();
  inline void clear_has_rotation();
  inline void set_has_scale();
  inline void clear_has_scale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::DramaModuleV3V1* postion_;
  ::DramaModuleV3V1* rotation_;
  ::DramaModuleV3V1* scale_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DramaModuleV1Data_2eproto();
  friend void protobuf_AssignDesc_DramaModuleV1Data_2eproto();
  friend void protobuf_ShutdownFile_DramaModuleV1Data_2eproto();

  void InitAsDefaultInstance();
  static DramaModuleTransformV1* default_instance_;
};
// -------------------------------------------------------------------

class DramaModuleCameraPointV1 : public ::google::protobuf::Message {
 public:
  DramaModuleCameraPointV1();
  virtual ~DramaModuleCameraPointV1();

  DramaModuleCameraPointV1(const DramaModuleCameraPointV1& from);

  inline DramaModuleCameraPointV1& operator=(const DramaModuleCameraPointV1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DramaModuleCameraPointV1& default_instance();

  void Swap(DramaModuleCameraPointV1* other);

  // implements Message ----------------------------------------------

  DramaModuleCameraPointV1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DramaModuleCameraPointV1& from);
  void MergeFrom(const DramaModuleCameraPointV1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DramaModuleV3V1 Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline const ::DramaModuleV3V1& pos() const;
  inline ::DramaModuleV3V1* mutable_pos();
  inline ::DramaModuleV3V1* release_pos();
  inline void set_allocated_pos(::DramaModuleV3V1* pos);

  // optional .DramaModuleV3V1 Angle = 2;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 2;
  inline const ::DramaModuleV3V1& angle() const;
  inline ::DramaModuleV3V1* mutable_angle();
  inline ::DramaModuleV3V1* release_angle();
  inline void set_allocated_angle(::DramaModuleV3V1* angle);

  // optional float Time = 3 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline float time() const;
  inline void set_time(float value);

  // @@protoc_insertion_point(class_scope:DramaModuleCameraPointV1)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::DramaModuleV3V1* pos_;
  ::DramaModuleV3V1* angle_;
  float time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DramaModuleV1Data_2eproto();
  friend void protobuf_AssignDesc_DramaModuleV1Data_2eproto();
  friend void protobuf_ShutdownFile_DramaModuleV1Data_2eproto();

  void InitAsDefaultInstance();
  static DramaModuleCameraPointV1* default_instance_;
};
// ===================================================================


// ===================================================================

// DramaModuleDramaInfoV1

// optional string Name = 5;
inline bool DramaModuleDramaInfoV1::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DramaModuleDramaInfoV1::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DramaModuleDramaInfoV1::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DramaModuleDramaInfoV1::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DramaModuleDramaInfoV1::name() const {
  return *name_;
}
inline void DramaModuleDramaInfoV1::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DramaModuleDramaInfoV1::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DramaModuleDramaInfoV1::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DramaModuleDramaInfoV1::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DramaModuleDramaInfoV1::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DramaModuleDramaInfoV1::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float TotalTime = 6 [default = 0];
inline bool DramaModuleDramaInfoV1::has_totaltime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DramaModuleDramaInfoV1::set_has_totaltime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DramaModuleDramaInfoV1::clear_has_totaltime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DramaModuleDramaInfoV1::clear_totaltime() {
  totaltime_ = 0;
  clear_has_totaltime();
}
inline float DramaModuleDramaInfoV1::totaltime() const {
  return totaltime_;
}
inline void DramaModuleDramaInfoV1::set_totaltime(float value) {
  set_has_totaltime();
  totaltime_ = value;
}

// repeated .DramaModuleCommandInfoV1 CommandList = 7;
inline int DramaModuleDramaInfoV1::commandlist_size() const {
  return commandlist_.size();
}
inline void DramaModuleDramaInfoV1::clear_commandlist() {
  commandlist_.Clear();
}
inline const ::DramaModuleCommandInfoV1& DramaModuleDramaInfoV1::commandlist(int index) const {
  return commandlist_.Get(index);
}
inline ::DramaModuleCommandInfoV1* DramaModuleDramaInfoV1::mutable_commandlist(int index) {
  return commandlist_.Mutable(index);
}
inline ::DramaModuleCommandInfoV1* DramaModuleDramaInfoV1::add_commandlist() {
  return commandlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DramaModuleCommandInfoV1 >&
DramaModuleDramaInfoV1::commandlist() const {
  return commandlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::DramaModuleCommandInfoV1 >*
DramaModuleDramaInfoV1::mutable_commandlist() {
  return &commandlist_;
}

// -------------------------------------------------------------------

// DramaModuleUseLessV1

// -------------------------------------------------------------------

// DramaModuleCommandInfoV1

// optional sint32 CommandType = 1 [default = -1];
inline bool DramaModuleCommandInfoV1::has_commandtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_commandtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DramaModuleCommandInfoV1::clear_has_commandtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DramaModuleCommandInfoV1::clear_commandtype() {
  commandtype_ = -1;
  clear_has_commandtype();
}
inline ::google::protobuf::int32 DramaModuleCommandInfoV1::commandtype() const {
  return commandtype_;
}
inline void DramaModuleCommandInfoV1::set_commandtype(::google::protobuf::int32 value) {
  set_has_commandtype();
  commandtype_ = value;
}

// optional float StartTime = 2 [default = 0];
inline bool DramaModuleCommandInfoV1::has_starttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_starttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DramaModuleCommandInfoV1::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DramaModuleCommandInfoV1::clear_starttime() {
  starttime_ = 0;
  clear_has_starttime();
}
inline float DramaModuleCommandInfoV1::starttime() const {
  return starttime_;
}
inline void DramaModuleCommandInfoV1::set_starttime(float value) {
  set_has_starttime();
  starttime_ = value;
}

// optional float DurationTime = 3 [default = 0];
inline bool DramaModuleCommandInfoV1::has_durationtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_durationtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DramaModuleCommandInfoV1::clear_has_durationtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DramaModuleCommandInfoV1::clear_durationtime() {
  durationtime_ = 0;
  clear_has_durationtime();
}
inline float DramaModuleCommandInfoV1::durationtime() const {
  return durationtime_;
}
inline void DramaModuleCommandInfoV1::set_durationtime(float value) {
  set_has_durationtime();
  durationtime_ = value;
}

// optional sint32 CreateObjectType = 4 [default = 0];
inline bool DramaModuleCommandInfoV1::has_createobjecttype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_createobjecttype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DramaModuleCommandInfoV1::clear_has_createobjecttype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DramaModuleCommandInfoV1::clear_createobjecttype() {
  createobjecttype_ = 0;
  clear_has_createobjecttype();
}
inline ::google::protobuf::int32 DramaModuleCommandInfoV1::createobjecttype() const {
  return createobjecttype_;
}
inline void DramaModuleCommandInfoV1::set_createobjecttype(::google::protobuf::int32 value) {
  set_has_createobjecttype();
  createobjecttype_ = value;
}

// optional sint32 CreateNPCid = 5 [default = -1];
inline bool DramaModuleCommandInfoV1::has_createnpcid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_createnpcid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DramaModuleCommandInfoV1::clear_has_createnpcid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DramaModuleCommandInfoV1::clear_createnpcid() {
  createnpcid_ = -1;
  clear_has_createnpcid();
}
inline ::google::protobuf::int32 DramaModuleCommandInfoV1::createnpcid() const {
  return createnpcid_;
}
inline void DramaModuleCommandInfoV1::set_createnpcid(::google::protobuf::int32 value) {
  set_has_createnpcid();
  createnpcid_ = value;
}

// optional .DramaModuleTransformV1 CreateNpcTransform = 9;
inline bool DramaModuleCommandInfoV1::has_createnpctransform() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_createnpctransform() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DramaModuleCommandInfoV1::clear_has_createnpctransform() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DramaModuleCommandInfoV1::clear_createnpctransform() {
  if (createnpctransform_ != NULL) createnpctransform_->::DramaModuleTransformV1::Clear();
  clear_has_createnpctransform();
}
inline const ::DramaModuleTransformV1& DramaModuleCommandInfoV1::createnpctransform() const {
  return createnpctransform_ != NULL ? *createnpctransform_ : *default_instance_->createnpctransform_;
}
inline ::DramaModuleTransformV1* DramaModuleCommandInfoV1::mutable_createnpctransform() {
  set_has_createnpctransform();
  if (createnpctransform_ == NULL) createnpctransform_ = new ::DramaModuleTransformV1;
  return createnpctransform_;
}
inline ::DramaModuleTransformV1* DramaModuleCommandInfoV1::release_createnpctransform() {
  clear_has_createnpctransform();
  ::DramaModuleTransformV1* temp = createnpctransform_;
  createnpctransform_ = NULL;
  return temp;
}
inline void DramaModuleCommandInfoV1::set_allocated_createnpctransform(::DramaModuleTransformV1* createnpctransform) {
  delete createnpctransform_;
  createnpctransform_ = createnpctransform;
  if (createnpctransform) {
    set_has_createnpctransform();
  } else {
    clear_has_createnpctransform();
  }
}

// optional bool Trigger = 10 [default = false];
inline bool DramaModuleCommandInfoV1::has_trigger() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_trigger() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DramaModuleCommandInfoV1::clear_has_trigger() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DramaModuleCommandInfoV1::clear_trigger() {
  trigger_ = false;
  clear_has_trigger();
}
inline bool DramaModuleCommandInfoV1::trigger() const {
  return trigger_;
}
inline void DramaModuleCommandInfoV1::set_trigger(bool value) {
  set_has_trigger();
  trigger_ = value;
}

// optional sint32 SubtitleStyle = 11 [default = 0];
inline bool DramaModuleCommandInfoV1::has_subtitlestyle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_subtitlestyle() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DramaModuleCommandInfoV1::clear_has_subtitlestyle() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DramaModuleCommandInfoV1::clear_subtitlestyle() {
  subtitlestyle_ = 0;
  clear_has_subtitlestyle();
}
inline ::google::protobuf::int32 DramaModuleCommandInfoV1::subtitlestyle() const {
  return subtitlestyle_;
}
inline void DramaModuleCommandInfoV1::set_subtitlestyle(::google::protobuf::int32 value) {
  set_has_subtitlestyle();
  subtitlestyle_ = value;
}

// optional sint32 SubtitleID = 12 [default = -1];
inline bool DramaModuleCommandInfoV1::has_subtitleid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_subtitleid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DramaModuleCommandInfoV1::clear_has_subtitleid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DramaModuleCommandInfoV1::clear_subtitleid() {
  subtitleid_ = -1;
  clear_has_subtitleid();
}
inline ::google::protobuf::int32 DramaModuleCommandInfoV1::subtitleid() const {
  return subtitleid_;
}
inline void DramaModuleCommandInfoV1::set_subtitleid(::google::protobuf::int32 value) {
  set_has_subtitleid();
  subtitleid_ = value;
}

// optional sint32 SubtitleTargetType = 13 [default = 0];
inline bool DramaModuleCommandInfoV1::has_subtitletargettype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_subtitletargettype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DramaModuleCommandInfoV1::clear_has_subtitletargettype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DramaModuleCommandInfoV1::clear_subtitletargettype() {
  subtitletargettype_ = 0;
  clear_has_subtitletargettype();
}
inline ::google::protobuf::int32 DramaModuleCommandInfoV1::subtitletargettype() const {
  return subtitletargettype_;
}
inline void DramaModuleCommandInfoV1::set_subtitletargettype(::google::protobuf::int32 value) {
  set_has_subtitletargettype();
  subtitletargettype_ = value;
}

// optional sint32 SubtitleTargetConfigId = 14 [default = -1];
inline bool DramaModuleCommandInfoV1::has_subtitletargetconfigid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_subtitletargetconfigid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DramaModuleCommandInfoV1::clear_has_subtitletargetconfigid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DramaModuleCommandInfoV1::clear_subtitletargetconfigid() {
  subtitletargetconfigid_ = -1;
  clear_has_subtitletargetconfigid();
}
inline ::google::protobuf::int32 DramaModuleCommandInfoV1::subtitletargetconfigid() const {
  return subtitletargetconfigid_;
}
inline void DramaModuleCommandInfoV1::set_subtitletargetconfigid(::google::protobuf::int32 value) {
  set_has_subtitletargetconfigid();
  subtitletargetconfigid_ = value;
}

// optional .DramaModuleV3V1 TranslatePostion = 15;
inline bool DramaModuleCommandInfoV1::has_translatepostion() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_translatepostion() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DramaModuleCommandInfoV1::clear_has_translatepostion() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DramaModuleCommandInfoV1::clear_translatepostion() {
  if (translatepostion_ != NULL) translatepostion_->::DramaModuleV3V1::Clear();
  clear_has_translatepostion();
}
inline const ::DramaModuleV3V1& DramaModuleCommandInfoV1::translatepostion() const {
  return translatepostion_ != NULL ? *translatepostion_ : *default_instance_->translatepostion_;
}
inline ::DramaModuleV3V1* DramaModuleCommandInfoV1::mutable_translatepostion() {
  set_has_translatepostion();
  if (translatepostion_ == NULL) translatepostion_ = new ::DramaModuleV3V1;
  return translatepostion_;
}
inline ::DramaModuleV3V1* DramaModuleCommandInfoV1::release_translatepostion() {
  clear_has_translatepostion();
  ::DramaModuleV3V1* temp = translatepostion_;
  translatepostion_ = NULL;
  return temp;
}
inline void DramaModuleCommandInfoV1::set_allocated_translatepostion(::DramaModuleV3V1* translatepostion) {
  delete translatepostion_;
  translatepostion_ = translatepostion;
  if (translatepostion) {
    set_has_translatepostion();
  } else {
    clear_has_translatepostion();
  }
}

// optional float TranslateTime = 16 [default = 0];
inline bool DramaModuleCommandInfoV1::has_translatetime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_translatetime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DramaModuleCommandInfoV1::clear_has_translatetime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DramaModuleCommandInfoV1::clear_translatetime() {
  translatetime_ = 0;
  clear_has_translatetime();
}
inline float DramaModuleCommandInfoV1::translatetime() const {
  return translatetime_;
}
inline void DramaModuleCommandInfoV1::set_translatetime(float value) {
  set_has_translatetime();
  translatetime_ = value;
}

// optional sint32 TranslateCurve = 17 [default = 0];
inline bool DramaModuleCommandInfoV1::has_translatecurve() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_translatecurve() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DramaModuleCommandInfoV1::clear_has_translatecurve() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DramaModuleCommandInfoV1::clear_translatecurve() {
  translatecurve_ = 0;
  clear_has_translatecurve();
}
inline ::google::protobuf::int32 DramaModuleCommandInfoV1::translatecurve() const {
  return translatecurve_;
}
inline void DramaModuleCommandInfoV1::set_translatecurve(::google::protobuf::int32 value) {
  set_has_translatecurve();
  translatecurve_ = value;
}

// optional sint32 TranslateTargetType = 18 [default = 0];
inline bool DramaModuleCommandInfoV1::has_translatetargettype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_translatetargettype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DramaModuleCommandInfoV1::clear_has_translatetargettype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DramaModuleCommandInfoV1::clear_translatetargettype() {
  translatetargettype_ = 0;
  clear_has_translatetargettype();
}
inline ::google::protobuf::int32 DramaModuleCommandInfoV1::translatetargettype() const {
  return translatetargettype_;
}
inline void DramaModuleCommandInfoV1::set_translatetargettype(::google::protobuf::int32 value) {
  set_has_translatetargettype();
  translatetargettype_ = value;
}

// optional sint32 TranslateTargetId = 19 [default = -1];
inline bool DramaModuleCommandInfoV1::has_translatetargetid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_translatetargetid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DramaModuleCommandInfoV1::clear_has_translatetargetid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DramaModuleCommandInfoV1::clear_translatetargetid() {
  translatetargetid_ = -1;
  clear_has_translatetargetid();
}
inline ::google::protobuf::int32 DramaModuleCommandInfoV1::translatetargetid() const {
  return translatetargetid_;
}
inline void DramaModuleCommandInfoV1::set_translatetargetid(::google::protobuf::int32 value) {
  set_has_translatetargetid();
  translatetargetid_ = value;
}

// optional sint32 SkillId = 20 [default = -1];
inline bool DramaModuleCommandInfoV1::has_skillid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_skillid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DramaModuleCommandInfoV1::clear_has_skillid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DramaModuleCommandInfoV1::clear_skillid() {
  skillid_ = -1;
  clear_has_skillid();
}
inline ::google::protobuf::int32 DramaModuleCommandInfoV1::skillid() const {
  return skillid_;
}
inline void DramaModuleCommandInfoV1::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional sint32 SkllTargetId = 21 [default = -1];
inline bool DramaModuleCommandInfoV1::has_sklltargetid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_sklltargetid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DramaModuleCommandInfoV1::clear_has_sklltargetid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DramaModuleCommandInfoV1::clear_sklltargetid() {
  sklltargetid_ = -1;
  clear_has_sklltargetid();
}
inline ::google::protobuf::int32 DramaModuleCommandInfoV1::sklltargetid() const {
  return sklltargetid_;
}
inline void DramaModuleCommandInfoV1::set_sklltargetid(::google::protobuf::int32 value) {
  set_has_sklltargetid();
  sklltargetid_ = value;
}

// optional .DramaModuleV3V1 SkillPostion = 22;
inline bool DramaModuleCommandInfoV1::has_skillpostion() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_skillpostion() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DramaModuleCommandInfoV1::clear_has_skillpostion() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DramaModuleCommandInfoV1::clear_skillpostion() {
  if (skillpostion_ != NULL) skillpostion_->::DramaModuleV3V1::Clear();
  clear_has_skillpostion();
}
inline const ::DramaModuleV3V1& DramaModuleCommandInfoV1::skillpostion() const {
  return skillpostion_ != NULL ? *skillpostion_ : *default_instance_->skillpostion_;
}
inline ::DramaModuleV3V1* DramaModuleCommandInfoV1::mutable_skillpostion() {
  set_has_skillpostion();
  if (skillpostion_ == NULL) skillpostion_ = new ::DramaModuleV3V1;
  return skillpostion_;
}
inline ::DramaModuleV3V1* DramaModuleCommandInfoV1::release_skillpostion() {
  clear_has_skillpostion();
  ::DramaModuleV3V1* temp = skillpostion_;
  skillpostion_ = NULL;
  return temp;
}
inline void DramaModuleCommandInfoV1::set_allocated_skillpostion(::DramaModuleV3V1* skillpostion) {
  delete skillpostion_;
  skillpostion_ = skillpostion;
  if (skillpostion) {
    set_has_skillpostion();
  } else {
    clear_has_skillpostion();
  }
}

// optional sint32 SkillTargetType = 23 [default = 0];
inline bool DramaModuleCommandInfoV1::has_skilltargettype() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_skilltargettype() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DramaModuleCommandInfoV1::clear_has_skilltargettype() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DramaModuleCommandInfoV1::clear_skilltargettype() {
  skilltargettype_ = 0;
  clear_has_skilltargettype();
}
inline ::google::protobuf::int32 DramaModuleCommandInfoV1::skilltargettype() const {
  return skilltargettype_;
}
inline void DramaModuleCommandInfoV1::set_skilltargettype(::google::protobuf::int32 value) {
  set_has_skilltargettype();
  skilltargettype_ = value;
}

// optional string MusicFileName = 24;
inline bool DramaModuleCommandInfoV1::has_musicfilename() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_musicfilename() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DramaModuleCommandInfoV1::clear_has_musicfilename() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DramaModuleCommandInfoV1::clear_musicfilename() {
  if (musicfilename_ != &::google::protobuf::internal::kEmptyString) {
    musicfilename_->clear();
  }
  clear_has_musicfilename();
}
inline const ::std::string& DramaModuleCommandInfoV1::musicfilename() const {
  return *musicfilename_;
}
inline void DramaModuleCommandInfoV1::set_musicfilename(const ::std::string& value) {
  set_has_musicfilename();
  if (musicfilename_ == &::google::protobuf::internal::kEmptyString) {
    musicfilename_ = new ::std::string;
  }
  musicfilename_->assign(value);
}
inline void DramaModuleCommandInfoV1::set_musicfilename(const char* value) {
  set_has_musicfilename();
  if (musicfilename_ == &::google::protobuf::internal::kEmptyString) {
    musicfilename_ = new ::std::string;
  }
  musicfilename_->assign(value);
}
inline void DramaModuleCommandInfoV1::set_musicfilename(const char* value, size_t size) {
  set_has_musicfilename();
  if (musicfilename_ == &::google::protobuf::internal::kEmptyString) {
    musicfilename_ = new ::std::string;
  }
  musicfilename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DramaModuleCommandInfoV1::mutable_musicfilename() {
  set_has_musicfilename();
  if (musicfilename_ == &::google::protobuf::internal::kEmptyString) {
    musicfilename_ = new ::std::string;
  }
  return musicfilename_;
}
inline ::std::string* DramaModuleCommandInfoV1::release_musicfilename() {
  clear_has_musicfilename();
  if (musicfilename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = musicfilename_;
    musicfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DramaModuleCommandInfoV1::set_allocated_musicfilename(::std::string* musicfilename) {
  if (musicfilename_ != &::google::protobuf::internal::kEmptyString) {
    delete musicfilename_;
  }
  if (musicfilename) {
    set_has_musicfilename();
    musicfilename_ = musicfilename;
  } else {
    clear_has_musicfilename();
    musicfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string SoundFileName = 25;
inline bool DramaModuleCommandInfoV1::has_soundfilename() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_soundfilename() {
  _has_bits_[0] |= 0x00200000u;
}
inline void DramaModuleCommandInfoV1::clear_has_soundfilename() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void DramaModuleCommandInfoV1::clear_soundfilename() {
  if (soundfilename_ != &::google::protobuf::internal::kEmptyString) {
    soundfilename_->clear();
  }
  clear_has_soundfilename();
}
inline const ::std::string& DramaModuleCommandInfoV1::soundfilename() const {
  return *soundfilename_;
}
inline void DramaModuleCommandInfoV1::set_soundfilename(const ::std::string& value) {
  set_has_soundfilename();
  if (soundfilename_ == &::google::protobuf::internal::kEmptyString) {
    soundfilename_ = new ::std::string;
  }
  soundfilename_->assign(value);
}
inline void DramaModuleCommandInfoV1::set_soundfilename(const char* value) {
  set_has_soundfilename();
  if (soundfilename_ == &::google::protobuf::internal::kEmptyString) {
    soundfilename_ = new ::std::string;
  }
  soundfilename_->assign(value);
}
inline void DramaModuleCommandInfoV1::set_soundfilename(const char* value, size_t size) {
  set_has_soundfilename();
  if (soundfilename_ == &::google::protobuf::internal::kEmptyString) {
    soundfilename_ = new ::std::string;
  }
  soundfilename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DramaModuleCommandInfoV1::mutable_soundfilename() {
  set_has_soundfilename();
  if (soundfilename_ == &::google::protobuf::internal::kEmptyString) {
    soundfilename_ = new ::std::string;
  }
  return soundfilename_;
}
inline ::std::string* DramaModuleCommandInfoV1::release_soundfilename() {
  clear_has_soundfilename();
  if (soundfilename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = soundfilename_;
    soundfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DramaModuleCommandInfoV1::set_allocated_soundfilename(::std::string* soundfilename) {
  if (soundfilename_ != &::google::protobuf::internal::kEmptyString) {
    delete soundfilename_;
  }
  if (soundfilename) {
    set_has_soundfilename();
    soundfilename_ = soundfilename;
  } else {
    clear_has_soundfilename();
    soundfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint32 CameraPointType = 26 [default = 0];
inline bool DramaModuleCommandInfoV1::has_camerapointtype() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_camerapointtype() {
  _has_bits_[0] |= 0x00400000u;
}
inline void DramaModuleCommandInfoV1::clear_has_camerapointtype() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void DramaModuleCommandInfoV1::clear_camerapointtype() {
  camerapointtype_ = 0;
  clear_has_camerapointtype();
}
inline ::google::protobuf::int32 DramaModuleCommandInfoV1::camerapointtype() const {
  return camerapointtype_;
}
inline void DramaModuleCommandInfoV1::set_camerapointtype(::google::protobuf::int32 value) {
  set_has_camerapointtype();
  camerapointtype_ = value;
}

// repeated .DramaModuleCameraPointV1 CameraPoints = 27;
inline int DramaModuleCommandInfoV1::camerapoints_size() const {
  return camerapoints_.size();
}
inline void DramaModuleCommandInfoV1::clear_camerapoints() {
  camerapoints_.Clear();
}
inline const ::DramaModuleCameraPointV1& DramaModuleCommandInfoV1::camerapoints(int index) const {
  return camerapoints_.Get(index);
}
inline ::DramaModuleCameraPointV1* DramaModuleCommandInfoV1::mutable_camerapoints(int index) {
  return camerapoints_.Mutable(index);
}
inline ::DramaModuleCameraPointV1* DramaModuleCommandInfoV1::add_camerapoints() {
  return camerapoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DramaModuleCameraPointV1 >&
DramaModuleCommandInfoV1::camerapoints() const {
  return camerapoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::DramaModuleCameraPointV1 >*
DramaModuleCommandInfoV1::mutable_camerapoints() {
  return &camerapoints_;
}

// optional sint32 FreeType = 31 [default = 0];
inline bool DramaModuleCommandInfoV1::has_freetype() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void DramaModuleCommandInfoV1::set_has_freetype() {
  _has_bits_[0] |= 0x01000000u;
}
inline void DramaModuleCommandInfoV1::clear_has_freetype() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void DramaModuleCommandInfoV1::clear_freetype() {
  freetype_ = 0;
  clear_has_freetype();
}
inline ::google::protobuf::int32 DramaModuleCommandInfoV1::freetype() const {
  return freetype_;
}
inline void DramaModuleCommandInfoV1::set_freetype(::google::protobuf::int32 value) {
  set_has_freetype();
  freetype_ = value;
}

// -------------------------------------------------------------------

// DramaModuleV3V1

// optional float X = 1 [default = 0];
inline bool DramaModuleV3V1::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DramaModuleV3V1::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DramaModuleV3V1::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DramaModuleV3V1::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float DramaModuleV3V1::x() const {
  return x_;
}
inline void DramaModuleV3V1::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float Y = 2 [default = 0];
inline bool DramaModuleV3V1::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DramaModuleV3V1::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DramaModuleV3V1::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DramaModuleV3V1::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float DramaModuleV3V1::y() const {
  return y_;
}
inline void DramaModuleV3V1::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float Z = 3 [default = 0];
inline bool DramaModuleV3V1::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DramaModuleV3V1::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DramaModuleV3V1::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DramaModuleV3V1::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float DramaModuleV3V1::z() const {
  return z_;
}
inline void DramaModuleV3V1::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// DramaModuleTransformV1

// optional .DramaModuleV3V1 Postion = 1;
inline bool DramaModuleTransformV1::has_postion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DramaModuleTransformV1::set_has_postion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DramaModuleTransformV1::clear_has_postion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DramaModuleTransformV1::clear_postion() {
  if (postion_ != NULL) postion_->::DramaModuleV3V1::Clear();
  clear_has_postion();
}
inline const ::DramaModuleV3V1& DramaModuleTransformV1::postion() const {
  return postion_ != NULL ? *postion_ : *default_instance_->postion_;
}
inline ::DramaModuleV3V1* DramaModuleTransformV1::mutable_postion() {
  set_has_postion();
  if (postion_ == NULL) postion_ = new ::DramaModuleV3V1;
  return postion_;
}
inline ::DramaModuleV3V1* DramaModuleTransformV1::release_postion() {
  clear_has_postion();
  ::DramaModuleV3V1* temp = postion_;
  postion_ = NULL;
  return temp;
}
inline void DramaModuleTransformV1::set_allocated_postion(::DramaModuleV3V1* postion) {
  delete postion_;
  postion_ = postion;
  if (postion) {
    set_has_postion();
  } else {
    clear_has_postion();
  }
}

// optional .DramaModuleV3V1 Rotation = 2;
inline bool DramaModuleTransformV1::has_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DramaModuleTransformV1::set_has_rotation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DramaModuleTransformV1::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DramaModuleTransformV1::clear_rotation() {
  if (rotation_ != NULL) rotation_->::DramaModuleV3V1::Clear();
  clear_has_rotation();
}
inline const ::DramaModuleV3V1& DramaModuleTransformV1::rotation() const {
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
inline ::DramaModuleV3V1* DramaModuleTransformV1::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) rotation_ = new ::DramaModuleV3V1;
  return rotation_;
}
inline ::DramaModuleV3V1* DramaModuleTransformV1::release_rotation() {
  clear_has_rotation();
  ::DramaModuleV3V1* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline void DramaModuleTransformV1::set_allocated_rotation(::DramaModuleV3V1* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
}

// optional .DramaModuleV3V1 Scale = 3;
inline bool DramaModuleTransformV1::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DramaModuleTransformV1::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DramaModuleTransformV1::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DramaModuleTransformV1::clear_scale() {
  if (scale_ != NULL) scale_->::DramaModuleV3V1::Clear();
  clear_has_scale();
}
inline const ::DramaModuleV3V1& DramaModuleTransformV1::scale() const {
  return scale_ != NULL ? *scale_ : *default_instance_->scale_;
}
inline ::DramaModuleV3V1* DramaModuleTransformV1::mutable_scale() {
  set_has_scale();
  if (scale_ == NULL) scale_ = new ::DramaModuleV3V1;
  return scale_;
}
inline ::DramaModuleV3V1* DramaModuleTransformV1::release_scale() {
  clear_has_scale();
  ::DramaModuleV3V1* temp = scale_;
  scale_ = NULL;
  return temp;
}
inline void DramaModuleTransformV1::set_allocated_scale(::DramaModuleV3V1* scale) {
  delete scale_;
  scale_ = scale;
  if (scale) {
    set_has_scale();
  } else {
    clear_has_scale();
  }
}

// -------------------------------------------------------------------

// DramaModuleCameraPointV1

// optional .DramaModuleV3V1 Pos = 1;
inline bool DramaModuleCameraPointV1::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DramaModuleCameraPointV1::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DramaModuleCameraPointV1::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DramaModuleCameraPointV1::clear_pos() {
  if (pos_ != NULL) pos_->::DramaModuleV3V1::Clear();
  clear_has_pos();
}
inline const ::DramaModuleV3V1& DramaModuleCameraPointV1::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::DramaModuleV3V1* DramaModuleCameraPointV1::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::DramaModuleV3V1;
  return pos_;
}
inline ::DramaModuleV3V1* DramaModuleCameraPointV1::release_pos() {
  clear_has_pos();
  ::DramaModuleV3V1* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void DramaModuleCameraPointV1::set_allocated_pos(::DramaModuleV3V1* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// optional .DramaModuleV3V1 Angle = 2;
inline bool DramaModuleCameraPointV1::has_angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DramaModuleCameraPointV1::set_has_angle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DramaModuleCameraPointV1::clear_has_angle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DramaModuleCameraPointV1::clear_angle() {
  if (angle_ != NULL) angle_->::DramaModuleV3V1::Clear();
  clear_has_angle();
}
inline const ::DramaModuleV3V1& DramaModuleCameraPointV1::angle() const {
  return angle_ != NULL ? *angle_ : *default_instance_->angle_;
}
inline ::DramaModuleV3V1* DramaModuleCameraPointV1::mutable_angle() {
  set_has_angle();
  if (angle_ == NULL) angle_ = new ::DramaModuleV3V1;
  return angle_;
}
inline ::DramaModuleV3V1* DramaModuleCameraPointV1::release_angle() {
  clear_has_angle();
  ::DramaModuleV3V1* temp = angle_;
  angle_ = NULL;
  return temp;
}
inline void DramaModuleCameraPointV1::set_allocated_angle(::DramaModuleV3V1* angle) {
  delete angle_;
  angle_ = angle;
  if (angle) {
    set_has_angle();
  } else {
    clear_has_angle();
  }
}

// optional float Time = 3 [default = 0];
inline bool DramaModuleCameraPointV1::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DramaModuleCameraPointV1::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DramaModuleCameraPointV1::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DramaModuleCameraPointV1::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline float DramaModuleCameraPointV1::time() const {
  return time_;
}
inline void DramaModuleCameraPointV1::set_time(float value) {
  set_has_time();
  time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DramaModuleV1Data_2eproto__INCLUDED
