// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZhanDouV1Data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ZhanDouV1Data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ZhanDouMoveDataV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZhanDouMoveDataV1_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZhanDouUserDataV1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZhanDouUserDataV1_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ZhanDouV1Data_2eproto() {
  protobuf_AddDesc_ZhanDouV1Data_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ZhanDouV1Data.proto");
  GOOGLE_CHECK(file != NULL);
  ZhanDouMoveDataV1_descriptor_ = file->message_type(0);
  static const int ZhanDouMoveDataV1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhanDouMoveDataV1, dir_),
  };
  ZhanDouMoveDataV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZhanDouMoveDataV1_descriptor_,
      ZhanDouMoveDataV1::default_instance_,
      ZhanDouMoveDataV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhanDouMoveDataV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhanDouMoveDataV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZhanDouMoveDataV1));
  ZhanDouUserDataV1_descriptor_ = file->message_type(1);
  static const int ZhanDouUserDataV1_offsets_[1] = {
  };
  ZhanDouUserDataV1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZhanDouUserDataV1_descriptor_,
      ZhanDouUserDataV1::default_instance_,
      ZhanDouUserDataV1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhanDouUserDataV1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhanDouUserDataV1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZhanDouUserDataV1));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ZhanDouV1Data_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZhanDouMoveDataV1_descriptor_, &ZhanDouMoveDataV1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZhanDouUserDataV1_descriptor_, &ZhanDouUserDataV1::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ZhanDouV1Data_2eproto() {
  delete ZhanDouMoveDataV1::default_instance_;
  delete ZhanDouMoveDataV1_reflection_;
  delete ZhanDouUserDataV1::default_instance_;
  delete ZhanDouUserDataV1_reflection_;
}

void protobuf_AddDesc_ZhanDouV1Data_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_PublicStruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ZhanDouV1Data.proto\032\022PublicStruct.prot"
    "o\"$\n\021ZhanDouMoveDataV1\022\017\n\003Dir\030\001 \001(\021:\002-1\""
    "\023\n\021ZhanDouUserDataV1", 100);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ZhanDouV1Data.proto", &protobuf_RegisterTypes);
  ZhanDouMoveDataV1::default_instance_ = new ZhanDouMoveDataV1();
  ZhanDouUserDataV1::default_instance_ = new ZhanDouUserDataV1();
  ZhanDouMoveDataV1::default_instance_->InitAsDefaultInstance();
  ZhanDouUserDataV1::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ZhanDouV1Data_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ZhanDouV1Data_2eproto {
  StaticDescriptorInitializer_ZhanDouV1Data_2eproto() {
    protobuf_AddDesc_ZhanDouV1Data_2eproto();
  }
} static_descriptor_initializer_ZhanDouV1Data_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ZhanDouMoveDataV1::kDirFieldNumber;
#endif  // !_MSC_VER

ZhanDouMoveDataV1::ZhanDouMoveDataV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZhanDouMoveDataV1::InitAsDefaultInstance() {
}

ZhanDouMoveDataV1::ZhanDouMoveDataV1(const ZhanDouMoveDataV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZhanDouMoveDataV1::SharedCtor() {
  _cached_size_ = 0;
  dir_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZhanDouMoveDataV1::~ZhanDouMoveDataV1() {
  SharedDtor();
}

void ZhanDouMoveDataV1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZhanDouMoveDataV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZhanDouMoveDataV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZhanDouMoveDataV1_descriptor_;
}

const ZhanDouMoveDataV1& ZhanDouMoveDataV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZhanDouV1Data_2eproto();
  return *default_instance_;
}

ZhanDouMoveDataV1* ZhanDouMoveDataV1::default_instance_ = NULL;

ZhanDouMoveDataV1* ZhanDouMoveDataV1::New() const {
  return new ZhanDouMoveDataV1;
}

void ZhanDouMoveDataV1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dir_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZhanDouMoveDataV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Dir = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZhanDouMoveDataV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 Dir = 1 [default = -1];
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZhanDouMoveDataV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 Dir = 1 [default = -1];
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZhanDouMoveDataV1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 Dir = 1 [default = -1];
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZhanDouMoveDataV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZhanDouMoveDataV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZhanDouMoveDataV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZhanDouMoveDataV1::MergeFrom(const ZhanDouMoveDataV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZhanDouMoveDataV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZhanDouMoveDataV1::CopyFrom(const ZhanDouMoveDataV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZhanDouMoveDataV1::IsInitialized() const {

  return true;
}

void ZhanDouMoveDataV1::Swap(ZhanDouMoveDataV1* other) {
  if (other != this) {
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZhanDouMoveDataV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZhanDouMoveDataV1_descriptor_;
  metadata.reflection = ZhanDouMoveDataV1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ZhanDouUserDataV1::ZhanDouUserDataV1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZhanDouUserDataV1::InitAsDefaultInstance() {
}

ZhanDouUserDataV1::ZhanDouUserDataV1(const ZhanDouUserDataV1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZhanDouUserDataV1::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZhanDouUserDataV1::~ZhanDouUserDataV1() {
  SharedDtor();
}

void ZhanDouUserDataV1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZhanDouUserDataV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZhanDouUserDataV1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZhanDouUserDataV1_descriptor_;
}

const ZhanDouUserDataV1& ZhanDouUserDataV1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZhanDouV1Data_2eproto();
  return *default_instance_;
}

ZhanDouUserDataV1* ZhanDouUserDataV1::default_instance_ = NULL;

ZhanDouUserDataV1* ZhanDouUserDataV1::New() const {
  return new ZhanDouUserDataV1;
}

void ZhanDouUserDataV1::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZhanDouUserDataV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ZhanDouUserDataV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZhanDouUserDataV1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZhanDouUserDataV1::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZhanDouUserDataV1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZhanDouUserDataV1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZhanDouUserDataV1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZhanDouUserDataV1::MergeFrom(const ZhanDouUserDataV1& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZhanDouUserDataV1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZhanDouUserDataV1::CopyFrom(const ZhanDouUserDataV1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZhanDouUserDataV1::IsInitialized() const {

  return true;
}

void ZhanDouUserDataV1::Swap(ZhanDouUserDataV1* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZhanDouUserDataV1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZhanDouUserDataV1_descriptor_;
  metadata.reflection = ZhanDouUserDataV1_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
