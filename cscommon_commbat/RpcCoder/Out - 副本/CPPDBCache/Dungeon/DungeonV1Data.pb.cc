// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DungeonV1Data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DungeonV1Data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class DungeonDungeonInfoV1DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonDungeonInfoV1>
     _instance;
} _DungeonDungeonInfoV1_default_instance_;

namespace protobuf_DungeonV1Data_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDungeonInfoV1, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDungeonInfoV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDungeonInfoV1, dungeonkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDungeonInfoV1, dungeonid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDungeonInfoV1, dungeontype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDungeonInfoV1, keyid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDungeonInfoV1, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDungeonInfoV1, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDungeonInfoV1, guild_),
  0,
  3,
  4,
  5,
  1,
  6,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(DungeonDungeonInfoV1)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonDungeonInfoV1_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "DungeonV1Data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_PublicStruct_2eproto::InitDefaults();
  _DungeonDungeonInfoV1_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonDungeonInfoV1_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023DungeonV1Data.proto\032\022PublicStruct.prot"
      "o\"\240\001\n\024DungeonDungeonInfoV1\022\022\n\nDungeonKey"
      "\030\001 \001(\t\022\025\n\tDungeonId\030\002 \001(\021:\002-1\022\027\n\013Dungeon"
      "Type\030\003 \001(\021:\002-1\022\021\n\005KeyId\030\004 \001(\021:\002-1\022\014\n\004Hos"
      "t\030\005 \001(\t\022\020\n\004Port\030\006 \001(\021:\002-1\022\021\n\005Guild\030\007 \001(\021"
      ":\002-1"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 204);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DungeonV1Data.proto", &protobuf_RegisterTypes);
  ::protobuf_PublicStruct_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_DungeonV1Data_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonDungeonInfoV1::kDungeonKeyFieldNumber;
const int DungeonDungeonInfoV1::kDungeonIdFieldNumber;
const int DungeonDungeonInfoV1::kDungeonTypeFieldNumber;
const int DungeonDungeonInfoV1::kKeyIdFieldNumber;
const int DungeonDungeonInfoV1::kHostFieldNumber;
const int DungeonDungeonInfoV1::kPortFieldNumber;
const int DungeonDungeonInfoV1::kGuildFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonDungeonInfoV1::DungeonDungeonInfoV1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DungeonV1Data_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DungeonDungeonInfoV1)
}
DungeonDungeonInfoV1::DungeonDungeonInfoV1(const DungeonDungeonInfoV1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dungeonkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dungeonkey()) {
    dungeonkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dungeonkey_);
  }
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host()) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  ::memcpy(&guild_, &from.guild_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&guild_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:DungeonDungeonInfoV1)
}

void DungeonDungeonInfoV1::SharedCtor() {
  _cached_size_ = 0;
  dungeonkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_ = -1;
  dungeonid_ = -1;
  dungeontype_ = -1;
  keyid_ = -1;
  port_ = -1;
}

DungeonDungeonInfoV1::~DungeonDungeonInfoV1() {
  // @@protoc_insertion_point(destructor:DungeonDungeonInfoV1)
  SharedDtor();
}

void DungeonDungeonInfoV1::SharedDtor() {
  dungeonkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DungeonDungeonInfoV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonDungeonInfoV1::descriptor() {
  protobuf_DungeonV1Data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DungeonV1Data_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonDungeonInfoV1& DungeonDungeonInfoV1::default_instance() {
  protobuf_DungeonV1Data_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonDungeonInfoV1* DungeonDungeonInfoV1::New(::google::protobuf::Arena* arena) const {
  DungeonDungeonInfoV1* n = new DungeonDungeonInfoV1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonDungeonInfoV1::Clear() {
// @@protoc_insertion_point(message_clear_start:DungeonDungeonInfoV1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!dungeonkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dungeonkey_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*host_.UnsafeRawStringPointer())->clear();
    }
    guild_ = -1;
    dungeonid_ = -1;
    dungeontype_ = -1;
    keyid_ = -1;
    port_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonDungeonInfoV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DungeonDungeonInfoV1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DungeonKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dungeonkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dungeonkey().data(), static_cast<int>(this->dungeonkey().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DungeonDungeonInfoV1.DungeonKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 DungeonId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_dungeonid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dungeonid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 DungeonType = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_dungeontype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dungeontype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 KeyId = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_keyid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &keyid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Host = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DungeonDungeonInfoV1.Host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Port = 6 [default = -1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Guild = 7 [default = -1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_guild();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &guild_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DungeonDungeonInfoV1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DungeonDungeonInfoV1)
  return false;
#undef DO_
}

void DungeonDungeonInfoV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DungeonDungeonInfoV1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string DungeonKey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dungeonkey().data(), static_cast<int>(this->dungeonkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DungeonDungeonInfoV1.DungeonKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dungeonkey(), output);
  }

  // optional sint32 DungeonId = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->dungeonid(), output);
  }

  // optional sint32 DungeonType = 3 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->dungeontype(), output);
  }

  // optional sint32 KeyId = 4 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->keyid(), output);
  }

  // optional string Host = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DungeonDungeonInfoV1.Host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->host(), output);
  }

  // optional sint32 Port = 6 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->port(), output);
  }

  // optional sint32 Guild = 7 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->guild(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DungeonDungeonInfoV1)
}

::google::protobuf::uint8* DungeonDungeonInfoV1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DungeonDungeonInfoV1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string DungeonKey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dungeonkey().data(), static_cast<int>(this->dungeonkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DungeonDungeonInfoV1.DungeonKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dungeonkey(), target);
  }

  // optional sint32 DungeonId = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->dungeonid(), target);
  }

  // optional sint32 DungeonType = 3 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->dungeontype(), target);
  }

  // optional sint32 KeyId = 4 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->keyid(), target);
  }

  // optional string Host = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DungeonDungeonInfoV1.Host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->host(), target);
  }

  // optional sint32 Port = 6 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->port(), target);
  }

  // optional sint32 Guild = 7 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->guild(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DungeonDungeonInfoV1)
  return target;
}

size_t DungeonDungeonInfoV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DungeonDungeonInfoV1)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string DungeonKey = 1;
    if (has_dungeonkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dungeonkey());
    }

    // optional string Host = 5;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional sint32 Guild = 7 [default = -1];
    if (has_guild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->guild());
    }

    // optional sint32 DungeonId = 2 [default = -1];
    if (has_dungeonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dungeonid());
    }

    // optional sint32 DungeonType = 3 [default = -1];
    if (has_dungeontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dungeontype());
    }

    // optional sint32 KeyId = 4 [default = -1];
    if (has_keyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->keyid());
    }

    // optional sint32 Port = 6 [default = -1];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonDungeonInfoV1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DungeonDungeonInfoV1)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonDungeonInfoV1* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonDungeonInfoV1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DungeonDungeonInfoV1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DungeonDungeonInfoV1)
    MergeFrom(*source);
  }
}

void DungeonDungeonInfoV1::MergeFrom(const DungeonDungeonInfoV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DungeonDungeonInfoV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_dungeonkey();
      dungeonkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dungeonkey_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_host();
      host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
    if (cached_has_bits & 0x00000004u) {
      guild_ = from.guild_;
    }
    if (cached_has_bits & 0x00000008u) {
      dungeonid_ = from.dungeonid_;
    }
    if (cached_has_bits & 0x00000010u) {
      dungeontype_ = from.dungeontype_;
    }
    if (cached_has_bits & 0x00000020u) {
      keyid_ = from.keyid_;
    }
    if (cached_has_bits & 0x00000040u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DungeonDungeonInfoV1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DungeonDungeonInfoV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonDungeonInfoV1::CopyFrom(const DungeonDungeonInfoV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DungeonDungeonInfoV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonDungeonInfoV1::IsInitialized() const {
  return true;
}

void DungeonDungeonInfoV1::Swap(DungeonDungeonInfoV1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonDungeonInfoV1::InternalSwap(DungeonDungeonInfoV1* other) {
  using std::swap;
  dungeonkey_.Swap(&other->dungeonkey_);
  host_.Swap(&other->host_);
  swap(guild_, other->guild_);
  swap(dungeonid_, other->dungeonid_);
  swap(dungeontype_, other->dungeontype_);
  swap(keyid_, other->keyid_);
  swap(port_, other->port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonDungeonInfoV1::GetMetadata() const {
  protobuf_DungeonV1Data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DungeonV1Data_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonDungeonInfoV1

// optional string DungeonKey = 1;
bool DungeonDungeonInfoV1::has_dungeonkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DungeonDungeonInfoV1::set_has_dungeonkey() {
  _has_bits_[0] |= 0x00000001u;
}
void DungeonDungeonInfoV1::clear_has_dungeonkey() {
  _has_bits_[0] &= ~0x00000001u;
}
void DungeonDungeonInfoV1::clear_dungeonkey() {
  dungeonkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dungeonkey();
}
const ::std::string& DungeonDungeonInfoV1::dungeonkey() const {
  // @@protoc_insertion_point(field_get:DungeonDungeonInfoV1.DungeonKey)
  return dungeonkey_.GetNoArena();
}
void DungeonDungeonInfoV1::set_dungeonkey(const ::std::string& value) {
  set_has_dungeonkey();
  dungeonkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DungeonDungeonInfoV1.DungeonKey)
}
#if LANG_CXX11
void DungeonDungeonInfoV1::set_dungeonkey(::std::string&& value) {
  set_has_dungeonkey();
  dungeonkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DungeonDungeonInfoV1.DungeonKey)
}
#endif
void DungeonDungeonInfoV1::set_dungeonkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dungeonkey();
  dungeonkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DungeonDungeonInfoV1.DungeonKey)
}
void DungeonDungeonInfoV1::set_dungeonkey(const char* value, size_t size) {
  set_has_dungeonkey();
  dungeonkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DungeonDungeonInfoV1.DungeonKey)
}
::std::string* DungeonDungeonInfoV1::mutable_dungeonkey() {
  set_has_dungeonkey();
  // @@protoc_insertion_point(field_mutable:DungeonDungeonInfoV1.DungeonKey)
  return dungeonkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DungeonDungeonInfoV1::release_dungeonkey() {
  // @@protoc_insertion_point(field_release:DungeonDungeonInfoV1.DungeonKey)
  clear_has_dungeonkey();
  return dungeonkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DungeonDungeonInfoV1::set_allocated_dungeonkey(::std::string* dungeonkey) {
  if (dungeonkey != NULL) {
    set_has_dungeonkey();
  } else {
    clear_has_dungeonkey();
  }
  dungeonkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dungeonkey);
  // @@protoc_insertion_point(field_set_allocated:DungeonDungeonInfoV1.DungeonKey)
}

// optional sint32 DungeonId = 2 [default = -1];
bool DungeonDungeonInfoV1::has_dungeonid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DungeonDungeonInfoV1::set_has_dungeonid() {
  _has_bits_[0] |= 0x00000008u;
}
void DungeonDungeonInfoV1::clear_has_dungeonid() {
  _has_bits_[0] &= ~0x00000008u;
}
void DungeonDungeonInfoV1::clear_dungeonid() {
  dungeonid_ = -1;
  clear_has_dungeonid();
}
::google::protobuf::int32 DungeonDungeonInfoV1::dungeonid() const {
  // @@protoc_insertion_point(field_get:DungeonDungeonInfoV1.DungeonId)
  return dungeonid_;
}
void DungeonDungeonInfoV1::set_dungeonid(::google::protobuf::int32 value) {
  set_has_dungeonid();
  dungeonid_ = value;
  // @@protoc_insertion_point(field_set:DungeonDungeonInfoV1.DungeonId)
}

// optional sint32 DungeonType = 3 [default = -1];
bool DungeonDungeonInfoV1::has_dungeontype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DungeonDungeonInfoV1::set_has_dungeontype() {
  _has_bits_[0] |= 0x00000010u;
}
void DungeonDungeonInfoV1::clear_has_dungeontype() {
  _has_bits_[0] &= ~0x00000010u;
}
void DungeonDungeonInfoV1::clear_dungeontype() {
  dungeontype_ = -1;
  clear_has_dungeontype();
}
::google::protobuf::int32 DungeonDungeonInfoV1::dungeontype() const {
  // @@protoc_insertion_point(field_get:DungeonDungeonInfoV1.DungeonType)
  return dungeontype_;
}
void DungeonDungeonInfoV1::set_dungeontype(::google::protobuf::int32 value) {
  set_has_dungeontype();
  dungeontype_ = value;
  // @@protoc_insertion_point(field_set:DungeonDungeonInfoV1.DungeonType)
}

// optional sint32 KeyId = 4 [default = -1];
bool DungeonDungeonInfoV1::has_keyid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DungeonDungeonInfoV1::set_has_keyid() {
  _has_bits_[0] |= 0x00000020u;
}
void DungeonDungeonInfoV1::clear_has_keyid() {
  _has_bits_[0] &= ~0x00000020u;
}
void DungeonDungeonInfoV1::clear_keyid() {
  keyid_ = -1;
  clear_has_keyid();
}
::google::protobuf::int32 DungeonDungeonInfoV1::keyid() const {
  // @@protoc_insertion_point(field_get:DungeonDungeonInfoV1.KeyId)
  return keyid_;
}
void DungeonDungeonInfoV1::set_keyid(::google::protobuf::int32 value) {
  set_has_keyid();
  keyid_ = value;
  // @@protoc_insertion_point(field_set:DungeonDungeonInfoV1.KeyId)
}

// optional string Host = 5;
bool DungeonDungeonInfoV1::has_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DungeonDungeonInfoV1::set_has_host() {
  _has_bits_[0] |= 0x00000002u;
}
void DungeonDungeonInfoV1::clear_has_host() {
  _has_bits_[0] &= ~0x00000002u;
}
void DungeonDungeonInfoV1::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
const ::std::string& DungeonDungeonInfoV1::host() const {
  // @@protoc_insertion_point(field_get:DungeonDungeonInfoV1.Host)
  return host_.GetNoArena();
}
void DungeonDungeonInfoV1::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DungeonDungeonInfoV1.Host)
}
#if LANG_CXX11
void DungeonDungeonInfoV1::set_host(::std::string&& value) {
  set_has_host();
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DungeonDungeonInfoV1.Host)
}
#endif
void DungeonDungeonInfoV1::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DungeonDungeonInfoV1.Host)
}
void DungeonDungeonInfoV1::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DungeonDungeonInfoV1.Host)
}
::std::string* DungeonDungeonInfoV1::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:DungeonDungeonInfoV1.Host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DungeonDungeonInfoV1::release_host() {
  // @@protoc_insertion_point(field_release:DungeonDungeonInfoV1.Host)
  clear_has_host();
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DungeonDungeonInfoV1::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:DungeonDungeonInfoV1.Host)
}

// optional sint32 Port = 6 [default = -1];
bool DungeonDungeonInfoV1::has_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DungeonDungeonInfoV1::set_has_port() {
  _has_bits_[0] |= 0x00000040u;
}
void DungeonDungeonInfoV1::clear_has_port() {
  _has_bits_[0] &= ~0x00000040u;
}
void DungeonDungeonInfoV1::clear_port() {
  port_ = -1;
  clear_has_port();
}
::google::protobuf::int32 DungeonDungeonInfoV1::port() const {
  // @@protoc_insertion_point(field_get:DungeonDungeonInfoV1.Port)
  return port_;
}
void DungeonDungeonInfoV1::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:DungeonDungeonInfoV1.Port)
}

// optional sint32 Guild = 7 [default = -1];
bool DungeonDungeonInfoV1::has_guild() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DungeonDungeonInfoV1::set_has_guild() {
  _has_bits_[0] |= 0x00000004u;
}
void DungeonDungeonInfoV1::clear_has_guild() {
  _has_bits_[0] &= ~0x00000004u;
}
void DungeonDungeonInfoV1::clear_guild() {
  guild_ = -1;
  clear_has_guild();
}
::google::protobuf::int32 DungeonDungeonInfoV1::guild() const {
  // @@protoc_insertion_point(field_get:DungeonDungeonInfoV1.Guild)
  return guild_;
}
void DungeonDungeonInfoV1::set_guild(::google::protobuf::int32 value) {
  set_has_guild();
  guild_ = value;
  // @@protoc_insertion_point(field_set:DungeonDungeonInfoV1.Guild)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
