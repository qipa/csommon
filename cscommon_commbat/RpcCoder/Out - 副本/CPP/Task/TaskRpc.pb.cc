// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TaskRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TaskRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class TaskRpcSyncDataAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRpcSyncDataAsk>
     _instance;
} _TaskRpcSyncDataAsk_default_instance_;
class TaskRpcSyncDataReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRpcSyncDataReply>
     _instance;
} _TaskRpcSyncDataReply_default_instance_;
class TaskRpcCompleteTaskAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRpcCompleteTaskAsk>
     _instance;
} _TaskRpcCompleteTaskAsk_default_instance_;
class TaskRpcCompleteTaskReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRpcCompleteTaskReply>
     _instance;
} _TaskRpcCompleteTaskReply_default_instance_;
class TaskRpcSubmitTaskAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRpcSubmitTaskAsk>
     _instance;
} _TaskRpcSubmitTaskAsk_default_instance_;
class TaskRpcSubmitTaskReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRpcSubmitTaskReply>
     _instance;
} _TaskRpcSubmitTaskReply_default_instance_;
class TaskRpcUpdateTaskNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRpcUpdateTaskNotify>
     _instance;
} _TaskRpcUpdateTaskNotify_default_instance_;
class TaskRpcAcceptTaskAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRpcAcceptTaskAsk>
     _instance;
} _TaskRpcAcceptTaskAsk_default_instance_;
class TaskRpcAcceptTaskReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRpcAcceptTaskReply>
     _instance;
} _TaskRpcAcceptTaskReply_default_instance_;
class TaskRpcStartProfTaskAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRpcStartProfTaskAsk>
     _instance;
} _TaskRpcStartProfTaskAsk_default_instance_;
class TaskRpcStartProfTaskReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRpcStartProfTaskReply>
     _instance;
} _TaskRpcStartProfTaskReply_default_instance_;
class TaskRpcStartOneDragonAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRpcStartOneDragonAsk>
     _instance;
} _TaskRpcStartOneDragonAsk_default_instance_;
class TaskRpcStartOneDragonReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRpcStartOneDragonReply>
     _instance;
} _TaskRpcStartOneDragonReply_default_instance_;
class TaskRpcAddTaskNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRpcAddTaskNotify>
     _instance;
} _TaskRpcAddTaskNotify_default_instance_;
class TaskRpcDelTaskNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRpcDelTaskNotify>
     _instance;
} _TaskRpcDelTaskNotify_default_instance_;
class TaskRpcStartGuildSpyAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRpcStartGuildSpyAsk>
     _instance;
} _TaskRpcStartGuildSpyAsk_default_instance_;
class TaskRpcStartGuildSpyReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TaskRpcStartGuildSpyReply>
     _instance;
} _TaskRpcStartGuildSpyReply_default_instance_;

namespace protobuf_TaskRpc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[17];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcSyncDataAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcSyncDataAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcSyncDataReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcSyncDataReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcSyncDataReply, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcCompleteTaskAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcCompleteTaskAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcCompleteTaskAsk, taskid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcCompleteTaskAsk, target_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcCompleteTaskReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcCompleteTaskReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcCompleteTaskReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcCompleteTaskReply, taskid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcCompleteTaskReply, target_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcSubmitTaskAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcSubmitTaskAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcSubmitTaskAsk, taskid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcSubmitTaskReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcSubmitTaskReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcSubmitTaskReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcSubmitTaskReply, taskid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcSubmitTaskReply, nexttaskid_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcUpdateTaskNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcUpdateTaskNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcUpdateTaskNotify, taskid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcUpdateTaskNotify, taskstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcUpdateTaskNotify, tasktargetcount_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcAcceptTaskAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcAcceptTaskAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcAcceptTaskAsk, taskid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcAcceptTaskReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcAcceptTaskReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcAcceptTaskReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcAcceptTaskReply, taskid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcStartProfTaskAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcStartProfTaskAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcStartProfTaskReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcStartProfTaskReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcStartProfTaskReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcStartProfTaskReply, taskid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcStartOneDragonAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcStartOneDragonAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcStartOneDragonReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcStartOneDragonReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcStartOneDragonReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcStartOneDragonReply, taskid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcAddTaskNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcAddTaskNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcAddTaskNotify, taskid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcAddTaskNotify, taskstate_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcDelTaskNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcDelTaskNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcDelTaskNotify, taskid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcDelTaskNotify, taskstate_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcStartGuildSpyAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcStartGuildSpyAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcStartGuildSpyReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcStartGuildSpyReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcStartGuildSpyReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRpcStartGuildSpyReply, taskid_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(TaskRpcSyncDataAsk)},
  { 5, 11, sizeof(TaskRpcSyncDataReply)},
  { 12, 19, sizeof(TaskRpcCompleteTaskAsk)},
  { 21, 29, sizeof(TaskRpcCompleteTaskReply)},
  { 32, 38, sizeof(TaskRpcSubmitTaskAsk)},
  { 39, 47, sizeof(TaskRpcSubmitTaskReply)},
  { 50, 58, sizeof(TaskRpcUpdateTaskNotify)},
  { 61, 67, sizeof(TaskRpcAcceptTaskAsk)},
  { 68, 75, sizeof(TaskRpcAcceptTaskReply)},
  { 77, 82, sizeof(TaskRpcStartProfTaskAsk)},
  { 82, 89, sizeof(TaskRpcStartProfTaskReply)},
  { 91, 96, sizeof(TaskRpcStartOneDragonAsk)},
  { 96, 103, sizeof(TaskRpcStartOneDragonReply)},
  { 105, 112, sizeof(TaskRpcAddTaskNotify)},
  { 114, 121, sizeof(TaskRpcDelTaskNotify)},
  { 123, 128, sizeof(TaskRpcStartGuildSpyAsk)},
  { 128, 135, sizeof(TaskRpcStartGuildSpyReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRpcSyncDataAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRpcSyncDataReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRpcCompleteTaskAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRpcCompleteTaskReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRpcSubmitTaskAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRpcSubmitTaskReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRpcUpdateTaskNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRpcAcceptTaskAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRpcAcceptTaskReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRpcStartProfTaskAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRpcStartProfTaskReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRpcStartOneDragonAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRpcStartOneDragonReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRpcAddTaskNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRpcDelTaskNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRpcStartGuildSpyAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskRpcStartGuildSpyReply_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "TaskRpc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_PublicStruct_2eproto::InitDefaults();
  _TaskRpcSyncDataAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRpcSyncDataAsk_default_instance_);_TaskRpcSyncDataReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRpcSyncDataReply_default_instance_);_TaskRpcCompleteTaskAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRpcCompleteTaskAsk_default_instance_);_TaskRpcCompleteTaskReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRpcCompleteTaskReply_default_instance_);_TaskRpcSubmitTaskAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRpcSubmitTaskAsk_default_instance_);_TaskRpcSubmitTaskReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRpcSubmitTaskReply_default_instance_);_TaskRpcUpdateTaskNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRpcUpdateTaskNotify_default_instance_);_TaskRpcAcceptTaskAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRpcAcceptTaskAsk_default_instance_);_TaskRpcAcceptTaskReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRpcAcceptTaskReply_default_instance_);_TaskRpcStartProfTaskAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRpcStartProfTaskAsk_default_instance_);_TaskRpcStartProfTaskReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRpcStartProfTaskReply_default_instance_);_TaskRpcStartOneDragonAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRpcStartOneDragonAsk_default_instance_);_TaskRpcStartOneDragonReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRpcStartOneDragonReply_default_instance_);_TaskRpcAddTaskNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRpcAddTaskNotify_default_instance_);_TaskRpcDelTaskNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRpcDelTaskNotify_default_instance_);_TaskRpcStartGuildSpyAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRpcStartGuildSpyAsk_default_instance_);_TaskRpcStartGuildSpyReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TaskRpcStartGuildSpyReply_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rTaskRpc.proto\032\022PublicStruct.proto\"\024\n\022T"
      "askRpcSyncDataAsk\"-\n\024TaskRpcSyncDataRepl"
      "y\022\025\n\006Result\030\001 \001(\021:\005-9999\"@\n\026TaskRpcCompl"
      "eteTaskAsk\022\022\n\006TaskId\030\001 \001(\021:\002-1\022\022\n\006Target"
      "\030\002 \001(\021:\002-1\"Y\n\030TaskRpcCompleteTaskReply\022\025"
      "\n\006Result\030\001 \001(\021:\005-9999\022\022\n\006TaskId\030\002 \001(\021:\002-"
      "1\022\022\n\006Target\030\003 \001(\021:\002-1\"*\n\024TaskRpcSubmitTa"
      "skAsk\022\022\n\006TaskId\030\001 \001(\021:\002-1\"[\n\026TaskRpcSubm"
      "itTaskReply\022\025\n\006Result\030\001 \001(\021:\005-9999\022\022\n\006Ta"
      "skId\030\002 \001(\021:\002-1\022\026\n\nNextTaskId\030\003 \001(\021:\002-1\"]"
      "\n\027TaskRpcUpdateTaskNotify\022\022\n\006TaskId\030\001 \001("
      "\021:\002-1\022\025\n\tTaskState\030\002 \001(\021:\002-1\022\027\n\017TaskTarg"
      "etCount\030\003 \003(\021\"*\n\024TaskRpcAcceptTaskAsk\022\022\n"
      "\006TaskId\030\001 \001(\021:\002-1\"C\n\026TaskRpcAcceptTaskRe"
      "ply\022\025\n\006Result\030\001 \001(\021:\005-9999\022\022\n\006TaskId\030\002 \001"
      "(\021:\002-1\"\031\n\027TaskRpcStartProfTaskAsk\"F\n\031Tas"
      "kRpcStartProfTaskReply\022\025\n\006Result\030\001 \001(\021:\005"
      "-9999\022\022\n\006TaskId\030\002 \001(\021:\002-1\"\032\n\030TaskRpcStar"
      "tOneDragonAsk\"G\n\032TaskRpcStartOneDragonRe"
      "ply\022\025\n\006Result\030\001 \001(\021:\005-9999\022\022\n\006TaskId\030\002 \001"
      "(\021:\002-1\"A\n\024TaskRpcAddTaskNotify\022\022\n\006TaskId"
      "\030\001 \001(\021:\002-1\022\025\n\tTaskState\030\002 \001(\021:\002-1\"A\n\024Tas"
      "kRpcDelTaskNotify\022\022\n\006TaskId\030\001 \001(\021:\002-1\022\025\n"
      "\tTaskState\030\002 \001(\021:\002-1\"\031\n\027TaskRpcStartGuil"
      "dSpyAsk\"F\n\031TaskRpcStartGuildSpyReply\022\025\n\006"
      "Result\030\001 \001(\021:\005-9999\022\022\n\006TaskId\030\002 \001(\021:\002-1"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1039);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TaskRpc.proto", &protobuf_RegisterTypes);
  ::protobuf_PublicStruct_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_TaskRpc_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRpcSyncDataAsk::TaskRpcSyncDataAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TaskRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskRpcSyncDataAsk)
}
TaskRpcSyncDataAsk::TaskRpcSyncDataAsk(const TaskRpcSyncDataAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TaskRpcSyncDataAsk)
}

void TaskRpcSyncDataAsk::SharedCtor() {
  _cached_size_ = 0;
}

TaskRpcSyncDataAsk::~TaskRpcSyncDataAsk() {
  // @@protoc_insertion_point(destructor:TaskRpcSyncDataAsk)
  SharedDtor();
}

void TaskRpcSyncDataAsk::SharedDtor() {
}

void TaskRpcSyncDataAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRpcSyncDataAsk::descriptor() {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRpcSyncDataAsk& TaskRpcSyncDataAsk::default_instance() {
  protobuf_TaskRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRpcSyncDataAsk* TaskRpcSyncDataAsk::New(::google::protobuf::Arena* arena) const {
  TaskRpcSyncDataAsk* n = new TaskRpcSyncDataAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRpcSyncDataAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskRpcSyncDataAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskRpcSyncDataAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TaskRpcSyncDataAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TaskRpcSyncDataAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TaskRpcSyncDataAsk)
  return false;
#undef DO_
}

void TaskRpcSyncDataAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TaskRpcSyncDataAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TaskRpcSyncDataAsk)
}

::google::protobuf::uint8* TaskRpcSyncDataAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TaskRpcSyncDataAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskRpcSyncDataAsk)
  return target;
}

size_t TaskRpcSyncDataAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskRpcSyncDataAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRpcSyncDataAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskRpcSyncDataAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRpcSyncDataAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRpcSyncDataAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskRpcSyncDataAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskRpcSyncDataAsk)
    MergeFrom(*source);
  }
}

void TaskRpcSyncDataAsk::MergeFrom(const TaskRpcSyncDataAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskRpcSyncDataAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TaskRpcSyncDataAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskRpcSyncDataAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRpcSyncDataAsk::CopyFrom(const TaskRpcSyncDataAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskRpcSyncDataAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRpcSyncDataAsk::IsInitialized() const {
  return true;
}

void TaskRpcSyncDataAsk::Swap(TaskRpcSyncDataAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRpcSyncDataAsk::InternalSwap(TaskRpcSyncDataAsk* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRpcSyncDataAsk::GetMetadata() const {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRpcSyncDataAsk

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskRpcSyncDataReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRpcSyncDataReply::TaskRpcSyncDataReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TaskRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskRpcSyncDataReply)
}
TaskRpcSyncDataReply::TaskRpcSyncDataReply(const TaskRpcSyncDataReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:TaskRpcSyncDataReply)
}

void TaskRpcSyncDataReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

TaskRpcSyncDataReply::~TaskRpcSyncDataReply() {
  // @@protoc_insertion_point(destructor:TaskRpcSyncDataReply)
  SharedDtor();
}

void TaskRpcSyncDataReply::SharedDtor() {
}

void TaskRpcSyncDataReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRpcSyncDataReply::descriptor() {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRpcSyncDataReply& TaskRpcSyncDataReply::default_instance() {
  protobuf_TaskRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRpcSyncDataReply* TaskRpcSyncDataReply::New(::google::protobuf::Arena* arena) const {
  TaskRpcSyncDataReply* n = new TaskRpcSyncDataReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRpcSyncDataReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskRpcSyncDataReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskRpcSyncDataReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TaskRpcSyncDataReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TaskRpcSyncDataReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TaskRpcSyncDataReply)
  return false;
#undef DO_
}

void TaskRpcSyncDataReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TaskRpcSyncDataReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TaskRpcSyncDataReply)
}

::google::protobuf::uint8* TaskRpcSyncDataReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TaskRpcSyncDataReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskRpcSyncDataReply)
  return target;
}

size_t TaskRpcSyncDataReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskRpcSyncDataReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRpcSyncDataReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskRpcSyncDataReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRpcSyncDataReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRpcSyncDataReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskRpcSyncDataReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskRpcSyncDataReply)
    MergeFrom(*source);
  }
}

void TaskRpcSyncDataReply::MergeFrom(const TaskRpcSyncDataReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskRpcSyncDataReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void TaskRpcSyncDataReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskRpcSyncDataReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRpcSyncDataReply::CopyFrom(const TaskRpcSyncDataReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskRpcSyncDataReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRpcSyncDataReply::IsInitialized() const {
  return true;
}

void TaskRpcSyncDataReply::Swap(TaskRpcSyncDataReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRpcSyncDataReply::InternalSwap(TaskRpcSyncDataReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRpcSyncDataReply::GetMetadata() const {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRpcSyncDataReply

// optional sint32 Result = 1 [default = -9999];
bool TaskRpcSyncDataReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskRpcSyncDataReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskRpcSyncDataReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskRpcSyncDataReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TaskRpcSyncDataReply::result() const {
  // @@protoc_insertion_point(field_get:TaskRpcSyncDataReply.Result)
  return result_;
}
void TaskRpcSyncDataReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcSyncDataReply.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskRpcCompleteTaskAsk::kTaskIdFieldNumber;
const int TaskRpcCompleteTaskAsk::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRpcCompleteTaskAsk::TaskRpcCompleteTaskAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TaskRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskRpcCompleteTaskAsk)
}
TaskRpcCompleteTaskAsk::TaskRpcCompleteTaskAsk(const TaskRpcCompleteTaskAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&taskid_, &from.taskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&taskid_)) + sizeof(target_));
  // @@protoc_insertion_point(copy_constructor:TaskRpcCompleteTaskAsk)
}

void TaskRpcCompleteTaskAsk::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = -1;
  target_ = -1;
}

TaskRpcCompleteTaskAsk::~TaskRpcCompleteTaskAsk() {
  // @@protoc_insertion_point(destructor:TaskRpcCompleteTaskAsk)
  SharedDtor();
}

void TaskRpcCompleteTaskAsk::SharedDtor() {
}

void TaskRpcCompleteTaskAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRpcCompleteTaskAsk::descriptor() {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRpcCompleteTaskAsk& TaskRpcCompleteTaskAsk::default_instance() {
  protobuf_TaskRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRpcCompleteTaskAsk* TaskRpcCompleteTaskAsk::New(::google::protobuf::Arena* arena) const {
  TaskRpcCompleteTaskAsk* n = new TaskRpcCompleteTaskAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRpcCompleteTaskAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskRpcCompleteTaskAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    taskid_ = -1;
    target_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskRpcCompleteTaskAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TaskRpcCompleteTaskAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TaskId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_taskid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Target = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TaskRpcCompleteTaskAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TaskRpcCompleteTaskAsk)
  return false;
#undef DO_
}

void TaskRpcCompleteTaskAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TaskRpcCompleteTaskAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TaskId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->taskid(), output);
  }

  // optional sint32 Target = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->target(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TaskRpcCompleteTaskAsk)
}

::google::protobuf::uint8* TaskRpcCompleteTaskAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TaskRpcCompleteTaskAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TaskId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->taskid(), target);
  }

  // optional sint32 Target = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->target(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskRpcCompleteTaskAsk)
  return target;
}

size_t TaskRpcCompleteTaskAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskRpcCompleteTaskAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 TaskId = 1 [default = -1];
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->taskid());
    }

    // optional sint32 Target = 2 [default = -1];
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->target());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRpcCompleteTaskAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskRpcCompleteTaskAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRpcCompleteTaskAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRpcCompleteTaskAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskRpcCompleteTaskAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskRpcCompleteTaskAsk)
    MergeFrom(*source);
  }
}

void TaskRpcCompleteTaskAsk::MergeFrom(const TaskRpcCompleteTaskAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskRpcCompleteTaskAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      taskid_ = from.taskid_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_ = from.target_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TaskRpcCompleteTaskAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskRpcCompleteTaskAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRpcCompleteTaskAsk::CopyFrom(const TaskRpcCompleteTaskAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskRpcCompleteTaskAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRpcCompleteTaskAsk::IsInitialized() const {
  return true;
}

void TaskRpcCompleteTaskAsk::Swap(TaskRpcCompleteTaskAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRpcCompleteTaskAsk::InternalSwap(TaskRpcCompleteTaskAsk* other) {
  using std::swap;
  swap(taskid_, other->taskid_);
  swap(target_, other->target_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRpcCompleteTaskAsk::GetMetadata() const {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRpcCompleteTaskAsk

// optional sint32 TaskId = 1 [default = -1];
bool TaskRpcCompleteTaskAsk::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskRpcCompleteTaskAsk::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskRpcCompleteTaskAsk::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskRpcCompleteTaskAsk::clear_taskid() {
  taskid_ = -1;
  clear_has_taskid();
}
::google::protobuf::int32 TaskRpcCompleteTaskAsk::taskid() const {
  // @@protoc_insertion_point(field_get:TaskRpcCompleteTaskAsk.TaskId)
  return taskid_;
}
void TaskRpcCompleteTaskAsk::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcCompleteTaskAsk.TaskId)
}

// optional sint32 Target = 2 [default = -1];
bool TaskRpcCompleteTaskAsk::has_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskRpcCompleteTaskAsk::set_has_target() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskRpcCompleteTaskAsk::clear_has_target() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskRpcCompleteTaskAsk::clear_target() {
  target_ = -1;
  clear_has_target();
}
::google::protobuf::int32 TaskRpcCompleteTaskAsk::target() const {
  // @@protoc_insertion_point(field_get:TaskRpcCompleteTaskAsk.Target)
  return target_;
}
void TaskRpcCompleteTaskAsk::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcCompleteTaskAsk.Target)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskRpcCompleteTaskReply::kResultFieldNumber;
const int TaskRpcCompleteTaskReply::kTaskIdFieldNumber;
const int TaskRpcCompleteTaskReply::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRpcCompleteTaskReply::TaskRpcCompleteTaskReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TaskRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskRpcCompleteTaskReply)
}
TaskRpcCompleteTaskReply::TaskRpcCompleteTaskReply(const TaskRpcCompleteTaskReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_, &from.target_,
    static_cast<size_t>(reinterpret_cast<char*>(&taskid_) -
    reinterpret_cast<char*>(&target_)) + sizeof(taskid_));
  // @@protoc_insertion_point(copy_constructor:TaskRpcCompleteTaskReply)
}

void TaskRpcCompleteTaskReply::SharedCtor() {
  _cached_size_ = 0;
  target_ = -1;
  result_ = -9999;
  taskid_ = -1;
}

TaskRpcCompleteTaskReply::~TaskRpcCompleteTaskReply() {
  // @@protoc_insertion_point(destructor:TaskRpcCompleteTaskReply)
  SharedDtor();
}

void TaskRpcCompleteTaskReply::SharedDtor() {
}

void TaskRpcCompleteTaskReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRpcCompleteTaskReply::descriptor() {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRpcCompleteTaskReply& TaskRpcCompleteTaskReply::default_instance() {
  protobuf_TaskRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRpcCompleteTaskReply* TaskRpcCompleteTaskReply::New(::google::protobuf::Arena* arena) const {
  TaskRpcCompleteTaskReply* n = new TaskRpcCompleteTaskReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRpcCompleteTaskReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskRpcCompleteTaskReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    target_ = -1;
    result_ = -9999;
    taskid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskRpcCompleteTaskReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TaskRpcCompleteTaskReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TaskId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_taskid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Target = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TaskRpcCompleteTaskReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TaskRpcCompleteTaskReply)
  return false;
#undef DO_
}

void TaskRpcCompleteTaskReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TaskRpcCompleteTaskReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 TaskId = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->taskid(), output);
  }

  // optional sint32 Target = 3 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->target(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TaskRpcCompleteTaskReply)
}

::google::protobuf::uint8* TaskRpcCompleteTaskReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TaskRpcCompleteTaskReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 TaskId = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->taskid(), target);
  }

  // optional sint32 Target = 3 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->target(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskRpcCompleteTaskReply)
  return target;
}

size_t TaskRpcCompleteTaskReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskRpcCompleteTaskReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional sint32 Target = 3 [default = -1];
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->target());
    }

    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 TaskId = 2 [default = -1];
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->taskid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRpcCompleteTaskReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskRpcCompleteTaskReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRpcCompleteTaskReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRpcCompleteTaskReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskRpcCompleteTaskReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskRpcCompleteTaskReply)
    MergeFrom(*source);
  }
}

void TaskRpcCompleteTaskReply::MergeFrom(const TaskRpcCompleteTaskReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskRpcCompleteTaskReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      target_ = from.target_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      taskid_ = from.taskid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TaskRpcCompleteTaskReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskRpcCompleteTaskReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRpcCompleteTaskReply::CopyFrom(const TaskRpcCompleteTaskReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskRpcCompleteTaskReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRpcCompleteTaskReply::IsInitialized() const {
  return true;
}

void TaskRpcCompleteTaskReply::Swap(TaskRpcCompleteTaskReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRpcCompleteTaskReply::InternalSwap(TaskRpcCompleteTaskReply* other) {
  using std::swap;
  swap(target_, other->target_);
  swap(result_, other->result_);
  swap(taskid_, other->taskid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRpcCompleteTaskReply::GetMetadata() const {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRpcCompleteTaskReply

// optional sint32 Result = 1 [default = -9999];
bool TaskRpcCompleteTaskReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskRpcCompleteTaskReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskRpcCompleteTaskReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskRpcCompleteTaskReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TaskRpcCompleteTaskReply::result() const {
  // @@protoc_insertion_point(field_get:TaskRpcCompleteTaskReply.Result)
  return result_;
}
void TaskRpcCompleteTaskReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcCompleteTaskReply.Result)
}

// optional sint32 TaskId = 2 [default = -1];
bool TaskRpcCompleteTaskReply::has_taskid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TaskRpcCompleteTaskReply::set_has_taskid() {
  _has_bits_[0] |= 0x00000004u;
}
void TaskRpcCompleteTaskReply::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000004u;
}
void TaskRpcCompleteTaskReply::clear_taskid() {
  taskid_ = -1;
  clear_has_taskid();
}
::google::protobuf::int32 TaskRpcCompleteTaskReply::taskid() const {
  // @@protoc_insertion_point(field_get:TaskRpcCompleteTaskReply.TaskId)
  return taskid_;
}
void TaskRpcCompleteTaskReply::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcCompleteTaskReply.TaskId)
}

// optional sint32 Target = 3 [default = -1];
bool TaskRpcCompleteTaskReply::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskRpcCompleteTaskReply::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskRpcCompleteTaskReply::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskRpcCompleteTaskReply::clear_target() {
  target_ = -1;
  clear_has_target();
}
::google::protobuf::int32 TaskRpcCompleteTaskReply::target() const {
  // @@protoc_insertion_point(field_get:TaskRpcCompleteTaskReply.Target)
  return target_;
}
void TaskRpcCompleteTaskReply::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcCompleteTaskReply.Target)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskRpcSubmitTaskAsk::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRpcSubmitTaskAsk::TaskRpcSubmitTaskAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TaskRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskRpcSubmitTaskAsk)
}
TaskRpcSubmitTaskAsk::TaskRpcSubmitTaskAsk(const TaskRpcSubmitTaskAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_ = from.taskid_;
  // @@protoc_insertion_point(copy_constructor:TaskRpcSubmitTaskAsk)
}

void TaskRpcSubmitTaskAsk::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = -1;
}

TaskRpcSubmitTaskAsk::~TaskRpcSubmitTaskAsk() {
  // @@protoc_insertion_point(destructor:TaskRpcSubmitTaskAsk)
  SharedDtor();
}

void TaskRpcSubmitTaskAsk::SharedDtor() {
}

void TaskRpcSubmitTaskAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRpcSubmitTaskAsk::descriptor() {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRpcSubmitTaskAsk& TaskRpcSubmitTaskAsk::default_instance() {
  protobuf_TaskRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRpcSubmitTaskAsk* TaskRpcSubmitTaskAsk::New(::google::protobuf::Arena* arena) const {
  TaskRpcSubmitTaskAsk* n = new TaskRpcSubmitTaskAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRpcSubmitTaskAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskRpcSubmitTaskAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskRpcSubmitTaskAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TaskRpcSubmitTaskAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TaskId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_taskid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TaskRpcSubmitTaskAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TaskRpcSubmitTaskAsk)
  return false;
#undef DO_
}

void TaskRpcSubmitTaskAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TaskRpcSubmitTaskAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TaskId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->taskid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TaskRpcSubmitTaskAsk)
}

::google::protobuf::uint8* TaskRpcSubmitTaskAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TaskRpcSubmitTaskAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TaskId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->taskid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskRpcSubmitTaskAsk)
  return target;
}

size_t TaskRpcSubmitTaskAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskRpcSubmitTaskAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 TaskId = 1 [default = -1];
  if (has_taskid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->taskid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRpcSubmitTaskAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskRpcSubmitTaskAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRpcSubmitTaskAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRpcSubmitTaskAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskRpcSubmitTaskAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskRpcSubmitTaskAsk)
    MergeFrom(*source);
  }
}

void TaskRpcSubmitTaskAsk::MergeFrom(const TaskRpcSubmitTaskAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskRpcSubmitTaskAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_taskid()) {
    set_taskid(from.taskid());
  }
}

void TaskRpcSubmitTaskAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskRpcSubmitTaskAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRpcSubmitTaskAsk::CopyFrom(const TaskRpcSubmitTaskAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskRpcSubmitTaskAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRpcSubmitTaskAsk::IsInitialized() const {
  return true;
}

void TaskRpcSubmitTaskAsk::Swap(TaskRpcSubmitTaskAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRpcSubmitTaskAsk::InternalSwap(TaskRpcSubmitTaskAsk* other) {
  using std::swap;
  swap(taskid_, other->taskid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRpcSubmitTaskAsk::GetMetadata() const {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRpcSubmitTaskAsk

// optional sint32 TaskId = 1 [default = -1];
bool TaskRpcSubmitTaskAsk::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskRpcSubmitTaskAsk::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskRpcSubmitTaskAsk::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskRpcSubmitTaskAsk::clear_taskid() {
  taskid_ = -1;
  clear_has_taskid();
}
::google::protobuf::int32 TaskRpcSubmitTaskAsk::taskid() const {
  // @@protoc_insertion_point(field_get:TaskRpcSubmitTaskAsk.TaskId)
  return taskid_;
}
void TaskRpcSubmitTaskAsk::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcSubmitTaskAsk.TaskId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskRpcSubmitTaskReply::kResultFieldNumber;
const int TaskRpcSubmitTaskReply::kTaskIdFieldNumber;
const int TaskRpcSubmitTaskReply::kNextTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRpcSubmitTaskReply::TaskRpcSubmitTaskReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TaskRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskRpcSubmitTaskReply)
}
TaskRpcSubmitTaskReply::TaskRpcSubmitTaskReply(const TaskRpcSubmitTaskReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nexttaskid_, &from.nexttaskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&taskid_) -
    reinterpret_cast<char*>(&nexttaskid_)) + sizeof(taskid_));
  // @@protoc_insertion_point(copy_constructor:TaskRpcSubmitTaskReply)
}

void TaskRpcSubmitTaskReply::SharedCtor() {
  _cached_size_ = 0;
  nexttaskid_ = -1;
  result_ = -9999;
  taskid_ = -1;
}

TaskRpcSubmitTaskReply::~TaskRpcSubmitTaskReply() {
  // @@protoc_insertion_point(destructor:TaskRpcSubmitTaskReply)
  SharedDtor();
}

void TaskRpcSubmitTaskReply::SharedDtor() {
}

void TaskRpcSubmitTaskReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRpcSubmitTaskReply::descriptor() {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRpcSubmitTaskReply& TaskRpcSubmitTaskReply::default_instance() {
  protobuf_TaskRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRpcSubmitTaskReply* TaskRpcSubmitTaskReply::New(::google::protobuf::Arena* arena) const {
  TaskRpcSubmitTaskReply* n = new TaskRpcSubmitTaskReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRpcSubmitTaskReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskRpcSubmitTaskReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    nexttaskid_ = -1;
    result_ = -9999;
    taskid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskRpcSubmitTaskReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TaskRpcSubmitTaskReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TaskId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_taskid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 NextTaskId = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_nexttaskid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &nexttaskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TaskRpcSubmitTaskReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TaskRpcSubmitTaskReply)
  return false;
#undef DO_
}

void TaskRpcSubmitTaskReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TaskRpcSubmitTaskReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 TaskId = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->taskid(), output);
  }

  // optional sint32 NextTaskId = 3 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->nexttaskid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TaskRpcSubmitTaskReply)
}

::google::protobuf::uint8* TaskRpcSubmitTaskReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TaskRpcSubmitTaskReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 TaskId = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->taskid(), target);
  }

  // optional sint32 NextTaskId = 3 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->nexttaskid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskRpcSubmitTaskReply)
  return target;
}

size_t TaskRpcSubmitTaskReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskRpcSubmitTaskReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional sint32 NextTaskId = 3 [default = -1];
    if (has_nexttaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->nexttaskid());
    }

    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 TaskId = 2 [default = -1];
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->taskid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRpcSubmitTaskReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskRpcSubmitTaskReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRpcSubmitTaskReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRpcSubmitTaskReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskRpcSubmitTaskReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskRpcSubmitTaskReply)
    MergeFrom(*source);
  }
}

void TaskRpcSubmitTaskReply::MergeFrom(const TaskRpcSubmitTaskReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskRpcSubmitTaskReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      nexttaskid_ = from.nexttaskid_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      taskid_ = from.taskid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TaskRpcSubmitTaskReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskRpcSubmitTaskReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRpcSubmitTaskReply::CopyFrom(const TaskRpcSubmitTaskReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskRpcSubmitTaskReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRpcSubmitTaskReply::IsInitialized() const {
  return true;
}

void TaskRpcSubmitTaskReply::Swap(TaskRpcSubmitTaskReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRpcSubmitTaskReply::InternalSwap(TaskRpcSubmitTaskReply* other) {
  using std::swap;
  swap(nexttaskid_, other->nexttaskid_);
  swap(result_, other->result_);
  swap(taskid_, other->taskid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRpcSubmitTaskReply::GetMetadata() const {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRpcSubmitTaskReply

// optional sint32 Result = 1 [default = -9999];
bool TaskRpcSubmitTaskReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskRpcSubmitTaskReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskRpcSubmitTaskReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskRpcSubmitTaskReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TaskRpcSubmitTaskReply::result() const {
  // @@protoc_insertion_point(field_get:TaskRpcSubmitTaskReply.Result)
  return result_;
}
void TaskRpcSubmitTaskReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcSubmitTaskReply.Result)
}

// optional sint32 TaskId = 2 [default = -1];
bool TaskRpcSubmitTaskReply::has_taskid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TaskRpcSubmitTaskReply::set_has_taskid() {
  _has_bits_[0] |= 0x00000004u;
}
void TaskRpcSubmitTaskReply::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000004u;
}
void TaskRpcSubmitTaskReply::clear_taskid() {
  taskid_ = -1;
  clear_has_taskid();
}
::google::protobuf::int32 TaskRpcSubmitTaskReply::taskid() const {
  // @@protoc_insertion_point(field_get:TaskRpcSubmitTaskReply.TaskId)
  return taskid_;
}
void TaskRpcSubmitTaskReply::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcSubmitTaskReply.TaskId)
}

// optional sint32 NextTaskId = 3 [default = -1];
bool TaskRpcSubmitTaskReply::has_nexttaskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskRpcSubmitTaskReply::set_has_nexttaskid() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskRpcSubmitTaskReply::clear_has_nexttaskid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskRpcSubmitTaskReply::clear_nexttaskid() {
  nexttaskid_ = -1;
  clear_has_nexttaskid();
}
::google::protobuf::int32 TaskRpcSubmitTaskReply::nexttaskid() const {
  // @@protoc_insertion_point(field_get:TaskRpcSubmitTaskReply.NextTaskId)
  return nexttaskid_;
}
void TaskRpcSubmitTaskReply::set_nexttaskid(::google::protobuf::int32 value) {
  set_has_nexttaskid();
  nexttaskid_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcSubmitTaskReply.NextTaskId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskRpcUpdateTaskNotify::kTaskIdFieldNumber;
const int TaskRpcUpdateTaskNotify::kTaskStateFieldNumber;
const int TaskRpcUpdateTaskNotify::kTaskTargetCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRpcUpdateTaskNotify::TaskRpcUpdateTaskNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TaskRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskRpcUpdateTaskNotify)
}
TaskRpcUpdateTaskNotify::TaskRpcUpdateTaskNotify(const TaskRpcUpdateTaskNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tasktargetcount_(from.tasktargetcount_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&taskid_, &from.taskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&taskstate_) -
    reinterpret_cast<char*>(&taskid_)) + sizeof(taskstate_));
  // @@protoc_insertion_point(copy_constructor:TaskRpcUpdateTaskNotify)
}

void TaskRpcUpdateTaskNotify::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = -1;
  taskstate_ = -1;
}

TaskRpcUpdateTaskNotify::~TaskRpcUpdateTaskNotify() {
  // @@protoc_insertion_point(destructor:TaskRpcUpdateTaskNotify)
  SharedDtor();
}

void TaskRpcUpdateTaskNotify::SharedDtor() {
}

void TaskRpcUpdateTaskNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRpcUpdateTaskNotify::descriptor() {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRpcUpdateTaskNotify& TaskRpcUpdateTaskNotify::default_instance() {
  protobuf_TaskRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRpcUpdateTaskNotify* TaskRpcUpdateTaskNotify::New(::google::protobuf::Arena* arena) const {
  TaskRpcUpdateTaskNotify* n = new TaskRpcUpdateTaskNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRpcUpdateTaskNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskRpcUpdateTaskNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasktargetcount_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    taskid_ = -1;
    taskstate_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskRpcUpdateTaskNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TaskRpcUpdateTaskNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TaskId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_taskid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TaskState = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_taskstate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &taskstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 TaskTargetCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 24u, input, this->mutable_tasktargetcount())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_tasktargetcount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TaskRpcUpdateTaskNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TaskRpcUpdateTaskNotify)
  return false;
#undef DO_
}

void TaskRpcUpdateTaskNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TaskRpcUpdateTaskNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TaskId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->taskid(), output);
  }

  // optional sint32 TaskState = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->taskstate(), output);
  }

  // repeated sint32 TaskTargetCount = 3;
  for (int i = 0, n = this->tasktargetcount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      3, this->tasktargetcount(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TaskRpcUpdateTaskNotify)
}

::google::protobuf::uint8* TaskRpcUpdateTaskNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TaskRpcUpdateTaskNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TaskId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->taskid(), target);
  }

  // optional sint32 TaskState = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->taskstate(), target);
  }

  // repeated sint32 TaskTargetCount = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(3, this->tasktargetcount_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskRpcUpdateTaskNotify)
  return target;
}

size_t TaskRpcUpdateTaskNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskRpcUpdateTaskNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated sint32 TaskTargetCount = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->tasktargetcount_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->tasktargetcount_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 TaskId = 1 [default = -1];
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->taskid());
    }

    // optional sint32 TaskState = 2 [default = -1];
    if (has_taskstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->taskstate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRpcUpdateTaskNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskRpcUpdateTaskNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRpcUpdateTaskNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRpcUpdateTaskNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskRpcUpdateTaskNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskRpcUpdateTaskNotify)
    MergeFrom(*source);
  }
}

void TaskRpcUpdateTaskNotify::MergeFrom(const TaskRpcUpdateTaskNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskRpcUpdateTaskNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasktargetcount_.MergeFrom(from.tasktargetcount_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      taskid_ = from.taskid_;
    }
    if (cached_has_bits & 0x00000002u) {
      taskstate_ = from.taskstate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TaskRpcUpdateTaskNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskRpcUpdateTaskNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRpcUpdateTaskNotify::CopyFrom(const TaskRpcUpdateTaskNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskRpcUpdateTaskNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRpcUpdateTaskNotify::IsInitialized() const {
  return true;
}

void TaskRpcUpdateTaskNotify::Swap(TaskRpcUpdateTaskNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRpcUpdateTaskNotify::InternalSwap(TaskRpcUpdateTaskNotify* other) {
  using std::swap;
  tasktargetcount_.InternalSwap(&other->tasktargetcount_);
  swap(taskid_, other->taskid_);
  swap(taskstate_, other->taskstate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRpcUpdateTaskNotify::GetMetadata() const {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRpcUpdateTaskNotify

// optional sint32 TaskId = 1 [default = -1];
bool TaskRpcUpdateTaskNotify::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskRpcUpdateTaskNotify::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskRpcUpdateTaskNotify::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskRpcUpdateTaskNotify::clear_taskid() {
  taskid_ = -1;
  clear_has_taskid();
}
::google::protobuf::int32 TaskRpcUpdateTaskNotify::taskid() const {
  // @@protoc_insertion_point(field_get:TaskRpcUpdateTaskNotify.TaskId)
  return taskid_;
}
void TaskRpcUpdateTaskNotify::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcUpdateTaskNotify.TaskId)
}

// optional sint32 TaskState = 2 [default = -1];
bool TaskRpcUpdateTaskNotify::has_taskstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskRpcUpdateTaskNotify::set_has_taskstate() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskRpcUpdateTaskNotify::clear_has_taskstate() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskRpcUpdateTaskNotify::clear_taskstate() {
  taskstate_ = -1;
  clear_has_taskstate();
}
::google::protobuf::int32 TaskRpcUpdateTaskNotify::taskstate() const {
  // @@protoc_insertion_point(field_get:TaskRpcUpdateTaskNotify.TaskState)
  return taskstate_;
}
void TaskRpcUpdateTaskNotify::set_taskstate(::google::protobuf::int32 value) {
  set_has_taskstate();
  taskstate_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcUpdateTaskNotify.TaskState)
}

// repeated sint32 TaskTargetCount = 3;
int TaskRpcUpdateTaskNotify::tasktargetcount_size() const {
  return tasktargetcount_.size();
}
void TaskRpcUpdateTaskNotify::clear_tasktargetcount() {
  tasktargetcount_.Clear();
}
::google::protobuf::int32 TaskRpcUpdateTaskNotify::tasktargetcount(int index) const {
  // @@protoc_insertion_point(field_get:TaskRpcUpdateTaskNotify.TaskTargetCount)
  return tasktargetcount_.Get(index);
}
void TaskRpcUpdateTaskNotify::set_tasktargetcount(int index, ::google::protobuf::int32 value) {
  tasktargetcount_.Set(index, value);
  // @@protoc_insertion_point(field_set:TaskRpcUpdateTaskNotify.TaskTargetCount)
}
void TaskRpcUpdateTaskNotify::add_tasktargetcount(::google::protobuf::int32 value) {
  tasktargetcount_.Add(value);
  // @@protoc_insertion_point(field_add:TaskRpcUpdateTaskNotify.TaskTargetCount)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TaskRpcUpdateTaskNotify::tasktargetcount() const {
  // @@protoc_insertion_point(field_list:TaskRpcUpdateTaskNotify.TaskTargetCount)
  return tasktargetcount_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TaskRpcUpdateTaskNotify::mutable_tasktargetcount() {
  // @@protoc_insertion_point(field_mutable_list:TaskRpcUpdateTaskNotify.TaskTargetCount)
  return &tasktargetcount_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskRpcAcceptTaskAsk::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRpcAcceptTaskAsk::TaskRpcAcceptTaskAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TaskRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskRpcAcceptTaskAsk)
}
TaskRpcAcceptTaskAsk::TaskRpcAcceptTaskAsk(const TaskRpcAcceptTaskAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_ = from.taskid_;
  // @@protoc_insertion_point(copy_constructor:TaskRpcAcceptTaskAsk)
}

void TaskRpcAcceptTaskAsk::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = -1;
}

TaskRpcAcceptTaskAsk::~TaskRpcAcceptTaskAsk() {
  // @@protoc_insertion_point(destructor:TaskRpcAcceptTaskAsk)
  SharedDtor();
}

void TaskRpcAcceptTaskAsk::SharedDtor() {
}

void TaskRpcAcceptTaskAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRpcAcceptTaskAsk::descriptor() {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRpcAcceptTaskAsk& TaskRpcAcceptTaskAsk::default_instance() {
  protobuf_TaskRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRpcAcceptTaskAsk* TaskRpcAcceptTaskAsk::New(::google::protobuf::Arena* arena) const {
  TaskRpcAcceptTaskAsk* n = new TaskRpcAcceptTaskAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRpcAcceptTaskAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskRpcAcceptTaskAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskRpcAcceptTaskAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TaskRpcAcceptTaskAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TaskId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_taskid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TaskRpcAcceptTaskAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TaskRpcAcceptTaskAsk)
  return false;
#undef DO_
}

void TaskRpcAcceptTaskAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TaskRpcAcceptTaskAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TaskId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->taskid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TaskRpcAcceptTaskAsk)
}

::google::protobuf::uint8* TaskRpcAcceptTaskAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TaskRpcAcceptTaskAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TaskId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->taskid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskRpcAcceptTaskAsk)
  return target;
}

size_t TaskRpcAcceptTaskAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskRpcAcceptTaskAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 TaskId = 1 [default = -1];
  if (has_taskid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->taskid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRpcAcceptTaskAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskRpcAcceptTaskAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRpcAcceptTaskAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRpcAcceptTaskAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskRpcAcceptTaskAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskRpcAcceptTaskAsk)
    MergeFrom(*source);
  }
}

void TaskRpcAcceptTaskAsk::MergeFrom(const TaskRpcAcceptTaskAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskRpcAcceptTaskAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_taskid()) {
    set_taskid(from.taskid());
  }
}

void TaskRpcAcceptTaskAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskRpcAcceptTaskAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRpcAcceptTaskAsk::CopyFrom(const TaskRpcAcceptTaskAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskRpcAcceptTaskAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRpcAcceptTaskAsk::IsInitialized() const {
  return true;
}

void TaskRpcAcceptTaskAsk::Swap(TaskRpcAcceptTaskAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRpcAcceptTaskAsk::InternalSwap(TaskRpcAcceptTaskAsk* other) {
  using std::swap;
  swap(taskid_, other->taskid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRpcAcceptTaskAsk::GetMetadata() const {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRpcAcceptTaskAsk

// optional sint32 TaskId = 1 [default = -1];
bool TaskRpcAcceptTaskAsk::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskRpcAcceptTaskAsk::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskRpcAcceptTaskAsk::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskRpcAcceptTaskAsk::clear_taskid() {
  taskid_ = -1;
  clear_has_taskid();
}
::google::protobuf::int32 TaskRpcAcceptTaskAsk::taskid() const {
  // @@protoc_insertion_point(field_get:TaskRpcAcceptTaskAsk.TaskId)
  return taskid_;
}
void TaskRpcAcceptTaskAsk::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcAcceptTaskAsk.TaskId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskRpcAcceptTaskReply::kResultFieldNumber;
const int TaskRpcAcceptTaskReply::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRpcAcceptTaskReply::TaskRpcAcceptTaskReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TaskRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskRpcAcceptTaskReply)
}
TaskRpcAcceptTaskReply::TaskRpcAcceptTaskReply(const TaskRpcAcceptTaskReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&taskid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(taskid_));
  // @@protoc_insertion_point(copy_constructor:TaskRpcAcceptTaskReply)
}

void TaskRpcAcceptTaskReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  taskid_ = -1;
}

TaskRpcAcceptTaskReply::~TaskRpcAcceptTaskReply() {
  // @@protoc_insertion_point(destructor:TaskRpcAcceptTaskReply)
  SharedDtor();
}

void TaskRpcAcceptTaskReply::SharedDtor() {
}

void TaskRpcAcceptTaskReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRpcAcceptTaskReply::descriptor() {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRpcAcceptTaskReply& TaskRpcAcceptTaskReply::default_instance() {
  protobuf_TaskRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRpcAcceptTaskReply* TaskRpcAcceptTaskReply::New(::google::protobuf::Arena* arena) const {
  TaskRpcAcceptTaskReply* n = new TaskRpcAcceptTaskReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRpcAcceptTaskReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskRpcAcceptTaskReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    result_ = -9999;
    taskid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskRpcAcceptTaskReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TaskRpcAcceptTaskReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TaskId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_taskid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TaskRpcAcceptTaskReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TaskRpcAcceptTaskReply)
  return false;
#undef DO_
}

void TaskRpcAcceptTaskReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TaskRpcAcceptTaskReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 TaskId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->taskid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TaskRpcAcceptTaskReply)
}

::google::protobuf::uint8* TaskRpcAcceptTaskReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TaskRpcAcceptTaskReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 TaskId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->taskid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskRpcAcceptTaskReply)
  return target;
}

size_t TaskRpcAcceptTaskReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskRpcAcceptTaskReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 TaskId = 2 [default = -1];
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->taskid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRpcAcceptTaskReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskRpcAcceptTaskReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRpcAcceptTaskReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRpcAcceptTaskReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskRpcAcceptTaskReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskRpcAcceptTaskReply)
    MergeFrom(*source);
  }
}

void TaskRpcAcceptTaskReply::MergeFrom(const TaskRpcAcceptTaskReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskRpcAcceptTaskReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      taskid_ = from.taskid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TaskRpcAcceptTaskReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskRpcAcceptTaskReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRpcAcceptTaskReply::CopyFrom(const TaskRpcAcceptTaskReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskRpcAcceptTaskReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRpcAcceptTaskReply::IsInitialized() const {
  return true;
}

void TaskRpcAcceptTaskReply::Swap(TaskRpcAcceptTaskReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRpcAcceptTaskReply::InternalSwap(TaskRpcAcceptTaskReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(taskid_, other->taskid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRpcAcceptTaskReply::GetMetadata() const {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRpcAcceptTaskReply

// optional sint32 Result = 1 [default = -9999];
bool TaskRpcAcceptTaskReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskRpcAcceptTaskReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskRpcAcceptTaskReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskRpcAcceptTaskReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TaskRpcAcceptTaskReply::result() const {
  // @@protoc_insertion_point(field_get:TaskRpcAcceptTaskReply.Result)
  return result_;
}
void TaskRpcAcceptTaskReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcAcceptTaskReply.Result)
}

// optional sint32 TaskId = 2 [default = -1];
bool TaskRpcAcceptTaskReply::has_taskid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskRpcAcceptTaskReply::set_has_taskid() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskRpcAcceptTaskReply::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskRpcAcceptTaskReply::clear_taskid() {
  taskid_ = -1;
  clear_has_taskid();
}
::google::protobuf::int32 TaskRpcAcceptTaskReply::taskid() const {
  // @@protoc_insertion_point(field_get:TaskRpcAcceptTaskReply.TaskId)
  return taskid_;
}
void TaskRpcAcceptTaskReply::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcAcceptTaskReply.TaskId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRpcStartProfTaskAsk::TaskRpcStartProfTaskAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TaskRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskRpcStartProfTaskAsk)
}
TaskRpcStartProfTaskAsk::TaskRpcStartProfTaskAsk(const TaskRpcStartProfTaskAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TaskRpcStartProfTaskAsk)
}

void TaskRpcStartProfTaskAsk::SharedCtor() {
  _cached_size_ = 0;
}

TaskRpcStartProfTaskAsk::~TaskRpcStartProfTaskAsk() {
  // @@protoc_insertion_point(destructor:TaskRpcStartProfTaskAsk)
  SharedDtor();
}

void TaskRpcStartProfTaskAsk::SharedDtor() {
}

void TaskRpcStartProfTaskAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRpcStartProfTaskAsk::descriptor() {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRpcStartProfTaskAsk& TaskRpcStartProfTaskAsk::default_instance() {
  protobuf_TaskRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRpcStartProfTaskAsk* TaskRpcStartProfTaskAsk::New(::google::protobuf::Arena* arena) const {
  TaskRpcStartProfTaskAsk* n = new TaskRpcStartProfTaskAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRpcStartProfTaskAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskRpcStartProfTaskAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskRpcStartProfTaskAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TaskRpcStartProfTaskAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TaskRpcStartProfTaskAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TaskRpcStartProfTaskAsk)
  return false;
#undef DO_
}

void TaskRpcStartProfTaskAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TaskRpcStartProfTaskAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TaskRpcStartProfTaskAsk)
}

::google::protobuf::uint8* TaskRpcStartProfTaskAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TaskRpcStartProfTaskAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskRpcStartProfTaskAsk)
  return target;
}

size_t TaskRpcStartProfTaskAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskRpcStartProfTaskAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRpcStartProfTaskAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskRpcStartProfTaskAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRpcStartProfTaskAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRpcStartProfTaskAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskRpcStartProfTaskAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskRpcStartProfTaskAsk)
    MergeFrom(*source);
  }
}

void TaskRpcStartProfTaskAsk::MergeFrom(const TaskRpcStartProfTaskAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskRpcStartProfTaskAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TaskRpcStartProfTaskAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskRpcStartProfTaskAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRpcStartProfTaskAsk::CopyFrom(const TaskRpcStartProfTaskAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskRpcStartProfTaskAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRpcStartProfTaskAsk::IsInitialized() const {
  return true;
}

void TaskRpcStartProfTaskAsk::Swap(TaskRpcStartProfTaskAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRpcStartProfTaskAsk::InternalSwap(TaskRpcStartProfTaskAsk* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRpcStartProfTaskAsk::GetMetadata() const {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRpcStartProfTaskAsk

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskRpcStartProfTaskReply::kResultFieldNumber;
const int TaskRpcStartProfTaskReply::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRpcStartProfTaskReply::TaskRpcStartProfTaskReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TaskRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskRpcStartProfTaskReply)
}
TaskRpcStartProfTaskReply::TaskRpcStartProfTaskReply(const TaskRpcStartProfTaskReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&taskid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(taskid_));
  // @@protoc_insertion_point(copy_constructor:TaskRpcStartProfTaskReply)
}

void TaskRpcStartProfTaskReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  taskid_ = -1;
}

TaskRpcStartProfTaskReply::~TaskRpcStartProfTaskReply() {
  // @@protoc_insertion_point(destructor:TaskRpcStartProfTaskReply)
  SharedDtor();
}

void TaskRpcStartProfTaskReply::SharedDtor() {
}

void TaskRpcStartProfTaskReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRpcStartProfTaskReply::descriptor() {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRpcStartProfTaskReply& TaskRpcStartProfTaskReply::default_instance() {
  protobuf_TaskRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRpcStartProfTaskReply* TaskRpcStartProfTaskReply::New(::google::protobuf::Arena* arena) const {
  TaskRpcStartProfTaskReply* n = new TaskRpcStartProfTaskReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRpcStartProfTaskReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskRpcStartProfTaskReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    result_ = -9999;
    taskid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskRpcStartProfTaskReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TaskRpcStartProfTaskReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TaskId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_taskid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TaskRpcStartProfTaskReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TaskRpcStartProfTaskReply)
  return false;
#undef DO_
}

void TaskRpcStartProfTaskReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TaskRpcStartProfTaskReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 TaskId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->taskid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TaskRpcStartProfTaskReply)
}

::google::protobuf::uint8* TaskRpcStartProfTaskReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TaskRpcStartProfTaskReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 TaskId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->taskid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskRpcStartProfTaskReply)
  return target;
}

size_t TaskRpcStartProfTaskReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskRpcStartProfTaskReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 TaskId = 2 [default = -1];
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->taskid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRpcStartProfTaskReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskRpcStartProfTaskReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRpcStartProfTaskReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRpcStartProfTaskReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskRpcStartProfTaskReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskRpcStartProfTaskReply)
    MergeFrom(*source);
  }
}

void TaskRpcStartProfTaskReply::MergeFrom(const TaskRpcStartProfTaskReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskRpcStartProfTaskReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      taskid_ = from.taskid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TaskRpcStartProfTaskReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskRpcStartProfTaskReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRpcStartProfTaskReply::CopyFrom(const TaskRpcStartProfTaskReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskRpcStartProfTaskReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRpcStartProfTaskReply::IsInitialized() const {
  return true;
}

void TaskRpcStartProfTaskReply::Swap(TaskRpcStartProfTaskReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRpcStartProfTaskReply::InternalSwap(TaskRpcStartProfTaskReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(taskid_, other->taskid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRpcStartProfTaskReply::GetMetadata() const {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRpcStartProfTaskReply

// optional sint32 Result = 1 [default = -9999];
bool TaskRpcStartProfTaskReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskRpcStartProfTaskReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskRpcStartProfTaskReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskRpcStartProfTaskReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TaskRpcStartProfTaskReply::result() const {
  // @@protoc_insertion_point(field_get:TaskRpcStartProfTaskReply.Result)
  return result_;
}
void TaskRpcStartProfTaskReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcStartProfTaskReply.Result)
}

// optional sint32 TaskId = 2 [default = -1];
bool TaskRpcStartProfTaskReply::has_taskid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskRpcStartProfTaskReply::set_has_taskid() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskRpcStartProfTaskReply::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskRpcStartProfTaskReply::clear_taskid() {
  taskid_ = -1;
  clear_has_taskid();
}
::google::protobuf::int32 TaskRpcStartProfTaskReply::taskid() const {
  // @@protoc_insertion_point(field_get:TaskRpcStartProfTaskReply.TaskId)
  return taskid_;
}
void TaskRpcStartProfTaskReply::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcStartProfTaskReply.TaskId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRpcStartOneDragonAsk::TaskRpcStartOneDragonAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TaskRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskRpcStartOneDragonAsk)
}
TaskRpcStartOneDragonAsk::TaskRpcStartOneDragonAsk(const TaskRpcStartOneDragonAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TaskRpcStartOneDragonAsk)
}

void TaskRpcStartOneDragonAsk::SharedCtor() {
  _cached_size_ = 0;
}

TaskRpcStartOneDragonAsk::~TaskRpcStartOneDragonAsk() {
  // @@protoc_insertion_point(destructor:TaskRpcStartOneDragonAsk)
  SharedDtor();
}

void TaskRpcStartOneDragonAsk::SharedDtor() {
}

void TaskRpcStartOneDragonAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRpcStartOneDragonAsk::descriptor() {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRpcStartOneDragonAsk& TaskRpcStartOneDragonAsk::default_instance() {
  protobuf_TaskRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRpcStartOneDragonAsk* TaskRpcStartOneDragonAsk::New(::google::protobuf::Arena* arena) const {
  TaskRpcStartOneDragonAsk* n = new TaskRpcStartOneDragonAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRpcStartOneDragonAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskRpcStartOneDragonAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskRpcStartOneDragonAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TaskRpcStartOneDragonAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TaskRpcStartOneDragonAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TaskRpcStartOneDragonAsk)
  return false;
#undef DO_
}

void TaskRpcStartOneDragonAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TaskRpcStartOneDragonAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TaskRpcStartOneDragonAsk)
}

::google::protobuf::uint8* TaskRpcStartOneDragonAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TaskRpcStartOneDragonAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskRpcStartOneDragonAsk)
  return target;
}

size_t TaskRpcStartOneDragonAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskRpcStartOneDragonAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRpcStartOneDragonAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskRpcStartOneDragonAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRpcStartOneDragonAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRpcStartOneDragonAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskRpcStartOneDragonAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskRpcStartOneDragonAsk)
    MergeFrom(*source);
  }
}

void TaskRpcStartOneDragonAsk::MergeFrom(const TaskRpcStartOneDragonAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskRpcStartOneDragonAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TaskRpcStartOneDragonAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskRpcStartOneDragonAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRpcStartOneDragonAsk::CopyFrom(const TaskRpcStartOneDragonAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskRpcStartOneDragonAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRpcStartOneDragonAsk::IsInitialized() const {
  return true;
}

void TaskRpcStartOneDragonAsk::Swap(TaskRpcStartOneDragonAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRpcStartOneDragonAsk::InternalSwap(TaskRpcStartOneDragonAsk* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRpcStartOneDragonAsk::GetMetadata() const {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRpcStartOneDragonAsk

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskRpcStartOneDragonReply::kResultFieldNumber;
const int TaskRpcStartOneDragonReply::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRpcStartOneDragonReply::TaskRpcStartOneDragonReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TaskRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskRpcStartOneDragonReply)
}
TaskRpcStartOneDragonReply::TaskRpcStartOneDragonReply(const TaskRpcStartOneDragonReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&taskid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(taskid_));
  // @@protoc_insertion_point(copy_constructor:TaskRpcStartOneDragonReply)
}

void TaskRpcStartOneDragonReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  taskid_ = -1;
}

TaskRpcStartOneDragonReply::~TaskRpcStartOneDragonReply() {
  // @@protoc_insertion_point(destructor:TaskRpcStartOneDragonReply)
  SharedDtor();
}

void TaskRpcStartOneDragonReply::SharedDtor() {
}

void TaskRpcStartOneDragonReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRpcStartOneDragonReply::descriptor() {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRpcStartOneDragonReply& TaskRpcStartOneDragonReply::default_instance() {
  protobuf_TaskRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRpcStartOneDragonReply* TaskRpcStartOneDragonReply::New(::google::protobuf::Arena* arena) const {
  TaskRpcStartOneDragonReply* n = new TaskRpcStartOneDragonReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRpcStartOneDragonReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskRpcStartOneDragonReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    result_ = -9999;
    taskid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskRpcStartOneDragonReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TaskRpcStartOneDragonReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TaskId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_taskid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TaskRpcStartOneDragonReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TaskRpcStartOneDragonReply)
  return false;
#undef DO_
}

void TaskRpcStartOneDragonReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TaskRpcStartOneDragonReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 TaskId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->taskid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TaskRpcStartOneDragonReply)
}

::google::protobuf::uint8* TaskRpcStartOneDragonReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TaskRpcStartOneDragonReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 TaskId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->taskid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskRpcStartOneDragonReply)
  return target;
}

size_t TaskRpcStartOneDragonReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskRpcStartOneDragonReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 TaskId = 2 [default = -1];
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->taskid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRpcStartOneDragonReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskRpcStartOneDragonReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRpcStartOneDragonReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRpcStartOneDragonReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskRpcStartOneDragonReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskRpcStartOneDragonReply)
    MergeFrom(*source);
  }
}

void TaskRpcStartOneDragonReply::MergeFrom(const TaskRpcStartOneDragonReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskRpcStartOneDragonReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      taskid_ = from.taskid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TaskRpcStartOneDragonReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskRpcStartOneDragonReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRpcStartOneDragonReply::CopyFrom(const TaskRpcStartOneDragonReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskRpcStartOneDragonReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRpcStartOneDragonReply::IsInitialized() const {
  return true;
}

void TaskRpcStartOneDragonReply::Swap(TaskRpcStartOneDragonReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRpcStartOneDragonReply::InternalSwap(TaskRpcStartOneDragonReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(taskid_, other->taskid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRpcStartOneDragonReply::GetMetadata() const {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRpcStartOneDragonReply

// optional sint32 Result = 1 [default = -9999];
bool TaskRpcStartOneDragonReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskRpcStartOneDragonReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskRpcStartOneDragonReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskRpcStartOneDragonReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TaskRpcStartOneDragonReply::result() const {
  // @@protoc_insertion_point(field_get:TaskRpcStartOneDragonReply.Result)
  return result_;
}
void TaskRpcStartOneDragonReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcStartOneDragonReply.Result)
}

// optional sint32 TaskId = 2 [default = -1];
bool TaskRpcStartOneDragonReply::has_taskid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskRpcStartOneDragonReply::set_has_taskid() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskRpcStartOneDragonReply::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskRpcStartOneDragonReply::clear_taskid() {
  taskid_ = -1;
  clear_has_taskid();
}
::google::protobuf::int32 TaskRpcStartOneDragonReply::taskid() const {
  // @@protoc_insertion_point(field_get:TaskRpcStartOneDragonReply.TaskId)
  return taskid_;
}
void TaskRpcStartOneDragonReply::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcStartOneDragonReply.TaskId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskRpcAddTaskNotify::kTaskIdFieldNumber;
const int TaskRpcAddTaskNotify::kTaskStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRpcAddTaskNotify::TaskRpcAddTaskNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TaskRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskRpcAddTaskNotify)
}
TaskRpcAddTaskNotify::TaskRpcAddTaskNotify(const TaskRpcAddTaskNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&taskid_, &from.taskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&taskstate_) -
    reinterpret_cast<char*>(&taskid_)) + sizeof(taskstate_));
  // @@protoc_insertion_point(copy_constructor:TaskRpcAddTaskNotify)
}

void TaskRpcAddTaskNotify::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = -1;
  taskstate_ = -1;
}

TaskRpcAddTaskNotify::~TaskRpcAddTaskNotify() {
  // @@protoc_insertion_point(destructor:TaskRpcAddTaskNotify)
  SharedDtor();
}

void TaskRpcAddTaskNotify::SharedDtor() {
}

void TaskRpcAddTaskNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRpcAddTaskNotify::descriptor() {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRpcAddTaskNotify& TaskRpcAddTaskNotify::default_instance() {
  protobuf_TaskRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRpcAddTaskNotify* TaskRpcAddTaskNotify::New(::google::protobuf::Arena* arena) const {
  TaskRpcAddTaskNotify* n = new TaskRpcAddTaskNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRpcAddTaskNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskRpcAddTaskNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    taskid_ = -1;
    taskstate_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskRpcAddTaskNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TaskRpcAddTaskNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TaskId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_taskid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TaskState = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_taskstate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &taskstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TaskRpcAddTaskNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TaskRpcAddTaskNotify)
  return false;
#undef DO_
}

void TaskRpcAddTaskNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TaskRpcAddTaskNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TaskId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->taskid(), output);
  }

  // optional sint32 TaskState = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->taskstate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TaskRpcAddTaskNotify)
}

::google::protobuf::uint8* TaskRpcAddTaskNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TaskRpcAddTaskNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TaskId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->taskid(), target);
  }

  // optional sint32 TaskState = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->taskstate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskRpcAddTaskNotify)
  return target;
}

size_t TaskRpcAddTaskNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskRpcAddTaskNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 TaskId = 1 [default = -1];
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->taskid());
    }

    // optional sint32 TaskState = 2 [default = -1];
    if (has_taskstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->taskstate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRpcAddTaskNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskRpcAddTaskNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRpcAddTaskNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRpcAddTaskNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskRpcAddTaskNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskRpcAddTaskNotify)
    MergeFrom(*source);
  }
}

void TaskRpcAddTaskNotify::MergeFrom(const TaskRpcAddTaskNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskRpcAddTaskNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      taskid_ = from.taskid_;
    }
    if (cached_has_bits & 0x00000002u) {
      taskstate_ = from.taskstate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TaskRpcAddTaskNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskRpcAddTaskNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRpcAddTaskNotify::CopyFrom(const TaskRpcAddTaskNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskRpcAddTaskNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRpcAddTaskNotify::IsInitialized() const {
  return true;
}

void TaskRpcAddTaskNotify::Swap(TaskRpcAddTaskNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRpcAddTaskNotify::InternalSwap(TaskRpcAddTaskNotify* other) {
  using std::swap;
  swap(taskid_, other->taskid_);
  swap(taskstate_, other->taskstate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRpcAddTaskNotify::GetMetadata() const {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRpcAddTaskNotify

// optional sint32 TaskId = 1 [default = -1];
bool TaskRpcAddTaskNotify::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskRpcAddTaskNotify::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskRpcAddTaskNotify::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskRpcAddTaskNotify::clear_taskid() {
  taskid_ = -1;
  clear_has_taskid();
}
::google::protobuf::int32 TaskRpcAddTaskNotify::taskid() const {
  // @@protoc_insertion_point(field_get:TaskRpcAddTaskNotify.TaskId)
  return taskid_;
}
void TaskRpcAddTaskNotify::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcAddTaskNotify.TaskId)
}

// optional sint32 TaskState = 2 [default = -1];
bool TaskRpcAddTaskNotify::has_taskstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskRpcAddTaskNotify::set_has_taskstate() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskRpcAddTaskNotify::clear_has_taskstate() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskRpcAddTaskNotify::clear_taskstate() {
  taskstate_ = -1;
  clear_has_taskstate();
}
::google::protobuf::int32 TaskRpcAddTaskNotify::taskstate() const {
  // @@protoc_insertion_point(field_get:TaskRpcAddTaskNotify.TaskState)
  return taskstate_;
}
void TaskRpcAddTaskNotify::set_taskstate(::google::protobuf::int32 value) {
  set_has_taskstate();
  taskstate_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcAddTaskNotify.TaskState)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskRpcDelTaskNotify::kTaskIdFieldNumber;
const int TaskRpcDelTaskNotify::kTaskStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRpcDelTaskNotify::TaskRpcDelTaskNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TaskRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskRpcDelTaskNotify)
}
TaskRpcDelTaskNotify::TaskRpcDelTaskNotify(const TaskRpcDelTaskNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&taskid_, &from.taskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&taskstate_) -
    reinterpret_cast<char*>(&taskid_)) + sizeof(taskstate_));
  // @@protoc_insertion_point(copy_constructor:TaskRpcDelTaskNotify)
}

void TaskRpcDelTaskNotify::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = -1;
  taskstate_ = -1;
}

TaskRpcDelTaskNotify::~TaskRpcDelTaskNotify() {
  // @@protoc_insertion_point(destructor:TaskRpcDelTaskNotify)
  SharedDtor();
}

void TaskRpcDelTaskNotify::SharedDtor() {
}

void TaskRpcDelTaskNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRpcDelTaskNotify::descriptor() {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRpcDelTaskNotify& TaskRpcDelTaskNotify::default_instance() {
  protobuf_TaskRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRpcDelTaskNotify* TaskRpcDelTaskNotify::New(::google::protobuf::Arena* arena) const {
  TaskRpcDelTaskNotify* n = new TaskRpcDelTaskNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRpcDelTaskNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskRpcDelTaskNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    taskid_ = -1;
    taskstate_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskRpcDelTaskNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TaskRpcDelTaskNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TaskId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_taskid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TaskState = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_taskstate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &taskstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TaskRpcDelTaskNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TaskRpcDelTaskNotify)
  return false;
#undef DO_
}

void TaskRpcDelTaskNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TaskRpcDelTaskNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TaskId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->taskid(), output);
  }

  // optional sint32 TaskState = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->taskstate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TaskRpcDelTaskNotify)
}

::google::protobuf::uint8* TaskRpcDelTaskNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TaskRpcDelTaskNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TaskId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->taskid(), target);
  }

  // optional sint32 TaskState = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->taskstate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskRpcDelTaskNotify)
  return target;
}

size_t TaskRpcDelTaskNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskRpcDelTaskNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 TaskId = 1 [default = -1];
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->taskid());
    }

    // optional sint32 TaskState = 2 [default = -1];
    if (has_taskstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->taskstate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRpcDelTaskNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskRpcDelTaskNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRpcDelTaskNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRpcDelTaskNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskRpcDelTaskNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskRpcDelTaskNotify)
    MergeFrom(*source);
  }
}

void TaskRpcDelTaskNotify::MergeFrom(const TaskRpcDelTaskNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskRpcDelTaskNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      taskid_ = from.taskid_;
    }
    if (cached_has_bits & 0x00000002u) {
      taskstate_ = from.taskstate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TaskRpcDelTaskNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskRpcDelTaskNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRpcDelTaskNotify::CopyFrom(const TaskRpcDelTaskNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskRpcDelTaskNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRpcDelTaskNotify::IsInitialized() const {
  return true;
}

void TaskRpcDelTaskNotify::Swap(TaskRpcDelTaskNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRpcDelTaskNotify::InternalSwap(TaskRpcDelTaskNotify* other) {
  using std::swap;
  swap(taskid_, other->taskid_);
  swap(taskstate_, other->taskstate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRpcDelTaskNotify::GetMetadata() const {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRpcDelTaskNotify

// optional sint32 TaskId = 1 [default = -1];
bool TaskRpcDelTaskNotify::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskRpcDelTaskNotify::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskRpcDelTaskNotify::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskRpcDelTaskNotify::clear_taskid() {
  taskid_ = -1;
  clear_has_taskid();
}
::google::protobuf::int32 TaskRpcDelTaskNotify::taskid() const {
  // @@protoc_insertion_point(field_get:TaskRpcDelTaskNotify.TaskId)
  return taskid_;
}
void TaskRpcDelTaskNotify::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcDelTaskNotify.TaskId)
}

// optional sint32 TaskState = 2 [default = -1];
bool TaskRpcDelTaskNotify::has_taskstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskRpcDelTaskNotify::set_has_taskstate() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskRpcDelTaskNotify::clear_has_taskstate() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskRpcDelTaskNotify::clear_taskstate() {
  taskstate_ = -1;
  clear_has_taskstate();
}
::google::protobuf::int32 TaskRpcDelTaskNotify::taskstate() const {
  // @@protoc_insertion_point(field_get:TaskRpcDelTaskNotify.TaskState)
  return taskstate_;
}
void TaskRpcDelTaskNotify::set_taskstate(::google::protobuf::int32 value) {
  set_has_taskstate();
  taskstate_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcDelTaskNotify.TaskState)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRpcStartGuildSpyAsk::TaskRpcStartGuildSpyAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TaskRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskRpcStartGuildSpyAsk)
}
TaskRpcStartGuildSpyAsk::TaskRpcStartGuildSpyAsk(const TaskRpcStartGuildSpyAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TaskRpcStartGuildSpyAsk)
}

void TaskRpcStartGuildSpyAsk::SharedCtor() {
  _cached_size_ = 0;
}

TaskRpcStartGuildSpyAsk::~TaskRpcStartGuildSpyAsk() {
  // @@protoc_insertion_point(destructor:TaskRpcStartGuildSpyAsk)
  SharedDtor();
}

void TaskRpcStartGuildSpyAsk::SharedDtor() {
}

void TaskRpcStartGuildSpyAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRpcStartGuildSpyAsk::descriptor() {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRpcStartGuildSpyAsk& TaskRpcStartGuildSpyAsk::default_instance() {
  protobuf_TaskRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRpcStartGuildSpyAsk* TaskRpcStartGuildSpyAsk::New(::google::protobuf::Arena* arena) const {
  TaskRpcStartGuildSpyAsk* n = new TaskRpcStartGuildSpyAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRpcStartGuildSpyAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskRpcStartGuildSpyAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskRpcStartGuildSpyAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TaskRpcStartGuildSpyAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TaskRpcStartGuildSpyAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TaskRpcStartGuildSpyAsk)
  return false;
#undef DO_
}

void TaskRpcStartGuildSpyAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TaskRpcStartGuildSpyAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TaskRpcStartGuildSpyAsk)
}

::google::protobuf::uint8* TaskRpcStartGuildSpyAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TaskRpcStartGuildSpyAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskRpcStartGuildSpyAsk)
  return target;
}

size_t TaskRpcStartGuildSpyAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskRpcStartGuildSpyAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRpcStartGuildSpyAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskRpcStartGuildSpyAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRpcStartGuildSpyAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRpcStartGuildSpyAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskRpcStartGuildSpyAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskRpcStartGuildSpyAsk)
    MergeFrom(*source);
  }
}

void TaskRpcStartGuildSpyAsk::MergeFrom(const TaskRpcStartGuildSpyAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskRpcStartGuildSpyAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TaskRpcStartGuildSpyAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskRpcStartGuildSpyAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRpcStartGuildSpyAsk::CopyFrom(const TaskRpcStartGuildSpyAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskRpcStartGuildSpyAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRpcStartGuildSpyAsk::IsInitialized() const {
  return true;
}

void TaskRpcStartGuildSpyAsk::Swap(TaskRpcStartGuildSpyAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRpcStartGuildSpyAsk::InternalSwap(TaskRpcStartGuildSpyAsk* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRpcStartGuildSpyAsk::GetMetadata() const {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRpcStartGuildSpyAsk

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskRpcStartGuildSpyReply::kResultFieldNumber;
const int TaskRpcStartGuildSpyReply::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRpcStartGuildSpyReply::TaskRpcStartGuildSpyReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TaskRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TaskRpcStartGuildSpyReply)
}
TaskRpcStartGuildSpyReply::TaskRpcStartGuildSpyReply(const TaskRpcStartGuildSpyReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&taskid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(taskid_));
  // @@protoc_insertion_point(copy_constructor:TaskRpcStartGuildSpyReply)
}

void TaskRpcStartGuildSpyReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  taskid_ = -1;
}

TaskRpcStartGuildSpyReply::~TaskRpcStartGuildSpyReply() {
  // @@protoc_insertion_point(destructor:TaskRpcStartGuildSpyReply)
  SharedDtor();
}

void TaskRpcStartGuildSpyReply::SharedDtor() {
}

void TaskRpcStartGuildSpyReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRpcStartGuildSpyReply::descriptor() {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskRpcStartGuildSpyReply& TaskRpcStartGuildSpyReply::default_instance() {
  protobuf_TaskRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskRpcStartGuildSpyReply* TaskRpcStartGuildSpyReply::New(::google::protobuf::Arena* arena) const {
  TaskRpcStartGuildSpyReply* n = new TaskRpcStartGuildSpyReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRpcStartGuildSpyReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TaskRpcStartGuildSpyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    result_ = -9999;
    taskid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskRpcStartGuildSpyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TaskRpcStartGuildSpyReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TaskId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_taskid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TaskRpcStartGuildSpyReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TaskRpcStartGuildSpyReply)
  return false;
#undef DO_
}

void TaskRpcStartGuildSpyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TaskRpcStartGuildSpyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 TaskId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->taskid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TaskRpcStartGuildSpyReply)
}

::google::protobuf::uint8* TaskRpcStartGuildSpyReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TaskRpcStartGuildSpyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 TaskId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->taskid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TaskRpcStartGuildSpyReply)
  return target;
}

size_t TaskRpcStartGuildSpyReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TaskRpcStartGuildSpyReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 TaskId = 2 [default = -1];
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->taskid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRpcStartGuildSpyReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TaskRpcStartGuildSpyReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskRpcStartGuildSpyReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRpcStartGuildSpyReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TaskRpcStartGuildSpyReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TaskRpcStartGuildSpyReply)
    MergeFrom(*source);
  }
}

void TaskRpcStartGuildSpyReply::MergeFrom(const TaskRpcStartGuildSpyReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TaskRpcStartGuildSpyReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      taskid_ = from.taskid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TaskRpcStartGuildSpyReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TaskRpcStartGuildSpyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRpcStartGuildSpyReply::CopyFrom(const TaskRpcStartGuildSpyReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TaskRpcStartGuildSpyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRpcStartGuildSpyReply::IsInitialized() const {
  return true;
}

void TaskRpcStartGuildSpyReply::Swap(TaskRpcStartGuildSpyReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRpcStartGuildSpyReply::InternalSwap(TaskRpcStartGuildSpyReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(taskid_, other->taskid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRpcStartGuildSpyReply::GetMetadata() const {
  protobuf_TaskRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TaskRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRpcStartGuildSpyReply

// optional sint32 Result = 1 [default = -9999];
bool TaskRpcStartGuildSpyReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskRpcStartGuildSpyReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskRpcStartGuildSpyReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskRpcStartGuildSpyReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TaskRpcStartGuildSpyReply::result() const {
  // @@protoc_insertion_point(field_get:TaskRpcStartGuildSpyReply.Result)
  return result_;
}
void TaskRpcStartGuildSpyReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcStartGuildSpyReply.Result)
}

// optional sint32 TaskId = 2 [default = -1];
bool TaskRpcStartGuildSpyReply::has_taskid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskRpcStartGuildSpyReply::set_has_taskid() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskRpcStartGuildSpyReply::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskRpcStartGuildSpyReply::clear_taskid() {
  taskid_ = -1;
  clear_has_taskid();
}
::google::protobuf::int32 TaskRpcStartGuildSpyReply::taskid() const {
  // @@protoc_insertion_point(field_get:TaskRpcStartGuildSpyReply.TaskId)
  return taskid_;
}
void TaskRpcStartGuildSpyReply::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:TaskRpcStartGuildSpyReply.TaskId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
