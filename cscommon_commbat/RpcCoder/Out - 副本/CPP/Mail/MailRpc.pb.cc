// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MailRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MailRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class MailRpcMailHeadAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MailRpcMailHeadAsk>
     _instance;
} _MailRpcMailHeadAsk_default_instance_;
class MailRpcMailHeadReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MailRpcMailHeadReply>
     _instance;
} _MailRpcMailHeadReply_default_instance_;
class MailRpcDelMailAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MailRpcDelMailAsk>
     _instance;
} _MailRpcDelMailAsk_default_instance_;
class MailRpcDelMailReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MailRpcDelMailReply>
     _instance;
} _MailRpcDelMailReply_default_instance_;
class MailRpcOpenMailAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MailRpcOpenMailAsk>
     _instance;
} _MailRpcOpenMailAsk_default_instance_;
class MailRpcOpenMailReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MailRpcOpenMailReply>
     _instance;
} _MailRpcOpenMailReply_default_instance_;
class MailRpcGetRewardAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MailRpcGetRewardAsk>
     _instance;
} _MailRpcGetRewardAsk_default_instance_;
class MailRpcGetRewardReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MailRpcGetRewardReply>
     _instance;
} _MailRpcGetRewardReply_default_instance_;
class MailRpcNewMailNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MailRpcNewMailNotify>
     _instance;
} _MailRpcNewMailNotify_default_instance_;
class MailRpcOneKeyGetRewardAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MailRpcOneKeyGetRewardAsk>
     _instance;
} _MailRpcOneKeyGetRewardAsk_default_instance_;
class MailRpcOneKeyGetRewardReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MailRpcOneKeyGetRewardReply>
     _instance;
} _MailRpcOneKeyGetRewardReply_default_instance_;

namespace protobuf_MailRpc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[11];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcMailHeadAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcMailHeadAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcMailHeadAsk, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcMailHeadAsk, uid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcMailHeadReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcMailHeadReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcMailHeadReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcMailHeadReply, mailheadlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcMailHeadReply, maxcount_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcDelMailAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcDelMailAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcDelMailAsk, uidlist_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcDelMailReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcDelMailReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcDelMailReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcDelMailReply, uidlist_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcOpenMailAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcOpenMailAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcOpenMailAsk, uid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcOpenMailReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcOpenMailReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcOpenMailReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcOpenMailReply, mailbody_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcGetRewardAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcGetRewardAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcGetRewardAsk, uid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcGetRewardReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcGetRewardReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcGetRewardReply, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcNewMailNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcNewMailNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcNewMailNotify, mailheadlist_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcOneKeyGetRewardAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcOneKeyGetRewardAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcOneKeyGetRewardReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcOneKeyGetRewardReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcOneKeyGetRewardReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRpcOneKeyGetRewardReply, uidlist_),
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(MailRpcMailHeadAsk)},
  { 9, 17, sizeof(MailRpcMailHeadReply)},
  { 20, 26, sizeof(MailRpcDelMailAsk)},
  { 27, 34, sizeof(MailRpcDelMailReply)},
  { 36, 42, sizeof(MailRpcOpenMailAsk)},
  { 43, 50, sizeof(MailRpcOpenMailReply)},
  { 52, 58, sizeof(MailRpcGetRewardAsk)},
  { 59, 65, sizeof(MailRpcGetRewardReply)},
  { 66, 72, sizeof(MailRpcNewMailNotify)},
  { 73, 78, sizeof(MailRpcOneKeyGetRewardAsk)},
  { 78, 85, sizeof(MailRpcOneKeyGetRewardReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MailRpcMailHeadAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MailRpcMailHeadReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MailRpcDelMailAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MailRpcDelMailReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MailRpcOpenMailAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MailRpcOpenMailReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MailRpcGetRewardAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MailRpcGetRewardReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MailRpcNewMailNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MailRpcOneKeyGetRewardAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MailRpcOneKeyGetRewardReply_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "MailRpc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_PublicStruct_2eproto::InitDefaults();
  _MailRpcMailHeadAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MailRpcMailHeadAsk_default_instance_);_MailRpcMailHeadReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MailRpcMailHeadReply_default_instance_);_MailRpcDelMailAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MailRpcDelMailAsk_default_instance_);_MailRpcDelMailReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MailRpcDelMailReply_default_instance_);_MailRpcOpenMailAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MailRpcOpenMailAsk_default_instance_);_MailRpcOpenMailReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MailRpcOpenMailReply_default_instance_);_MailRpcGetRewardAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MailRpcGetRewardAsk_default_instance_);_MailRpcGetRewardReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MailRpcGetRewardReply_default_instance_);_MailRpcNewMailNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MailRpcNewMailNotify_default_instance_);_MailRpcOneKeyGetRewardAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MailRpcOneKeyGetRewardAsk_default_instance_);_MailRpcOneKeyGetRewardReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MailRpcOneKeyGetRewardReply_default_instance_);_MailRpcOpenMailReply_default_instance_._instance.get_mutable()->mailbody_ = const_cast< ::MailBodyObj*>(
      ::MailBodyObj::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rMailRpc.proto\032\022PublicStruct.proto\"7\n\022M"
      "ailRpcMailHeadAsk\022\020\n\005Count\030\002 \001(\021:\0010\022\017\n\003U"
      "Id\030\003 \001(\022:\002-1\"f\n\024MailRpcMailHeadReply\022\025\n\006"
      "Result\030\001 \001(\021:\005-9999\022\"\n\014MailHeadList\030\002 \003("
      "\0132\014.MailHeadObj\022\023\n\010MaxCount\030\003 \001(\021:\0010\"$\n\021"
      "MailRpcDelMailAsk\022\017\n\007UidList\030\001 \003(\022\"=\n\023Ma"
      "ilRpcDelMailReply\022\025\n\006Result\030\001 \001(\021:\005-9999"
      "\022\017\n\007UidList\030\002 \003(\022\"%\n\022MailRpcOpenMailAsk\022"
      "\017\n\003UId\030\001 \001(\022:\002-1\"M\n\024MailRpcOpenMailReply"
      "\022\025\n\006Result\030\001 \001(\021:\005-9999\022\036\n\010MailBody\030\002 \001("
      "\0132\014.MailBodyObj\"&\n\023MailRpcGetRewardAsk\022\017"
      "\n\003UId\030\002 \001(\022:\002-1\".\n\025MailRpcGetRewardReply"
      "\022\025\n\006Result\030\001 \001(\021:\005-9999\":\n\024MailRpcNewMai"
      "lNotify\022\"\n\014MailHeadList\030\001 \003(\0132\014.MailHead"
      "Obj\"\033\n\031MailRpcOneKeyGetRewardAsk\"E\n\033Mail"
      "RpcOneKeyGetRewardReply\022\025\n\006Result\030\001 \001(\021:"
      "\005-9999\022\017\n\007UidList\030\002 \003(\022"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 663);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MailRpc.proto", &protobuf_RegisterTypes);
  ::protobuf_PublicStruct_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_MailRpc_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MailRpcMailHeadAsk::kCountFieldNumber;
const int MailRpcMailHeadAsk::kUIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MailRpcMailHeadAsk::MailRpcMailHeadAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MailRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MailRpcMailHeadAsk)
}
MailRpcMailHeadAsk::MailRpcMailHeadAsk(const MailRpcMailHeadAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&count_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:MailRpcMailHeadAsk)
}

void MailRpcMailHeadAsk::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  uid_ = GOOGLE_LONGLONG(-1);
}

MailRpcMailHeadAsk::~MailRpcMailHeadAsk() {
  // @@protoc_insertion_point(destructor:MailRpcMailHeadAsk)
  SharedDtor();
}

void MailRpcMailHeadAsk::SharedDtor() {
}

void MailRpcMailHeadAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRpcMailHeadAsk::descriptor() {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MailRpcMailHeadAsk& MailRpcMailHeadAsk::default_instance() {
  protobuf_MailRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

MailRpcMailHeadAsk* MailRpcMailHeadAsk::New(::google::protobuf::Arena* arena) const {
  MailRpcMailHeadAsk* n = new MailRpcMailHeadAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MailRpcMailHeadAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:MailRpcMailHeadAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    count_ = 0;
    uid_ = GOOGLE_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MailRpcMailHeadAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MailRpcMailHeadAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Count = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 UId = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MailRpcMailHeadAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MailRpcMailHeadAsk)
  return false;
#undef DO_
}

void MailRpcMailHeadAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MailRpcMailHeadAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Count = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->count(), output);
  }

  // optional sint64 UId = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MailRpcMailHeadAsk)
}

::google::protobuf::uint8* MailRpcMailHeadAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MailRpcMailHeadAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Count = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->count(), target);
  }

  // optional sint64 UId = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailRpcMailHeadAsk)
  return target;
}

size_t MailRpcMailHeadAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailRpcMailHeadAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->count());
    }

    // optional sint64 UId = 3 [default = -1];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRpcMailHeadAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailRpcMailHeadAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const MailRpcMailHeadAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MailRpcMailHeadAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailRpcMailHeadAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailRpcMailHeadAsk)
    MergeFrom(*source);
  }
}

void MailRpcMailHeadAsk::MergeFrom(const MailRpcMailHeadAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailRpcMailHeadAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MailRpcMailHeadAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailRpcMailHeadAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRpcMailHeadAsk::CopyFrom(const MailRpcMailHeadAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailRpcMailHeadAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRpcMailHeadAsk::IsInitialized() const {
  return true;
}

void MailRpcMailHeadAsk::Swap(MailRpcMailHeadAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MailRpcMailHeadAsk::InternalSwap(MailRpcMailHeadAsk* other) {
  using std::swap;
  swap(count_, other->count_);
  swap(uid_, other->uid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MailRpcMailHeadAsk::GetMetadata() const {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MailRpcMailHeadAsk

// optional sint32 Count = 2 [default = 0];
bool MailRpcMailHeadAsk::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MailRpcMailHeadAsk::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
void MailRpcMailHeadAsk::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void MailRpcMailHeadAsk::clear_count() {
  count_ = 0;
  clear_has_count();
}
::google::protobuf::int32 MailRpcMailHeadAsk::count() const {
  // @@protoc_insertion_point(field_get:MailRpcMailHeadAsk.Count)
  return count_;
}
void MailRpcMailHeadAsk::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:MailRpcMailHeadAsk.Count)
}

// optional sint64 UId = 3 [default = -1];
bool MailRpcMailHeadAsk::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MailRpcMailHeadAsk::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
void MailRpcMailHeadAsk::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
void MailRpcMailHeadAsk::clear_uid() {
  uid_ = GOOGLE_LONGLONG(-1);
  clear_has_uid();
}
::google::protobuf::int64 MailRpcMailHeadAsk::uid() const {
  // @@protoc_insertion_point(field_get:MailRpcMailHeadAsk.UId)
  return uid_;
}
void MailRpcMailHeadAsk::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:MailRpcMailHeadAsk.UId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MailRpcMailHeadReply::kResultFieldNumber;
const int MailRpcMailHeadReply::kMailHeadListFieldNumber;
const int MailRpcMailHeadReply::kMaxCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MailRpcMailHeadReply::MailRpcMailHeadReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MailRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MailRpcMailHeadReply)
}
MailRpcMailHeadReply::MailRpcMailHeadReply(const MailRpcMailHeadReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      mailheadlist_(from.mailheadlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&maxcount_, &from.maxcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&maxcount_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:MailRpcMailHeadReply)
}

void MailRpcMailHeadReply::SharedCtor() {
  _cached_size_ = 0;
  maxcount_ = 0;
  result_ = -9999;
}

MailRpcMailHeadReply::~MailRpcMailHeadReply() {
  // @@protoc_insertion_point(destructor:MailRpcMailHeadReply)
  SharedDtor();
}

void MailRpcMailHeadReply::SharedDtor() {
}

void MailRpcMailHeadReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRpcMailHeadReply::descriptor() {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MailRpcMailHeadReply& MailRpcMailHeadReply::default_instance() {
  protobuf_MailRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

MailRpcMailHeadReply* MailRpcMailHeadReply::New(::google::protobuf::Arena* arena) const {
  MailRpcMailHeadReply* n = new MailRpcMailHeadReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MailRpcMailHeadReply::Clear() {
// @@protoc_insertion_point(message_clear_start:MailRpcMailHeadReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mailheadlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    maxcount_ = 0;
    result_ = -9999;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MailRpcMailHeadReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MailRpcMailHeadReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MailHeadObj MailHeadList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mailheadlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 MaxCount = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_maxcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &maxcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MailRpcMailHeadReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MailRpcMailHeadReply)
  return false;
#undef DO_
}

void MailRpcMailHeadReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MailRpcMailHeadReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // repeated .MailHeadObj MailHeadList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mailheadlist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mailheadlist(static_cast<int>(i)), output);
  }

  // optional sint32 MaxCount = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->maxcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MailRpcMailHeadReply)
}

::google::protobuf::uint8* MailRpcMailHeadReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MailRpcMailHeadReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // repeated .MailHeadObj MailHeadList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mailheadlist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->mailheadlist(static_cast<int>(i)), deterministic, target);
  }

  // optional sint32 MaxCount = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->maxcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailRpcMailHeadReply)
  return target;
}

size_t MailRpcMailHeadReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailRpcMailHeadReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MailHeadObj MailHeadList = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->mailheadlist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mailheadlist(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 MaxCount = 3 [default = 0];
    if (has_maxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->maxcount());
    }

    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRpcMailHeadReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailRpcMailHeadReply)
  GOOGLE_DCHECK_NE(&from, this);
  const MailRpcMailHeadReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MailRpcMailHeadReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailRpcMailHeadReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailRpcMailHeadReply)
    MergeFrom(*source);
  }
}

void MailRpcMailHeadReply::MergeFrom(const MailRpcMailHeadReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailRpcMailHeadReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mailheadlist_.MergeFrom(from.mailheadlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      maxcount_ = from.maxcount_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MailRpcMailHeadReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailRpcMailHeadReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRpcMailHeadReply::CopyFrom(const MailRpcMailHeadReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailRpcMailHeadReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRpcMailHeadReply::IsInitialized() const {
  return true;
}

void MailRpcMailHeadReply::Swap(MailRpcMailHeadReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MailRpcMailHeadReply::InternalSwap(MailRpcMailHeadReply* other) {
  using std::swap;
  mailheadlist_.InternalSwap(&other->mailheadlist_);
  swap(maxcount_, other->maxcount_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MailRpcMailHeadReply::GetMetadata() const {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MailRpcMailHeadReply

// optional sint32 Result = 1 [default = -9999];
bool MailRpcMailHeadReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MailRpcMailHeadReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void MailRpcMailHeadReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void MailRpcMailHeadReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 MailRpcMailHeadReply::result() const {
  // @@protoc_insertion_point(field_get:MailRpcMailHeadReply.Result)
  return result_;
}
void MailRpcMailHeadReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:MailRpcMailHeadReply.Result)
}

// repeated .MailHeadObj MailHeadList = 2;
int MailRpcMailHeadReply::mailheadlist_size() const {
  return mailheadlist_.size();
}
void MailRpcMailHeadReply::clear_mailheadlist() {
  mailheadlist_.Clear();
}
const ::MailHeadObj& MailRpcMailHeadReply::mailheadlist(int index) const {
  // @@protoc_insertion_point(field_get:MailRpcMailHeadReply.MailHeadList)
  return mailheadlist_.Get(index);
}
::MailHeadObj* MailRpcMailHeadReply::mutable_mailheadlist(int index) {
  // @@protoc_insertion_point(field_mutable:MailRpcMailHeadReply.MailHeadList)
  return mailheadlist_.Mutable(index);
}
::MailHeadObj* MailRpcMailHeadReply::add_mailheadlist() {
  // @@protoc_insertion_point(field_add:MailRpcMailHeadReply.MailHeadList)
  return mailheadlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::MailHeadObj >*
MailRpcMailHeadReply::mutable_mailheadlist() {
  // @@protoc_insertion_point(field_mutable_list:MailRpcMailHeadReply.MailHeadList)
  return &mailheadlist_;
}
const ::google::protobuf::RepeatedPtrField< ::MailHeadObj >&
MailRpcMailHeadReply::mailheadlist() const {
  // @@protoc_insertion_point(field_list:MailRpcMailHeadReply.MailHeadList)
  return mailheadlist_;
}

// optional sint32 MaxCount = 3 [default = 0];
bool MailRpcMailHeadReply::has_maxcount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MailRpcMailHeadReply::set_has_maxcount() {
  _has_bits_[0] |= 0x00000001u;
}
void MailRpcMailHeadReply::clear_has_maxcount() {
  _has_bits_[0] &= ~0x00000001u;
}
void MailRpcMailHeadReply::clear_maxcount() {
  maxcount_ = 0;
  clear_has_maxcount();
}
::google::protobuf::int32 MailRpcMailHeadReply::maxcount() const {
  // @@protoc_insertion_point(field_get:MailRpcMailHeadReply.MaxCount)
  return maxcount_;
}
void MailRpcMailHeadReply::set_maxcount(::google::protobuf::int32 value) {
  set_has_maxcount();
  maxcount_ = value;
  // @@protoc_insertion_point(field_set:MailRpcMailHeadReply.MaxCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MailRpcDelMailAsk::kUidListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MailRpcDelMailAsk::MailRpcDelMailAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MailRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MailRpcDelMailAsk)
}
MailRpcDelMailAsk::MailRpcDelMailAsk(const MailRpcDelMailAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      uidlist_(from.uidlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MailRpcDelMailAsk)
}

void MailRpcDelMailAsk::SharedCtor() {
  _cached_size_ = 0;
}

MailRpcDelMailAsk::~MailRpcDelMailAsk() {
  // @@protoc_insertion_point(destructor:MailRpcDelMailAsk)
  SharedDtor();
}

void MailRpcDelMailAsk::SharedDtor() {
}

void MailRpcDelMailAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRpcDelMailAsk::descriptor() {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MailRpcDelMailAsk& MailRpcDelMailAsk::default_instance() {
  protobuf_MailRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

MailRpcDelMailAsk* MailRpcDelMailAsk::New(::google::protobuf::Arena* arena) const {
  MailRpcDelMailAsk* n = new MailRpcDelMailAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MailRpcDelMailAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:MailRpcDelMailAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uidlist_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MailRpcDelMailAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MailRpcDelMailAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint64 UidList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 8u, input, this->mutable_uidlist())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_uidlist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MailRpcDelMailAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MailRpcDelMailAsk)
  return false;
#undef DO_
}

void MailRpcDelMailAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MailRpcDelMailAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint64 UidList = 1;
  for (int i = 0, n = this->uidlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      1, this->uidlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MailRpcDelMailAsk)
}

::google::protobuf::uint8* MailRpcDelMailAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MailRpcDelMailAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint64 UidList = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt64ToArray(1, this->uidlist_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailRpcDelMailAsk)
  return target;
}

size_t MailRpcDelMailAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailRpcDelMailAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated sint64 UidList = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt64Size(this->uidlist_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->uidlist_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRpcDelMailAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailRpcDelMailAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const MailRpcDelMailAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MailRpcDelMailAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailRpcDelMailAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailRpcDelMailAsk)
    MergeFrom(*source);
  }
}

void MailRpcDelMailAsk::MergeFrom(const MailRpcDelMailAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailRpcDelMailAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uidlist_.MergeFrom(from.uidlist_);
}

void MailRpcDelMailAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailRpcDelMailAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRpcDelMailAsk::CopyFrom(const MailRpcDelMailAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailRpcDelMailAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRpcDelMailAsk::IsInitialized() const {
  return true;
}

void MailRpcDelMailAsk::Swap(MailRpcDelMailAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MailRpcDelMailAsk::InternalSwap(MailRpcDelMailAsk* other) {
  using std::swap;
  uidlist_.InternalSwap(&other->uidlist_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MailRpcDelMailAsk::GetMetadata() const {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MailRpcDelMailAsk

// repeated sint64 UidList = 1;
int MailRpcDelMailAsk::uidlist_size() const {
  return uidlist_.size();
}
void MailRpcDelMailAsk::clear_uidlist() {
  uidlist_.Clear();
}
::google::protobuf::int64 MailRpcDelMailAsk::uidlist(int index) const {
  // @@protoc_insertion_point(field_get:MailRpcDelMailAsk.UidList)
  return uidlist_.Get(index);
}
void MailRpcDelMailAsk::set_uidlist(int index, ::google::protobuf::int64 value) {
  uidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:MailRpcDelMailAsk.UidList)
}
void MailRpcDelMailAsk::add_uidlist(::google::protobuf::int64 value) {
  uidlist_.Add(value);
  // @@protoc_insertion_point(field_add:MailRpcDelMailAsk.UidList)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MailRpcDelMailAsk::uidlist() const {
  // @@protoc_insertion_point(field_list:MailRpcDelMailAsk.UidList)
  return uidlist_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MailRpcDelMailAsk::mutable_uidlist() {
  // @@protoc_insertion_point(field_mutable_list:MailRpcDelMailAsk.UidList)
  return &uidlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MailRpcDelMailReply::kResultFieldNumber;
const int MailRpcDelMailReply::kUidListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MailRpcDelMailReply::MailRpcDelMailReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MailRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MailRpcDelMailReply)
}
MailRpcDelMailReply::MailRpcDelMailReply(const MailRpcDelMailReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      uidlist_(from.uidlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:MailRpcDelMailReply)
}

void MailRpcDelMailReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

MailRpcDelMailReply::~MailRpcDelMailReply() {
  // @@protoc_insertion_point(destructor:MailRpcDelMailReply)
  SharedDtor();
}

void MailRpcDelMailReply::SharedDtor() {
}

void MailRpcDelMailReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRpcDelMailReply::descriptor() {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MailRpcDelMailReply& MailRpcDelMailReply::default_instance() {
  protobuf_MailRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

MailRpcDelMailReply* MailRpcDelMailReply::New(::google::protobuf::Arena* arena) const {
  MailRpcDelMailReply* n = new MailRpcDelMailReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MailRpcDelMailReply::Clear() {
// @@protoc_insertion_point(message_clear_start:MailRpcDelMailReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uidlist_.Clear();
  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MailRpcDelMailReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MailRpcDelMailReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint64 UidList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 16u, input, this->mutable_uidlist())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_uidlist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MailRpcDelMailReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MailRpcDelMailReply)
  return false;
#undef DO_
}

void MailRpcDelMailReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MailRpcDelMailReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // repeated sint64 UidList = 2;
  for (int i = 0, n = this->uidlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      2, this->uidlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MailRpcDelMailReply)
}

::google::protobuf::uint8* MailRpcDelMailReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MailRpcDelMailReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // repeated sint64 UidList = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt64ToArray(2, this->uidlist_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailRpcDelMailReply)
  return target;
}

size_t MailRpcDelMailReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailRpcDelMailReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated sint64 UidList = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt64Size(this->uidlist_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->uidlist_size());
    total_size += data_size;
  }

  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRpcDelMailReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailRpcDelMailReply)
  GOOGLE_DCHECK_NE(&from, this);
  const MailRpcDelMailReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MailRpcDelMailReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailRpcDelMailReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailRpcDelMailReply)
    MergeFrom(*source);
  }
}

void MailRpcDelMailReply::MergeFrom(const MailRpcDelMailReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailRpcDelMailReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uidlist_.MergeFrom(from.uidlist_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void MailRpcDelMailReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailRpcDelMailReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRpcDelMailReply::CopyFrom(const MailRpcDelMailReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailRpcDelMailReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRpcDelMailReply::IsInitialized() const {
  return true;
}

void MailRpcDelMailReply::Swap(MailRpcDelMailReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MailRpcDelMailReply::InternalSwap(MailRpcDelMailReply* other) {
  using std::swap;
  uidlist_.InternalSwap(&other->uidlist_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MailRpcDelMailReply::GetMetadata() const {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MailRpcDelMailReply

// optional sint32 Result = 1 [default = -9999];
bool MailRpcDelMailReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MailRpcDelMailReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void MailRpcDelMailReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void MailRpcDelMailReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 MailRpcDelMailReply::result() const {
  // @@protoc_insertion_point(field_get:MailRpcDelMailReply.Result)
  return result_;
}
void MailRpcDelMailReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:MailRpcDelMailReply.Result)
}

// repeated sint64 UidList = 2;
int MailRpcDelMailReply::uidlist_size() const {
  return uidlist_.size();
}
void MailRpcDelMailReply::clear_uidlist() {
  uidlist_.Clear();
}
::google::protobuf::int64 MailRpcDelMailReply::uidlist(int index) const {
  // @@protoc_insertion_point(field_get:MailRpcDelMailReply.UidList)
  return uidlist_.Get(index);
}
void MailRpcDelMailReply::set_uidlist(int index, ::google::protobuf::int64 value) {
  uidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:MailRpcDelMailReply.UidList)
}
void MailRpcDelMailReply::add_uidlist(::google::protobuf::int64 value) {
  uidlist_.Add(value);
  // @@protoc_insertion_point(field_add:MailRpcDelMailReply.UidList)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MailRpcDelMailReply::uidlist() const {
  // @@protoc_insertion_point(field_list:MailRpcDelMailReply.UidList)
  return uidlist_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MailRpcDelMailReply::mutable_uidlist() {
  // @@protoc_insertion_point(field_mutable_list:MailRpcDelMailReply.UidList)
  return &uidlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MailRpcOpenMailAsk::kUIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MailRpcOpenMailAsk::MailRpcOpenMailAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MailRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MailRpcOpenMailAsk)
}
MailRpcOpenMailAsk::MailRpcOpenMailAsk(const MailRpcOpenMailAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:MailRpcOpenMailAsk)
}

void MailRpcOpenMailAsk::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(-1);
}

MailRpcOpenMailAsk::~MailRpcOpenMailAsk() {
  // @@protoc_insertion_point(destructor:MailRpcOpenMailAsk)
  SharedDtor();
}

void MailRpcOpenMailAsk::SharedDtor() {
}

void MailRpcOpenMailAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRpcOpenMailAsk::descriptor() {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MailRpcOpenMailAsk& MailRpcOpenMailAsk::default_instance() {
  protobuf_MailRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

MailRpcOpenMailAsk* MailRpcOpenMailAsk::New(::google::protobuf::Arena* arena) const {
  MailRpcOpenMailAsk* n = new MailRpcOpenMailAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MailRpcOpenMailAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:MailRpcOpenMailAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = GOOGLE_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MailRpcOpenMailAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MailRpcOpenMailAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MailRpcOpenMailAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MailRpcOpenMailAsk)
  return false;
#undef DO_
}

void MailRpcOpenMailAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MailRpcOpenMailAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MailRpcOpenMailAsk)
}

::google::protobuf::uint8* MailRpcOpenMailAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MailRpcOpenMailAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailRpcOpenMailAsk)
  return target;
}

size_t MailRpcOpenMailAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailRpcOpenMailAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint64 UId = 1 [default = -1];
  if (has_uid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRpcOpenMailAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailRpcOpenMailAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const MailRpcOpenMailAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MailRpcOpenMailAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailRpcOpenMailAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailRpcOpenMailAsk)
    MergeFrom(*source);
  }
}

void MailRpcOpenMailAsk::MergeFrom(const MailRpcOpenMailAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailRpcOpenMailAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_uid()) {
    set_uid(from.uid());
  }
}

void MailRpcOpenMailAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailRpcOpenMailAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRpcOpenMailAsk::CopyFrom(const MailRpcOpenMailAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailRpcOpenMailAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRpcOpenMailAsk::IsInitialized() const {
  return true;
}

void MailRpcOpenMailAsk::Swap(MailRpcOpenMailAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MailRpcOpenMailAsk::InternalSwap(MailRpcOpenMailAsk* other) {
  using std::swap;
  swap(uid_, other->uid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MailRpcOpenMailAsk::GetMetadata() const {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MailRpcOpenMailAsk

// optional sint64 UId = 1 [default = -1];
bool MailRpcOpenMailAsk::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MailRpcOpenMailAsk::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void MailRpcOpenMailAsk::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void MailRpcOpenMailAsk::clear_uid() {
  uid_ = GOOGLE_LONGLONG(-1);
  clear_has_uid();
}
::google::protobuf::int64 MailRpcOpenMailAsk::uid() const {
  // @@protoc_insertion_point(field_get:MailRpcOpenMailAsk.UId)
  return uid_;
}
void MailRpcOpenMailAsk::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:MailRpcOpenMailAsk.UId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MailRpcOpenMailReply::kResultFieldNumber;
const int MailRpcOpenMailReply::kMailBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MailRpcOpenMailReply::MailRpcOpenMailReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MailRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MailRpcOpenMailReply)
}
MailRpcOpenMailReply::MailRpcOpenMailReply(const MailRpcOpenMailReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mailbody()) {
    mailbody_ = new ::MailBodyObj(*from.mailbody_);
  } else {
    mailbody_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:MailRpcOpenMailReply)
}

void MailRpcOpenMailReply::SharedCtor() {
  _cached_size_ = 0;
  mailbody_ = NULL;
  result_ = -9999;
}

MailRpcOpenMailReply::~MailRpcOpenMailReply() {
  // @@protoc_insertion_point(destructor:MailRpcOpenMailReply)
  SharedDtor();
}

void MailRpcOpenMailReply::SharedDtor() {
  if (this != internal_default_instance()) delete mailbody_;
}

void MailRpcOpenMailReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRpcOpenMailReply::descriptor() {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MailRpcOpenMailReply& MailRpcOpenMailReply::default_instance() {
  protobuf_MailRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

MailRpcOpenMailReply* MailRpcOpenMailReply::New(::google::protobuf::Arena* arena) const {
  MailRpcOpenMailReply* n = new MailRpcOpenMailReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MailRpcOpenMailReply::Clear() {
// @@protoc_insertion_point(message_clear_start:MailRpcOpenMailReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(mailbody_ != NULL);
      mailbody_->::MailBodyObj::Clear();
    }
    result_ = -9999;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MailRpcOpenMailReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MailRpcOpenMailReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MailBodyObj MailBody = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mailbody()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MailRpcOpenMailReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MailRpcOpenMailReply)
  return false;
#undef DO_
}

void MailRpcOpenMailReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MailRpcOpenMailReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional .MailBodyObj MailBody = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->mailbody_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MailRpcOpenMailReply)
}

::google::protobuf::uint8* MailRpcOpenMailReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MailRpcOpenMailReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional .MailBodyObj MailBody = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->mailbody_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailRpcOpenMailReply)
  return target;
}

size_t MailRpcOpenMailReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailRpcOpenMailReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .MailBodyObj MailBody = 2;
    if (has_mailbody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mailbody_);
    }

    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRpcOpenMailReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailRpcOpenMailReply)
  GOOGLE_DCHECK_NE(&from, this);
  const MailRpcOpenMailReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MailRpcOpenMailReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailRpcOpenMailReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailRpcOpenMailReply)
    MergeFrom(*source);
  }
}

void MailRpcOpenMailReply::MergeFrom(const MailRpcOpenMailReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailRpcOpenMailReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_mailbody()->::MailBodyObj::MergeFrom(from.mailbody());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MailRpcOpenMailReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailRpcOpenMailReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRpcOpenMailReply::CopyFrom(const MailRpcOpenMailReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailRpcOpenMailReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRpcOpenMailReply::IsInitialized() const {
  return true;
}

void MailRpcOpenMailReply::Swap(MailRpcOpenMailReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MailRpcOpenMailReply::InternalSwap(MailRpcOpenMailReply* other) {
  using std::swap;
  swap(mailbody_, other->mailbody_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MailRpcOpenMailReply::GetMetadata() const {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MailRpcOpenMailReply

// optional sint32 Result = 1 [default = -9999];
bool MailRpcOpenMailReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MailRpcOpenMailReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void MailRpcOpenMailReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void MailRpcOpenMailReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 MailRpcOpenMailReply::result() const {
  // @@protoc_insertion_point(field_get:MailRpcOpenMailReply.Result)
  return result_;
}
void MailRpcOpenMailReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:MailRpcOpenMailReply.Result)
}

// optional .MailBodyObj MailBody = 2;
bool MailRpcOpenMailReply::has_mailbody() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MailRpcOpenMailReply::set_has_mailbody() {
  _has_bits_[0] |= 0x00000001u;
}
void MailRpcOpenMailReply::clear_has_mailbody() {
  _has_bits_[0] &= ~0x00000001u;
}
void MailRpcOpenMailReply::clear_mailbody() {
  if (mailbody_ != NULL) mailbody_->::MailBodyObj::Clear();
  clear_has_mailbody();
}
const ::MailBodyObj& MailRpcOpenMailReply::mailbody() const {
  const ::MailBodyObj* p = mailbody_;
  // @@protoc_insertion_point(field_get:MailRpcOpenMailReply.MailBody)
  return p != NULL ? *p : *reinterpret_cast<const ::MailBodyObj*>(
      &::_MailBodyObj_default_instance_);
}
::MailBodyObj* MailRpcOpenMailReply::mutable_mailbody() {
  set_has_mailbody();
  if (mailbody_ == NULL) {
    mailbody_ = new ::MailBodyObj;
  }
  // @@protoc_insertion_point(field_mutable:MailRpcOpenMailReply.MailBody)
  return mailbody_;
}
::MailBodyObj* MailRpcOpenMailReply::release_mailbody() {
  // @@protoc_insertion_point(field_release:MailRpcOpenMailReply.MailBody)
  clear_has_mailbody();
  ::MailBodyObj* temp = mailbody_;
  mailbody_ = NULL;
  return temp;
}
void MailRpcOpenMailReply::set_allocated_mailbody(::MailBodyObj* mailbody) {
  delete mailbody_;
  mailbody_ = mailbody;
  if (mailbody) {
    set_has_mailbody();
  } else {
    clear_has_mailbody();
  }
  // @@protoc_insertion_point(field_set_allocated:MailRpcOpenMailReply.MailBody)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MailRpcGetRewardAsk::kUIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MailRpcGetRewardAsk::MailRpcGetRewardAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MailRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MailRpcGetRewardAsk)
}
MailRpcGetRewardAsk::MailRpcGetRewardAsk(const MailRpcGetRewardAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:MailRpcGetRewardAsk)
}

void MailRpcGetRewardAsk::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(-1);
}

MailRpcGetRewardAsk::~MailRpcGetRewardAsk() {
  // @@protoc_insertion_point(destructor:MailRpcGetRewardAsk)
  SharedDtor();
}

void MailRpcGetRewardAsk::SharedDtor() {
}

void MailRpcGetRewardAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRpcGetRewardAsk::descriptor() {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MailRpcGetRewardAsk& MailRpcGetRewardAsk::default_instance() {
  protobuf_MailRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

MailRpcGetRewardAsk* MailRpcGetRewardAsk::New(::google::protobuf::Arena* arena) const {
  MailRpcGetRewardAsk* n = new MailRpcGetRewardAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MailRpcGetRewardAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:MailRpcGetRewardAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = GOOGLE_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MailRpcGetRewardAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MailRpcGetRewardAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MailRpcGetRewardAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MailRpcGetRewardAsk)
  return false;
#undef DO_
}

void MailRpcGetRewardAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MailRpcGetRewardAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UId = 2 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MailRpcGetRewardAsk)
}

::google::protobuf::uint8* MailRpcGetRewardAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MailRpcGetRewardAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UId = 2 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailRpcGetRewardAsk)
  return target;
}

size_t MailRpcGetRewardAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailRpcGetRewardAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint64 UId = 2 [default = -1];
  if (has_uid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRpcGetRewardAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailRpcGetRewardAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const MailRpcGetRewardAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MailRpcGetRewardAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailRpcGetRewardAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailRpcGetRewardAsk)
    MergeFrom(*source);
  }
}

void MailRpcGetRewardAsk::MergeFrom(const MailRpcGetRewardAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailRpcGetRewardAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_uid()) {
    set_uid(from.uid());
  }
}

void MailRpcGetRewardAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailRpcGetRewardAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRpcGetRewardAsk::CopyFrom(const MailRpcGetRewardAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailRpcGetRewardAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRpcGetRewardAsk::IsInitialized() const {
  return true;
}

void MailRpcGetRewardAsk::Swap(MailRpcGetRewardAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MailRpcGetRewardAsk::InternalSwap(MailRpcGetRewardAsk* other) {
  using std::swap;
  swap(uid_, other->uid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MailRpcGetRewardAsk::GetMetadata() const {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MailRpcGetRewardAsk

// optional sint64 UId = 2 [default = -1];
bool MailRpcGetRewardAsk::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MailRpcGetRewardAsk::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void MailRpcGetRewardAsk::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void MailRpcGetRewardAsk::clear_uid() {
  uid_ = GOOGLE_LONGLONG(-1);
  clear_has_uid();
}
::google::protobuf::int64 MailRpcGetRewardAsk::uid() const {
  // @@protoc_insertion_point(field_get:MailRpcGetRewardAsk.UId)
  return uid_;
}
void MailRpcGetRewardAsk::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:MailRpcGetRewardAsk.UId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MailRpcGetRewardReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MailRpcGetRewardReply::MailRpcGetRewardReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MailRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MailRpcGetRewardReply)
}
MailRpcGetRewardReply::MailRpcGetRewardReply(const MailRpcGetRewardReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:MailRpcGetRewardReply)
}

void MailRpcGetRewardReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

MailRpcGetRewardReply::~MailRpcGetRewardReply() {
  // @@protoc_insertion_point(destructor:MailRpcGetRewardReply)
  SharedDtor();
}

void MailRpcGetRewardReply::SharedDtor() {
}

void MailRpcGetRewardReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRpcGetRewardReply::descriptor() {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MailRpcGetRewardReply& MailRpcGetRewardReply::default_instance() {
  protobuf_MailRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

MailRpcGetRewardReply* MailRpcGetRewardReply::New(::google::protobuf::Arena* arena) const {
  MailRpcGetRewardReply* n = new MailRpcGetRewardReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MailRpcGetRewardReply::Clear() {
// @@protoc_insertion_point(message_clear_start:MailRpcGetRewardReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MailRpcGetRewardReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MailRpcGetRewardReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MailRpcGetRewardReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MailRpcGetRewardReply)
  return false;
#undef DO_
}

void MailRpcGetRewardReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MailRpcGetRewardReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MailRpcGetRewardReply)
}

::google::protobuf::uint8* MailRpcGetRewardReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MailRpcGetRewardReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailRpcGetRewardReply)
  return target;
}

size_t MailRpcGetRewardReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailRpcGetRewardReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRpcGetRewardReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailRpcGetRewardReply)
  GOOGLE_DCHECK_NE(&from, this);
  const MailRpcGetRewardReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MailRpcGetRewardReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailRpcGetRewardReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailRpcGetRewardReply)
    MergeFrom(*source);
  }
}

void MailRpcGetRewardReply::MergeFrom(const MailRpcGetRewardReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailRpcGetRewardReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void MailRpcGetRewardReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailRpcGetRewardReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRpcGetRewardReply::CopyFrom(const MailRpcGetRewardReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailRpcGetRewardReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRpcGetRewardReply::IsInitialized() const {
  return true;
}

void MailRpcGetRewardReply::Swap(MailRpcGetRewardReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MailRpcGetRewardReply::InternalSwap(MailRpcGetRewardReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MailRpcGetRewardReply::GetMetadata() const {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MailRpcGetRewardReply

// optional sint32 Result = 1 [default = -9999];
bool MailRpcGetRewardReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MailRpcGetRewardReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void MailRpcGetRewardReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void MailRpcGetRewardReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 MailRpcGetRewardReply::result() const {
  // @@protoc_insertion_point(field_get:MailRpcGetRewardReply.Result)
  return result_;
}
void MailRpcGetRewardReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:MailRpcGetRewardReply.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MailRpcNewMailNotify::kMailHeadListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MailRpcNewMailNotify::MailRpcNewMailNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MailRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MailRpcNewMailNotify)
}
MailRpcNewMailNotify::MailRpcNewMailNotify(const MailRpcNewMailNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      mailheadlist_(from.mailheadlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MailRpcNewMailNotify)
}

void MailRpcNewMailNotify::SharedCtor() {
  _cached_size_ = 0;
}

MailRpcNewMailNotify::~MailRpcNewMailNotify() {
  // @@protoc_insertion_point(destructor:MailRpcNewMailNotify)
  SharedDtor();
}

void MailRpcNewMailNotify::SharedDtor() {
}

void MailRpcNewMailNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRpcNewMailNotify::descriptor() {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MailRpcNewMailNotify& MailRpcNewMailNotify::default_instance() {
  protobuf_MailRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

MailRpcNewMailNotify* MailRpcNewMailNotify::New(::google::protobuf::Arena* arena) const {
  MailRpcNewMailNotify* n = new MailRpcNewMailNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MailRpcNewMailNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:MailRpcNewMailNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mailheadlist_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MailRpcNewMailNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MailRpcNewMailNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MailHeadObj MailHeadList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mailheadlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MailRpcNewMailNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MailRpcNewMailNotify)
  return false;
#undef DO_
}

void MailRpcNewMailNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MailRpcNewMailNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MailHeadObj MailHeadList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mailheadlist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mailheadlist(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MailRpcNewMailNotify)
}

::google::protobuf::uint8* MailRpcNewMailNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MailRpcNewMailNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MailHeadObj MailHeadList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mailheadlist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->mailheadlist(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailRpcNewMailNotify)
  return target;
}

size_t MailRpcNewMailNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailRpcNewMailNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MailHeadObj MailHeadList = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->mailheadlist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mailheadlist(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRpcNewMailNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailRpcNewMailNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const MailRpcNewMailNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MailRpcNewMailNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailRpcNewMailNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailRpcNewMailNotify)
    MergeFrom(*source);
  }
}

void MailRpcNewMailNotify::MergeFrom(const MailRpcNewMailNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailRpcNewMailNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mailheadlist_.MergeFrom(from.mailheadlist_);
}

void MailRpcNewMailNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailRpcNewMailNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRpcNewMailNotify::CopyFrom(const MailRpcNewMailNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailRpcNewMailNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRpcNewMailNotify::IsInitialized() const {
  return true;
}

void MailRpcNewMailNotify::Swap(MailRpcNewMailNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MailRpcNewMailNotify::InternalSwap(MailRpcNewMailNotify* other) {
  using std::swap;
  mailheadlist_.InternalSwap(&other->mailheadlist_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MailRpcNewMailNotify::GetMetadata() const {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MailRpcNewMailNotify

// repeated .MailHeadObj MailHeadList = 1;
int MailRpcNewMailNotify::mailheadlist_size() const {
  return mailheadlist_.size();
}
void MailRpcNewMailNotify::clear_mailheadlist() {
  mailheadlist_.Clear();
}
const ::MailHeadObj& MailRpcNewMailNotify::mailheadlist(int index) const {
  // @@protoc_insertion_point(field_get:MailRpcNewMailNotify.MailHeadList)
  return mailheadlist_.Get(index);
}
::MailHeadObj* MailRpcNewMailNotify::mutable_mailheadlist(int index) {
  // @@protoc_insertion_point(field_mutable:MailRpcNewMailNotify.MailHeadList)
  return mailheadlist_.Mutable(index);
}
::MailHeadObj* MailRpcNewMailNotify::add_mailheadlist() {
  // @@protoc_insertion_point(field_add:MailRpcNewMailNotify.MailHeadList)
  return mailheadlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::MailHeadObj >*
MailRpcNewMailNotify::mutable_mailheadlist() {
  // @@protoc_insertion_point(field_mutable_list:MailRpcNewMailNotify.MailHeadList)
  return &mailheadlist_;
}
const ::google::protobuf::RepeatedPtrField< ::MailHeadObj >&
MailRpcNewMailNotify::mailheadlist() const {
  // @@protoc_insertion_point(field_list:MailRpcNewMailNotify.MailHeadList)
  return mailheadlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MailRpcOneKeyGetRewardAsk::MailRpcOneKeyGetRewardAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MailRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MailRpcOneKeyGetRewardAsk)
}
MailRpcOneKeyGetRewardAsk::MailRpcOneKeyGetRewardAsk(const MailRpcOneKeyGetRewardAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MailRpcOneKeyGetRewardAsk)
}

void MailRpcOneKeyGetRewardAsk::SharedCtor() {
  _cached_size_ = 0;
}

MailRpcOneKeyGetRewardAsk::~MailRpcOneKeyGetRewardAsk() {
  // @@protoc_insertion_point(destructor:MailRpcOneKeyGetRewardAsk)
  SharedDtor();
}

void MailRpcOneKeyGetRewardAsk::SharedDtor() {
}

void MailRpcOneKeyGetRewardAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRpcOneKeyGetRewardAsk::descriptor() {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MailRpcOneKeyGetRewardAsk& MailRpcOneKeyGetRewardAsk::default_instance() {
  protobuf_MailRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

MailRpcOneKeyGetRewardAsk* MailRpcOneKeyGetRewardAsk::New(::google::protobuf::Arena* arena) const {
  MailRpcOneKeyGetRewardAsk* n = new MailRpcOneKeyGetRewardAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MailRpcOneKeyGetRewardAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:MailRpcOneKeyGetRewardAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MailRpcOneKeyGetRewardAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MailRpcOneKeyGetRewardAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MailRpcOneKeyGetRewardAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MailRpcOneKeyGetRewardAsk)
  return false;
#undef DO_
}

void MailRpcOneKeyGetRewardAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MailRpcOneKeyGetRewardAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MailRpcOneKeyGetRewardAsk)
}

::google::protobuf::uint8* MailRpcOneKeyGetRewardAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MailRpcOneKeyGetRewardAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailRpcOneKeyGetRewardAsk)
  return target;
}

size_t MailRpcOneKeyGetRewardAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailRpcOneKeyGetRewardAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRpcOneKeyGetRewardAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailRpcOneKeyGetRewardAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const MailRpcOneKeyGetRewardAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MailRpcOneKeyGetRewardAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailRpcOneKeyGetRewardAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailRpcOneKeyGetRewardAsk)
    MergeFrom(*source);
  }
}

void MailRpcOneKeyGetRewardAsk::MergeFrom(const MailRpcOneKeyGetRewardAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailRpcOneKeyGetRewardAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MailRpcOneKeyGetRewardAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailRpcOneKeyGetRewardAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRpcOneKeyGetRewardAsk::CopyFrom(const MailRpcOneKeyGetRewardAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailRpcOneKeyGetRewardAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRpcOneKeyGetRewardAsk::IsInitialized() const {
  return true;
}

void MailRpcOneKeyGetRewardAsk::Swap(MailRpcOneKeyGetRewardAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MailRpcOneKeyGetRewardAsk::InternalSwap(MailRpcOneKeyGetRewardAsk* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MailRpcOneKeyGetRewardAsk::GetMetadata() const {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MailRpcOneKeyGetRewardAsk

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MailRpcOneKeyGetRewardReply::kResultFieldNumber;
const int MailRpcOneKeyGetRewardReply::kUidListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MailRpcOneKeyGetRewardReply::MailRpcOneKeyGetRewardReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_MailRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MailRpcOneKeyGetRewardReply)
}
MailRpcOneKeyGetRewardReply::MailRpcOneKeyGetRewardReply(const MailRpcOneKeyGetRewardReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      uidlist_(from.uidlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:MailRpcOneKeyGetRewardReply)
}

void MailRpcOneKeyGetRewardReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

MailRpcOneKeyGetRewardReply::~MailRpcOneKeyGetRewardReply() {
  // @@protoc_insertion_point(destructor:MailRpcOneKeyGetRewardReply)
  SharedDtor();
}

void MailRpcOneKeyGetRewardReply::SharedDtor() {
}

void MailRpcOneKeyGetRewardReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRpcOneKeyGetRewardReply::descriptor() {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MailRpcOneKeyGetRewardReply& MailRpcOneKeyGetRewardReply::default_instance() {
  protobuf_MailRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

MailRpcOneKeyGetRewardReply* MailRpcOneKeyGetRewardReply::New(::google::protobuf::Arena* arena) const {
  MailRpcOneKeyGetRewardReply* n = new MailRpcOneKeyGetRewardReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MailRpcOneKeyGetRewardReply::Clear() {
// @@protoc_insertion_point(message_clear_start:MailRpcOneKeyGetRewardReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uidlist_.Clear();
  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MailRpcOneKeyGetRewardReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MailRpcOneKeyGetRewardReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint64 UidList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 16u, input, this->mutable_uidlist())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_uidlist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MailRpcOneKeyGetRewardReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MailRpcOneKeyGetRewardReply)
  return false;
#undef DO_
}

void MailRpcOneKeyGetRewardReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MailRpcOneKeyGetRewardReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // repeated sint64 UidList = 2;
  for (int i = 0, n = this->uidlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      2, this->uidlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MailRpcOneKeyGetRewardReply)
}

::google::protobuf::uint8* MailRpcOneKeyGetRewardReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MailRpcOneKeyGetRewardReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // repeated sint64 UidList = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt64ToArray(2, this->uidlist_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailRpcOneKeyGetRewardReply)
  return target;
}

size_t MailRpcOneKeyGetRewardReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MailRpcOneKeyGetRewardReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated sint64 UidList = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt64Size(this->uidlist_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->uidlist_size());
    total_size += data_size;
  }

  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRpcOneKeyGetRewardReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MailRpcOneKeyGetRewardReply)
  GOOGLE_DCHECK_NE(&from, this);
  const MailRpcOneKeyGetRewardReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MailRpcOneKeyGetRewardReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MailRpcOneKeyGetRewardReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MailRpcOneKeyGetRewardReply)
    MergeFrom(*source);
  }
}

void MailRpcOneKeyGetRewardReply::MergeFrom(const MailRpcOneKeyGetRewardReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MailRpcOneKeyGetRewardReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uidlist_.MergeFrom(from.uidlist_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void MailRpcOneKeyGetRewardReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MailRpcOneKeyGetRewardReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRpcOneKeyGetRewardReply::CopyFrom(const MailRpcOneKeyGetRewardReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MailRpcOneKeyGetRewardReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRpcOneKeyGetRewardReply::IsInitialized() const {
  return true;
}

void MailRpcOneKeyGetRewardReply::Swap(MailRpcOneKeyGetRewardReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MailRpcOneKeyGetRewardReply::InternalSwap(MailRpcOneKeyGetRewardReply* other) {
  using std::swap;
  uidlist_.InternalSwap(&other->uidlist_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MailRpcOneKeyGetRewardReply::GetMetadata() const {
  protobuf_MailRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MailRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MailRpcOneKeyGetRewardReply

// optional sint32 Result = 1 [default = -9999];
bool MailRpcOneKeyGetRewardReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MailRpcOneKeyGetRewardReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void MailRpcOneKeyGetRewardReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void MailRpcOneKeyGetRewardReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 MailRpcOneKeyGetRewardReply::result() const {
  // @@protoc_insertion_point(field_get:MailRpcOneKeyGetRewardReply.Result)
  return result_;
}
void MailRpcOneKeyGetRewardReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:MailRpcOneKeyGetRewardReply.Result)
}

// repeated sint64 UidList = 2;
int MailRpcOneKeyGetRewardReply::uidlist_size() const {
  return uidlist_.size();
}
void MailRpcOneKeyGetRewardReply::clear_uidlist() {
  uidlist_.Clear();
}
::google::protobuf::int64 MailRpcOneKeyGetRewardReply::uidlist(int index) const {
  // @@protoc_insertion_point(field_get:MailRpcOneKeyGetRewardReply.UidList)
  return uidlist_.Get(index);
}
void MailRpcOneKeyGetRewardReply::set_uidlist(int index, ::google::protobuf::int64 value) {
  uidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:MailRpcOneKeyGetRewardReply.UidList)
}
void MailRpcOneKeyGetRewardReply::add_uidlist(::google::protobuf::int64 value) {
  uidlist_.Add(value);
  // @@protoc_insertion_point(field_add:MailRpcOneKeyGetRewardReply.UidList)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MailRpcOneKeyGetRewardReply::uidlist() const {
  // @@protoc_insertion_point(field_list:MailRpcOneKeyGetRewardReply.UidList)
  return uidlist_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MailRpcOneKeyGetRewardReply::mutable_uidlist() {
  // @@protoc_insertion_point(field_mutable_list:MailRpcOneKeyGetRewardReply.UidList)
  return &uidlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
