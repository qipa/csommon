// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FriendRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FriendRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class FriendRpcSyncFriendDataAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcSyncFriendDataAsk>
     _instance;
} _FriendRpcSyncFriendDataAsk_default_instance_;
class FriendRpcSyncFriendDataReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcSyncFriendDataReply>
     _instance;
} _FriendRpcSyncFriendDataReply_default_instance_;
class FriendRpcAddFriendAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcAddFriendAsk>
     _instance;
} _FriendRpcAddFriendAsk_default_instance_;
class FriendRpcAddFriendReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcAddFriendReply>
     _instance;
} _FriendRpcAddFriendReply_default_instance_;
class FriendRpcDelFriendAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcDelFriendAsk>
     _instance;
} _FriendRpcDelFriendAsk_default_instance_;
class FriendRpcDelFriendReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcDelFriendReply>
     _instance;
} _FriendRpcDelFriendReply_default_instance_;
class FriendRpcAddBlackListAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcAddBlackListAsk>
     _instance;
} _FriendRpcAddBlackListAsk_default_instance_;
class FriendRpcAddBlackListReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcAddBlackListReply>
     _instance;
} _FriendRpcAddBlackListReply_default_instance_;
class FriendRpcDelBlackListAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcDelBlackListAsk>
     _instance;
} _FriendRpcDelBlackListAsk_default_instance_;
class FriendRpcDelBlackListReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcDelBlackListReply>
     _instance;
} _FriendRpcDelBlackListReply_default_instance_;
class FriendRpcAddContactAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcAddContactAsk>
     _instance;
} _FriendRpcAddContactAsk_default_instance_;
class FriendRpcAddContactReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcAddContactReply>
     _instance;
} _FriendRpcAddContactReply_default_instance_;
class FriendRpcDelContactAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcDelContactAsk>
     _instance;
} _FriendRpcDelContactAsk_default_instance_;
class FriendRpcDelContactReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcDelContactReply>
     _instance;
} _FriendRpcDelContactReply_default_instance_;
class FriendRpcSearchPlayerAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcSearchPlayerAsk>
     _instance;
} _FriendRpcSearchPlayerAsk_default_instance_;
class FriendRpcSearchPlayerReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcSearchPlayerReply>
     _instance;
} _FriendRpcSearchPlayerReply_default_instance_;
class FriendRpcRecommendObjDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcRecommendObj>
     _instance;
} _FriendRpcRecommendObj_default_instance_;
class FriendRpcRecommendAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcRecommendAsk>
     _instance;
} _FriendRpcRecommendAsk_default_instance_;
class FriendRpcRecommendReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcRecommendReply>
     _instance;
} _FriendRpcRecommendReply_default_instance_;
class FriendRpcViewUserSimpleInfoAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcViewUserSimpleInfoAsk>
     _instance;
} _FriendRpcViewUserSimpleInfoAsk_default_instance_;
class FriendRpcViewUserSimpleInfoReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcViewUserSimpleInfoReply>
     _instance;
} _FriendRpcViewUserSimpleInfoReply_default_instance_;
class FriendRpcOnlineOfflineNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FriendRpcOnlineOfflineNotify>
     _instance;
} _FriendRpcOnlineOfflineNotify_default_instance_;

namespace protobuf_FriendRpc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[22];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcSyncFriendDataAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcSyncFriendDataAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcSyncFriendDataReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcSyncFriendDataReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcSyncFriendDataReply, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcAddFriendAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcAddFriendAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcAddFriendAsk, userid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcAddFriendReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcAddFriendReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcAddFriendReply, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcDelFriendAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcDelFriendAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcDelFriendAsk, userid_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcDelFriendReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcDelFriendReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcDelFriendReply, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcAddBlackListAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcAddBlackListAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcAddBlackListAsk, userid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcAddBlackListReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcAddBlackListReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcAddBlackListReply, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcDelBlackListAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcDelBlackListAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcDelBlackListAsk, userid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcDelBlackListReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcDelBlackListReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcDelBlackListReply, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcAddContactAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcAddContactAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcAddContactAsk, userid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcAddContactReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcAddContactReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcAddContactReply, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcDelContactAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcDelContactAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcDelContactAsk, userid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcDelContactReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcDelContactReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcDelContactReply, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcSearchPlayerAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcSearchPlayerAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcSearchPlayerAsk, searchstring_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcSearchPlayerReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcSearchPlayerReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcSearchPlayerReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcSearchPlayerReply, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcSearchPlayerReply, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcSearchPlayerReply, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcSearchPlayerReply, prof_),
  3,
  2,
  0,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcRecommendObj, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcRecommendObj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcRecommendObj, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcRecommendObj, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcRecommendObj, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcRecommendObj, prof_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcRecommendAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcRecommendAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcRecommendReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcRecommendReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcRecommendReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcRecommendReply, recommendlist_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcViewUserSimpleInfoAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcViewUserSimpleInfoAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcViewUserSimpleInfoAsk, userid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcViewUserSimpleInfoReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcViewUserSimpleInfoReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcViewUserSimpleInfoReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcViewUserSimpleInfoReply, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcViewUserSimpleInfoReply, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcViewUserSimpleInfoReply, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcViewUserSimpleInfoReply, prof_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcViewUserSimpleInfoReply, teamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcViewUserSimpleInfoReply, teammembernum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcViewUserSimpleInfoReply, guildid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcViewUserSimpleInfoReply, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcViewUserSimpleInfoReply, online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcViewUserSimpleInfoReply, goodfeeling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcViewUserSimpleInfoReply, guildname_),
  6,
  5,
  0,
  7,
  8,
  9,
  10,
  11,
  1,
  3,
  4,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcOnlineOfflineNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcOnlineOfflineNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcOnlineOfflineNotify, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcOnlineOfflineNotify, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRpcOnlineOfflineNotify, online_),
  2,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(FriendRpcSyncFriendDataAsk)},
  { 5, 11, sizeof(FriendRpcSyncFriendDataReply)},
  { 12, 18, sizeof(FriendRpcAddFriendAsk)},
  { 19, 25, sizeof(FriendRpcAddFriendReply)},
  { 26, 32, sizeof(FriendRpcDelFriendAsk)},
  { 33, 39, sizeof(FriendRpcDelFriendReply)},
  { 40, 46, sizeof(FriendRpcAddBlackListAsk)},
  { 47, 53, sizeof(FriendRpcAddBlackListReply)},
  { 54, 60, sizeof(FriendRpcDelBlackListAsk)},
  { 61, 67, sizeof(FriendRpcDelBlackListReply)},
  { 68, 74, sizeof(FriendRpcAddContactAsk)},
  { 75, 81, sizeof(FriendRpcAddContactReply)},
  { 82, 88, sizeof(FriendRpcDelContactAsk)},
  { 89, 95, sizeof(FriendRpcDelContactReply)},
  { 96, 102, sizeof(FriendRpcSearchPlayerAsk)},
  { 103, 113, sizeof(FriendRpcSearchPlayerReply)},
  { 118, 127, sizeof(FriendRpcRecommendObj)},
  { 131, 136, sizeof(FriendRpcRecommendAsk)},
  { 136, 143, sizeof(FriendRpcRecommendReply)},
  { 145, 151, sizeof(FriendRpcViewUserSimpleInfoAsk)},
  { 152, 169, sizeof(FriendRpcViewUserSimpleInfoReply)},
  { 181, 189, sizeof(FriendRpcOnlineOfflineNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcSyncFriendDataAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcSyncFriendDataReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcAddFriendAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcAddFriendReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcDelFriendAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcDelFriendReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcAddBlackListAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcAddBlackListReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcDelBlackListAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcDelBlackListReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcAddContactAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcAddContactReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcDelContactAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcDelContactReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcSearchPlayerAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcSearchPlayerReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcRecommendObj_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcRecommendAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcRecommendReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcViewUserSimpleInfoAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcViewUserSimpleInfoReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendRpcOnlineOfflineNotify_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "FriendRpc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 22);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_PublicStruct_2eproto::InitDefaults();
  _FriendRpcSyncFriendDataAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcSyncFriendDataAsk_default_instance_);_FriendRpcSyncFriendDataReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcSyncFriendDataReply_default_instance_);_FriendRpcAddFriendAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcAddFriendAsk_default_instance_);_FriendRpcAddFriendReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcAddFriendReply_default_instance_);_FriendRpcDelFriendAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcDelFriendAsk_default_instance_);_FriendRpcDelFriendReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcDelFriendReply_default_instance_);_FriendRpcAddBlackListAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcAddBlackListAsk_default_instance_);_FriendRpcAddBlackListReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcAddBlackListReply_default_instance_);_FriendRpcDelBlackListAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcDelBlackListAsk_default_instance_);_FriendRpcDelBlackListReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcDelBlackListReply_default_instance_);_FriendRpcAddContactAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcAddContactAsk_default_instance_);_FriendRpcAddContactReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcAddContactReply_default_instance_);_FriendRpcDelContactAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcDelContactAsk_default_instance_);_FriendRpcDelContactReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcDelContactReply_default_instance_);_FriendRpcSearchPlayerAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcSearchPlayerAsk_default_instance_);_FriendRpcSearchPlayerReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcSearchPlayerReply_default_instance_);_FriendRpcRecommendObj_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcRecommendObj_default_instance_);_FriendRpcRecommendAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcRecommendAsk_default_instance_);_FriendRpcRecommendReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcRecommendReply_default_instance_);_FriendRpcViewUserSimpleInfoAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcViewUserSimpleInfoAsk_default_instance_);_FriendRpcViewUserSimpleInfoReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcViewUserSimpleInfoReply_default_instance_);_FriendRpcOnlineOfflineNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FriendRpcOnlineOfflineNotify_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017FriendRpc.proto\032\022PublicStruct.proto\"\034\n"
      "\032FriendRpcSyncFriendDataAsk\"5\n\034FriendRpc"
      "SyncFriendDataReply\022\025\n\006Result\030\001 \001(\021:\005-99"
      "99\"+\n\025FriendRpcAddFriendAsk\022\022\n\006UserId\030\001 "
      "\001(\022:\002-1\"0\n\027FriendRpcAddFriendReply\022\025\n\006Re"
      "sult\030\001 \001(\021:\005-9999\"\'\n\025FriendRpcDelFriendA"
      "sk\022\016\n\006UserId\030\001 \003(\022\"0\n\027FriendRpcDelFriend"
      "Reply\022\025\n\006Result\030\001 \001(\021:\005-9999\".\n\030FriendRp"
      "cAddBlackListAsk\022\022\n\006UserId\030\001 \001(\022:\002-1\"3\n\032"
      "FriendRpcAddBlackListReply\022\025\n\006Result\030\001 \001"
      "(\021:\005-9999\".\n\030FriendRpcDelBlackListAsk\022\022\n"
      "\006UserId\030\001 \001(\022:\002-1\"3\n\032FriendRpcDelBlackLi"
      "stReply\022\025\n\006Result\030\001 \001(\021:\005-9999\",\n\026Friend"
      "RpcAddContactAsk\022\022\n\006UserId\030\001 \001(\022:\002-1\"1\n\030"
      "FriendRpcAddContactReply\022\025\n\006Result\030\001 \001(\021"
      ":\005-9999\",\n\026FriendRpcDelContactAsk\022\022\n\006Use"
      "rId\030\001 \001(\022:\002-1\"1\n\030FriendRpcDelContactRepl"
      "y\022\025\n\006Result\030\001 \001(\021:\005-9999\"0\n\030FriendRpcSea"
      "rchPlayerAsk\022\024\n\014SearchString\030\001 \001(\t\"~\n\032Fr"
      "iendRpcSearchPlayerReply\022\025\n\006Result\030\001 \001(\021"
      ":\005-9999\022\022\n\006UserId\030\002 \001(\022:\002-1\022\020\n\010UserName\030"
      "\003 \001(\t\022\021\n\005Level\030\004 \001(\021:\002-1\022\020\n\004Prof\030\005 \001(\021:\002"
      "-1\"b\n\025FriendRpcRecommendObj\022\022\n\006UserId\030\001 "
      "\001(\022:\002-1\022\020\n\010UserName\030\002 \001(\t\022\021\n\005Level\030\003 \001(\021"
      ":\002-1\022\020\n\004Prof\030\004 \001(\021:\002-1\"\027\n\025FriendRpcRecom"
      "mendAsk\"_\n\027FriendRpcRecommendReply\022\025\n\006Re"
      "sult\030\001 \001(\021:\005-9999\022-\n\rRecommendList\030\002 \003(\013"
      "2\026.FriendRpcRecommendObj\"4\n\036FriendRpcVie"
      "wUserSimpleInfoAsk\022\022\n\006UserId\030\001 \001(\022:\002-1\"\235"
      "\002\n FriendRpcViewUserSimpleInfoReply\022\025\n\006R"
      "esult\030\001 \001(\021:\005-9999\022\022\n\006UserId\030\002 \001(\022:\002-1\022\020"
      "\n\010UserName\030\003 \001(\t\022\021\n\005Level\030\004 \001(\021:\002-1\022\020\n\004P"
      "rof\030\005 \001(\021:\002-1\022\022\n\006TeamId\030\006 \001(\021:\002-1\022\031\n\rTea"
      "mMemberNum\030\007 \001(\021:\002-1\022\023\n\007GuildId\030\010 \001(\021:\002-"
      "1\022\021\n\tSignature\030\t \001(\t\022\025\n\006Online\030\n \001(\010:\005fa"
      "lse\022\026\n\013GoodFeeling\030\013 \001(\021:\0010\022\021\n\tGuildName"
      "\030\014 \001(\t\"[\n\034FriendRpcOnlineOfflineNotify\022\022"
      "\n\006UserId\030\001 \001(\022:\002-1\022\020\n\010UserName\030\002 \001(\t\022\025\n\006"
      "Online\030\003 \001(\010:\005false"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1539);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FriendRpc.proto", &protobuf_RegisterTypes);
  ::protobuf_PublicStruct_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_FriendRpc_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcSyncFriendDataAsk::FriendRpcSyncFriendDataAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcSyncFriendDataAsk)
}
FriendRpcSyncFriendDataAsk::FriendRpcSyncFriendDataAsk(const FriendRpcSyncFriendDataAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FriendRpcSyncFriendDataAsk)
}

void FriendRpcSyncFriendDataAsk::SharedCtor() {
  _cached_size_ = 0;
}

FriendRpcSyncFriendDataAsk::~FriendRpcSyncFriendDataAsk() {
  // @@protoc_insertion_point(destructor:FriendRpcSyncFriendDataAsk)
  SharedDtor();
}

void FriendRpcSyncFriendDataAsk::SharedDtor() {
}

void FriendRpcSyncFriendDataAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcSyncFriendDataAsk::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcSyncFriendDataAsk& FriendRpcSyncFriendDataAsk::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcSyncFriendDataAsk* FriendRpcSyncFriendDataAsk::New(::google::protobuf::Arena* arena) const {
  FriendRpcSyncFriendDataAsk* n = new FriendRpcSyncFriendDataAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcSyncFriendDataAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcSyncFriendDataAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcSyncFriendDataAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcSyncFriendDataAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcSyncFriendDataAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcSyncFriendDataAsk)
  return false;
#undef DO_
}

void FriendRpcSyncFriendDataAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcSyncFriendDataAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcSyncFriendDataAsk)
}

::google::protobuf::uint8* FriendRpcSyncFriendDataAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcSyncFriendDataAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcSyncFriendDataAsk)
  return target;
}

size_t FriendRpcSyncFriendDataAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcSyncFriendDataAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcSyncFriendDataAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcSyncFriendDataAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcSyncFriendDataAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcSyncFriendDataAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcSyncFriendDataAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcSyncFriendDataAsk)
    MergeFrom(*source);
  }
}

void FriendRpcSyncFriendDataAsk::MergeFrom(const FriendRpcSyncFriendDataAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcSyncFriendDataAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FriendRpcSyncFriendDataAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcSyncFriendDataAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcSyncFriendDataAsk::CopyFrom(const FriendRpcSyncFriendDataAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcSyncFriendDataAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcSyncFriendDataAsk::IsInitialized() const {
  return true;
}

void FriendRpcSyncFriendDataAsk::Swap(FriendRpcSyncFriendDataAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcSyncFriendDataAsk::InternalSwap(FriendRpcSyncFriendDataAsk* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcSyncFriendDataAsk::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcSyncFriendDataAsk

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRpcSyncFriendDataReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcSyncFriendDataReply::FriendRpcSyncFriendDataReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcSyncFriendDataReply)
}
FriendRpcSyncFriendDataReply::FriendRpcSyncFriendDataReply(const FriendRpcSyncFriendDataReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:FriendRpcSyncFriendDataReply)
}

void FriendRpcSyncFriendDataReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

FriendRpcSyncFriendDataReply::~FriendRpcSyncFriendDataReply() {
  // @@protoc_insertion_point(destructor:FriendRpcSyncFriendDataReply)
  SharedDtor();
}

void FriendRpcSyncFriendDataReply::SharedDtor() {
}

void FriendRpcSyncFriendDataReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcSyncFriendDataReply::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcSyncFriendDataReply& FriendRpcSyncFriendDataReply::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcSyncFriendDataReply* FriendRpcSyncFriendDataReply::New(::google::protobuf::Arena* arena) const {
  FriendRpcSyncFriendDataReply* n = new FriendRpcSyncFriendDataReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcSyncFriendDataReply::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcSyncFriendDataReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcSyncFriendDataReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcSyncFriendDataReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcSyncFriendDataReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcSyncFriendDataReply)
  return false;
#undef DO_
}

void FriendRpcSyncFriendDataReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcSyncFriendDataReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcSyncFriendDataReply)
}

::google::protobuf::uint8* FriendRpcSyncFriendDataReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcSyncFriendDataReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcSyncFriendDataReply)
  return target;
}

size_t FriendRpcSyncFriendDataReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcSyncFriendDataReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcSyncFriendDataReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcSyncFriendDataReply)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcSyncFriendDataReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcSyncFriendDataReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcSyncFriendDataReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcSyncFriendDataReply)
    MergeFrom(*source);
  }
}

void FriendRpcSyncFriendDataReply::MergeFrom(const FriendRpcSyncFriendDataReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcSyncFriendDataReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void FriendRpcSyncFriendDataReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcSyncFriendDataReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcSyncFriendDataReply::CopyFrom(const FriendRpcSyncFriendDataReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcSyncFriendDataReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcSyncFriendDataReply::IsInitialized() const {
  return true;
}

void FriendRpcSyncFriendDataReply::Swap(FriendRpcSyncFriendDataReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcSyncFriendDataReply::InternalSwap(FriendRpcSyncFriendDataReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcSyncFriendDataReply::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcSyncFriendDataReply

// optional sint32 Result = 1 [default = -9999];
bool FriendRpcSyncFriendDataReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FriendRpcSyncFriendDataReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void FriendRpcSyncFriendDataReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void FriendRpcSyncFriendDataReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 FriendRpcSyncFriendDataReply::result() const {
  // @@protoc_insertion_point(field_get:FriendRpcSyncFriendDataReply.Result)
  return result_;
}
void FriendRpcSyncFriendDataReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcSyncFriendDataReply.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRpcAddFriendAsk::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcAddFriendAsk::FriendRpcAddFriendAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcAddFriendAsk)
}
FriendRpcAddFriendAsk::FriendRpcAddFriendAsk(const FriendRpcAddFriendAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:FriendRpcAddFriendAsk)
}

void FriendRpcAddFriendAsk::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(-1);
}

FriendRpcAddFriendAsk::~FriendRpcAddFriendAsk() {
  // @@protoc_insertion_point(destructor:FriendRpcAddFriendAsk)
  SharedDtor();
}

void FriendRpcAddFriendAsk::SharedDtor() {
}

void FriendRpcAddFriendAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcAddFriendAsk::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcAddFriendAsk& FriendRpcAddFriendAsk::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcAddFriendAsk* FriendRpcAddFriendAsk::New(::google::protobuf::Arena* arena) const {
  FriendRpcAddFriendAsk* n = new FriendRpcAddFriendAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcAddFriendAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcAddFriendAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = GOOGLE_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcAddFriendAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcAddFriendAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcAddFriendAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcAddFriendAsk)
  return false;
#undef DO_
}

void FriendRpcAddFriendAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcAddFriendAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcAddFriendAsk)
}

::google::protobuf::uint8* FriendRpcAddFriendAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcAddFriendAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcAddFriendAsk)
  return target;
}

size_t FriendRpcAddFriendAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcAddFriendAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint64 UserId = 1 [default = -1];
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcAddFriendAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcAddFriendAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcAddFriendAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcAddFriendAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcAddFriendAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcAddFriendAsk)
    MergeFrom(*source);
  }
}

void FriendRpcAddFriendAsk::MergeFrom(const FriendRpcAddFriendAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcAddFriendAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_userid()) {
    set_userid(from.userid());
  }
}

void FriendRpcAddFriendAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcAddFriendAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcAddFriendAsk::CopyFrom(const FriendRpcAddFriendAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcAddFriendAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcAddFriendAsk::IsInitialized() const {
  return true;
}

void FriendRpcAddFriendAsk::Swap(FriendRpcAddFriendAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcAddFriendAsk::InternalSwap(FriendRpcAddFriendAsk* other) {
  using std::swap;
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcAddFriendAsk::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcAddFriendAsk

// optional sint64 UserId = 1 [default = -1];
bool FriendRpcAddFriendAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FriendRpcAddFriendAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void FriendRpcAddFriendAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FriendRpcAddFriendAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 FriendRpcAddFriendAsk::userid() const {
  // @@protoc_insertion_point(field_get:FriendRpcAddFriendAsk.UserId)
  return userid_;
}
void FriendRpcAddFriendAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcAddFriendAsk.UserId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRpcAddFriendReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcAddFriendReply::FriendRpcAddFriendReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcAddFriendReply)
}
FriendRpcAddFriendReply::FriendRpcAddFriendReply(const FriendRpcAddFriendReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:FriendRpcAddFriendReply)
}

void FriendRpcAddFriendReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

FriendRpcAddFriendReply::~FriendRpcAddFriendReply() {
  // @@protoc_insertion_point(destructor:FriendRpcAddFriendReply)
  SharedDtor();
}

void FriendRpcAddFriendReply::SharedDtor() {
}

void FriendRpcAddFriendReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcAddFriendReply::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcAddFriendReply& FriendRpcAddFriendReply::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcAddFriendReply* FriendRpcAddFriendReply::New(::google::protobuf::Arena* arena) const {
  FriendRpcAddFriendReply* n = new FriendRpcAddFriendReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcAddFriendReply::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcAddFriendReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcAddFriendReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcAddFriendReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcAddFriendReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcAddFriendReply)
  return false;
#undef DO_
}

void FriendRpcAddFriendReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcAddFriendReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcAddFriendReply)
}

::google::protobuf::uint8* FriendRpcAddFriendReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcAddFriendReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcAddFriendReply)
  return target;
}

size_t FriendRpcAddFriendReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcAddFriendReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcAddFriendReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcAddFriendReply)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcAddFriendReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcAddFriendReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcAddFriendReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcAddFriendReply)
    MergeFrom(*source);
  }
}

void FriendRpcAddFriendReply::MergeFrom(const FriendRpcAddFriendReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcAddFriendReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void FriendRpcAddFriendReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcAddFriendReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcAddFriendReply::CopyFrom(const FriendRpcAddFriendReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcAddFriendReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcAddFriendReply::IsInitialized() const {
  return true;
}

void FriendRpcAddFriendReply::Swap(FriendRpcAddFriendReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcAddFriendReply::InternalSwap(FriendRpcAddFriendReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcAddFriendReply::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcAddFriendReply

// optional sint32 Result = 1 [default = -9999];
bool FriendRpcAddFriendReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FriendRpcAddFriendReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void FriendRpcAddFriendReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void FriendRpcAddFriendReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 FriendRpcAddFriendReply::result() const {
  // @@protoc_insertion_point(field_get:FriendRpcAddFriendReply.Result)
  return result_;
}
void FriendRpcAddFriendReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcAddFriendReply.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRpcDelFriendAsk::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcDelFriendAsk::FriendRpcDelFriendAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcDelFriendAsk)
}
FriendRpcDelFriendAsk::FriendRpcDelFriendAsk(const FriendRpcDelFriendAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      userid_(from.userid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FriendRpcDelFriendAsk)
}

void FriendRpcDelFriendAsk::SharedCtor() {
  _cached_size_ = 0;
}

FriendRpcDelFriendAsk::~FriendRpcDelFriendAsk() {
  // @@protoc_insertion_point(destructor:FriendRpcDelFriendAsk)
  SharedDtor();
}

void FriendRpcDelFriendAsk::SharedDtor() {
}

void FriendRpcDelFriendAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcDelFriendAsk::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcDelFriendAsk& FriendRpcDelFriendAsk::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcDelFriendAsk* FriendRpcDelFriendAsk::New(::google::protobuf::Arena* arena) const {
  FriendRpcDelFriendAsk* n = new FriendRpcDelFriendAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcDelFriendAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcDelFriendAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcDelFriendAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcDelFriendAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint64 UserId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 8u, input, this->mutable_userid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_userid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcDelFriendAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcDelFriendAsk)
  return false;
#undef DO_
}

void FriendRpcDelFriendAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcDelFriendAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint64 UserId = 1;
  for (int i = 0, n = this->userid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      1, this->userid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcDelFriendAsk)
}

::google::protobuf::uint8* FriendRpcDelFriendAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcDelFriendAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint64 UserId = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt64ToArray(1, this->userid_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcDelFriendAsk)
  return target;
}

size_t FriendRpcDelFriendAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcDelFriendAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated sint64 UserId = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt64Size(this->userid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->userid_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcDelFriendAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcDelFriendAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcDelFriendAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcDelFriendAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcDelFriendAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcDelFriendAsk)
    MergeFrom(*source);
  }
}

void FriendRpcDelFriendAsk::MergeFrom(const FriendRpcDelFriendAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcDelFriendAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  userid_.MergeFrom(from.userid_);
}

void FriendRpcDelFriendAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcDelFriendAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcDelFriendAsk::CopyFrom(const FriendRpcDelFriendAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcDelFriendAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcDelFriendAsk::IsInitialized() const {
  return true;
}

void FriendRpcDelFriendAsk::Swap(FriendRpcDelFriendAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcDelFriendAsk::InternalSwap(FriendRpcDelFriendAsk* other) {
  using std::swap;
  userid_.InternalSwap(&other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcDelFriendAsk::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcDelFriendAsk

// repeated sint64 UserId = 1;
int FriendRpcDelFriendAsk::userid_size() const {
  return userid_.size();
}
void FriendRpcDelFriendAsk::clear_userid() {
  userid_.Clear();
}
::google::protobuf::int64 FriendRpcDelFriendAsk::userid(int index) const {
  // @@protoc_insertion_point(field_get:FriendRpcDelFriendAsk.UserId)
  return userid_.Get(index);
}
void FriendRpcDelFriendAsk::set_userid(int index, ::google::protobuf::int64 value) {
  userid_.Set(index, value);
  // @@protoc_insertion_point(field_set:FriendRpcDelFriendAsk.UserId)
}
void FriendRpcDelFriendAsk::add_userid(::google::protobuf::int64 value) {
  userid_.Add(value);
  // @@protoc_insertion_point(field_add:FriendRpcDelFriendAsk.UserId)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
FriendRpcDelFriendAsk::userid() const {
  // @@protoc_insertion_point(field_list:FriendRpcDelFriendAsk.UserId)
  return userid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
FriendRpcDelFriendAsk::mutable_userid() {
  // @@protoc_insertion_point(field_mutable_list:FriendRpcDelFriendAsk.UserId)
  return &userid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRpcDelFriendReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcDelFriendReply::FriendRpcDelFriendReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcDelFriendReply)
}
FriendRpcDelFriendReply::FriendRpcDelFriendReply(const FriendRpcDelFriendReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:FriendRpcDelFriendReply)
}

void FriendRpcDelFriendReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

FriendRpcDelFriendReply::~FriendRpcDelFriendReply() {
  // @@protoc_insertion_point(destructor:FriendRpcDelFriendReply)
  SharedDtor();
}

void FriendRpcDelFriendReply::SharedDtor() {
}

void FriendRpcDelFriendReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcDelFriendReply::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcDelFriendReply& FriendRpcDelFriendReply::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcDelFriendReply* FriendRpcDelFriendReply::New(::google::protobuf::Arena* arena) const {
  FriendRpcDelFriendReply* n = new FriendRpcDelFriendReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcDelFriendReply::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcDelFriendReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcDelFriendReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcDelFriendReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcDelFriendReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcDelFriendReply)
  return false;
#undef DO_
}

void FriendRpcDelFriendReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcDelFriendReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcDelFriendReply)
}

::google::protobuf::uint8* FriendRpcDelFriendReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcDelFriendReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcDelFriendReply)
  return target;
}

size_t FriendRpcDelFriendReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcDelFriendReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcDelFriendReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcDelFriendReply)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcDelFriendReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcDelFriendReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcDelFriendReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcDelFriendReply)
    MergeFrom(*source);
  }
}

void FriendRpcDelFriendReply::MergeFrom(const FriendRpcDelFriendReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcDelFriendReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void FriendRpcDelFriendReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcDelFriendReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcDelFriendReply::CopyFrom(const FriendRpcDelFriendReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcDelFriendReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcDelFriendReply::IsInitialized() const {
  return true;
}

void FriendRpcDelFriendReply::Swap(FriendRpcDelFriendReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcDelFriendReply::InternalSwap(FriendRpcDelFriendReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcDelFriendReply::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcDelFriendReply

// optional sint32 Result = 1 [default = -9999];
bool FriendRpcDelFriendReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FriendRpcDelFriendReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void FriendRpcDelFriendReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void FriendRpcDelFriendReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 FriendRpcDelFriendReply::result() const {
  // @@protoc_insertion_point(field_get:FriendRpcDelFriendReply.Result)
  return result_;
}
void FriendRpcDelFriendReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcDelFriendReply.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRpcAddBlackListAsk::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcAddBlackListAsk::FriendRpcAddBlackListAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcAddBlackListAsk)
}
FriendRpcAddBlackListAsk::FriendRpcAddBlackListAsk(const FriendRpcAddBlackListAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:FriendRpcAddBlackListAsk)
}

void FriendRpcAddBlackListAsk::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(-1);
}

FriendRpcAddBlackListAsk::~FriendRpcAddBlackListAsk() {
  // @@protoc_insertion_point(destructor:FriendRpcAddBlackListAsk)
  SharedDtor();
}

void FriendRpcAddBlackListAsk::SharedDtor() {
}

void FriendRpcAddBlackListAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcAddBlackListAsk::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcAddBlackListAsk& FriendRpcAddBlackListAsk::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcAddBlackListAsk* FriendRpcAddBlackListAsk::New(::google::protobuf::Arena* arena) const {
  FriendRpcAddBlackListAsk* n = new FriendRpcAddBlackListAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcAddBlackListAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcAddBlackListAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = GOOGLE_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcAddBlackListAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcAddBlackListAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcAddBlackListAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcAddBlackListAsk)
  return false;
#undef DO_
}

void FriendRpcAddBlackListAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcAddBlackListAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcAddBlackListAsk)
}

::google::protobuf::uint8* FriendRpcAddBlackListAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcAddBlackListAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcAddBlackListAsk)
  return target;
}

size_t FriendRpcAddBlackListAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcAddBlackListAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint64 UserId = 1 [default = -1];
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcAddBlackListAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcAddBlackListAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcAddBlackListAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcAddBlackListAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcAddBlackListAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcAddBlackListAsk)
    MergeFrom(*source);
  }
}

void FriendRpcAddBlackListAsk::MergeFrom(const FriendRpcAddBlackListAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcAddBlackListAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_userid()) {
    set_userid(from.userid());
  }
}

void FriendRpcAddBlackListAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcAddBlackListAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcAddBlackListAsk::CopyFrom(const FriendRpcAddBlackListAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcAddBlackListAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcAddBlackListAsk::IsInitialized() const {
  return true;
}

void FriendRpcAddBlackListAsk::Swap(FriendRpcAddBlackListAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcAddBlackListAsk::InternalSwap(FriendRpcAddBlackListAsk* other) {
  using std::swap;
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcAddBlackListAsk::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcAddBlackListAsk

// optional sint64 UserId = 1 [default = -1];
bool FriendRpcAddBlackListAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FriendRpcAddBlackListAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void FriendRpcAddBlackListAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FriendRpcAddBlackListAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 FriendRpcAddBlackListAsk::userid() const {
  // @@protoc_insertion_point(field_get:FriendRpcAddBlackListAsk.UserId)
  return userid_;
}
void FriendRpcAddBlackListAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcAddBlackListAsk.UserId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRpcAddBlackListReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcAddBlackListReply::FriendRpcAddBlackListReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcAddBlackListReply)
}
FriendRpcAddBlackListReply::FriendRpcAddBlackListReply(const FriendRpcAddBlackListReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:FriendRpcAddBlackListReply)
}

void FriendRpcAddBlackListReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

FriendRpcAddBlackListReply::~FriendRpcAddBlackListReply() {
  // @@protoc_insertion_point(destructor:FriendRpcAddBlackListReply)
  SharedDtor();
}

void FriendRpcAddBlackListReply::SharedDtor() {
}

void FriendRpcAddBlackListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcAddBlackListReply::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcAddBlackListReply& FriendRpcAddBlackListReply::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcAddBlackListReply* FriendRpcAddBlackListReply::New(::google::protobuf::Arena* arena) const {
  FriendRpcAddBlackListReply* n = new FriendRpcAddBlackListReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcAddBlackListReply::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcAddBlackListReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcAddBlackListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcAddBlackListReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcAddBlackListReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcAddBlackListReply)
  return false;
#undef DO_
}

void FriendRpcAddBlackListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcAddBlackListReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcAddBlackListReply)
}

::google::protobuf::uint8* FriendRpcAddBlackListReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcAddBlackListReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcAddBlackListReply)
  return target;
}

size_t FriendRpcAddBlackListReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcAddBlackListReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcAddBlackListReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcAddBlackListReply)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcAddBlackListReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcAddBlackListReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcAddBlackListReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcAddBlackListReply)
    MergeFrom(*source);
  }
}

void FriendRpcAddBlackListReply::MergeFrom(const FriendRpcAddBlackListReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcAddBlackListReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void FriendRpcAddBlackListReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcAddBlackListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcAddBlackListReply::CopyFrom(const FriendRpcAddBlackListReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcAddBlackListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcAddBlackListReply::IsInitialized() const {
  return true;
}

void FriendRpcAddBlackListReply::Swap(FriendRpcAddBlackListReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcAddBlackListReply::InternalSwap(FriendRpcAddBlackListReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcAddBlackListReply::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcAddBlackListReply

// optional sint32 Result = 1 [default = -9999];
bool FriendRpcAddBlackListReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FriendRpcAddBlackListReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void FriendRpcAddBlackListReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void FriendRpcAddBlackListReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 FriendRpcAddBlackListReply::result() const {
  // @@protoc_insertion_point(field_get:FriendRpcAddBlackListReply.Result)
  return result_;
}
void FriendRpcAddBlackListReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcAddBlackListReply.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRpcDelBlackListAsk::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcDelBlackListAsk::FriendRpcDelBlackListAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcDelBlackListAsk)
}
FriendRpcDelBlackListAsk::FriendRpcDelBlackListAsk(const FriendRpcDelBlackListAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:FriendRpcDelBlackListAsk)
}

void FriendRpcDelBlackListAsk::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(-1);
}

FriendRpcDelBlackListAsk::~FriendRpcDelBlackListAsk() {
  // @@protoc_insertion_point(destructor:FriendRpcDelBlackListAsk)
  SharedDtor();
}

void FriendRpcDelBlackListAsk::SharedDtor() {
}

void FriendRpcDelBlackListAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcDelBlackListAsk::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcDelBlackListAsk& FriendRpcDelBlackListAsk::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcDelBlackListAsk* FriendRpcDelBlackListAsk::New(::google::protobuf::Arena* arena) const {
  FriendRpcDelBlackListAsk* n = new FriendRpcDelBlackListAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcDelBlackListAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcDelBlackListAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = GOOGLE_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcDelBlackListAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcDelBlackListAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcDelBlackListAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcDelBlackListAsk)
  return false;
#undef DO_
}

void FriendRpcDelBlackListAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcDelBlackListAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcDelBlackListAsk)
}

::google::protobuf::uint8* FriendRpcDelBlackListAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcDelBlackListAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcDelBlackListAsk)
  return target;
}

size_t FriendRpcDelBlackListAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcDelBlackListAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint64 UserId = 1 [default = -1];
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcDelBlackListAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcDelBlackListAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcDelBlackListAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcDelBlackListAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcDelBlackListAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcDelBlackListAsk)
    MergeFrom(*source);
  }
}

void FriendRpcDelBlackListAsk::MergeFrom(const FriendRpcDelBlackListAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcDelBlackListAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_userid()) {
    set_userid(from.userid());
  }
}

void FriendRpcDelBlackListAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcDelBlackListAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcDelBlackListAsk::CopyFrom(const FriendRpcDelBlackListAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcDelBlackListAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcDelBlackListAsk::IsInitialized() const {
  return true;
}

void FriendRpcDelBlackListAsk::Swap(FriendRpcDelBlackListAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcDelBlackListAsk::InternalSwap(FriendRpcDelBlackListAsk* other) {
  using std::swap;
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcDelBlackListAsk::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcDelBlackListAsk

// optional sint64 UserId = 1 [default = -1];
bool FriendRpcDelBlackListAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FriendRpcDelBlackListAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void FriendRpcDelBlackListAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FriendRpcDelBlackListAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 FriendRpcDelBlackListAsk::userid() const {
  // @@protoc_insertion_point(field_get:FriendRpcDelBlackListAsk.UserId)
  return userid_;
}
void FriendRpcDelBlackListAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcDelBlackListAsk.UserId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRpcDelBlackListReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcDelBlackListReply::FriendRpcDelBlackListReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcDelBlackListReply)
}
FriendRpcDelBlackListReply::FriendRpcDelBlackListReply(const FriendRpcDelBlackListReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:FriendRpcDelBlackListReply)
}

void FriendRpcDelBlackListReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

FriendRpcDelBlackListReply::~FriendRpcDelBlackListReply() {
  // @@protoc_insertion_point(destructor:FriendRpcDelBlackListReply)
  SharedDtor();
}

void FriendRpcDelBlackListReply::SharedDtor() {
}

void FriendRpcDelBlackListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcDelBlackListReply::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcDelBlackListReply& FriendRpcDelBlackListReply::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcDelBlackListReply* FriendRpcDelBlackListReply::New(::google::protobuf::Arena* arena) const {
  FriendRpcDelBlackListReply* n = new FriendRpcDelBlackListReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcDelBlackListReply::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcDelBlackListReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcDelBlackListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcDelBlackListReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcDelBlackListReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcDelBlackListReply)
  return false;
#undef DO_
}

void FriendRpcDelBlackListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcDelBlackListReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcDelBlackListReply)
}

::google::protobuf::uint8* FriendRpcDelBlackListReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcDelBlackListReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcDelBlackListReply)
  return target;
}

size_t FriendRpcDelBlackListReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcDelBlackListReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcDelBlackListReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcDelBlackListReply)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcDelBlackListReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcDelBlackListReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcDelBlackListReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcDelBlackListReply)
    MergeFrom(*source);
  }
}

void FriendRpcDelBlackListReply::MergeFrom(const FriendRpcDelBlackListReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcDelBlackListReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void FriendRpcDelBlackListReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcDelBlackListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcDelBlackListReply::CopyFrom(const FriendRpcDelBlackListReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcDelBlackListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcDelBlackListReply::IsInitialized() const {
  return true;
}

void FriendRpcDelBlackListReply::Swap(FriendRpcDelBlackListReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcDelBlackListReply::InternalSwap(FriendRpcDelBlackListReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcDelBlackListReply::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcDelBlackListReply

// optional sint32 Result = 1 [default = -9999];
bool FriendRpcDelBlackListReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FriendRpcDelBlackListReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void FriendRpcDelBlackListReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void FriendRpcDelBlackListReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 FriendRpcDelBlackListReply::result() const {
  // @@protoc_insertion_point(field_get:FriendRpcDelBlackListReply.Result)
  return result_;
}
void FriendRpcDelBlackListReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcDelBlackListReply.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRpcAddContactAsk::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcAddContactAsk::FriendRpcAddContactAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcAddContactAsk)
}
FriendRpcAddContactAsk::FriendRpcAddContactAsk(const FriendRpcAddContactAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:FriendRpcAddContactAsk)
}

void FriendRpcAddContactAsk::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(-1);
}

FriendRpcAddContactAsk::~FriendRpcAddContactAsk() {
  // @@protoc_insertion_point(destructor:FriendRpcAddContactAsk)
  SharedDtor();
}

void FriendRpcAddContactAsk::SharedDtor() {
}

void FriendRpcAddContactAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcAddContactAsk::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcAddContactAsk& FriendRpcAddContactAsk::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcAddContactAsk* FriendRpcAddContactAsk::New(::google::protobuf::Arena* arena) const {
  FriendRpcAddContactAsk* n = new FriendRpcAddContactAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcAddContactAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcAddContactAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = GOOGLE_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcAddContactAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcAddContactAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcAddContactAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcAddContactAsk)
  return false;
#undef DO_
}

void FriendRpcAddContactAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcAddContactAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcAddContactAsk)
}

::google::protobuf::uint8* FriendRpcAddContactAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcAddContactAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcAddContactAsk)
  return target;
}

size_t FriendRpcAddContactAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcAddContactAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint64 UserId = 1 [default = -1];
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcAddContactAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcAddContactAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcAddContactAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcAddContactAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcAddContactAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcAddContactAsk)
    MergeFrom(*source);
  }
}

void FriendRpcAddContactAsk::MergeFrom(const FriendRpcAddContactAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcAddContactAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_userid()) {
    set_userid(from.userid());
  }
}

void FriendRpcAddContactAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcAddContactAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcAddContactAsk::CopyFrom(const FriendRpcAddContactAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcAddContactAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcAddContactAsk::IsInitialized() const {
  return true;
}

void FriendRpcAddContactAsk::Swap(FriendRpcAddContactAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcAddContactAsk::InternalSwap(FriendRpcAddContactAsk* other) {
  using std::swap;
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcAddContactAsk::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcAddContactAsk

// optional sint64 UserId = 1 [default = -1];
bool FriendRpcAddContactAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FriendRpcAddContactAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void FriendRpcAddContactAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FriendRpcAddContactAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 FriendRpcAddContactAsk::userid() const {
  // @@protoc_insertion_point(field_get:FriendRpcAddContactAsk.UserId)
  return userid_;
}
void FriendRpcAddContactAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcAddContactAsk.UserId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRpcAddContactReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcAddContactReply::FriendRpcAddContactReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcAddContactReply)
}
FriendRpcAddContactReply::FriendRpcAddContactReply(const FriendRpcAddContactReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:FriendRpcAddContactReply)
}

void FriendRpcAddContactReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

FriendRpcAddContactReply::~FriendRpcAddContactReply() {
  // @@protoc_insertion_point(destructor:FriendRpcAddContactReply)
  SharedDtor();
}

void FriendRpcAddContactReply::SharedDtor() {
}

void FriendRpcAddContactReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcAddContactReply::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcAddContactReply& FriendRpcAddContactReply::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcAddContactReply* FriendRpcAddContactReply::New(::google::protobuf::Arena* arena) const {
  FriendRpcAddContactReply* n = new FriendRpcAddContactReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcAddContactReply::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcAddContactReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcAddContactReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcAddContactReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcAddContactReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcAddContactReply)
  return false;
#undef DO_
}

void FriendRpcAddContactReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcAddContactReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcAddContactReply)
}

::google::protobuf::uint8* FriendRpcAddContactReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcAddContactReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcAddContactReply)
  return target;
}

size_t FriendRpcAddContactReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcAddContactReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcAddContactReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcAddContactReply)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcAddContactReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcAddContactReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcAddContactReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcAddContactReply)
    MergeFrom(*source);
  }
}

void FriendRpcAddContactReply::MergeFrom(const FriendRpcAddContactReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcAddContactReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void FriendRpcAddContactReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcAddContactReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcAddContactReply::CopyFrom(const FriendRpcAddContactReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcAddContactReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcAddContactReply::IsInitialized() const {
  return true;
}

void FriendRpcAddContactReply::Swap(FriendRpcAddContactReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcAddContactReply::InternalSwap(FriendRpcAddContactReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcAddContactReply::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcAddContactReply

// optional sint32 Result = 1 [default = -9999];
bool FriendRpcAddContactReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FriendRpcAddContactReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void FriendRpcAddContactReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void FriendRpcAddContactReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 FriendRpcAddContactReply::result() const {
  // @@protoc_insertion_point(field_get:FriendRpcAddContactReply.Result)
  return result_;
}
void FriendRpcAddContactReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcAddContactReply.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRpcDelContactAsk::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcDelContactAsk::FriendRpcDelContactAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcDelContactAsk)
}
FriendRpcDelContactAsk::FriendRpcDelContactAsk(const FriendRpcDelContactAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:FriendRpcDelContactAsk)
}

void FriendRpcDelContactAsk::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(-1);
}

FriendRpcDelContactAsk::~FriendRpcDelContactAsk() {
  // @@protoc_insertion_point(destructor:FriendRpcDelContactAsk)
  SharedDtor();
}

void FriendRpcDelContactAsk::SharedDtor() {
}

void FriendRpcDelContactAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcDelContactAsk::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcDelContactAsk& FriendRpcDelContactAsk::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcDelContactAsk* FriendRpcDelContactAsk::New(::google::protobuf::Arena* arena) const {
  FriendRpcDelContactAsk* n = new FriendRpcDelContactAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcDelContactAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcDelContactAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = GOOGLE_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcDelContactAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcDelContactAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcDelContactAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcDelContactAsk)
  return false;
#undef DO_
}

void FriendRpcDelContactAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcDelContactAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcDelContactAsk)
}

::google::protobuf::uint8* FriendRpcDelContactAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcDelContactAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcDelContactAsk)
  return target;
}

size_t FriendRpcDelContactAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcDelContactAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint64 UserId = 1 [default = -1];
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcDelContactAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcDelContactAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcDelContactAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcDelContactAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcDelContactAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcDelContactAsk)
    MergeFrom(*source);
  }
}

void FriendRpcDelContactAsk::MergeFrom(const FriendRpcDelContactAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcDelContactAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_userid()) {
    set_userid(from.userid());
  }
}

void FriendRpcDelContactAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcDelContactAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcDelContactAsk::CopyFrom(const FriendRpcDelContactAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcDelContactAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcDelContactAsk::IsInitialized() const {
  return true;
}

void FriendRpcDelContactAsk::Swap(FriendRpcDelContactAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcDelContactAsk::InternalSwap(FriendRpcDelContactAsk* other) {
  using std::swap;
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcDelContactAsk::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcDelContactAsk

// optional sint64 UserId = 1 [default = -1];
bool FriendRpcDelContactAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FriendRpcDelContactAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void FriendRpcDelContactAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FriendRpcDelContactAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 FriendRpcDelContactAsk::userid() const {
  // @@protoc_insertion_point(field_get:FriendRpcDelContactAsk.UserId)
  return userid_;
}
void FriendRpcDelContactAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcDelContactAsk.UserId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRpcDelContactReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcDelContactReply::FriendRpcDelContactReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcDelContactReply)
}
FriendRpcDelContactReply::FriendRpcDelContactReply(const FriendRpcDelContactReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:FriendRpcDelContactReply)
}

void FriendRpcDelContactReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

FriendRpcDelContactReply::~FriendRpcDelContactReply() {
  // @@protoc_insertion_point(destructor:FriendRpcDelContactReply)
  SharedDtor();
}

void FriendRpcDelContactReply::SharedDtor() {
}

void FriendRpcDelContactReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcDelContactReply::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcDelContactReply& FriendRpcDelContactReply::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcDelContactReply* FriendRpcDelContactReply::New(::google::protobuf::Arena* arena) const {
  FriendRpcDelContactReply* n = new FriendRpcDelContactReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcDelContactReply::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcDelContactReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcDelContactReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcDelContactReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcDelContactReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcDelContactReply)
  return false;
#undef DO_
}

void FriendRpcDelContactReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcDelContactReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcDelContactReply)
}

::google::protobuf::uint8* FriendRpcDelContactReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcDelContactReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcDelContactReply)
  return target;
}

size_t FriendRpcDelContactReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcDelContactReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcDelContactReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcDelContactReply)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcDelContactReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcDelContactReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcDelContactReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcDelContactReply)
    MergeFrom(*source);
  }
}

void FriendRpcDelContactReply::MergeFrom(const FriendRpcDelContactReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcDelContactReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void FriendRpcDelContactReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcDelContactReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcDelContactReply::CopyFrom(const FriendRpcDelContactReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcDelContactReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcDelContactReply::IsInitialized() const {
  return true;
}

void FriendRpcDelContactReply::Swap(FriendRpcDelContactReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcDelContactReply::InternalSwap(FriendRpcDelContactReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcDelContactReply::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcDelContactReply

// optional sint32 Result = 1 [default = -9999];
bool FriendRpcDelContactReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FriendRpcDelContactReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void FriendRpcDelContactReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void FriendRpcDelContactReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 FriendRpcDelContactReply::result() const {
  // @@protoc_insertion_point(field_get:FriendRpcDelContactReply.Result)
  return result_;
}
void FriendRpcDelContactReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcDelContactReply.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRpcSearchPlayerAsk::kSearchStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcSearchPlayerAsk::FriendRpcSearchPlayerAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcSearchPlayerAsk)
}
FriendRpcSearchPlayerAsk::FriendRpcSearchPlayerAsk(const FriendRpcSearchPlayerAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  searchstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_searchstring()) {
    searchstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.searchstring_);
  }
  // @@protoc_insertion_point(copy_constructor:FriendRpcSearchPlayerAsk)
}

void FriendRpcSearchPlayerAsk::SharedCtor() {
  _cached_size_ = 0;
  searchstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FriendRpcSearchPlayerAsk::~FriendRpcSearchPlayerAsk() {
  // @@protoc_insertion_point(destructor:FriendRpcSearchPlayerAsk)
  SharedDtor();
}

void FriendRpcSearchPlayerAsk::SharedDtor() {
  searchstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendRpcSearchPlayerAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcSearchPlayerAsk::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcSearchPlayerAsk& FriendRpcSearchPlayerAsk::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcSearchPlayerAsk* FriendRpcSearchPlayerAsk::New(::google::protobuf::Arena* arena) const {
  FriendRpcSearchPlayerAsk* n = new FriendRpcSearchPlayerAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcSearchPlayerAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcSearchPlayerAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_searchstring()) {
    GOOGLE_DCHECK(!searchstring_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*searchstring_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcSearchPlayerAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcSearchPlayerAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string SearchString = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->searchstring().data(), static_cast<int>(this->searchstring().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FriendRpcSearchPlayerAsk.SearchString");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcSearchPlayerAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcSearchPlayerAsk)
  return false;
#undef DO_
}

void FriendRpcSearchPlayerAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcSearchPlayerAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string SearchString = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchstring().data(), static_cast<int>(this->searchstring().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendRpcSearchPlayerAsk.SearchString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->searchstring(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcSearchPlayerAsk)
}

::google::protobuf::uint8* FriendRpcSearchPlayerAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcSearchPlayerAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string SearchString = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchstring().data(), static_cast<int>(this->searchstring().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendRpcSearchPlayerAsk.SearchString");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->searchstring(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcSearchPlayerAsk)
  return target;
}

size_t FriendRpcSearchPlayerAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcSearchPlayerAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string SearchString = 1;
  if (has_searchstring()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->searchstring());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcSearchPlayerAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcSearchPlayerAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcSearchPlayerAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcSearchPlayerAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcSearchPlayerAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcSearchPlayerAsk)
    MergeFrom(*source);
  }
}

void FriendRpcSearchPlayerAsk::MergeFrom(const FriendRpcSearchPlayerAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcSearchPlayerAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_searchstring()) {
    set_has_searchstring();
    searchstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.searchstring_);
  }
}

void FriendRpcSearchPlayerAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcSearchPlayerAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcSearchPlayerAsk::CopyFrom(const FriendRpcSearchPlayerAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcSearchPlayerAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcSearchPlayerAsk::IsInitialized() const {
  return true;
}

void FriendRpcSearchPlayerAsk::Swap(FriendRpcSearchPlayerAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcSearchPlayerAsk::InternalSwap(FriendRpcSearchPlayerAsk* other) {
  using std::swap;
  searchstring_.Swap(&other->searchstring_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcSearchPlayerAsk::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcSearchPlayerAsk

// optional string SearchString = 1;
bool FriendRpcSearchPlayerAsk::has_searchstring() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FriendRpcSearchPlayerAsk::set_has_searchstring() {
  _has_bits_[0] |= 0x00000001u;
}
void FriendRpcSearchPlayerAsk::clear_has_searchstring() {
  _has_bits_[0] &= ~0x00000001u;
}
void FriendRpcSearchPlayerAsk::clear_searchstring() {
  searchstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_searchstring();
}
const ::std::string& FriendRpcSearchPlayerAsk::searchstring() const {
  // @@protoc_insertion_point(field_get:FriendRpcSearchPlayerAsk.SearchString)
  return searchstring_.GetNoArena();
}
void FriendRpcSearchPlayerAsk::set_searchstring(const ::std::string& value) {
  set_has_searchstring();
  searchstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendRpcSearchPlayerAsk.SearchString)
}
#if LANG_CXX11
void FriendRpcSearchPlayerAsk::set_searchstring(::std::string&& value) {
  set_has_searchstring();
  searchstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FriendRpcSearchPlayerAsk.SearchString)
}
#endif
void FriendRpcSearchPlayerAsk::set_searchstring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_searchstring();
  searchstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendRpcSearchPlayerAsk.SearchString)
}
void FriendRpcSearchPlayerAsk::set_searchstring(const char* value, size_t size) {
  set_has_searchstring();
  searchstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendRpcSearchPlayerAsk.SearchString)
}
::std::string* FriendRpcSearchPlayerAsk::mutable_searchstring() {
  set_has_searchstring();
  // @@protoc_insertion_point(field_mutable:FriendRpcSearchPlayerAsk.SearchString)
  return searchstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FriendRpcSearchPlayerAsk::release_searchstring() {
  // @@protoc_insertion_point(field_release:FriendRpcSearchPlayerAsk.SearchString)
  clear_has_searchstring();
  return searchstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FriendRpcSearchPlayerAsk::set_allocated_searchstring(::std::string* searchstring) {
  if (searchstring != NULL) {
    set_has_searchstring();
  } else {
    clear_has_searchstring();
  }
  searchstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), searchstring);
  // @@protoc_insertion_point(field_set_allocated:FriendRpcSearchPlayerAsk.SearchString)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRpcSearchPlayerReply::kResultFieldNumber;
const int FriendRpcSearchPlayerReply::kUserIdFieldNumber;
const int FriendRpcSearchPlayerReply::kUserNameFieldNumber;
const int FriendRpcSearchPlayerReply::kLevelFieldNumber;
const int FriendRpcSearchPlayerReply::kProfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcSearchPlayerReply::FriendRpcSearchPlayerReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcSearchPlayerReply)
}
FriendRpcSearchPlayerReply::FriendRpcSearchPlayerReply(const FriendRpcSearchPlayerReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ::memcpy(&prof_, &from.prof_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&prof_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:FriendRpcSearchPlayerReply)
}

void FriendRpcSearchPlayerReply::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prof_ = -1;
  userid_ = GOOGLE_LONGLONG(-1);
  result_ = -9999;
  level_ = -1;
}

FriendRpcSearchPlayerReply::~FriendRpcSearchPlayerReply() {
  // @@protoc_insertion_point(destructor:FriendRpcSearchPlayerReply)
  SharedDtor();
}

void FriendRpcSearchPlayerReply::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendRpcSearchPlayerReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcSearchPlayerReply::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcSearchPlayerReply& FriendRpcSearchPlayerReply::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcSearchPlayerReply* FriendRpcSearchPlayerReply::New(::google::protobuf::Arena* arena) const {
  FriendRpcSearchPlayerReply* n = new FriendRpcSearchPlayerReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcSearchPlayerReply::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcSearchPlayerReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    prof_ = -1;
    userid_ = GOOGLE_LONGLONG(-1);
    result_ = -9999;
    level_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcSearchPlayerReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcSearchPlayerReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 UserId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FriendRpcSearchPlayerReply.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Level = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Prof = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_prof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &prof_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcSearchPlayerReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcSearchPlayerReply)
  return false;
#undef DO_
}

void FriendRpcSearchPlayerReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcSearchPlayerReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->userid(), output);
  }

  // optional string UserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendRpcSearchPlayerReply.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // optional sint32 Level = 4 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->level(), output);
  }

  // optional sint32 Prof = 5 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->prof(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcSearchPlayerReply)
}

::google::protobuf::uint8* FriendRpcSearchPlayerReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcSearchPlayerReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->userid(), target);
  }

  // optional string UserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendRpcSearchPlayerReply.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // optional sint32 Level = 4 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->level(), target);
  }

  // optional sint32 Prof = 5 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->prof(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcSearchPlayerReply)
  return target;
}

size_t FriendRpcSearchPlayerReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcSearchPlayerReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string UserName = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional sint32 Prof = 5 [default = -1];
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->prof());
    }

    // optional sint64 UserId = 2 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 Level = 4 [default = -1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcSearchPlayerReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcSearchPlayerReply)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcSearchPlayerReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcSearchPlayerReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcSearchPlayerReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcSearchPlayerReply)
    MergeFrom(*source);
  }
}

void FriendRpcSearchPlayerReply::MergeFrom(const FriendRpcSearchPlayerReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcSearchPlayerReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      prof_ = from.prof_;
    }
    if (cached_has_bits & 0x00000004u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FriendRpcSearchPlayerReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcSearchPlayerReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcSearchPlayerReply::CopyFrom(const FriendRpcSearchPlayerReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcSearchPlayerReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcSearchPlayerReply::IsInitialized() const {
  return true;
}

void FriendRpcSearchPlayerReply::Swap(FriendRpcSearchPlayerReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcSearchPlayerReply::InternalSwap(FriendRpcSearchPlayerReply* other) {
  using std::swap;
  username_.Swap(&other->username_);
  swap(prof_, other->prof_);
  swap(userid_, other->userid_);
  swap(result_, other->result_);
  swap(level_, other->level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcSearchPlayerReply::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcSearchPlayerReply

// optional sint32 Result = 1 [default = -9999];
bool FriendRpcSearchPlayerReply::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FriendRpcSearchPlayerReply::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
void FriendRpcSearchPlayerReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
void FriendRpcSearchPlayerReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 FriendRpcSearchPlayerReply::result() const {
  // @@protoc_insertion_point(field_get:FriendRpcSearchPlayerReply.Result)
  return result_;
}
void FriendRpcSearchPlayerReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcSearchPlayerReply.Result)
}

// optional sint64 UserId = 2 [default = -1];
bool FriendRpcSearchPlayerReply::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FriendRpcSearchPlayerReply::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
void FriendRpcSearchPlayerReply::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
void FriendRpcSearchPlayerReply::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 FriendRpcSearchPlayerReply::userid() const {
  // @@protoc_insertion_point(field_get:FriendRpcSearchPlayerReply.UserId)
  return userid_;
}
void FriendRpcSearchPlayerReply::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcSearchPlayerReply.UserId)
}

// optional string UserName = 3;
bool FriendRpcSearchPlayerReply::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FriendRpcSearchPlayerReply::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void FriendRpcSearchPlayerReply::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void FriendRpcSearchPlayerReply::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& FriendRpcSearchPlayerReply::username() const {
  // @@protoc_insertion_point(field_get:FriendRpcSearchPlayerReply.UserName)
  return username_.GetNoArena();
}
void FriendRpcSearchPlayerReply::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendRpcSearchPlayerReply.UserName)
}
#if LANG_CXX11
void FriendRpcSearchPlayerReply::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FriendRpcSearchPlayerReply.UserName)
}
#endif
void FriendRpcSearchPlayerReply::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendRpcSearchPlayerReply.UserName)
}
void FriendRpcSearchPlayerReply::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendRpcSearchPlayerReply.UserName)
}
::std::string* FriendRpcSearchPlayerReply::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FriendRpcSearchPlayerReply.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FriendRpcSearchPlayerReply::release_username() {
  // @@protoc_insertion_point(field_release:FriendRpcSearchPlayerReply.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FriendRpcSearchPlayerReply::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FriendRpcSearchPlayerReply.UserName)
}

// optional sint32 Level = 4 [default = -1];
bool FriendRpcSearchPlayerReply::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FriendRpcSearchPlayerReply::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
void FriendRpcSearchPlayerReply::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
void FriendRpcSearchPlayerReply::clear_level() {
  level_ = -1;
  clear_has_level();
}
::google::protobuf::int32 FriendRpcSearchPlayerReply::level() const {
  // @@protoc_insertion_point(field_get:FriendRpcSearchPlayerReply.Level)
  return level_;
}
void FriendRpcSearchPlayerReply::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcSearchPlayerReply.Level)
}

// optional sint32 Prof = 5 [default = -1];
bool FriendRpcSearchPlayerReply::has_prof() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FriendRpcSearchPlayerReply::set_has_prof() {
  _has_bits_[0] |= 0x00000002u;
}
void FriendRpcSearchPlayerReply::clear_has_prof() {
  _has_bits_[0] &= ~0x00000002u;
}
void FriendRpcSearchPlayerReply::clear_prof() {
  prof_ = -1;
  clear_has_prof();
}
::google::protobuf::int32 FriendRpcSearchPlayerReply::prof() const {
  // @@protoc_insertion_point(field_get:FriendRpcSearchPlayerReply.Prof)
  return prof_;
}
void FriendRpcSearchPlayerReply::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcSearchPlayerReply.Prof)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRpcRecommendObj::kUserIdFieldNumber;
const int FriendRpcRecommendObj::kUserNameFieldNumber;
const int FriendRpcRecommendObj::kLevelFieldNumber;
const int FriendRpcRecommendObj::kProfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcRecommendObj::FriendRpcRecommendObj()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcRecommendObj)
}
FriendRpcRecommendObj::FriendRpcRecommendObj(const FriendRpcRecommendObj& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&prof_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(prof_));
  // @@protoc_insertion_point(copy_constructor:FriendRpcRecommendObj)
}

void FriendRpcRecommendObj::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = GOOGLE_LONGLONG(-1);
  level_ = -1;
  prof_ = -1;
}

FriendRpcRecommendObj::~FriendRpcRecommendObj() {
  // @@protoc_insertion_point(destructor:FriendRpcRecommendObj)
  SharedDtor();
}

void FriendRpcRecommendObj::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendRpcRecommendObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcRecommendObj::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcRecommendObj& FriendRpcRecommendObj::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcRecommendObj* FriendRpcRecommendObj::New(::google::protobuf::Arena* arena) const {
  FriendRpcRecommendObj* n = new FriendRpcRecommendObj;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcRecommendObj::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcRecommendObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    userid_ = GOOGLE_LONGLONG(-1);
    level_ = -1;
    prof_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcRecommendObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcRecommendObj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FriendRpcRecommendObj.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Level = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Prof = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_prof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &prof_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcRecommendObj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcRecommendObj)
  return false;
#undef DO_
}

void FriendRpcRecommendObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcRecommendObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->userid(), output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendRpcRecommendObj.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional sint32 Level = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->level(), output);
  }

  // optional sint32 Prof = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->prof(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcRecommendObj)
}

::google::protobuf::uint8* FriendRpcRecommendObj::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcRecommendObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->userid(), target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendRpcRecommendObj.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional sint32 Level = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->level(), target);
  }

  // optional sint32 Prof = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->prof(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcRecommendObj)
  return target;
}

size_t FriendRpcRecommendObj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcRecommendObj)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional sint64 UserId = 1 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

    // optional sint32 Level = 3 [default = -1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->level());
    }

    // optional sint32 Prof = 4 [default = -1];
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->prof());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcRecommendObj::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcRecommendObj)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcRecommendObj* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcRecommendObj>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcRecommendObj)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcRecommendObj)
    MergeFrom(*source);
  }
}

void FriendRpcRecommendObj::MergeFrom(const FriendRpcRecommendObj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcRecommendObj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      prof_ = from.prof_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FriendRpcRecommendObj::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcRecommendObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcRecommendObj::CopyFrom(const FriendRpcRecommendObj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcRecommendObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcRecommendObj::IsInitialized() const {
  return true;
}

void FriendRpcRecommendObj::Swap(FriendRpcRecommendObj* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcRecommendObj::InternalSwap(FriendRpcRecommendObj* other) {
  using std::swap;
  username_.Swap(&other->username_);
  swap(userid_, other->userid_);
  swap(level_, other->level_);
  swap(prof_, other->prof_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcRecommendObj::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcRecommendObj

// optional sint64 UserId = 1 [default = -1];
bool FriendRpcRecommendObj::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FriendRpcRecommendObj::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void FriendRpcRecommendObj::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void FriendRpcRecommendObj::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 FriendRpcRecommendObj::userid() const {
  // @@protoc_insertion_point(field_get:FriendRpcRecommendObj.UserId)
  return userid_;
}
void FriendRpcRecommendObj::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcRecommendObj.UserId)
}

// optional string UserName = 2;
bool FriendRpcRecommendObj::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FriendRpcRecommendObj::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void FriendRpcRecommendObj::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void FriendRpcRecommendObj::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& FriendRpcRecommendObj::username() const {
  // @@protoc_insertion_point(field_get:FriendRpcRecommendObj.UserName)
  return username_.GetNoArena();
}
void FriendRpcRecommendObj::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendRpcRecommendObj.UserName)
}
#if LANG_CXX11
void FriendRpcRecommendObj::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FriendRpcRecommendObj.UserName)
}
#endif
void FriendRpcRecommendObj::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendRpcRecommendObj.UserName)
}
void FriendRpcRecommendObj::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendRpcRecommendObj.UserName)
}
::std::string* FriendRpcRecommendObj::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FriendRpcRecommendObj.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FriendRpcRecommendObj::release_username() {
  // @@protoc_insertion_point(field_release:FriendRpcRecommendObj.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FriendRpcRecommendObj::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FriendRpcRecommendObj.UserName)
}

// optional sint32 Level = 3 [default = -1];
bool FriendRpcRecommendObj::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FriendRpcRecommendObj::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
void FriendRpcRecommendObj::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
void FriendRpcRecommendObj::clear_level() {
  level_ = -1;
  clear_has_level();
}
::google::protobuf::int32 FriendRpcRecommendObj::level() const {
  // @@protoc_insertion_point(field_get:FriendRpcRecommendObj.Level)
  return level_;
}
void FriendRpcRecommendObj::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcRecommendObj.Level)
}

// optional sint32 Prof = 4 [default = -1];
bool FriendRpcRecommendObj::has_prof() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FriendRpcRecommendObj::set_has_prof() {
  _has_bits_[0] |= 0x00000008u;
}
void FriendRpcRecommendObj::clear_has_prof() {
  _has_bits_[0] &= ~0x00000008u;
}
void FriendRpcRecommendObj::clear_prof() {
  prof_ = -1;
  clear_has_prof();
}
::google::protobuf::int32 FriendRpcRecommendObj::prof() const {
  // @@protoc_insertion_point(field_get:FriendRpcRecommendObj.Prof)
  return prof_;
}
void FriendRpcRecommendObj::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcRecommendObj.Prof)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcRecommendAsk::FriendRpcRecommendAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcRecommendAsk)
}
FriendRpcRecommendAsk::FriendRpcRecommendAsk(const FriendRpcRecommendAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FriendRpcRecommendAsk)
}

void FriendRpcRecommendAsk::SharedCtor() {
  _cached_size_ = 0;
}

FriendRpcRecommendAsk::~FriendRpcRecommendAsk() {
  // @@protoc_insertion_point(destructor:FriendRpcRecommendAsk)
  SharedDtor();
}

void FriendRpcRecommendAsk::SharedDtor() {
}

void FriendRpcRecommendAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcRecommendAsk::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcRecommendAsk& FriendRpcRecommendAsk::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcRecommendAsk* FriendRpcRecommendAsk::New(::google::protobuf::Arena* arena) const {
  FriendRpcRecommendAsk* n = new FriendRpcRecommendAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcRecommendAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcRecommendAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcRecommendAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcRecommendAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcRecommendAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcRecommendAsk)
  return false;
#undef DO_
}

void FriendRpcRecommendAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcRecommendAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcRecommendAsk)
}

::google::protobuf::uint8* FriendRpcRecommendAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcRecommendAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcRecommendAsk)
  return target;
}

size_t FriendRpcRecommendAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcRecommendAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcRecommendAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcRecommendAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcRecommendAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcRecommendAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcRecommendAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcRecommendAsk)
    MergeFrom(*source);
  }
}

void FriendRpcRecommendAsk::MergeFrom(const FriendRpcRecommendAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcRecommendAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FriendRpcRecommendAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcRecommendAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcRecommendAsk::CopyFrom(const FriendRpcRecommendAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcRecommendAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcRecommendAsk::IsInitialized() const {
  return true;
}

void FriendRpcRecommendAsk::Swap(FriendRpcRecommendAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcRecommendAsk::InternalSwap(FriendRpcRecommendAsk* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcRecommendAsk::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcRecommendAsk

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRpcRecommendReply::kResultFieldNumber;
const int FriendRpcRecommendReply::kRecommendListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcRecommendReply::FriendRpcRecommendReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcRecommendReply)
}
FriendRpcRecommendReply::FriendRpcRecommendReply(const FriendRpcRecommendReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      recommendlist_(from.recommendlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:FriendRpcRecommendReply)
}

void FriendRpcRecommendReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

FriendRpcRecommendReply::~FriendRpcRecommendReply() {
  // @@protoc_insertion_point(destructor:FriendRpcRecommendReply)
  SharedDtor();
}

void FriendRpcRecommendReply::SharedDtor() {
}

void FriendRpcRecommendReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcRecommendReply::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcRecommendReply& FriendRpcRecommendReply::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcRecommendReply* FriendRpcRecommendReply::New(::google::protobuf::Arena* arena) const {
  FriendRpcRecommendReply* n = new FriendRpcRecommendReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcRecommendReply::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcRecommendReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recommendlist_.Clear();
  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcRecommendReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcRecommendReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .FriendRpcRecommendObj RecommendList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recommendlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcRecommendReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcRecommendReply)
  return false;
#undef DO_
}

void FriendRpcRecommendReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcRecommendReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // repeated .FriendRpcRecommendObj RecommendList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->recommendlist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->recommendlist(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcRecommendReply)
}

::google::protobuf::uint8* FriendRpcRecommendReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcRecommendReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // repeated .FriendRpcRecommendObj RecommendList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->recommendlist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->recommendlist(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcRecommendReply)
  return target;
}

size_t FriendRpcRecommendReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcRecommendReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .FriendRpcRecommendObj RecommendList = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->recommendlist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recommendlist(static_cast<int>(i)));
    }
  }

  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcRecommendReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcRecommendReply)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcRecommendReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcRecommendReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcRecommendReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcRecommendReply)
    MergeFrom(*source);
  }
}

void FriendRpcRecommendReply::MergeFrom(const FriendRpcRecommendReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcRecommendReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recommendlist_.MergeFrom(from.recommendlist_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void FriendRpcRecommendReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcRecommendReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcRecommendReply::CopyFrom(const FriendRpcRecommendReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcRecommendReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcRecommendReply::IsInitialized() const {
  return true;
}

void FriendRpcRecommendReply::Swap(FriendRpcRecommendReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcRecommendReply::InternalSwap(FriendRpcRecommendReply* other) {
  using std::swap;
  recommendlist_.InternalSwap(&other->recommendlist_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcRecommendReply::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcRecommendReply

// optional sint32 Result = 1 [default = -9999];
bool FriendRpcRecommendReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FriendRpcRecommendReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void FriendRpcRecommendReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void FriendRpcRecommendReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 FriendRpcRecommendReply::result() const {
  // @@protoc_insertion_point(field_get:FriendRpcRecommendReply.Result)
  return result_;
}
void FriendRpcRecommendReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcRecommendReply.Result)
}

// repeated .FriendRpcRecommendObj RecommendList = 2;
int FriendRpcRecommendReply::recommendlist_size() const {
  return recommendlist_.size();
}
void FriendRpcRecommendReply::clear_recommendlist() {
  recommendlist_.Clear();
}
const ::FriendRpcRecommendObj& FriendRpcRecommendReply::recommendlist(int index) const {
  // @@protoc_insertion_point(field_get:FriendRpcRecommendReply.RecommendList)
  return recommendlist_.Get(index);
}
::FriendRpcRecommendObj* FriendRpcRecommendReply::mutable_recommendlist(int index) {
  // @@protoc_insertion_point(field_mutable:FriendRpcRecommendReply.RecommendList)
  return recommendlist_.Mutable(index);
}
::FriendRpcRecommendObj* FriendRpcRecommendReply::add_recommendlist() {
  // @@protoc_insertion_point(field_add:FriendRpcRecommendReply.RecommendList)
  return recommendlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::FriendRpcRecommendObj >*
FriendRpcRecommendReply::mutable_recommendlist() {
  // @@protoc_insertion_point(field_mutable_list:FriendRpcRecommendReply.RecommendList)
  return &recommendlist_;
}
const ::google::protobuf::RepeatedPtrField< ::FriendRpcRecommendObj >&
FriendRpcRecommendReply::recommendlist() const {
  // @@protoc_insertion_point(field_list:FriendRpcRecommendReply.RecommendList)
  return recommendlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRpcViewUserSimpleInfoAsk::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcViewUserSimpleInfoAsk::FriendRpcViewUserSimpleInfoAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcViewUserSimpleInfoAsk)
}
FriendRpcViewUserSimpleInfoAsk::FriendRpcViewUserSimpleInfoAsk(const FriendRpcViewUserSimpleInfoAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:FriendRpcViewUserSimpleInfoAsk)
}

void FriendRpcViewUserSimpleInfoAsk::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(-1);
}

FriendRpcViewUserSimpleInfoAsk::~FriendRpcViewUserSimpleInfoAsk() {
  // @@protoc_insertion_point(destructor:FriendRpcViewUserSimpleInfoAsk)
  SharedDtor();
}

void FriendRpcViewUserSimpleInfoAsk::SharedDtor() {
}

void FriendRpcViewUserSimpleInfoAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcViewUserSimpleInfoAsk::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcViewUserSimpleInfoAsk& FriendRpcViewUserSimpleInfoAsk::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcViewUserSimpleInfoAsk* FriendRpcViewUserSimpleInfoAsk::New(::google::protobuf::Arena* arena) const {
  FriendRpcViewUserSimpleInfoAsk* n = new FriendRpcViewUserSimpleInfoAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcViewUserSimpleInfoAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcViewUserSimpleInfoAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = GOOGLE_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcViewUserSimpleInfoAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcViewUserSimpleInfoAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcViewUserSimpleInfoAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcViewUserSimpleInfoAsk)
  return false;
#undef DO_
}

void FriendRpcViewUserSimpleInfoAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcViewUserSimpleInfoAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcViewUserSimpleInfoAsk)
}

::google::protobuf::uint8* FriendRpcViewUserSimpleInfoAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcViewUserSimpleInfoAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcViewUserSimpleInfoAsk)
  return target;
}

size_t FriendRpcViewUserSimpleInfoAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcViewUserSimpleInfoAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint64 UserId = 1 [default = -1];
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcViewUserSimpleInfoAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcViewUserSimpleInfoAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcViewUserSimpleInfoAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcViewUserSimpleInfoAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcViewUserSimpleInfoAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcViewUserSimpleInfoAsk)
    MergeFrom(*source);
  }
}

void FriendRpcViewUserSimpleInfoAsk::MergeFrom(const FriendRpcViewUserSimpleInfoAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcViewUserSimpleInfoAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_userid()) {
    set_userid(from.userid());
  }
}

void FriendRpcViewUserSimpleInfoAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcViewUserSimpleInfoAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcViewUserSimpleInfoAsk::CopyFrom(const FriendRpcViewUserSimpleInfoAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcViewUserSimpleInfoAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcViewUserSimpleInfoAsk::IsInitialized() const {
  return true;
}

void FriendRpcViewUserSimpleInfoAsk::Swap(FriendRpcViewUserSimpleInfoAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcViewUserSimpleInfoAsk::InternalSwap(FriendRpcViewUserSimpleInfoAsk* other) {
  using std::swap;
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcViewUserSimpleInfoAsk::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcViewUserSimpleInfoAsk

// optional sint64 UserId = 1 [default = -1];
bool FriendRpcViewUserSimpleInfoAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FriendRpcViewUserSimpleInfoAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void FriendRpcViewUserSimpleInfoAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FriendRpcViewUserSimpleInfoAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 FriendRpcViewUserSimpleInfoAsk::userid() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoAsk.UserId)
  return userid_;
}
void FriendRpcViewUserSimpleInfoAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoAsk.UserId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRpcViewUserSimpleInfoReply::kResultFieldNumber;
const int FriendRpcViewUserSimpleInfoReply::kUserIdFieldNumber;
const int FriendRpcViewUserSimpleInfoReply::kUserNameFieldNumber;
const int FriendRpcViewUserSimpleInfoReply::kLevelFieldNumber;
const int FriendRpcViewUserSimpleInfoReply::kProfFieldNumber;
const int FriendRpcViewUserSimpleInfoReply::kTeamIdFieldNumber;
const int FriendRpcViewUserSimpleInfoReply::kTeamMemberNumFieldNumber;
const int FriendRpcViewUserSimpleInfoReply::kGuildIdFieldNumber;
const int FriendRpcViewUserSimpleInfoReply::kSignatureFieldNumber;
const int FriendRpcViewUserSimpleInfoReply::kOnlineFieldNumber;
const int FriendRpcViewUserSimpleInfoReply::kGoodFeelingFieldNumber;
const int FriendRpcViewUserSimpleInfoReply::kGuildNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcViewUserSimpleInfoReply::FriendRpcViewUserSimpleInfoReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcViewUserSimpleInfoReply)
}
FriendRpcViewUserSimpleInfoReply::FriendRpcViewUserSimpleInfoReply(const FriendRpcViewUserSimpleInfoReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  guildname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guildname()) {
    guildname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guildname_);
  }
  ::memcpy(&online_, &from.online_,
    static_cast<size_t>(reinterpret_cast<char*>(&guildid_) -
    reinterpret_cast<char*>(&online_)) + sizeof(guildid_));
  // @@protoc_insertion_point(copy_constructor:FriendRpcViewUserSimpleInfoReply)
}

void FriendRpcViewUserSimpleInfoReply::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&online_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodfeeling_) -
      reinterpret_cast<char*>(&online_)) + sizeof(goodfeeling_));
  userid_ = GOOGLE_LONGLONG(-1);
  result_ = -9999;
  level_ = -1;
  prof_ = -1;
  teamid_ = -1;
  teammembernum_ = -1;
  guildid_ = -1;
}

FriendRpcViewUserSimpleInfoReply::~FriendRpcViewUserSimpleInfoReply() {
  // @@protoc_insertion_point(destructor:FriendRpcViewUserSimpleInfoReply)
  SharedDtor();
}

void FriendRpcViewUserSimpleInfoReply::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendRpcViewUserSimpleInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcViewUserSimpleInfoReply::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcViewUserSimpleInfoReply& FriendRpcViewUserSimpleInfoReply::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcViewUserSimpleInfoReply* FriendRpcViewUserSimpleInfoReply::New(::google::protobuf::Arena* arena) const {
  FriendRpcViewUserSimpleInfoReply* n = new FriendRpcViewUserSimpleInfoReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcViewUserSimpleInfoReply::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcViewUserSimpleInfoReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*signature_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!guildname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*guildname_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&online_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&goodfeeling_) -
        reinterpret_cast<char*>(&online_)) + sizeof(goodfeeling_));
    userid_ = GOOGLE_LONGLONG(-1);
    result_ = -9999;
    level_ = -1;
  }
  if (cached_has_bits & 3840u) {
    prof_ = -1;
    teamid_ = -1;
    teammembernum_ = -1;
    guildid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcViewUserSimpleInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcViewUserSimpleInfoReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 UserId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FriendRpcViewUserSimpleInfoReply.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Level = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Prof = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_prof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &prof_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TeamId = 6 [default = -1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_teamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TeamMemberNum = 7 [default = -1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_teammembernum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teammembernum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 GuildId = 8 [default = -1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_guildid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &guildid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Signature = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signature().data(), static_cast<int>(this->signature().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FriendRpcViewUserSimpleInfoReply.Signature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool Online = 10 [default = false];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 GoodFeeling = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_goodfeeling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &goodfeeling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string GuildName = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), static_cast<int>(this->guildname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FriendRpcViewUserSimpleInfoReply.GuildName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcViewUserSimpleInfoReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcViewUserSimpleInfoReply)
  return false;
#undef DO_
}

void FriendRpcViewUserSimpleInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcViewUserSimpleInfoReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->userid(), output);
  }

  // optional string UserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendRpcViewUserSimpleInfoReply.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // optional sint32 Level = 4 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->level(), output);
  }

  // optional sint32 Prof = 5 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->prof(), output);
  }

  // optional sint32 TeamId = 6 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->teamid(), output);
  }

  // optional sint32 TeamMemberNum = 7 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->teammembernum(), output);
  }

  // optional sint32 GuildId = 8 [default = -1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->guildid(), output);
  }

  // optional string Signature = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), static_cast<int>(this->signature().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendRpcViewUserSimpleInfoReply.Signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->signature(), output);
  }

  // optional bool Online = 10 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->online(), output);
  }

  // optional sint32 GoodFeeling = 11 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->goodfeeling(), output);
  }

  // optional string GuildName = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), static_cast<int>(this->guildname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendRpcViewUserSimpleInfoReply.GuildName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->guildname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcViewUserSimpleInfoReply)
}

::google::protobuf::uint8* FriendRpcViewUserSimpleInfoReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcViewUserSimpleInfoReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->userid(), target);
  }

  // optional string UserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendRpcViewUserSimpleInfoReply.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // optional sint32 Level = 4 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->level(), target);
  }

  // optional sint32 Prof = 5 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->prof(), target);
  }

  // optional sint32 TeamId = 6 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->teamid(), target);
  }

  // optional sint32 TeamMemberNum = 7 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->teammembernum(), target);
  }

  // optional sint32 GuildId = 8 [default = -1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->guildid(), target);
  }

  // optional string Signature = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), static_cast<int>(this->signature().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendRpcViewUserSimpleInfoReply.Signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->signature(), target);
  }

  // optional bool Online = 10 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->online(), target);
  }

  // optional sint32 GoodFeeling = 11 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->goodfeeling(), target);
  }

  // optional string GuildName = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), static_cast<int>(this->guildname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendRpcViewUserSimpleInfoReply.GuildName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->guildname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcViewUserSimpleInfoReply)
  return target;
}

size_t FriendRpcViewUserSimpleInfoReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcViewUserSimpleInfoReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string UserName = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string Signature = 9;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional string GuildName = 12;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional bool Online = 10 [default = false];
    if (has_online()) {
      total_size += 1 + 1;
    }

    // optional sint32 GoodFeeling = 11 [default = 0];
    if (has_goodfeeling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->goodfeeling());
    }

    // optional sint64 UserId = 2 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 Level = 4 [default = -1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional sint32 Prof = 5 [default = -1];
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->prof());
    }

    // optional sint32 TeamId = 6 [default = -1];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teamid());
    }

    // optional sint32 TeamMemberNum = 7 [default = -1];
    if (has_teammembernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teammembernum());
    }

    // optional sint32 GuildId = 8 [default = -1];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->guildid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcViewUserSimpleInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcViewUserSimpleInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcViewUserSimpleInfoReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcViewUserSimpleInfoReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcViewUserSimpleInfoReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcViewUserSimpleInfoReply)
    MergeFrom(*source);
  }
}

void FriendRpcViewUserSimpleInfoReply::MergeFrom(const FriendRpcViewUserSimpleInfoReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcViewUserSimpleInfoReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_guildname();
      guildname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guildname_);
    }
    if (cached_has_bits & 0x00000008u) {
      online_ = from.online_;
    }
    if (cached_has_bits & 0x00000010u) {
      goodfeeling_ = from.goodfeeling_;
    }
    if (cached_has_bits & 0x00000020u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000040u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000080u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      prof_ = from.prof_;
    }
    if (cached_has_bits & 0x00000200u) {
      teamid_ = from.teamid_;
    }
    if (cached_has_bits & 0x00000400u) {
      teammembernum_ = from.teammembernum_;
    }
    if (cached_has_bits & 0x00000800u) {
      guildid_ = from.guildid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FriendRpcViewUserSimpleInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcViewUserSimpleInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcViewUserSimpleInfoReply::CopyFrom(const FriendRpcViewUserSimpleInfoReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcViewUserSimpleInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcViewUserSimpleInfoReply::IsInitialized() const {
  return true;
}

void FriendRpcViewUserSimpleInfoReply::Swap(FriendRpcViewUserSimpleInfoReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcViewUserSimpleInfoReply::InternalSwap(FriendRpcViewUserSimpleInfoReply* other) {
  using std::swap;
  username_.Swap(&other->username_);
  signature_.Swap(&other->signature_);
  guildname_.Swap(&other->guildname_);
  swap(online_, other->online_);
  swap(goodfeeling_, other->goodfeeling_);
  swap(userid_, other->userid_);
  swap(result_, other->result_);
  swap(level_, other->level_);
  swap(prof_, other->prof_);
  swap(teamid_, other->teamid_);
  swap(teammembernum_, other->teammembernum_);
  swap(guildid_, other->guildid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcViewUserSimpleInfoReply::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcViewUserSimpleInfoReply

// optional sint32 Result = 1 [default = -9999];
bool FriendRpcViewUserSimpleInfoReply::has_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FriendRpcViewUserSimpleInfoReply::set_has_result() {
  _has_bits_[0] |= 0x00000040u;
}
void FriendRpcViewUserSimpleInfoReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000040u;
}
void FriendRpcViewUserSimpleInfoReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 FriendRpcViewUserSimpleInfoReply::result() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.Result)
  return result_;
}
void FriendRpcViewUserSimpleInfoReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.Result)
}

// optional sint64 UserId = 2 [default = -1];
bool FriendRpcViewUserSimpleInfoReply::has_userid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FriendRpcViewUserSimpleInfoReply::set_has_userid() {
  _has_bits_[0] |= 0x00000020u;
}
void FriendRpcViewUserSimpleInfoReply::clear_has_userid() {
  _has_bits_[0] &= ~0x00000020u;
}
void FriendRpcViewUserSimpleInfoReply::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 FriendRpcViewUserSimpleInfoReply::userid() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.UserId)
  return userid_;
}
void FriendRpcViewUserSimpleInfoReply::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.UserId)
}

// optional string UserName = 3;
bool FriendRpcViewUserSimpleInfoReply::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FriendRpcViewUserSimpleInfoReply::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void FriendRpcViewUserSimpleInfoReply::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void FriendRpcViewUserSimpleInfoReply::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& FriendRpcViewUserSimpleInfoReply::username() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.UserName)
  return username_.GetNoArena();
}
void FriendRpcViewUserSimpleInfoReply::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.UserName)
}
#if LANG_CXX11
void FriendRpcViewUserSimpleInfoReply::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FriendRpcViewUserSimpleInfoReply.UserName)
}
#endif
void FriendRpcViewUserSimpleInfoReply::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendRpcViewUserSimpleInfoReply.UserName)
}
void FriendRpcViewUserSimpleInfoReply::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendRpcViewUserSimpleInfoReply.UserName)
}
::std::string* FriendRpcViewUserSimpleInfoReply::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FriendRpcViewUserSimpleInfoReply.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FriendRpcViewUserSimpleInfoReply::release_username() {
  // @@protoc_insertion_point(field_release:FriendRpcViewUserSimpleInfoReply.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FriendRpcViewUserSimpleInfoReply::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FriendRpcViewUserSimpleInfoReply.UserName)
}

// optional sint32 Level = 4 [default = -1];
bool FriendRpcViewUserSimpleInfoReply::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FriendRpcViewUserSimpleInfoReply::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
void FriendRpcViewUserSimpleInfoReply::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
void FriendRpcViewUserSimpleInfoReply::clear_level() {
  level_ = -1;
  clear_has_level();
}
::google::protobuf::int32 FriendRpcViewUserSimpleInfoReply::level() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.Level)
  return level_;
}
void FriendRpcViewUserSimpleInfoReply::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.Level)
}

// optional sint32 Prof = 5 [default = -1];
bool FriendRpcViewUserSimpleInfoReply::has_prof() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FriendRpcViewUserSimpleInfoReply::set_has_prof() {
  _has_bits_[0] |= 0x00000100u;
}
void FriendRpcViewUserSimpleInfoReply::clear_has_prof() {
  _has_bits_[0] &= ~0x00000100u;
}
void FriendRpcViewUserSimpleInfoReply::clear_prof() {
  prof_ = -1;
  clear_has_prof();
}
::google::protobuf::int32 FriendRpcViewUserSimpleInfoReply::prof() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.Prof)
  return prof_;
}
void FriendRpcViewUserSimpleInfoReply::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.Prof)
}

// optional sint32 TeamId = 6 [default = -1];
bool FriendRpcViewUserSimpleInfoReply::has_teamid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FriendRpcViewUserSimpleInfoReply::set_has_teamid() {
  _has_bits_[0] |= 0x00000200u;
}
void FriendRpcViewUserSimpleInfoReply::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000200u;
}
void FriendRpcViewUserSimpleInfoReply::clear_teamid() {
  teamid_ = -1;
  clear_has_teamid();
}
::google::protobuf::int32 FriendRpcViewUserSimpleInfoReply::teamid() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.TeamId)
  return teamid_;
}
void FriendRpcViewUserSimpleInfoReply::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.TeamId)
}

// optional sint32 TeamMemberNum = 7 [default = -1];
bool FriendRpcViewUserSimpleInfoReply::has_teammembernum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FriendRpcViewUserSimpleInfoReply::set_has_teammembernum() {
  _has_bits_[0] |= 0x00000400u;
}
void FriendRpcViewUserSimpleInfoReply::clear_has_teammembernum() {
  _has_bits_[0] &= ~0x00000400u;
}
void FriendRpcViewUserSimpleInfoReply::clear_teammembernum() {
  teammembernum_ = -1;
  clear_has_teammembernum();
}
::google::protobuf::int32 FriendRpcViewUserSimpleInfoReply::teammembernum() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.TeamMemberNum)
  return teammembernum_;
}
void FriendRpcViewUserSimpleInfoReply::set_teammembernum(::google::protobuf::int32 value) {
  set_has_teammembernum();
  teammembernum_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.TeamMemberNum)
}

// optional sint32 GuildId = 8 [default = -1];
bool FriendRpcViewUserSimpleInfoReply::has_guildid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void FriendRpcViewUserSimpleInfoReply::set_has_guildid() {
  _has_bits_[0] |= 0x00000800u;
}
void FriendRpcViewUserSimpleInfoReply::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000800u;
}
void FriendRpcViewUserSimpleInfoReply::clear_guildid() {
  guildid_ = -1;
  clear_has_guildid();
}
::google::protobuf::int32 FriendRpcViewUserSimpleInfoReply::guildid() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.GuildId)
  return guildid_;
}
void FriendRpcViewUserSimpleInfoReply::set_guildid(::google::protobuf::int32 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.GuildId)
}

// optional string Signature = 9;
bool FriendRpcViewUserSimpleInfoReply::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FriendRpcViewUserSimpleInfoReply::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
void FriendRpcViewUserSimpleInfoReply::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
void FriendRpcViewUserSimpleInfoReply::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
const ::std::string& FriendRpcViewUserSimpleInfoReply::signature() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.Signature)
  return signature_.GetNoArena();
}
void FriendRpcViewUserSimpleInfoReply::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.Signature)
}
#if LANG_CXX11
void FriendRpcViewUserSimpleInfoReply::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FriendRpcViewUserSimpleInfoReply.Signature)
}
#endif
void FriendRpcViewUserSimpleInfoReply::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendRpcViewUserSimpleInfoReply.Signature)
}
void FriendRpcViewUserSimpleInfoReply::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendRpcViewUserSimpleInfoReply.Signature)
}
::std::string* FriendRpcViewUserSimpleInfoReply::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:FriendRpcViewUserSimpleInfoReply.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FriendRpcViewUserSimpleInfoReply::release_signature() {
  // @@protoc_insertion_point(field_release:FriendRpcViewUserSimpleInfoReply.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FriendRpcViewUserSimpleInfoReply::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:FriendRpcViewUserSimpleInfoReply.Signature)
}

// optional bool Online = 10 [default = false];
bool FriendRpcViewUserSimpleInfoReply::has_online() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FriendRpcViewUserSimpleInfoReply::set_has_online() {
  _has_bits_[0] |= 0x00000008u;
}
void FriendRpcViewUserSimpleInfoReply::clear_has_online() {
  _has_bits_[0] &= ~0x00000008u;
}
void FriendRpcViewUserSimpleInfoReply::clear_online() {
  online_ = false;
  clear_has_online();
}
bool FriendRpcViewUserSimpleInfoReply::online() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.Online)
  return online_;
}
void FriendRpcViewUserSimpleInfoReply::set_online(bool value) {
  set_has_online();
  online_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.Online)
}

// optional sint32 GoodFeeling = 11 [default = 0];
bool FriendRpcViewUserSimpleInfoReply::has_goodfeeling() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FriendRpcViewUserSimpleInfoReply::set_has_goodfeeling() {
  _has_bits_[0] |= 0x00000010u;
}
void FriendRpcViewUserSimpleInfoReply::clear_has_goodfeeling() {
  _has_bits_[0] &= ~0x00000010u;
}
void FriendRpcViewUserSimpleInfoReply::clear_goodfeeling() {
  goodfeeling_ = 0;
  clear_has_goodfeeling();
}
::google::protobuf::int32 FriendRpcViewUserSimpleInfoReply::goodfeeling() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.GoodFeeling)
  return goodfeeling_;
}
void FriendRpcViewUserSimpleInfoReply::set_goodfeeling(::google::protobuf::int32 value) {
  set_has_goodfeeling();
  goodfeeling_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.GoodFeeling)
}

// optional string GuildName = 12;
bool FriendRpcViewUserSimpleInfoReply::has_guildname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FriendRpcViewUserSimpleInfoReply::set_has_guildname() {
  _has_bits_[0] |= 0x00000004u;
}
void FriendRpcViewUserSimpleInfoReply::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000004u;
}
void FriendRpcViewUserSimpleInfoReply::clear_guildname() {
  guildname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guildname();
}
const ::std::string& FriendRpcViewUserSimpleInfoReply::guildname() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.GuildName)
  return guildname_.GetNoArena();
}
void FriendRpcViewUserSimpleInfoReply::set_guildname(const ::std::string& value) {
  set_has_guildname();
  guildname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.GuildName)
}
#if LANG_CXX11
void FriendRpcViewUserSimpleInfoReply::set_guildname(::std::string&& value) {
  set_has_guildname();
  guildname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FriendRpcViewUserSimpleInfoReply.GuildName)
}
#endif
void FriendRpcViewUserSimpleInfoReply::set_guildname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guildname();
  guildname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendRpcViewUserSimpleInfoReply.GuildName)
}
void FriendRpcViewUserSimpleInfoReply::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  guildname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendRpcViewUserSimpleInfoReply.GuildName)
}
::std::string* FriendRpcViewUserSimpleInfoReply::mutable_guildname() {
  set_has_guildname();
  // @@protoc_insertion_point(field_mutable:FriendRpcViewUserSimpleInfoReply.GuildName)
  return guildname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FriendRpcViewUserSimpleInfoReply::release_guildname() {
  // @@protoc_insertion_point(field_release:FriendRpcViewUserSimpleInfoReply.GuildName)
  clear_has_guildname();
  return guildname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FriendRpcViewUserSimpleInfoReply::set_allocated_guildname(::std::string* guildname) {
  if (guildname != NULL) {
    set_has_guildname();
  } else {
    clear_has_guildname();
  }
  guildname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guildname);
  // @@protoc_insertion_point(field_set_allocated:FriendRpcViewUserSimpleInfoReply.GuildName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendRpcOnlineOfflineNotify::kUserIdFieldNumber;
const int FriendRpcOnlineOfflineNotify::kUserNameFieldNumber;
const int FriendRpcOnlineOfflineNotify::kOnlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendRpcOnlineOfflineNotify::FriendRpcOnlineOfflineNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FriendRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendRpcOnlineOfflineNotify)
}
FriendRpcOnlineOfflineNotify::FriendRpcOnlineOfflineNotify(const FriendRpcOnlineOfflineNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ::memcpy(&online_, &from.online_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&online_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:FriendRpcOnlineOfflineNotify)
}

void FriendRpcOnlineOfflineNotify::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  online_ = false;
  userid_ = GOOGLE_LONGLONG(-1);
}

FriendRpcOnlineOfflineNotify::~FriendRpcOnlineOfflineNotify() {
  // @@protoc_insertion_point(destructor:FriendRpcOnlineOfflineNotify)
  SharedDtor();
}

void FriendRpcOnlineOfflineNotify::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendRpcOnlineOfflineNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRpcOnlineOfflineNotify::descriptor() {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendRpcOnlineOfflineNotify& FriendRpcOnlineOfflineNotify::default_instance() {
  protobuf_FriendRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendRpcOnlineOfflineNotify* FriendRpcOnlineOfflineNotify::New(::google::protobuf::Arena* arena) const {
  FriendRpcOnlineOfflineNotify* n = new FriendRpcOnlineOfflineNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendRpcOnlineOfflineNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendRpcOnlineOfflineNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_username()) {
    GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*username_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    online_ = false;
    userid_ = GOOGLE_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendRpcOnlineOfflineNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendRpcOnlineOfflineNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FriendRpcOnlineOfflineNotify.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool Online = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendRpcOnlineOfflineNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendRpcOnlineOfflineNotify)
  return false;
#undef DO_
}

void FriendRpcOnlineOfflineNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendRpcOnlineOfflineNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->userid(), output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendRpcOnlineOfflineNotify.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional bool Online = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->online(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendRpcOnlineOfflineNotify)
}

::google::protobuf::uint8* FriendRpcOnlineOfflineNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FriendRpcOnlineOfflineNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->userid(), target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FriendRpcOnlineOfflineNotify.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional bool Online = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->online(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendRpcOnlineOfflineNotify)
  return target;
}

size_t FriendRpcOnlineOfflineNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FriendRpcOnlineOfflineNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional bool Online = 3 [default = false];
    if (has_online()) {
      total_size += 1 + 1;
    }

    // optional sint64 UserId = 1 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRpcOnlineOfflineNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendRpcOnlineOfflineNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendRpcOnlineOfflineNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendRpcOnlineOfflineNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendRpcOnlineOfflineNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendRpcOnlineOfflineNotify)
    MergeFrom(*source);
  }
}

void FriendRpcOnlineOfflineNotify::MergeFrom(const FriendRpcOnlineOfflineNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendRpcOnlineOfflineNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      online_ = from.online_;
    }
    if (cached_has_bits & 0x00000004u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FriendRpcOnlineOfflineNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendRpcOnlineOfflineNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRpcOnlineOfflineNotify::CopyFrom(const FriendRpcOnlineOfflineNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendRpcOnlineOfflineNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRpcOnlineOfflineNotify::IsInitialized() const {
  return true;
}

void FriendRpcOnlineOfflineNotify::Swap(FriendRpcOnlineOfflineNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendRpcOnlineOfflineNotify::InternalSwap(FriendRpcOnlineOfflineNotify* other) {
  using std::swap;
  username_.Swap(&other->username_);
  swap(online_, other->online_);
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendRpcOnlineOfflineNotify::GetMetadata() const {
  protobuf_FriendRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FriendRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendRpcOnlineOfflineNotify

// optional sint64 UserId = 1 [default = -1];
bool FriendRpcOnlineOfflineNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FriendRpcOnlineOfflineNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
void FriendRpcOnlineOfflineNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
void FriendRpcOnlineOfflineNotify::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 FriendRpcOnlineOfflineNotify::userid() const {
  // @@protoc_insertion_point(field_get:FriendRpcOnlineOfflineNotify.UserId)
  return userid_;
}
void FriendRpcOnlineOfflineNotify::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcOnlineOfflineNotify.UserId)
}

// optional string UserName = 2;
bool FriendRpcOnlineOfflineNotify::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FriendRpcOnlineOfflineNotify::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void FriendRpcOnlineOfflineNotify::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void FriendRpcOnlineOfflineNotify::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& FriendRpcOnlineOfflineNotify::username() const {
  // @@protoc_insertion_point(field_get:FriendRpcOnlineOfflineNotify.UserName)
  return username_.GetNoArena();
}
void FriendRpcOnlineOfflineNotify::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendRpcOnlineOfflineNotify.UserName)
}
#if LANG_CXX11
void FriendRpcOnlineOfflineNotify::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FriendRpcOnlineOfflineNotify.UserName)
}
#endif
void FriendRpcOnlineOfflineNotify::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendRpcOnlineOfflineNotify.UserName)
}
void FriendRpcOnlineOfflineNotify::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendRpcOnlineOfflineNotify.UserName)
}
::std::string* FriendRpcOnlineOfflineNotify::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FriendRpcOnlineOfflineNotify.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FriendRpcOnlineOfflineNotify::release_username() {
  // @@protoc_insertion_point(field_release:FriendRpcOnlineOfflineNotify.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FriendRpcOnlineOfflineNotify::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FriendRpcOnlineOfflineNotify.UserName)
}

// optional bool Online = 3 [default = false];
bool FriendRpcOnlineOfflineNotify::has_online() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FriendRpcOnlineOfflineNotify::set_has_online() {
  _has_bits_[0] |= 0x00000002u;
}
void FriendRpcOnlineOfflineNotify::clear_has_online() {
  _has_bits_[0] &= ~0x00000002u;
}
void FriendRpcOnlineOfflineNotify::clear_online() {
  online_ = false;
  clear_has_online();
}
bool FriendRpcOnlineOfflineNotify::online() const {
  // @@protoc_insertion_point(field_get:FriendRpcOnlineOfflineNotify.Online)
  return online_;
}
void FriendRpcOnlineOfflineNotify::set_online(bool value) {
  set_has_online();
  online_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcOnlineOfflineNotify.Online)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
