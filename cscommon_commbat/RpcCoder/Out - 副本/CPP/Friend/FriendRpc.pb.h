// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FriendRpc.proto

#ifndef PROTOBUF_FriendRpc_2eproto__INCLUDED
#define PROTOBUF_FriendRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)
class FriendRpcAddBlackListAsk;
class FriendRpcAddBlackListAskDefaultTypeInternal;
extern FriendRpcAddBlackListAskDefaultTypeInternal _FriendRpcAddBlackListAsk_default_instance_;
class FriendRpcAddBlackListReply;
class FriendRpcAddBlackListReplyDefaultTypeInternal;
extern FriendRpcAddBlackListReplyDefaultTypeInternal _FriendRpcAddBlackListReply_default_instance_;
class FriendRpcAddContactAsk;
class FriendRpcAddContactAskDefaultTypeInternal;
extern FriendRpcAddContactAskDefaultTypeInternal _FriendRpcAddContactAsk_default_instance_;
class FriendRpcAddContactReply;
class FriendRpcAddContactReplyDefaultTypeInternal;
extern FriendRpcAddContactReplyDefaultTypeInternal _FriendRpcAddContactReply_default_instance_;
class FriendRpcAddFriendAsk;
class FriendRpcAddFriendAskDefaultTypeInternal;
extern FriendRpcAddFriendAskDefaultTypeInternal _FriendRpcAddFriendAsk_default_instance_;
class FriendRpcAddFriendReply;
class FriendRpcAddFriendReplyDefaultTypeInternal;
extern FriendRpcAddFriendReplyDefaultTypeInternal _FriendRpcAddFriendReply_default_instance_;
class FriendRpcDelBlackListAsk;
class FriendRpcDelBlackListAskDefaultTypeInternal;
extern FriendRpcDelBlackListAskDefaultTypeInternal _FriendRpcDelBlackListAsk_default_instance_;
class FriendRpcDelBlackListReply;
class FriendRpcDelBlackListReplyDefaultTypeInternal;
extern FriendRpcDelBlackListReplyDefaultTypeInternal _FriendRpcDelBlackListReply_default_instance_;
class FriendRpcDelContactAsk;
class FriendRpcDelContactAskDefaultTypeInternal;
extern FriendRpcDelContactAskDefaultTypeInternal _FriendRpcDelContactAsk_default_instance_;
class FriendRpcDelContactReply;
class FriendRpcDelContactReplyDefaultTypeInternal;
extern FriendRpcDelContactReplyDefaultTypeInternal _FriendRpcDelContactReply_default_instance_;
class FriendRpcDelFriendAsk;
class FriendRpcDelFriendAskDefaultTypeInternal;
extern FriendRpcDelFriendAskDefaultTypeInternal _FriendRpcDelFriendAsk_default_instance_;
class FriendRpcDelFriendReply;
class FriendRpcDelFriendReplyDefaultTypeInternal;
extern FriendRpcDelFriendReplyDefaultTypeInternal _FriendRpcDelFriendReply_default_instance_;
class FriendRpcOnlineOfflineNotify;
class FriendRpcOnlineOfflineNotifyDefaultTypeInternal;
extern FriendRpcOnlineOfflineNotifyDefaultTypeInternal _FriendRpcOnlineOfflineNotify_default_instance_;
class FriendRpcRecommendAsk;
class FriendRpcRecommendAskDefaultTypeInternal;
extern FriendRpcRecommendAskDefaultTypeInternal _FriendRpcRecommendAsk_default_instance_;
class FriendRpcRecommendObj;
class FriendRpcRecommendObjDefaultTypeInternal;
extern FriendRpcRecommendObjDefaultTypeInternal _FriendRpcRecommendObj_default_instance_;
class FriendRpcRecommendReply;
class FriendRpcRecommendReplyDefaultTypeInternal;
extern FriendRpcRecommendReplyDefaultTypeInternal _FriendRpcRecommendReply_default_instance_;
class FriendRpcSearchPlayerAsk;
class FriendRpcSearchPlayerAskDefaultTypeInternal;
extern FriendRpcSearchPlayerAskDefaultTypeInternal _FriendRpcSearchPlayerAsk_default_instance_;
class FriendRpcSearchPlayerReply;
class FriendRpcSearchPlayerReplyDefaultTypeInternal;
extern FriendRpcSearchPlayerReplyDefaultTypeInternal _FriendRpcSearchPlayerReply_default_instance_;
class FriendRpcSyncFriendDataAsk;
class FriendRpcSyncFriendDataAskDefaultTypeInternal;
extern FriendRpcSyncFriendDataAskDefaultTypeInternal _FriendRpcSyncFriendDataAsk_default_instance_;
class FriendRpcSyncFriendDataReply;
class FriendRpcSyncFriendDataReplyDefaultTypeInternal;
extern FriendRpcSyncFriendDataReplyDefaultTypeInternal _FriendRpcSyncFriendDataReply_default_instance_;
class FriendRpcViewUserSimpleInfoAsk;
class FriendRpcViewUserSimpleInfoAskDefaultTypeInternal;
extern FriendRpcViewUserSimpleInfoAskDefaultTypeInternal _FriendRpcViewUserSimpleInfoAsk_default_instance_;
class FriendRpcViewUserSimpleInfoReply;
class FriendRpcViewUserSimpleInfoReplyDefaultTypeInternal;
extern FriendRpcViewUserSimpleInfoReplyDefaultTypeInternal _FriendRpcViewUserSimpleInfoReply_default_instance_;

namespace protobuf_FriendRpc_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_FriendRpc_2eproto

// ===================================================================

class FriendRpcSyncFriendDataAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcSyncFriendDataAsk) */ {
 public:
  FriendRpcSyncFriendDataAsk();
  virtual ~FriendRpcSyncFriendDataAsk();

  FriendRpcSyncFriendDataAsk(const FriendRpcSyncFriendDataAsk& from);

  inline FriendRpcSyncFriendDataAsk& operator=(const FriendRpcSyncFriendDataAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcSyncFriendDataAsk(FriendRpcSyncFriendDataAsk&& from) noexcept
    : FriendRpcSyncFriendDataAsk() {
    *this = ::std::move(from);
  }

  inline FriendRpcSyncFriendDataAsk& operator=(FriendRpcSyncFriendDataAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcSyncFriendDataAsk& default_instance();

  static inline const FriendRpcSyncFriendDataAsk* internal_default_instance() {
    return reinterpret_cast<const FriendRpcSyncFriendDataAsk*>(
               &_FriendRpcSyncFriendDataAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FriendRpcSyncFriendDataAsk* other);
  friend void swap(FriendRpcSyncFriendDataAsk& a, FriendRpcSyncFriendDataAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcSyncFriendDataAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcSyncFriendDataAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcSyncFriendDataAsk& from);
  void MergeFrom(const FriendRpcSyncFriendDataAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcSyncFriendDataAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:FriendRpcSyncFriendDataAsk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRpcSyncFriendDataReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcSyncFriendDataReply) */ {
 public:
  FriendRpcSyncFriendDataReply();
  virtual ~FriendRpcSyncFriendDataReply();

  FriendRpcSyncFriendDataReply(const FriendRpcSyncFriendDataReply& from);

  inline FriendRpcSyncFriendDataReply& operator=(const FriendRpcSyncFriendDataReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcSyncFriendDataReply(FriendRpcSyncFriendDataReply&& from) noexcept
    : FriendRpcSyncFriendDataReply() {
    *this = ::std::move(from);
  }

  inline FriendRpcSyncFriendDataReply& operator=(FriendRpcSyncFriendDataReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcSyncFriendDataReply& default_instance();

  static inline const FriendRpcSyncFriendDataReply* internal_default_instance() {
    return reinterpret_cast<const FriendRpcSyncFriendDataReply*>(
               &_FriendRpcSyncFriendDataReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FriendRpcSyncFriendDataReply* other);
  friend void swap(FriendRpcSyncFriendDataReply& a, FriendRpcSyncFriendDataReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcSyncFriendDataReply* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcSyncFriendDataReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcSyncFriendDataReply& from);
  void MergeFrom(const FriendRpcSyncFriendDataReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcSyncFriendDataReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FriendRpcSyncFriendDataReply)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRpcAddFriendAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcAddFriendAsk) */ {
 public:
  FriendRpcAddFriendAsk();
  virtual ~FriendRpcAddFriendAsk();

  FriendRpcAddFriendAsk(const FriendRpcAddFriendAsk& from);

  inline FriendRpcAddFriendAsk& operator=(const FriendRpcAddFriendAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcAddFriendAsk(FriendRpcAddFriendAsk&& from) noexcept
    : FriendRpcAddFriendAsk() {
    *this = ::std::move(from);
  }

  inline FriendRpcAddFriendAsk& operator=(FriendRpcAddFriendAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcAddFriendAsk& default_instance();

  static inline const FriendRpcAddFriendAsk* internal_default_instance() {
    return reinterpret_cast<const FriendRpcAddFriendAsk*>(
               &_FriendRpcAddFriendAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(FriendRpcAddFriendAsk* other);
  friend void swap(FriendRpcAddFriendAsk& a, FriendRpcAddFriendAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcAddFriendAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcAddFriendAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcAddFriendAsk& from);
  void MergeFrom(const FriendRpcAddFriendAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcAddFriendAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 UserId = 1 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:FriendRpcAddFriendAsk)
 private:
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRpcAddFriendReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcAddFriendReply) */ {
 public:
  FriendRpcAddFriendReply();
  virtual ~FriendRpcAddFriendReply();

  FriendRpcAddFriendReply(const FriendRpcAddFriendReply& from);

  inline FriendRpcAddFriendReply& operator=(const FriendRpcAddFriendReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcAddFriendReply(FriendRpcAddFriendReply&& from) noexcept
    : FriendRpcAddFriendReply() {
    *this = ::std::move(from);
  }

  inline FriendRpcAddFriendReply& operator=(FriendRpcAddFriendReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcAddFriendReply& default_instance();

  static inline const FriendRpcAddFriendReply* internal_default_instance() {
    return reinterpret_cast<const FriendRpcAddFriendReply*>(
               &_FriendRpcAddFriendReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(FriendRpcAddFriendReply* other);
  friend void swap(FriendRpcAddFriendReply& a, FriendRpcAddFriendReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcAddFriendReply* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcAddFriendReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcAddFriendReply& from);
  void MergeFrom(const FriendRpcAddFriendReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcAddFriendReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FriendRpcAddFriendReply)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRpcDelFriendAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcDelFriendAsk) */ {
 public:
  FriendRpcDelFriendAsk();
  virtual ~FriendRpcDelFriendAsk();

  FriendRpcDelFriendAsk(const FriendRpcDelFriendAsk& from);

  inline FriendRpcDelFriendAsk& operator=(const FriendRpcDelFriendAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcDelFriendAsk(FriendRpcDelFriendAsk&& from) noexcept
    : FriendRpcDelFriendAsk() {
    *this = ::std::move(from);
  }

  inline FriendRpcDelFriendAsk& operator=(FriendRpcDelFriendAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcDelFriendAsk& default_instance();

  static inline const FriendRpcDelFriendAsk* internal_default_instance() {
    return reinterpret_cast<const FriendRpcDelFriendAsk*>(
               &_FriendRpcDelFriendAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(FriendRpcDelFriendAsk* other);
  friend void swap(FriendRpcDelFriendAsk& a, FriendRpcDelFriendAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcDelFriendAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcDelFriendAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcDelFriendAsk& from);
  void MergeFrom(const FriendRpcDelFriendAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcDelFriendAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sint64 UserId = 1;
  int userid_size() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid(int index) const;
  void set_userid(int index, ::google::protobuf::int64 value);
  void add_userid(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      userid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_userid();

  // @@protoc_insertion_point(class_scope:FriendRpcDelFriendAsk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > userid_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRpcDelFriendReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcDelFriendReply) */ {
 public:
  FriendRpcDelFriendReply();
  virtual ~FriendRpcDelFriendReply();

  FriendRpcDelFriendReply(const FriendRpcDelFriendReply& from);

  inline FriendRpcDelFriendReply& operator=(const FriendRpcDelFriendReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcDelFriendReply(FriendRpcDelFriendReply&& from) noexcept
    : FriendRpcDelFriendReply() {
    *this = ::std::move(from);
  }

  inline FriendRpcDelFriendReply& operator=(FriendRpcDelFriendReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcDelFriendReply& default_instance();

  static inline const FriendRpcDelFriendReply* internal_default_instance() {
    return reinterpret_cast<const FriendRpcDelFriendReply*>(
               &_FriendRpcDelFriendReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(FriendRpcDelFriendReply* other);
  friend void swap(FriendRpcDelFriendReply& a, FriendRpcDelFriendReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcDelFriendReply* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcDelFriendReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcDelFriendReply& from);
  void MergeFrom(const FriendRpcDelFriendReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcDelFriendReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FriendRpcDelFriendReply)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRpcAddBlackListAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcAddBlackListAsk) */ {
 public:
  FriendRpcAddBlackListAsk();
  virtual ~FriendRpcAddBlackListAsk();

  FriendRpcAddBlackListAsk(const FriendRpcAddBlackListAsk& from);

  inline FriendRpcAddBlackListAsk& operator=(const FriendRpcAddBlackListAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcAddBlackListAsk(FriendRpcAddBlackListAsk&& from) noexcept
    : FriendRpcAddBlackListAsk() {
    *this = ::std::move(from);
  }

  inline FriendRpcAddBlackListAsk& operator=(FriendRpcAddBlackListAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcAddBlackListAsk& default_instance();

  static inline const FriendRpcAddBlackListAsk* internal_default_instance() {
    return reinterpret_cast<const FriendRpcAddBlackListAsk*>(
               &_FriendRpcAddBlackListAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(FriendRpcAddBlackListAsk* other);
  friend void swap(FriendRpcAddBlackListAsk& a, FriendRpcAddBlackListAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcAddBlackListAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcAddBlackListAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcAddBlackListAsk& from);
  void MergeFrom(const FriendRpcAddBlackListAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcAddBlackListAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 UserId = 1 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:FriendRpcAddBlackListAsk)
 private:
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRpcAddBlackListReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcAddBlackListReply) */ {
 public:
  FriendRpcAddBlackListReply();
  virtual ~FriendRpcAddBlackListReply();

  FriendRpcAddBlackListReply(const FriendRpcAddBlackListReply& from);

  inline FriendRpcAddBlackListReply& operator=(const FriendRpcAddBlackListReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcAddBlackListReply(FriendRpcAddBlackListReply&& from) noexcept
    : FriendRpcAddBlackListReply() {
    *this = ::std::move(from);
  }

  inline FriendRpcAddBlackListReply& operator=(FriendRpcAddBlackListReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcAddBlackListReply& default_instance();

  static inline const FriendRpcAddBlackListReply* internal_default_instance() {
    return reinterpret_cast<const FriendRpcAddBlackListReply*>(
               &_FriendRpcAddBlackListReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(FriendRpcAddBlackListReply* other);
  friend void swap(FriendRpcAddBlackListReply& a, FriendRpcAddBlackListReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcAddBlackListReply* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcAddBlackListReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcAddBlackListReply& from);
  void MergeFrom(const FriendRpcAddBlackListReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcAddBlackListReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FriendRpcAddBlackListReply)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRpcDelBlackListAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcDelBlackListAsk) */ {
 public:
  FriendRpcDelBlackListAsk();
  virtual ~FriendRpcDelBlackListAsk();

  FriendRpcDelBlackListAsk(const FriendRpcDelBlackListAsk& from);

  inline FriendRpcDelBlackListAsk& operator=(const FriendRpcDelBlackListAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcDelBlackListAsk(FriendRpcDelBlackListAsk&& from) noexcept
    : FriendRpcDelBlackListAsk() {
    *this = ::std::move(from);
  }

  inline FriendRpcDelBlackListAsk& operator=(FriendRpcDelBlackListAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcDelBlackListAsk& default_instance();

  static inline const FriendRpcDelBlackListAsk* internal_default_instance() {
    return reinterpret_cast<const FriendRpcDelBlackListAsk*>(
               &_FriendRpcDelBlackListAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(FriendRpcDelBlackListAsk* other);
  friend void swap(FriendRpcDelBlackListAsk& a, FriendRpcDelBlackListAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcDelBlackListAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcDelBlackListAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcDelBlackListAsk& from);
  void MergeFrom(const FriendRpcDelBlackListAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcDelBlackListAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 UserId = 1 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:FriendRpcDelBlackListAsk)
 private:
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRpcDelBlackListReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcDelBlackListReply) */ {
 public:
  FriendRpcDelBlackListReply();
  virtual ~FriendRpcDelBlackListReply();

  FriendRpcDelBlackListReply(const FriendRpcDelBlackListReply& from);

  inline FriendRpcDelBlackListReply& operator=(const FriendRpcDelBlackListReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcDelBlackListReply(FriendRpcDelBlackListReply&& from) noexcept
    : FriendRpcDelBlackListReply() {
    *this = ::std::move(from);
  }

  inline FriendRpcDelBlackListReply& operator=(FriendRpcDelBlackListReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcDelBlackListReply& default_instance();

  static inline const FriendRpcDelBlackListReply* internal_default_instance() {
    return reinterpret_cast<const FriendRpcDelBlackListReply*>(
               &_FriendRpcDelBlackListReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(FriendRpcDelBlackListReply* other);
  friend void swap(FriendRpcDelBlackListReply& a, FriendRpcDelBlackListReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcDelBlackListReply* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcDelBlackListReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcDelBlackListReply& from);
  void MergeFrom(const FriendRpcDelBlackListReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcDelBlackListReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FriendRpcDelBlackListReply)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRpcAddContactAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcAddContactAsk) */ {
 public:
  FriendRpcAddContactAsk();
  virtual ~FriendRpcAddContactAsk();

  FriendRpcAddContactAsk(const FriendRpcAddContactAsk& from);

  inline FriendRpcAddContactAsk& operator=(const FriendRpcAddContactAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcAddContactAsk(FriendRpcAddContactAsk&& from) noexcept
    : FriendRpcAddContactAsk() {
    *this = ::std::move(from);
  }

  inline FriendRpcAddContactAsk& operator=(FriendRpcAddContactAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcAddContactAsk& default_instance();

  static inline const FriendRpcAddContactAsk* internal_default_instance() {
    return reinterpret_cast<const FriendRpcAddContactAsk*>(
               &_FriendRpcAddContactAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(FriendRpcAddContactAsk* other);
  friend void swap(FriendRpcAddContactAsk& a, FriendRpcAddContactAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcAddContactAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcAddContactAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcAddContactAsk& from);
  void MergeFrom(const FriendRpcAddContactAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcAddContactAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 UserId = 1 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:FriendRpcAddContactAsk)
 private:
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRpcAddContactReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcAddContactReply) */ {
 public:
  FriendRpcAddContactReply();
  virtual ~FriendRpcAddContactReply();

  FriendRpcAddContactReply(const FriendRpcAddContactReply& from);

  inline FriendRpcAddContactReply& operator=(const FriendRpcAddContactReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcAddContactReply(FriendRpcAddContactReply&& from) noexcept
    : FriendRpcAddContactReply() {
    *this = ::std::move(from);
  }

  inline FriendRpcAddContactReply& operator=(FriendRpcAddContactReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcAddContactReply& default_instance();

  static inline const FriendRpcAddContactReply* internal_default_instance() {
    return reinterpret_cast<const FriendRpcAddContactReply*>(
               &_FriendRpcAddContactReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(FriendRpcAddContactReply* other);
  friend void swap(FriendRpcAddContactReply& a, FriendRpcAddContactReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcAddContactReply* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcAddContactReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcAddContactReply& from);
  void MergeFrom(const FriendRpcAddContactReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcAddContactReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FriendRpcAddContactReply)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRpcDelContactAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcDelContactAsk) */ {
 public:
  FriendRpcDelContactAsk();
  virtual ~FriendRpcDelContactAsk();

  FriendRpcDelContactAsk(const FriendRpcDelContactAsk& from);

  inline FriendRpcDelContactAsk& operator=(const FriendRpcDelContactAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcDelContactAsk(FriendRpcDelContactAsk&& from) noexcept
    : FriendRpcDelContactAsk() {
    *this = ::std::move(from);
  }

  inline FriendRpcDelContactAsk& operator=(FriendRpcDelContactAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcDelContactAsk& default_instance();

  static inline const FriendRpcDelContactAsk* internal_default_instance() {
    return reinterpret_cast<const FriendRpcDelContactAsk*>(
               &_FriendRpcDelContactAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(FriendRpcDelContactAsk* other);
  friend void swap(FriendRpcDelContactAsk& a, FriendRpcDelContactAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcDelContactAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcDelContactAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcDelContactAsk& from);
  void MergeFrom(const FriendRpcDelContactAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcDelContactAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 UserId = 1 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:FriendRpcDelContactAsk)
 private:
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRpcDelContactReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcDelContactReply) */ {
 public:
  FriendRpcDelContactReply();
  virtual ~FriendRpcDelContactReply();

  FriendRpcDelContactReply(const FriendRpcDelContactReply& from);

  inline FriendRpcDelContactReply& operator=(const FriendRpcDelContactReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcDelContactReply(FriendRpcDelContactReply&& from) noexcept
    : FriendRpcDelContactReply() {
    *this = ::std::move(from);
  }

  inline FriendRpcDelContactReply& operator=(FriendRpcDelContactReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcDelContactReply& default_instance();

  static inline const FriendRpcDelContactReply* internal_default_instance() {
    return reinterpret_cast<const FriendRpcDelContactReply*>(
               &_FriendRpcDelContactReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(FriendRpcDelContactReply* other);
  friend void swap(FriendRpcDelContactReply& a, FriendRpcDelContactReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcDelContactReply* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcDelContactReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcDelContactReply& from);
  void MergeFrom(const FriendRpcDelContactReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcDelContactReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FriendRpcDelContactReply)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRpcSearchPlayerAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcSearchPlayerAsk) */ {
 public:
  FriendRpcSearchPlayerAsk();
  virtual ~FriendRpcSearchPlayerAsk();

  FriendRpcSearchPlayerAsk(const FriendRpcSearchPlayerAsk& from);

  inline FriendRpcSearchPlayerAsk& operator=(const FriendRpcSearchPlayerAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcSearchPlayerAsk(FriendRpcSearchPlayerAsk&& from) noexcept
    : FriendRpcSearchPlayerAsk() {
    *this = ::std::move(from);
  }

  inline FriendRpcSearchPlayerAsk& operator=(FriendRpcSearchPlayerAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcSearchPlayerAsk& default_instance();

  static inline const FriendRpcSearchPlayerAsk* internal_default_instance() {
    return reinterpret_cast<const FriendRpcSearchPlayerAsk*>(
               &_FriendRpcSearchPlayerAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(FriendRpcSearchPlayerAsk* other);
  friend void swap(FriendRpcSearchPlayerAsk& a, FriendRpcSearchPlayerAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcSearchPlayerAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcSearchPlayerAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcSearchPlayerAsk& from);
  void MergeFrom(const FriendRpcSearchPlayerAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcSearchPlayerAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string SearchString = 1;
  bool has_searchstring() const;
  void clear_searchstring();
  static const int kSearchStringFieldNumber = 1;
  const ::std::string& searchstring() const;
  void set_searchstring(const ::std::string& value);
  #if LANG_CXX11
  void set_searchstring(::std::string&& value);
  #endif
  void set_searchstring(const char* value);
  void set_searchstring(const char* value, size_t size);
  ::std::string* mutable_searchstring();
  ::std::string* release_searchstring();
  void set_allocated_searchstring(::std::string* searchstring);

  // @@protoc_insertion_point(class_scope:FriendRpcSearchPlayerAsk)
 private:
  void set_has_searchstring();
  void clear_has_searchstring();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr searchstring_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRpcSearchPlayerReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcSearchPlayerReply) */ {
 public:
  FriendRpcSearchPlayerReply();
  virtual ~FriendRpcSearchPlayerReply();

  FriendRpcSearchPlayerReply(const FriendRpcSearchPlayerReply& from);

  inline FriendRpcSearchPlayerReply& operator=(const FriendRpcSearchPlayerReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcSearchPlayerReply(FriendRpcSearchPlayerReply&& from) noexcept
    : FriendRpcSearchPlayerReply() {
    *this = ::std::move(from);
  }

  inline FriendRpcSearchPlayerReply& operator=(FriendRpcSearchPlayerReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcSearchPlayerReply& default_instance();

  static inline const FriendRpcSearchPlayerReply* internal_default_instance() {
    return reinterpret_cast<const FriendRpcSearchPlayerReply*>(
               &_FriendRpcSearchPlayerReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(FriendRpcSearchPlayerReply* other);
  friend void swap(FriendRpcSearchPlayerReply& a, FriendRpcSearchPlayerReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcSearchPlayerReply* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcSearchPlayerReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcSearchPlayerReply& from);
  void MergeFrom(const FriendRpcSearchPlayerReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcSearchPlayerReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 3;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional sint32 Prof = 5 [default = -1];
  bool has_prof() const;
  void clear_prof();
  static const int kProfFieldNumber = 5;
  ::google::protobuf::int32 prof() const;
  void set_prof(::google::protobuf::int32 value);

  // optional sint64 UserId = 2 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional sint32 Level = 4 [default = -1];
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 4;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FriendRpcSearchPlayerReply)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_userid();
  void clear_has_userid();
  void set_has_username();
  void clear_has_username();
  void set_has_level();
  void clear_has_level();
  void set_has_prof();
  void clear_has_prof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 level_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRpcRecommendObj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcRecommendObj) */ {
 public:
  FriendRpcRecommendObj();
  virtual ~FriendRpcRecommendObj();

  FriendRpcRecommendObj(const FriendRpcRecommendObj& from);

  inline FriendRpcRecommendObj& operator=(const FriendRpcRecommendObj& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcRecommendObj(FriendRpcRecommendObj&& from) noexcept
    : FriendRpcRecommendObj() {
    *this = ::std::move(from);
  }

  inline FriendRpcRecommendObj& operator=(FriendRpcRecommendObj&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcRecommendObj& default_instance();

  static inline const FriendRpcRecommendObj* internal_default_instance() {
    return reinterpret_cast<const FriendRpcRecommendObj*>(
               &_FriendRpcRecommendObj_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(FriendRpcRecommendObj* other);
  friend void swap(FriendRpcRecommendObj& a, FriendRpcRecommendObj& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcRecommendObj* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcRecommendObj* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcRecommendObj& from);
  void MergeFrom(const FriendRpcRecommendObj& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcRecommendObj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional sint64 UserId = 1 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // optional sint32 Level = 3 [default = -1];
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional sint32 Prof = 4 [default = -1];
  bool has_prof() const;
  void clear_prof();
  static const int kProfFieldNumber = 4;
  ::google::protobuf::int32 prof() const;
  void set_prof(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FriendRpcRecommendObj)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_username();
  void clear_has_username();
  void set_has_level();
  void clear_has_level();
  void set_has_prof();
  void clear_has_prof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 prof_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRpcRecommendAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcRecommendAsk) */ {
 public:
  FriendRpcRecommendAsk();
  virtual ~FriendRpcRecommendAsk();

  FriendRpcRecommendAsk(const FriendRpcRecommendAsk& from);

  inline FriendRpcRecommendAsk& operator=(const FriendRpcRecommendAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcRecommendAsk(FriendRpcRecommendAsk&& from) noexcept
    : FriendRpcRecommendAsk() {
    *this = ::std::move(from);
  }

  inline FriendRpcRecommendAsk& operator=(FriendRpcRecommendAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcRecommendAsk& default_instance();

  static inline const FriendRpcRecommendAsk* internal_default_instance() {
    return reinterpret_cast<const FriendRpcRecommendAsk*>(
               &_FriendRpcRecommendAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(FriendRpcRecommendAsk* other);
  friend void swap(FriendRpcRecommendAsk& a, FriendRpcRecommendAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcRecommendAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcRecommendAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcRecommendAsk& from);
  void MergeFrom(const FriendRpcRecommendAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcRecommendAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:FriendRpcRecommendAsk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRpcRecommendReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcRecommendReply) */ {
 public:
  FriendRpcRecommendReply();
  virtual ~FriendRpcRecommendReply();

  FriendRpcRecommendReply(const FriendRpcRecommendReply& from);

  inline FriendRpcRecommendReply& operator=(const FriendRpcRecommendReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcRecommendReply(FriendRpcRecommendReply&& from) noexcept
    : FriendRpcRecommendReply() {
    *this = ::std::move(from);
  }

  inline FriendRpcRecommendReply& operator=(FriendRpcRecommendReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcRecommendReply& default_instance();

  static inline const FriendRpcRecommendReply* internal_default_instance() {
    return reinterpret_cast<const FriendRpcRecommendReply*>(
               &_FriendRpcRecommendReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(FriendRpcRecommendReply* other);
  friend void swap(FriendRpcRecommendReply& a, FriendRpcRecommendReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcRecommendReply* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcRecommendReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcRecommendReply& from);
  void MergeFrom(const FriendRpcRecommendReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcRecommendReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FriendRpcRecommendObj RecommendList = 2;
  int recommendlist_size() const;
  void clear_recommendlist();
  static const int kRecommendListFieldNumber = 2;
  const ::FriendRpcRecommendObj& recommendlist(int index) const;
  ::FriendRpcRecommendObj* mutable_recommendlist(int index);
  ::FriendRpcRecommendObj* add_recommendlist();
  ::google::protobuf::RepeatedPtrField< ::FriendRpcRecommendObj >*
      mutable_recommendlist();
  const ::google::protobuf::RepeatedPtrField< ::FriendRpcRecommendObj >&
      recommendlist() const;

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FriendRpcRecommendReply)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FriendRpcRecommendObj > recommendlist_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRpcViewUserSimpleInfoAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcViewUserSimpleInfoAsk) */ {
 public:
  FriendRpcViewUserSimpleInfoAsk();
  virtual ~FriendRpcViewUserSimpleInfoAsk();

  FriendRpcViewUserSimpleInfoAsk(const FriendRpcViewUserSimpleInfoAsk& from);

  inline FriendRpcViewUserSimpleInfoAsk& operator=(const FriendRpcViewUserSimpleInfoAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcViewUserSimpleInfoAsk(FriendRpcViewUserSimpleInfoAsk&& from) noexcept
    : FriendRpcViewUserSimpleInfoAsk() {
    *this = ::std::move(from);
  }

  inline FriendRpcViewUserSimpleInfoAsk& operator=(FriendRpcViewUserSimpleInfoAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcViewUserSimpleInfoAsk& default_instance();

  static inline const FriendRpcViewUserSimpleInfoAsk* internal_default_instance() {
    return reinterpret_cast<const FriendRpcViewUserSimpleInfoAsk*>(
               &_FriendRpcViewUserSimpleInfoAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(FriendRpcViewUserSimpleInfoAsk* other);
  friend void swap(FriendRpcViewUserSimpleInfoAsk& a, FriendRpcViewUserSimpleInfoAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcViewUserSimpleInfoAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcViewUserSimpleInfoAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcViewUserSimpleInfoAsk& from);
  void MergeFrom(const FriendRpcViewUserSimpleInfoAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcViewUserSimpleInfoAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 UserId = 1 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:FriendRpcViewUserSimpleInfoAsk)
 private:
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRpcViewUserSimpleInfoReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcViewUserSimpleInfoReply) */ {
 public:
  FriendRpcViewUserSimpleInfoReply();
  virtual ~FriendRpcViewUserSimpleInfoReply();

  FriendRpcViewUserSimpleInfoReply(const FriendRpcViewUserSimpleInfoReply& from);

  inline FriendRpcViewUserSimpleInfoReply& operator=(const FriendRpcViewUserSimpleInfoReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcViewUserSimpleInfoReply(FriendRpcViewUserSimpleInfoReply&& from) noexcept
    : FriendRpcViewUserSimpleInfoReply() {
    *this = ::std::move(from);
  }

  inline FriendRpcViewUserSimpleInfoReply& operator=(FriendRpcViewUserSimpleInfoReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcViewUserSimpleInfoReply& default_instance();

  static inline const FriendRpcViewUserSimpleInfoReply* internal_default_instance() {
    return reinterpret_cast<const FriendRpcViewUserSimpleInfoReply*>(
               &_FriendRpcViewUserSimpleInfoReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(FriendRpcViewUserSimpleInfoReply* other);
  friend void swap(FriendRpcViewUserSimpleInfoReply& a, FriendRpcViewUserSimpleInfoReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcViewUserSimpleInfoReply* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcViewUserSimpleInfoReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcViewUserSimpleInfoReply& from);
  void MergeFrom(const FriendRpcViewUserSimpleInfoReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcViewUserSimpleInfoReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 3;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string Signature = 9;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 9;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string GuildName = 12;
  bool has_guildname() const;
  void clear_guildname();
  static const int kGuildNameFieldNumber = 12;
  const ::std::string& guildname() const;
  void set_guildname(const ::std::string& value);
  #if LANG_CXX11
  void set_guildname(::std::string&& value);
  #endif
  void set_guildname(const char* value);
  void set_guildname(const char* value, size_t size);
  ::std::string* mutable_guildname();
  ::std::string* release_guildname();
  void set_allocated_guildname(::std::string* guildname);

  // optional bool Online = 10 [default = false];
  bool has_online() const;
  void clear_online();
  static const int kOnlineFieldNumber = 10;
  bool online() const;
  void set_online(bool value);

  // optional sint32 GoodFeeling = 11 [default = 0];
  bool has_goodfeeling() const;
  void clear_goodfeeling();
  static const int kGoodFeelingFieldNumber = 11;
  ::google::protobuf::int32 goodfeeling() const;
  void set_goodfeeling(::google::protobuf::int32 value);

  // optional sint64 UserId = 2 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional sint32 Level = 4 [default = -1];
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 4;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional sint32 Prof = 5 [default = -1];
  bool has_prof() const;
  void clear_prof();
  static const int kProfFieldNumber = 5;
  ::google::protobuf::int32 prof() const;
  void set_prof(::google::protobuf::int32 value);

  // optional sint32 TeamId = 6 [default = -1];
  bool has_teamid() const;
  void clear_teamid();
  static const int kTeamIdFieldNumber = 6;
  ::google::protobuf::int32 teamid() const;
  void set_teamid(::google::protobuf::int32 value);

  // optional sint32 TeamMemberNum = 7 [default = -1];
  bool has_teammembernum() const;
  void clear_teammembernum();
  static const int kTeamMemberNumFieldNumber = 7;
  ::google::protobuf::int32 teammembernum() const;
  void set_teammembernum(::google::protobuf::int32 value);

  // optional sint32 GuildId = 8 [default = -1];
  bool has_guildid() const;
  void clear_guildid();
  static const int kGuildIdFieldNumber = 8;
  ::google::protobuf::int32 guildid() const;
  void set_guildid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FriendRpcViewUserSimpleInfoReply)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_userid();
  void clear_has_userid();
  void set_has_username();
  void clear_has_username();
  void set_has_level();
  void clear_has_level();
  void set_has_prof();
  void clear_has_prof();
  void set_has_teamid();
  void clear_has_teamid();
  void set_has_teammembernum();
  void clear_has_teammembernum();
  void set_has_guildid();
  void clear_has_guildid();
  void set_has_signature();
  void clear_has_signature();
  void set_has_online();
  void clear_has_online();
  void set_has_goodfeeling();
  void clear_has_goodfeeling();
  void set_has_guildname();
  void clear_has_guildname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr guildname_;
  bool online_;
  ::google::protobuf::int32 goodfeeling_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int32 teamid_;
  ::google::protobuf::int32 teammembernum_;
  ::google::protobuf::int32 guildid_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRpcOnlineOfflineNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FriendRpcOnlineOfflineNotify) */ {
 public:
  FriendRpcOnlineOfflineNotify();
  virtual ~FriendRpcOnlineOfflineNotify();

  FriendRpcOnlineOfflineNotify(const FriendRpcOnlineOfflineNotify& from);

  inline FriendRpcOnlineOfflineNotify& operator=(const FriendRpcOnlineOfflineNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRpcOnlineOfflineNotify(FriendRpcOnlineOfflineNotify&& from) noexcept
    : FriendRpcOnlineOfflineNotify() {
    *this = ::std::move(from);
  }

  inline FriendRpcOnlineOfflineNotify& operator=(FriendRpcOnlineOfflineNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRpcOnlineOfflineNotify& default_instance();

  static inline const FriendRpcOnlineOfflineNotify* internal_default_instance() {
    return reinterpret_cast<const FriendRpcOnlineOfflineNotify*>(
               &_FriendRpcOnlineOfflineNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(FriendRpcOnlineOfflineNotify* other);
  friend void swap(FriendRpcOnlineOfflineNotify& a, FriendRpcOnlineOfflineNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRpcOnlineOfflineNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRpcOnlineOfflineNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRpcOnlineOfflineNotify& from);
  void MergeFrom(const FriendRpcOnlineOfflineNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRpcOnlineOfflineNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional bool Online = 3 [default = false];
  bool has_online() const;
  void clear_online();
  static const int kOnlineFieldNumber = 3;
  bool online() const;
  void set_online(bool value);

  // optional sint64 UserId = 1 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:FriendRpcOnlineOfflineNotify)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_username();
  void clear_has_username();
  void set_has_online();
  void clear_has_online();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  bool online_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_FriendRpc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FriendRpcSyncFriendDataAsk

// -------------------------------------------------------------------

// FriendRpcSyncFriendDataReply

// optional sint32 Result = 1 [default = -9999];
inline bool FriendRpcSyncFriendDataReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRpcSyncFriendDataReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRpcSyncFriendDataReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRpcSyncFriendDataReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 FriendRpcSyncFriendDataReply::result() const {
  // @@protoc_insertion_point(field_get:FriendRpcSyncFriendDataReply.Result)
  return result_;
}
inline void FriendRpcSyncFriendDataReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcSyncFriendDataReply.Result)
}

// -------------------------------------------------------------------

// FriendRpcAddFriendAsk

// optional sint64 UserId = 1 [default = -1];
inline bool FriendRpcAddFriendAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRpcAddFriendAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRpcAddFriendAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRpcAddFriendAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 FriendRpcAddFriendAsk::userid() const {
  // @@protoc_insertion_point(field_get:FriendRpcAddFriendAsk.UserId)
  return userid_;
}
inline void FriendRpcAddFriendAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcAddFriendAsk.UserId)
}

// -------------------------------------------------------------------

// FriendRpcAddFriendReply

// optional sint32 Result = 1 [default = -9999];
inline bool FriendRpcAddFriendReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRpcAddFriendReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRpcAddFriendReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRpcAddFriendReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 FriendRpcAddFriendReply::result() const {
  // @@protoc_insertion_point(field_get:FriendRpcAddFriendReply.Result)
  return result_;
}
inline void FriendRpcAddFriendReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcAddFriendReply.Result)
}

// -------------------------------------------------------------------

// FriendRpcDelFriendAsk

// repeated sint64 UserId = 1;
inline int FriendRpcDelFriendAsk::userid_size() const {
  return userid_.size();
}
inline void FriendRpcDelFriendAsk::clear_userid() {
  userid_.Clear();
}
inline ::google::protobuf::int64 FriendRpcDelFriendAsk::userid(int index) const {
  // @@protoc_insertion_point(field_get:FriendRpcDelFriendAsk.UserId)
  return userid_.Get(index);
}
inline void FriendRpcDelFriendAsk::set_userid(int index, ::google::protobuf::int64 value) {
  userid_.Set(index, value);
  // @@protoc_insertion_point(field_set:FriendRpcDelFriendAsk.UserId)
}
inline void FriendRpcDelFriendAsk::add_userid(::google::protobuf::int64 value) {
  userid_.Add(value);
  // @@protoc_insertion_point(field_add:FriendRpcDelFriendAsk.UserId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
FriendRpcDelFriendAsk::userid() const {
  // @@protoc_insertion_point(field_list:FriendRpcDelFriendAsk.UserId)
  return userid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
FriendRpcDelFriendAsk::mutable_userid() {
  // @@protoc_insertion_point(field_mutable_list:FriendRpcDelFriendAsk.UserId)
  return &userid_;
}

// -------------------------------------------------------------------

// FriendRpcDelFriendReply

// optional sint32 Result = 1 [default = -9999];
inline bool FriendRpcDelFriendReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRpcDelFriendReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRpcDelFriendReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRpcDelFriendReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 FriendRpcDelFriendReply::result() const {
  // @@protoc_insertion_point(field_get:FriendRpcDelFriendReply.Result)
  return result_;
}
inline void FriendRpcDelFriendReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcDelFriendReply.Result)
}

// -------------------------------------------------------------------

// FriendRpcAddBlackListAsk

// optional sint64 UserId = 1 [default = -1];
inline bool FriendRpcAddBlackListAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRpcAddBlackListAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRpcAddBlackListAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRpcAddBlackListAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 FriendRpcAddBlackListAsk::userid() const {
  // @@protoc_insertion_point(field_get:FriendRpcAddBlackListAsk.UserId)
  return userid_;
}
inline void FriendRpcAddBlackListAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcAddBlackListAsk.UserId)
}

// -------------------------------------------------------------------

// FriendRpcAddBlackListReply

// optional sint32 Result = 1 [default = -9999];
inline bool FriendRpcAddBlackListReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRpcAddBlackListReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRpcAddBlackListReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRpcAddBlackListReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 FriendRpcAddBlackListReply::result() const {
  // @@protoc_insertion_point(field_get:FriendRpcAddBlackListReply.Result)
  return result_;
}
inline void FriendRpcAddBlackListReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcAddBlackListReply.Result)
}

// -------------------------------------------------------------------

// FriendRpcDelBlackListAsk

// optional sint64 UserId = 1 [default = -1];
inline bool FriendRpcDelBlackListAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRpcDelBlackListAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRpcDelBlackListAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRpcDelBlackListAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 FriendRpcDelBlackListAsk::userid() const {
  // @@protoc_insertion_point(field_get:FriendRpcDelBlackListAsk.UserId)
  return userid_;
}
inline void FriendRpcDelBlackListAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcDelBlackListAsk.UserId)
}

// -------------------------------------------------------------------

// FriendRpcDelBlackListReply

// optional sint32 Result = 1 [default = -9999];
inline bool FriendRpcDelBlackListReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRpcDelBlackListReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRpcDelBlackListReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRpcDelBlackListReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 FriendRpcDelBlackListReply::result() const {
  // @@protoc_insertion_point(field_get:FriendRpcDelBlackListReply.Result)
  return result_;
}
inline void FriendRpcDelBlackListReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcDelBlackListReply.Result)
}

// -------------------------------------------------------------------

// FriendRpcAddContactAsk

// optional sint64 UserId = 1 [default = -1];
inline bool FriendRpcAddContactAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRpcAddContactAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRpcAddContactAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRpcAddContactAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 FriendRpcAddContactAsk::userid() const {
  // @@protoc_insertion_point(field_get:FriendRpcAddContactAsk.UserId)
  return userid_;
}
inline void FriendRpcAddContactAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcAddContactAsk.UserId)
}

// -------------------------------------------------------------------

// FriendRpcAddContactReply

// optional sint32 Result = 1 [default = -9999];
inline bool FriendRpcAddContactReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRpcAddContactReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRpcAddContactReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRpcAddContactReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 FriendRpcAddContactReply::result() const {
  // @@protoc_insertion_point(field_get:FriendRpcAddContactReply.Result)
  return result_;
}
inline void FriendRpcAddContactReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcAddContactReply.Result)
}

// -------------------------------------------------------------------

// FriendRpcDelContactAsk

// optional sint64 UserId = 1 [default = -1];
inline bool FriendRpcDelContactAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRpcDelContactAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRpcDelContactAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRpcDelContactAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 FriendRpcDelContactAsk::userid() const {
  // @@protoc_insertion_point(field_get:FriendRpcDelContactAsk.UserId)
  return userid_;
}
inline void FriendRpcDelContactAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcDelContactAsk.UserId)
}

// -------------------------------------------------------------------

// FriendRpcDelContactReply

// optional sint32 Result = 1 [default = -9999];
inline bool FriendRpcDelContactReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRpcDelContactReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRpcDelContactReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRpcDelContactReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 FriendRpcDelContactReply::result() const {
  // @@protoc_insertion_point(field_get:FriendRpcDelContactReply.Result)
  return result_;
}
inline void FriendRpcDelContactReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcDelContactReply.Result)
}

// -------------------------------------------------------------------

// FriendRpcSearchPlayerAsk

// optional string SearchString = 1;
inline bool FriendRpcSearchPlayerAsk::has_searchstring() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRpcSearchPlayerAsk::set_has_searchstring() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRpcSearchPlayerAsk::clear_has_searchstring() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRpcSearchPlayerAsk::clear_searchstring() {
  searchstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_searchstring();
}
inline const ::std::string& FriendRpcSearchPlayerAsk::searchstring() const {
  // @@protoc_insertion_point(field_get:FriendRpcSearchPlayerAsk.SearchString)
  return searchstring_.GetNoArena();
}
inline void FriendRpcSearchPlayerAsk::set_searchstring(const ::std::string& value) {
  set_has_searchstring();
  searchstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendRpcSearchPlayerAsk.SearchString)
}
#if LANG_CXX11
inline void FriendRpcSearchPlayerAsk::set_searchstring(::std::string&& value) {
  set_has_searchstring();
  searchstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FriendRpcSearchPlayerAsk.SearchString)
}
#endif
inline void FriendRpcSearchPlayerAsk::set_searchstring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_searchstring();
  searchstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendRpcSearchPlayerAsk.SearchString)
}
inline void FriendRpcSearchPlayerAsk::set_searchstring(const char* value, size_t size) {
  set_has_searchstring();
  searchstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendRpcSearchPlayerAsk.SearchString)
}
inline ::std::string* FriendRpcSearchPlayerAsk::mutable_searchstring() {
  set_has_searchstring();
  // @@protoc_insertion_point(field_mutable:FriendRpcSearchPlayerAsk.SearchString)
  return searchstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRpcSearchPlayerAsk::release_searchstring() {
  // @@protoc_insertion_point(field_release:FriendRpcSearchPlayerAsk.SearchString)
  clear_has_searchstring();
  return searchstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRpcSearchPlayerAsk::set_allocated_searchstring(::std::string* searchstring) {
  if (searchstring != NULL) {
    set_has_searchstring();
  } else {
    clear_has_searchstring();
  }
  searchstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), searchstring);
  // @@protoc_insertion_point(field_set_allocated:FriendRpcSearchPlayerAsk.SearchString)
}

// -------------------------------------------------------------------

// FriendRpcSearchPlayerReply

// optional sint32 Result = 1 [default = -9999];
inline bool FriendRpcSearchPlayerReply::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendRpcSearchPlayerReply::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendRpcSearchPlayerReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendRpcSearchPlayerReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 FriendRpcSearchPlayerReply::result() const {
  // @@protoc_insertion_point(field_get:FriendRpcSearchPlayerReply.Result)
  return result_;
}
inline void FriendRpcSearchPlayerReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcSearchPlayerReply.Result)
}

// optional sint64 UserId = 2 [default = -1];
inline bool FriendRpcSearchPlayerReply::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendRpcSearchPlayerReply::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendRpcSearchPlayerReply::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendRpcSearchPlayerReply::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 FriendRpcSearchPlayerReply::userid() const {
  // @@protoc_insertion_point(field_get:FriendRpcSearchPlayerReply.UserId)
  return userid_;
}
inline void FriendRpcSearchPlayerReply::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcSearchPlayerReply.UserId)
}

// optional string UserName = 3;
inline bool FriendRpcSearchPlayerReply::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRpcSearchPlayerReply::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRpcSearchPlayerReply::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRpcSearchPlayerReply::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& FriendRpcSearchPlayerReply::username() const {
  // @@protoc_insertion_point(field_get:FriendRpcSearchPlayerReply.UserName)
  return username_.GetNoArena();
}
inline void FriendRpcSearchPlayerReply::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendRpcSearchPlayerReply.UserName)
}
#if LANG_CXX11
inline void FriendRpcSearchPlayerReply::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FriendRpcSearchPlayerReply.UserName)
}
#endif
inline void FriendRpcSearchPlayerReply::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendRpcSearchPlayerReply.UserName)
}
inline void FriendRpcSearchPlayerReply::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendRpcSearchPlayerReply.UserName)
}
inline ::std::string* FriendRpcSearchPlayerReply::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FriendRpcSearchPlayerReply.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRpcSearchPlayerReply::release_username() {
  // @@protoc_insertion_point(field_release:FriendRpcSearchPlayerReply.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRpcSearchPlayerReply::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FriendRpcSearchPlayerReply.UserName)
}

// optional sint32 Level = 4 [default = -1];
inline bool FriendRpcSearchPlayerReply::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendRpcSearchPlayerReply::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendRpcSearchPlayerReply::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendRpcSearchPlayerReply::clear_level() {
  level_ = -1;
  clear_has_level();
}
inline ::google::protobuf::int32 FriendRpcSearchPlayerReply::level() const {
  // @@protoc_insertion_point(field_get:FriendRpcSearchPlayerReply.Level)
  return level_;
}
inline void FriendRpcSearchPlayerReply::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcSearchPlayerReply.Level)
}

// optional sint32 Prof = 5 [default = -1];
inline bool FriendRpcSearchPlayerReply::has_prof() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendRpcSearchPlayerReply::set_has_prof() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendRpcSearchPlayerReply::clear_has_prof() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendRpcSearchPlayerReply::clear_prof() {
  prof_ = -1;
  clear_has_prof();
}
inline ::google::protobuf::int32 FriendRpcSearchPlayerReply::prof() const {
  // @@protoc_insertion_point(field_get:FriendRpcSearchPlayerReply.Prof)
  return prof_;
}
inline void FriendRpcSearchPlayerReply::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcSearchPlayerReply.Prof)
}

// -------------------------------------------------------------------

// FriendRpcRecommendObj

// optional sint64 UserId = 1 [default = -1];
inline bool FriendRpcRecommendObj::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendRpcRecommendObj::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendRpcRecommendObj::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendRpcRecommendObj::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 FriendRpcRecommendObj::userid() const {
  // @@protoc_insertion_point(field_get:FriendRpcRecommendObj.UserId)
  return userid_;
}
inline void FriendRpcRecommendObj::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcRecommendObj.UserId)
}

// optional string UserName = 2;
inline bool FriendRpcRecommendObj::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRpcRecommendObj::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRpcRecommendObj::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRpcRecommendObj::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& FriendRpcRecommendObj::username() const {
  // @@protoc_insertion_point(field_get:FriendRpcRecommendObj.UserName)
  return username_.GetNoArena();
}
inline void FriendRpcRecommendObj::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendRpcRecommendObj.UserName)
}
#if LANG_CXX11
inline void FriendRpcRecommendObj::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FriendRpcRecommendObj.UserName)
}
#endif
inline void FriendRpcRecommendObj::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendRpcRecommendObj.UserName)
}
inline void FriendRpcRecommendObj::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendRpcRecommendObj.UserName)
}
inline ::std::string* FriendRpcRecommendObj::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FriendRpcRecommendObj.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRpcRecommendObj::release_username() {
  // @@protoc_insertion_point(field_release:FriendRpcRecommendObj.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRpcRecommendObj::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FriendRpcRecommendObj.UserName)
}

// optional sint32 Level = 3 [default = -1];
inline bool FriendRpcRecommendObj::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendRpcRecommendObj::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendRpcRecommendObj::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendRpcRecommendObj::clear_level() {
  level_ = -1;
  clear_has_level();
}
inline ::google::protobuf::int32 FriendRpcRecommendObj::level() const {
  // @@protoc_insertion_point(field_get:FriendRpcRecommendObj.Level)
  return level_;
}
inline void FriendRpcRecommendObj::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcRecommendObj.Level)
}

// optional sint32 Prof = 4 [default = -1];
inline bool FriendRpcRecommendObj::has_prof() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendRpcRecommendObj::set_has_prof() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendRpcRecommendObj::clear_has_prof() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendRpcRecommendObj::clear_prof() {
  prof_ = -1;
  clear_has_prof();
}
inline ::google::protobuf::int32 FriendRpcRecommendObj::prof() const {
  // @@protoc_insertion_point(field_get:FriendRpcRecommendObj.Prof)
  return prof_;
}
inline void FriendRpcRecommendObj::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcRecommendObj.Prof)
}

// -------------------------------------------------------------------

// FriendRpcRecommendAsk

// -------------------------------------------------------------------

// FriendRpcRecommendReply

// optional sint32 Result = 1 [default = -9999];
inline bool FriendRpcRecommendReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRpcRecommendReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRpcRecommendReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRpcRecommendReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 FriendRpcRecommendReply::result() const {
  // @@protoc_insertion_point(field_get:FriendRpcRecommendReply.Result)
  return result_;
}
inline void FriendRpcRecommendReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcRecommendReply.Result)
}

// repeated .FriendRpcRecommendObj RecommendList = 2;
inline int FriendRpcRecommendReply::recommendlist_size() const {
  return recommendlist_.size();
}
inline void FriendRpcRecommendReply::clear_recommendlist() {
  recommendlist_.Clear();
}
inline const ::FriendRpcRecommendObj& FriendRpcRecommendReply::recommendlist(int index) const {
  // @@protoc_insertion_point(field_get:FriendRpcRecommendReply.RecommendList)
  return recommendlist_.Get(index);
}
inline ::FriendRpcRecommendObj* FriendRpcRecommendReply::mutable_recommendlist(int index) {
  // @@protoc_insertion_point(field_mutable:FriendRpcRecommendReply.RecommendList)
  return recommendlist_.Mutable(index);
}
inline ::FriendRpcRecommendObj* FriendRpcRecommendReply::add_recommendlist() {
  // @@protoc_insertion_point(field_add:FriendRpcRecommendReply.RecommendList)
  return recommendlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FriendRpcRecommendObj >*
FriendRpcRecommendReply::mutable_recommendlist() {
  // @@protoc_insertion_point(field_mutable_list:FriendRpcRecommendReply.RecommendList)
  return &recommendlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FriendRpcRecommendObj >&
FriendRpcRecommendReply::recommendlist() const {
  // @@protoc_insertion_point(field_list:FriendRpcRecommendReply.RecommendList)
  return recommendlist_;
}

// -------------------------------------------------------------------

// FriendRpcViewUserSimpleInfoAsk

// optional sint64 UserId = 1 [default = -1];
inline bool FriendRpcViewUserSimpleInfoAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRpcViewUserSimpleInfoAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRpcViewUserSimpleInfoAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRpcViewUserSimpleInfoAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 FriendRpcViewUserSimpleInfoAsk::userid() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoAsk.UserId)
  return userid_;
}
inline void FriendRpcViewUserSimpleInfoAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoAsk.UserId)
}

// -------------------------------------------------------------------

// FriendRpcViewUserSimpleInfoReply

// optional sint32 Result = 1 [default = -9999];
inline bool FriendRpcViewUserSimpleInfoReply::has_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FriendRpcViewUserSimpleInfoReply::set_has_result() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 FriendRpcViewUserSimpleInfoReply::result() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.Result)
  return result_;
}
inline void FriendRpcViewUserSimpleInfoReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.Result)
}

// optional sint64 UserId = 2 [default = -1];
inline bool FriendRpcViewUserSimpleInfoReply::has_userid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FriendRpcViewUserSimpleInfoReply::set_has_userid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_has_userid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 FriendRpcViewUserSimpleInfoReply::userid() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.UserId)
  return userid_;
}
inline void FriendRpcViewUserSimpleInfoReply::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.UserId)
}

// optional string UserName = 3;
inline bool FriendRpcViewUserSimpleInfoReply::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRpcViewUserSimpleInfoReply::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& FriendRpcViewUserSimpleInfoReply::username() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.UserName)
  return username_.GetNoArena();
}
inline void FriendRpcViewUserSimpleInfoReply::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.UserName)
}
#if LANG_CXX11
inline void FriendRpcViewUserSimpleInfoReply::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FriendRpcViewUserSimpleInfoReply.UserName)
}
#endif
inline void FriendRpcViewUserSimpleInfoReply::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendRpcViewUserSimpleInfoReply.UserName)
}
inline void FriendRpcViewUserSimpleInfoReply::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendRpcViewUserSimpleInfoReply.UserName)
}
inline ::std::string* FriendRpcViewUserSimpleInfoReply::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FriendRpcViewUserSimpleInfoReply.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRpcViewUserSimpleInfoReply::release_username() {
  // @@protoc_insertion_point(field_release:FriendRpcViewUserSimpleInfoReply.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRpcViewUserSimpleInfoReply::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FriendRpcViewUserSimpleInfoReply.UserName)
}

// optional sint32 Level = 4 [default = -1];
inline bool FriendRpcViewUserSimpleInfoReply::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FriendRpcViewUserSimpleInfoReply::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_level() {
  level_ = -1;
  clear_has_level();
}
inline ::google::protobuf::int32 FriendRpcViewUserSimpleInfoReply::level() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.Level)
  return level_;
}
inline void FriendRpcViewUserSimpleInfoReply::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.Level)
}

// optional sint32 Prof = 5 [default = -1];
inline bool FriendRpcViewUserSimpleInfoReply::has_prof() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FriendRpcViewUserSimpleInfoReply::set_has_prof() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_has_prof() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_prof() {
  prof_ = -1;
  clear_has_prof();
}
inline ::google::protobuf::int32 FriendRpcViewUserSimpleInfoReply::prof() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.Prof)
  return prof_;
}
inline void FriendRpcViewUserSimpleInfoReply::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.Prof)
}

// optional sint32 TeamId = 6 [default = -1];
inline bool FriendRpcViewUserSimpleInfoReply::has_teamid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FriendRpcViewUserSimpleInfoReply::set_has_teamid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_teamid() {
  teamid_ = -1;
  clear_has_teamid();
}
inline ::google::protobuf::int32 FriendRpcViewUserSimpleInfoReply::teamid() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.TeamId)
  return teamid_;
}
inline void FriendRpcViewUserSimpleInfoReply::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.TeamId)
}

// optional sint32 TeamMemberNum = 7 [default = -1];
inline bool FriendRpcViewUserSimpleInfoReply::has_teammembernum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FriendRpcViewUserSimpleInfoReply::set_has_teammembernum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_has_teammembernum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_teammembernum() {
  teammembernum_ = -1;
  clear_has_teammembernum();
}
inline ::google::protobuf::int32 FriendRpcViewUserSimpleInfoReply::teammembernum() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.TeamMemberNum)
  return teammembernum_;
}
inline void FriendRpcViewUserSimpleInfoReply::set_teammembernum(::google::protobuf::int32 value) {
  set_has_teammembernum();
  teammembernum_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.TeamMemberNum)
}

// optional sint32 GuildId = 8 [default = -1];
inline bool FriendRpcViewUserSimpleInfoReply::has_guildid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FriendRpcViewUserSimpleInfoReply::set_has_guildid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_guildid() {
  guildid_ = -1;
  clear_has_guildid();
}
inline ::google::protobuf::int32 FriendRpcViewUserSimpleInfoReply::guildid() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.GuildId)
  return guildid_;
}
inline void FriendRpcViewUserSimpleInfoReply::set_guildid(::google::protobuf::int32 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.GuildId)
}

// optional string Signature = 9;
inline bool FriendRpcViewUserSimpleInfoReply::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendRpcViewUserSimpleInfoReply::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& FriendRpcViewUserSimpleInfoReply::signature() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.Signature)
  return signature_.GetNoArena();
}
inline void FriendRpcViewUserSimpleInfoReply::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.Signature)
}
#if LANG_CXX11
inline void FriendRpcViewUserSimpleInfoReply::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FriendRpcViewUserSimpleInfoReply.Signature)
}
#endif
inline void FriendRpcViewUserSimpleInfoReply::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendRpcViewUserSimpleInfoReply.Signature)
}
inline void FriendRpcViewUserSimpleInfoReply::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendRpcViewUserSimpleInfoReply.Signature)
}
inline ::std::string* FriendRpcViewUserSimpleInfoReply::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:FriendRpcViewUserSimpleInfoReply.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRpcViewUserSimpleInfoReply::release_signature() {
  // @@protoc_insertion_point(field_release:FriendRpcViewUserSimpleInfoReply.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRpcViewUserSimpleInfoReply::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:FriendRpcViewUserSimpleInfoReply.Signature)
}

// optional bool Online = 10 [default = false];
inline bool FriendRpcViewUserSimpleInfoReply::has_online() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendRpcViewUserSimpleInfoReply::set_has_online() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_has_online() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool FriendRpcViewUserSimpleInfoReply::online() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.Online)
  return online_;
}
inline void FriendRpcViewUserSimpleInfoReply::set_online(bool value) {
  set_has_online();
  online_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.Online)
}

// optional sint32 GoodFeeling = 11 [default = 0];
inline bool FriendRpcViewUserSimpleInfoReply::has_goodfeeling() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendRpcViewUserSimpleInfoReply::set_has_goodfeeling() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_has_goodfeeling() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_goodfeeling() {
  goodfeeling_ = 0;
  clear_has_goodfeeling();
}
inline ::google::protobuf::int32 FriendRpcViewUserSimpleInfoReply::goodfeeling() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.GoodFeeling)
  return goodfeeling_;
}
inline void FriendRpcViewUserSimpleInfoReply::set_goodfeeling(::google::protobuf::int32 value) {
  set_has_goodfeeling();
  goodfeeling_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.GoodFeeling)
}

// optional string GuildName = 12;
inline bool FriendRpcViewUserSimpleInfoReply::has_guildname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendRpcViewUserSimpleInfoReply::set_has_guildname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendRpcViewUserSimpleInfoReply::clear_guildname() {
  guildname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guildname();
}
inline const ::std::string& FriendRpcViewUserSimpleInfoReply::guildname() const {
  // @@protoc_insertion_point(field_get:FriendRpcViewUserSimpleInfoReply.GuildName)
  return guildname_.GetNoArena();
}
inline void FriendRpcViewUserSimpleInfoReply::set_guildname(const ::std::string& value) {
  set_has_guildname();
  guildname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendRpcViewUserSimpleInfoReply.GuildName)
}
#if LANG_CXX11
inline void FriendRpcViewUserSimpleInfoReply::set_guildname(::std::string&& value) {
  set_has_guildname();
  guildname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FriendRpcViewUserSimpleInfoReply.GuildName)
}
#endif
inline void FriendRpcViewUserSimpleInfoReply::set_guildname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guildname();
  guildname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendRpcViewUserSimpleInfoReply.GuildName)
}
inline void FriendRpcViewUserSimpleInfoReply::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  guildname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendRpcViewUserSimpleInfoReply.GuildName)
}
inline ::std::string* FriendRpcViewUserSimpleInfoReply::mutable_guildname() {
  set_has_guildname();
  // @@protoc_insertion_point(field_mutable:FriendRpcViewUserSimpleInfoReply.GuildName)
  return guildname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRpcViewUserSimpleInfoReply::release_guildname() {
  // @@protoc_insertion_point(field_release:FriendRpcViewUserSimpleInfoReply.GuildName)
  clear_has_guildname();
  return guildname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRpcViewUserSimpleInfoReply::set_allocated_guildname(::std::string* guildname) {
  if (guildname != NULL) {
    set_has_guildname();
  } else {
    clear_has_guildname();
  }
  guildname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guildname);
  // @@protoc_insertion_point(field_set_allocated:FriendRpcViewUserSimpleInfoReply.GuildName)
}

// -------------------------------------------------------------------

// FriendRpcOnlineOfflineNotify

// optional sint64 UserId = 1 [default = -1];
inline bool FriendRpcOnlineOfflineNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendRpcOnlineOfflineNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendRpcOnlineOfflineNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendRpcOnlineOfflineNotify::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 FriendRpcOnlineOfflineNotify::userid() const {
  // @@protoc_insertion_point(field_get:FriendRpcOnlineOfflineNotify.UserId)
  return userid_;
}
inline void FriendRpcOnlineOfflineNotify::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcOnlineOfflineNotify.UserId)
}

// optional string UserName = 2;
inline bool FriendRpcOnlineOfflineNotify::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRpcOnlineOfflineNotify::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRpcOnlineOfflineNotify::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRpcOnlineOfflineNotify::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& FriendRpcOnlineOfflineNotify::username() const {
  // @@protoc_insertion_point(field_get:FriendRpcOnlineOfflineNotify.UserName)
  return username_.GetNoArena();
}
inline void FriendRpcOnlineOfflineNotify::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FriendRpcOnlineOfflineNotify.UserName)
}
#if LANG_CXX11
inline void FriendRpcOnlineOfflineNotify::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FriendRpcOnlineOfflineNotify.UserName)
}
#endif
inline void FriendRpcOnlineOfflineNotify::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FriendRpcOnlineOfflineNotify.UserName)
}
inline void FriendRpcOnlineOfflineNotify::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FriendRpcOnlineOfflineNotify.UserName)
}
inline ::std::string* FriendRpcOnlineOfflineNotify::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FriendRpcOnlineOfflineNotify.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRpcOnlineOfflineNotify::release_username() {
  // @@protoc_insertion_point(field_release:FriendRpcOnlineOfflineNotify.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRpcOnlineOfflineNotify::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FriendRpcOnlineOfflineNotify.UserName)
}

// optional bool Online = 3 [default = false];
inline bool FriendRpcOnlineOfflineNotify::has_online() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendRpcOnlineOfflineNotify::set_has_online() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendRpcOnlineOfflineNotify::clear_has_online() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendRpcOnlineOfflineNotify::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool FriendRpcOnlineOfflineNotify::online() const {
  // @@protoc_insertion_point(field_get:FriendRpcOnlineOfflineNotify.Online)
  return online_;
}
inline void FriendRpcOnlineOfflineNotify::set_online(bool value) {
  set_has_online();
  online_ = value;
  // @@protoc_insertion_point(field_set:FriendRpcOnlineOfflineNotify.Online)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FriendRpc_2eproto__INCLUDED
