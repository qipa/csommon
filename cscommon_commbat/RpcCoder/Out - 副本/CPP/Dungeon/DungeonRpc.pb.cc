// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DungeonRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DungeonRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class DungeonRpcEnterAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonRpcEnterAsk>
     _instance;
} _DungeonRpcEnterAsk_default_instance_;
class DungeonRpcEnterReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonRpcEnterReply>
     _instance;
} _DungeonRpcEnterReply_default_instance_;
class DungeonRpcOpenNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonRpcOpenNotify>
     _instance;
} _DungeonRpcOpenNotify_default_instance_;
class DungeonRpcTryEnterAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonRpcTryEnterAsk>
     _instance;
} _DungeonRpcTryEnterAsk_default_instance_;
class DungeonRpcTryEnterReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonRpcTryEnterReply>
     _instance;
} _DungeonRpcTryEnterReply_default_instance_;
class DungeonRpcTransferNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonRpcTransferNotify>
     _instance;
} _DungeonRpcTransferNotify_default_instance_;

namespace protobuf_DungeonRpc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcEnterAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcEnterAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcEnterAsk, dungeonid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcEnterAsk, dungeontype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcEnterAsk, birthpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcEnterAsk, facedir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcEnterAsk, guildid_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcEnterReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcEnterReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcEnterReply, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcOpenNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcOpenNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcOpenNotify, dungeonkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcOpenNotify, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcOpenNotify, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcOpenNotify, dungeonid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcOpenNotify, dungeontype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcOpenNotify, guildid_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcTryEnterAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcTryEnterAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcTryEnterAsk, dungeonid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcTryEnterAsk, birthpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcTryEnterAsk, facedir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcTryEnterAsk, guildid_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcTryEnterReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcTryEnterReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcTryEnterReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcTryEnterReply, dungeonid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcTryEnterReply, birthpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcTryEnterReply, facedir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcTryEnterReply, guildid_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcTransferNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcTransferNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRpcTransferNotify, dungeonid_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(DungeonRpcEnterAsk)},
  { 15, 21, sizeof(DungeonRpcEnterReply)},
  { 22, 33, sizeof(DungeonRpcOpenNotify)},
  { 39, 48, sizeof(DungeonRpcTryEnterAsk)},
  { 52, 62, sizeof(DungeonRpcTryEnterReply)},
  { 67, 73, sizeof(DungeonRpcTransferNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonRpcEnterAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonRpcEnterReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonRpcOpenNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonRpcTryEnterAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonRpcTryEnterReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonRpcTransferNotify_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "DungeonRpc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_PublicStruct_2eproto::InitDefaults();
  _DungeonRpcEnterAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonRpcEnterAsk_default_instance_);_DungeonRpcEnterReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonRpcEnterReply_default_instance_);_DungeonRpcOpenNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonRpcOpenNotify_default_instance_);_DungeonRpcTryEnterAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonRpcTryEnterAsk_default_instance_);_DungeonRpcTryEnterReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonRpcTryEnterReply_default_instance_);_DungeonRpcTransferNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonRpcTransferNotify_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020DungeonRpc.proto\032\022PublicStruct.proto\"\206"
      "\001\n\022DungeonRpcEnterAsk\022\025\n\tDungeonId\030\001 \001(\021"
      ":\002-1\022\027\n\013DungeonType\030\003 \001(\021:\002-1\022\026\n\nBirthPo"
      "int\030\004 \001(\021:\002-1\022\023\n\007FaceDir\030\005 \001(\021:\002-1\022\023\n\007Gu"
      "ildId\030\006 \001(\021:\002-1\"-\n\024DungeonRpcEnterReply\022"
      "\025\n\006Result\030\001 \001(\021:\005-9999\"\217\001\n\024DungeonRpcOpe"
      "nNotify\022\022\n\nDungeonKey\030\001 \001(\t\022\014\n\004Host\030\002 \001("
      "\t\022\020\n\004Port\030\003 \001(\021:\002-1\022\025\n\tDungeonId\030\t \001(\021:\002"
      "-1\022\027\n\013DungeonType\030\n \001(\021:\002-1\022\023\n\007GuildId\030\013"
      " \001(\021:\002-1\"p\n\025DungeonRpcTryEnterAsk\022\025\n\tDun"
      "geonId\030\001 \001(\021:\002-1\022\026\n\nBirthPoint\030\003 \001(\021:\002-1"
      "\022\023\n\007FaceDir\030\004 \001(\021:\002-1\022\023\n\007GuildId\030\005 \001(\021:\002"
      "-1\"\211\001\n\027DungeonRpcTryEnterReply\022\025\n\006Result"
      "\030\001 \001(\021:\005-9999\022\025\n\tDungeonId\030\002 \001(\021:\002-1\022\026\n\n"
      "BirthPoint\030\003 \001(\021:\002-1\022\023\n\007FaceDir\030\004 \001(\021:\002-"
      "1\022\023\n\007GuildId\030\005 \001(\021:\002-1\"1\n\030DungeonRpcTran"
      "sferNotify\022\025\n\tDungeonId\030\002 \001(\021:\002-1"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 673);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DungeonRpc.proto", &protobuf_RegisterTypes);
  ::protobuf_PublicStruct_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_DungeonRpc_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonRpcEnterAsk::kDungeonIdFieldNumber;
const int DungeonRpcEnterAsk::kDungeonTypeFieldNumber;
const int DungeonRpcEnterAsk::kBirthPointFieldNumber;
const int DungeonRpcEnterAsk::kFaceDirFieldNumber;
const int DungeonRpcEnterAsk::kGuildIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonRpcEnterAsk::DungeonRpcEnterAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DungeonRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DungeonRpcEnterAsk)
}
DungeonRpcEnterAsk::DungeonRpcEnterAsk(const DungeonRpcEnterAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guildid_, &from.guildid_,
    static_cast<size_t>(reinterpret_cast<char*>(&facedir_) -
    reinterpret_cast<char*>(&guildid_)) + sizeof(facedir_));
  // @@protoc_insertion_point(copy_constructor:DungeonRpcEnterAsk)
}

void DungeonRpcEnterAsk::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = -1;
  dungeonid_ = -1;
  dungeontype_ = -1;
  birthpoint_ = -1;
  facedir_ = -1;
}

DungeonRpcEnterAsk::~DungeonRpcEnterAsk() {
  // @@protoc_insertion_point(destructor:DungeonRpcEnterAsk)
  SharedDtor();
}

void DungeonRpcEnterAsk::SharedDtor() {
}

void DungeonRpcEnterAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcEnterAsk::descriptor() {
  protobuf_DungeonRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DungeonRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonRpcEnterAsk& DungeonRpcEnterAsk::default_instance() {
  protobuf_DungeonRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonRpcEnterAsk* DungeonRpcEnterAsk::New(::google::protobuf::Arena* arena) const {
  DungeonRpcEnterAsk* n = new DungeonRpcEnterAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonRpcEnterAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:DungeonRpcEnterAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    guildid_ = -1;
    dungeonid_ = -1;
    dungeontype_ = -1;
    birthpoint_ = -1;
    facedir_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonRpcEnterAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DungeonRpcEnterAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 DungeonId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_dungeonid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dungeonid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 DungeonType = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_dungeontype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dungeontype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 BirthPoint = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_birthpoint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &birthpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 FaceDir = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_facedir();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &facedir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 GuildId = 6 [default = -1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_guildid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &guildid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DungeonRpcEnterAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DungeonRpcEnterAsk)
  return false;
#undef DO_
}

void DungeonRpcEnterAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DungeonRpcEnterAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 DungeonId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->dungeonid(), output);
  }

  // optional sint32 DungeonType = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->dungeontype(), output);
  }

  // optional sint32 BirthPoint = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->birthpoint(), output);
  }

  // optional sint32 FaceDir = 5 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->facedir(), output);
  }

  // optional sint32 GuildId = 6 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->guildid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DungeonRpcEnterAsk)
}

::google::protobuf::uint8* DungeonRpcEnterAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DungeonRpcEnterAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 DungeonId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->dungeonid(), target);
  }

  // optional sint32 DungeonType = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->dungeontype(), target);
  }

  // optional sint32 BirthPoint = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->birthpoint(), target);
  }

  // optional sint32 FaceDir = 5 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->facedir(), target);
  }

  // optional sint32 GuildId = 6 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->guildid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DungeonRpcEnterAsk)
  return target;
}

size_t DungeonRpcEnterAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DungeonRpcEnterAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional sint32 GuildId = 6 [default = -1];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->guildid());
    }

    // optional sint32 DungeonId = 1 [default = -1];
    if (has_dungeonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dungeonid());
    }

    // optional sint32 DungeonType = 3 [default = -1];
    if (has_dungeontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dungeontype());
    }

    // optional sint32 BirthPoint = 4 [default = -1];
    if (has_birthpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->birthpoint());
    }

    // optional sint32 FaceDir = 5 [default = -1];
    if (has_facedir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->facedir());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcEnterAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DungeonRpcEnterAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonRpcEnterAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonRpcEnterAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DungeonRpcEnterAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DungeonRpcEnterAsk)
    MergeFrom(*source);
  }
}

void DungeonRpcEnterAsk::MergeFrom(const DungeonRpcEnterAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DungeonRpcEnterAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      guildid_ = from.guildid_;
    }
    if (cached_has_bits & 0x00000002u) {
      dungeonid_ = from.dungeonid_;
    }
    if (cached_has_bits & 0x00000004u) {
      dungeontype_ = from.dungeontype_;
    }
    if (cached_has_bits & 0x00000008u) {
      birthpoint_ = from.birthpoint_;
    }
    if (cached_has_bits & 0x00000010u) {
      facedir_ = from.facedir_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DungeonRpcEnterAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DungeonRpcEnterAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcEnterAsk::CopyFrom(const DungeonRpcEnterAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DungeonRpcEnterAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcEnterAsk::IsInitialized() const {
  return true;
}

void DungeonRpcEnterAsk::Swap(DungeonRpcEnterAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonRpcEnterAsk::InternalSwap(DungeonRpcEnterAsk* other) {
  using std::swap;
  swap(guildid_, other->guildid_);
  swap(dungeonid_, other->dungeonid_);
  swap(dungeontype_, other->dungeontype_);
  swap(birthpoint_, other->birthpoint_);
  swap(facedir_, other->facedir_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonRpcEnterAsk::GetMetadata() const {
  protobuf_DungeonRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DungeonRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonRpcEnterAsk

// optional sint32 DungeonId = 1 [default = -1];
bool DungeonRpcEnterAsk::has_dungeonid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DungeonRpcEnterAsk::set_has_dungeonid() {
  _has_bits_[0] |= 0x00000002u;
}
void DungeonRpcEnterAsk::clear_has_dungeonid() {
  _has_bits_[0] &= ~0x00000002u;
}
void DungeonRpcEnterAsk::clear_dungeonid() {
  dungeonid_ = -1;
  clear_has_dungeonid();
}
::google::protobuf::int32 DungeonRpcEnterAsk::dungeonid() const {
  // @@protoc_insertion_point(field_get:DungeonRpcEnterAsk.DungeonId)
  return dungeonid_;
}
void DungeonRpcEnterAsk::set_dungeonid(::google::protobuf::int32 value) {
  set_has_dungeonid();
  dungeonid_ = value;
  // @@protoc_insertion_point(field_set:DungeonRpcEnterAsk.DungeonId)
}

// optional sint32 DungeonType = 3 [default = -1];
bool DungeonRpcEnterAsk::has_dungeontype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DungeonRpcEnterAsk::set_has_dungeontype() {
  _has_bits_[0] |= 0x00000004u;
}
void DungeonRpcEnterAsk::clear_has_dungeontype() {
  _has_bits_[0] &= ~0x00000004u;
}
void DungeonRpcEnterAsk::clear_dungeontype() {
  dungeontype_ = -1;
  clear_has_dungeontype();
}
::google::protobuf::int32 DungeonRpcEnterAsk::dungeontype() const {
  // @@protoc_insertion_point(field_get:DungeonRpcEnterAsk.DungeonType)
  return dungeontype_;
}
void DungeonRpcEnterAsk::set_dungeontype(::google::protobuf::int32 value) {
  set_has_dungeontype();
  dungeontype_ = value;
  // @@protoc_insertion_point(field_set:DungeonRpcEnterAsk.DungeonType)
}

// optional sint32 BirthPoint = 4 [default = -1];
bool DungeonRpcEnterAsk::has_birthpoint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DungeonRpcEnterAsk::set_has_birthpoint() {
  _has_bits_[0] |= 0x00000008u;
}
void DungeonRpcEnterAsk::clear_has_birthpoint() {
  _has_bits_[0] &= ~0x00000008u;
}
void DungeonRpcEnterAsk::clear_birthpoint() {
  birthpoint_ = -1;
  clear_has_birthpoint();
}
::google::protobuf::int32 DungeonRpcEnterAsk::birthpoint() const {
  // @@protoc_insertion_point(field_get:DungeonRpcEnterAsk.BirthPoint)
  return birthpoint_;
}
void DungeonRpcEnterAsk::set_birthpoint(::google::protobuf::int32 value) {
  set_has_birthpoint();
  birthpoint_ = value;
  // @@protoc_insertion_point(field_set:DungeonRpcEnterAsk.BirthPoint)
}

// optional sint32 FaceDir = 5 [default = -1];
bool DungeonRpcEnterAsk::has_facedir() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DungeonRpcEnterAsk::set_has_facedir() {
  _has_bits_[0] |= 0x00000010u;
}
void DungeonRpcEnterAsk::clear_has_facedir() {
  _has_bits_[0] &= ~0x00000010u;
}
void DungeonRpcEnterAsk::clear_facedir() {
  facedir_ = -1;
  clear_has_facedir();
}
::google::protobuf::int32 DungeonRpcEnterAsk::facedir() const {
  // @@protoc_insertion_point(field_get:DungeonRpcEnterAsk.FaceDir)
  return facedir_;
}
void DungeonRpcEnterAsk::set_facedir(::google::protobuf::int32 value) {
  set_has_facedir();
  facedir_ = value;
  // @@protoc_insertion_point(field_set:DungeonRpcEnterAsk.FaceDir)
}

// optional sint32 GuildId = 6 [default = -1];
bool DungeonRpcEnterAsk::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DungeonRpcEnterAsk::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
void DungeonRpcEnterAsk::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
void DungeonRpcEnterAsk::clear_guildid() {
  guildid_ = -1;
  clear_has_guildid();
}
::google::protobuf::int32 DungeonRpcEnterAsk::guildid() const {
  // @@protoc_insertion_point(field_get:DungeonRpcEnterAsk.GuildId)
  return guildid_;
}
void DungeonRpcEnterAsk::set_guildid(::google::protobuf::int32 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:DungeonRpcEnterAsk.GuildId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonRpcEnterReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonRpcEnterReply::DungeonRpcEnterReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DungeonRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DungeonRpcEnterReply)
}
DungeonRpcEnterReply::DungeonRpcEnterReply(const DungeonRpcEnterReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:DungeonRpcEnterReply)
}

void DungeonRpcEnterReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

DungeonRpcEnterReply::~DungeonRpcEnterReply() {
  // @@protoc_insertion_point(destructor:DungeonRpcEnterReply)
  SharedDtor();
}

void DungeonRpcEnterReply::SharedDtor() {
}

void DungeonRpcEnterReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcEnterReply::descriptor() {
  protobuf_DungeonRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DungeonRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonRpcEnterReply& DungeonRpcEnterReply::default_instance() {
  protobuf_DungeonRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonRpcEnterReply* DungeonRpcEnterReply::New(::google::protobuf::Arena* arena) const {
  DungeonRpcEnterReply* n = new DungeonRpcEnterReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonRpcEnterReply::Clear() {
// @@protoc_insertion_point(message_clear_start:DungeonRpcEnterReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonRpcEnterReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DungeonRpcEnterReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DungeonRpcEnterReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DungeonRpcEnterReply)
  return false;
#undef DO_
}

void DungeonRpcEnterReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DungeonRpcEnterReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DungeonRpcEnterReply)
}

::google::protobuf::uint8* DungeonRpcEnterReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DungeonRpcEnterReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DungeonRpcEnterReply)
  return target;
}

size_t DungeonRpcEnterReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DungeonRpcEnterReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcEnterReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DungeonRpcEnterReply)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonRpcEnterReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonRpcEnterReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DungeonRpcEnterReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DungeonRpcEnterReply)
    MergeFrom(*source);
  }
}

void DungeonRpcEnterReply::MergeFrom(const DungeonRpcEnterReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DungeonRpcEnterReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void DungeonRpcEnterReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DungeonRpcEnterReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcEnterReply::CopyFrom(const DungeonRpcEnterReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DungeonRpcEnterReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcEnterReply::IsInitialized() const {
  return true;
}

void DungeonRpcEnterReply::Swap(DungeonRpcEnterReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonRpcEnterReply::InternalSwap(DungeonRpcEnterReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonRpcEnterReply::GetMetadata() const {
  protobuf_DungeonRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DungeonRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonRpcEnterReply

// optional sint32 Result = 1 [default = -9999];
bool DungeonRpcEnterReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DungeonRpcEnterReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void DungeonRpcEnterReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void DungeonRpcEnterReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 DungeonRpcEnterReply::result() const {
  // @@protoc_insertion_point(field_get:DungeonRpcEnterReply.Result)
  return result_;
}
void DungeonRpcEnterReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:DungeonRpcEnterReply.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonRpcOpenNotify::kDungeonKeyFieldNumber;
const int DungeonRpcOpenNotify::kHostFieldNumber;
const int DungeonRpcOpenNotify::kPortFieldNumber;
const int DungeonRpcOpenNotify::kDungeonIdFieldNumber;
const int DungeonRpcOpenNotify::kDungeonTypeFieldNumber;
const int DungeonRpcOpenNotify::kGuildIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonRpcOpenNotify::DungeonRpcOpenNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DungeonRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DungeonRpcOpenNotify)
}
DungeonRpcOpenNotify::DungeonRpcOpenNotify(const DungeonRpcOpenNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dungeonkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dungeonkey()) {
    dungeonkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dungeonkey_);
  }
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host()) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&guildid_) -
    reinterpret_cast<char*>(&port_)) + sizeof(guildid_));
  // @@protoc_insertion_point(copy_constructor:DungeonRpcOpenNotify)
}

void DungeonRpcOpenNotify::SharedCtor() {
  _cached_size_ = 0;
  dungeonkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = -1;
  dungeonid_ = -1;
  dungeontype_ = -1;
  guildid_ = -1;
}

DungeonRpcOpenNotify::~DungeonRpcOpenNotify() {
  // @@protoc_insertion_point(destructor:DungeonRpcOpenNotify)
  SharedDtor();
}

void DungeonRpcOpenNotify::SharedDtor() {
  dungeonkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DungeonRpcOpenNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcOpenNotify::descriptor() {
  protobuf_DungeonRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DungeonRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonRpcOpenNotify& DungeonRpcOpenNotify::default_instance() {
  protobuf_DungeonRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonRpcOpenNotify* DungeonRpcOpenNotify::New(::google::protobuf::Arena* arena) const {
  DungeonRpcOpenNotify* n = new DungeonRpcOpenNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonRpcOpenNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:DungeonRpcOpenNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!dungeonkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dungeonkey_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*host_.UnsafeRawStringPointer())->clear();
    }
    port_ = -1;
    dungeonid_ = -1;
    dungeontype_ = -1;
    guildid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonRpcOpenNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DungeonRpcOpenNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DungeonKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dungeonkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dungeonkey().data(), static_cast<int>(this->dungeonkey().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DungeonRpcOpenNotify.DungeonKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Host = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DungeonRpcOpenNotify.Host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Port = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 DungeonId = 9 [default = -1];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_dungeonid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dungeonid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 DungeonType = 10 [default = -1];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_dungeontype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dungeontype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 GuildId = 11 [default = -1];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_guildid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &guildid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DungeonRpcOpenNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DungeonRpcOpenNotify)
  return false;
#undef DO_
}

void DungeonRpcOpenNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DungeonRpcOpenNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string DungeonKey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dungeonkey().data(), static_cast<int>(this->dungeonkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DungeonRpcOpenNotify.DungeonKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dungeonkey(), output);
  }

  // optional string Host = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DungeonRpcOpenNotify.Host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->host(), output);
  }

  // optional sint32 Port = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->port(), output);
  }

  // optional sint32 DungeonId = 9 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->dungeonid(), output);
  }

  // optional sint32 DungeonType = 10 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->dungeontype(), output);
  }

  // optional sint32 GuildId = 11 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->guildid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DungeonRpcOpenNotify)
}

::google::protobuf::uint8* DungeonRpcOpenNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DungeonRpcOpenNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string DungeonKey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dungeonkey().data(), static_cast<int>(this->dungeonkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DungeonRpcOpenNotify.DungeonKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dungeonkey(), target);
  }

  // optional string Host = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DungeonRpcOpenNotify.Host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host(), target);
  }

  // optional sint32 Port = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->port(), target);
  }

  // optional sint32 DungeonId = 9 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->dungeonid(), target);
  }

  // optional sint32 DungeonType = 10 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->dungeontype(), target);
  }

  // optional sint32 GuildId = 11 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->guildid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DungeonRpcOpenNotify)
  return target;
}

size_t DungeonRpcOpenNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DungeonRpcOpenNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string DungeonKey = 1;
    if (has_dungeonkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dungeonkey());
    }

    // optional string Host = 2;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional sint32 Port = 3 [default = -1];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->port());
    }

    // optional sint32 DungeonId = 9 [default = -1];
    if (has_dungeonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dungeonid());
    }

    // optional sint32 DungeonType = 10 [default = -1];
    if (has_dungeontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dungeontype());
    }

    // optional sint32 GuildId = 11 [default = -1];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->guildid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcOpenNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DungeonRpcOpenNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonRpcOpenNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonRpcOpenNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DungeonRpcOpenNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DungeonRpcOpenNotify)
    MergeFrom(*source);
  }
}

void DungeonRpcOpenNotify::MergeFrom(const DungeonRpcOpenNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DungeonRpcOpenNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_dungeonkey();
      dungeonkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dungeonkey_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_host();
      host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
    if (cached_has_bits & 0x00000004u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000008u) {
      dungeonid_ = from.dungeonid_;
    }
    if (cached_has_bits & 0x00000010u) {
      dungeontype_ = from.dungeontype_;
    }
    if (cached_has_bits & 0x00000020u) {
      guildid_ = from.guildid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DungeonRpcOpenNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DungeonRpcOpenNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcOpenNotify::CopyFrom(const DungeonRpcOpenNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DungeonRpcOpenNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcOpenNotify::IsInitialized() const {
  return true;
}

void DungeonRpcOpenNotify::Swap(DungeonRpcOpenNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonRpcOpenNotify::InternalSwap(DungeonRpcOpenNotify* other) {
  using std::swap;
  dungeonkey_.Swap(&other->dungeonkey_);
  host_.Swap(&other->host_);
  swap(port_, other->port_);
  swap(dungeonid_, other->dungeonid_);
  swap(dungeontype_, other->dungeontype_);
  swap(guildid_, other->guildid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonRpcOpenNotify::GetMetadata() const {
  protobuf_DungeonRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DungeonRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonRpcOpenNotify

// optional string DungeonKey = 1;
bool DungeonRpcOpenNotify::has_dungeonkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DungeonRpcOpenNotify::set_has_dungeonkey() {
  _has_bits_[0] |= 0x00000001u;
}
void DungeonRpcOpenNotify::clear_has_dungeonkey() {
  _has_bits_[0] &= ~0x00000001u;
}
void DungeonRpcOpenNotify::clear_dungeonkey() {
  dungeonkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dungeonkey();
}
const ::std::string& DungeonRpcOpenNotify::dungeonkey() const {
  // @@protoc_insertion_point(field_get:DungeonRpcOpenNotify.DungeonKey)
  return dungeonkey_.GetNoArena();
}
void DungeonRpcOpenNotify::set_dungeonkey(const ::std::string& value) {
  set_has_dungeonkey();
  dungeonkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DungeonRpcOpenNotify.DungeonKey)
}
#if LANG_CXX11
void DungeonRpcOpenNotify::set_dungeonkey(::std::string&& value) {
  set_has_dungeonkey();
  dungeonkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DungeonRpcOpenNotify.DungeonKey)
}
#endif
void DungeonRpcOpenNotify::set_dungeonkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dungeonkey();
  dungeonkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DungeonRpcOpenNotify.DungeonKey)
}
void DungeonRpcOpenNotify::set_dungeonkey(const char* value, size_t size) {
  set_has_dungeonkey();
  dungeonkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DungeonRpcOpenNotify.DungeonKey)
}
::std::string* DungeonRpcOpenNotify::mutable_dungeonkey() {
  set_has_dungeonkey();
  // @@protoc_insertion_point(field_mutable:DungeonRpcOpenNotify.DungeonKey)
  return dungeonkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DungeonRpcOpenNotify::release_dungeonkey() {
  // @@protoc_insertion_point(field_release:DungeonRpcOpenNotify.DungeonKey)
  clear_has_dungeonkey();
  return dungeonkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DungeonRpcOpenNotify::set_allocated_dungeonkey(::std::string* dungeonkey) {
  if (dungeonkey != NULL) {
    set_has_dungeonkey();
  } else {
    clear_has_dungeonkey();
  }
  dungeonkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dungeonkey);
  // @@protoc_insertion_point(field_set_allocated:DungeonRpcOpenNotify.DungeonKey)
}

// optional string Host = 2;
bool DungeonRpcOpenNotify::has_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DungeonRpcOpenNotify::set_has_host() {
  _has_bits_[0] |= 0x00000002u;
}
void DungeonRpcOpenNotify::clear_has_host() {
  _has_bits_[0] &= ~0x00000002u;
}
void DungeonRpcOpenNotify::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
const ::std::string& DungeonRpcOpenNotify::host() const {
  // @@protoc_insertion_point(field_get:DungeonRpcOpenNotify.Host)
  return host_.GetNoArena();
}
void DungeonRpcOpenNotify::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DungeonRpcOpenNotify.Host)
}
#if LANG_CXX11
void DungeonRpcOpenNotify::set_host(::std::string&& value) {
  set_has_host();
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DungeonRpcOpenNotify.Host)
}
#endif
void DungeonRpcOpenNotify::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DungeonRpcOpenNotify.Host)
}
void DungeonRpcOpenNotify::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DungeonRpcOpenNotify.Host)
}
::std::string* DungeonRpcOpenNotify::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:DungeonRpcOpenNotify.Host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DungeonRpcOpenNotify::release_host() {
  // @@protoc_insertion_point(field_release:DungeonRpcOpenNotify.Host)
  clear_has_host();
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DungeonRpcOpenNotify::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:DungeonRpcOpenNotify.Host)
}

// optional sint32 Port = 3 [default = -1];
bool DungeonRpcOpenNotify::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DungeonRpcOpenNotify::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
void DungeonRpcOpenNotify::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
void DungeonRpcOpenNotify::clear_port() {
  port_ = -1;
  clear_has_port();
}
::google::protobuf::int32 DungeonRpcOpenNotify::port() const {
  // @@protoc_insertion_point(field_get:DungeonRpcOpenNotify.Port)
  return port_;
}
void DungeonRpcOpenNotify::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:DungeonRpcOpenNotify.Port)
}

// optional sint32 DungeonId = 9 [default = -1];
bool DungeonRpcOpenNotify::has_dungeonid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DungeonRpcOpenNotify::set_has_dungeonid() {
  _has_bits_[0] |= 0x00000008u;
}
void DungeonRpcOpenNotify::clear_has_dungeonid() {
  _has_bits_[0] &= ~0x00000008u;
}
void DungeonRpcOpenNotify::clear_dungeonid() {
  dungeonid_ = -1;
  clear_has_dungeonid();
}
::google::protobuf::int32 DungeonRpcOpenNotify::dungeonid() const {
  // @@protoc_insertion_point(field_get:DungeonRpcOpenNotify.DungeonId)
  return dungeonid_;
}
void DungeonRpcOpenNotify::set_dungeonid(::google::protobuf::int32 value) {
  set_has_dungeonid();
  dungeonid_ = value;
  // @@protoc_insertion_point(field_set:DungeonRpcOpenNotify.DungeonId)
}

// optional sint32 DungeonType = 10 [default = -1];
bool DungeonRpcOpenNotify::has_dungeontype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DungeonRpcOpenNotify::set_has_dungeontype() {
  _has_bits_[0] |= 0x00000010u;
}
void DungeonRpcOpenNotify::clear_has_dungeontype() {
  _has_bits_[0] &= ~0x00000010u;
}
void DungeonRpcOpenNotify::clear_dungeontype() {
  dungeontype_ = -1;
  clear_has_dungeontype();
}
::google::protobuf::int32 DungeonRpcOpenNotify::dungeontype() const {
  // @@protoc_insertion_point(field_get:DungeonRpcOpenNotify.DungeonType)
  return dungeontype_;
}
void DungeonRpcOpenNotify::set_dungeontype(::google::protobuf::int32 value) {
  set_has_dungeontype();
  dungeontype_ = value;
  // @@protoc_insertion_point(field_set:DungeonRpcOpenNotify.DungeonType)
}

// optional sint32 GuildId = 11 [default = -1];
bool DungeonRpcOpenNotify::has_guildid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DungeonRpcOpenNotify::set_has_guildid() {
  _has_bits_[0] |= 0x00000020u;
}
void DungeonRpcOpenNotify::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000020u;
}
void DungeonRpcOpenNotify::clear_guildid() {
  guildid_ = -1;
  clear_has_guildid();
}
::google::protobuf::int32 DungeonRpcOpenNotify::guildid() const {
  // @@protoc_insertion_point(field_get:DungeonRpcOpenNotify.GuildId)
  return guildid_;
}
void DungeonRpcOpenNotify::set_guildid(::google::protobuf::int32 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:DungeonRpcOpenNotify.GuildId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonRpcTryEnterAsk::kDungeonIdFieldNumber;
const int DungeonRpcTryEnterAsk::kBirthPointFieldNumber;
const int DungeonRpcTryEnterAsk::kFaceDirFieldNumber;
const int DungeonRpcTryEnterAsk::kGuildIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonRpcTryEnterAsk::DungeonRpcTryEnterAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DungeonRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DungeonRpcTryEnterAsk)
}
DungeonRpcTryEnterAsk::DungeonRpcTryEnterAsk(const DungeonRpcTryEnterAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dungeonid_, &from.dungeonid_,
    static_cast<size_t>(reinterpret_cast<char*>(&guildid_) -
    reinterpret_cast<char*>(&dungeonid_)) + sizeof(guildid_));
  // @@protoc_insertion_point(copy_constructor:DungeonRpcTryEnterAsk)
}

void DungeonRpcTryEnterAsk::SharedCtor() {
  _cached_size_ = 0;
  dungeonid_ = -1;
  birthpoint_ = -1;
  facedir_ = -1;
  guildid_ = -1;
}

DungeonRpcTryEnterAsk::~DungeonRpcTryEnterAsk() {
  // @@protoc_insertion_point(destructor:DungeonRpcTryEnterAsk)
  SharedDtor();
}

void DungeonRpcTryEnterAsk::SharedDtor() {
}

void DungeonRpcTryEnterAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcTryEnterAsk::descriptor() {
  protobuf_DungeonRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DungeonRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonRpcTryEnterAsk& DungeonRpcTryEnterAsk::default_instance() {
  protobuf_DungeonRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonRpcTryEnterAsk* DungeonRpcTryEnterAsk::New(::google::protobuf::Arena* arena) const {
  DungeonRpcTryEnterAsk* n = new DungeonRpcTryEnterAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonRpcTryEnterAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:DungeonRpcTryEnterAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    dungeonid_ = -1;
    birthpoint_ = -1;
    facedir_ = -1;
    guildid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonRpcTryEnterAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DungeonRpcTryEnterAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 DungeonId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_dungeonid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dungeonid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 BirthPoint = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_birthpoint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &birthpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 FaceDir = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_facedir();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &facedir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 GuildId = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_guildid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &guildid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DungeonRpcTryEnterAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DungeonRpcTryEnterAsk)
  return false;
#undef DO_
}

void DungeonRpcTryEnterAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DungeonRpcTryEnterAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 DungeonId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->dungeonid(), output);
  }

  // optional sint32 BirthPoint = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->birthpoint(), output);
  }

  // optional sint32 FaceDir = 4 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->facedir(), output);
  }

  // optional sint32 GuildId = 5 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->guildid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DungeonRpcTryEnterAsk)
}

::google::protobuf::uint8* DungeonRpcTryEnterAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DungeonRpcTryEnterAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 DungeonId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->dungeonid(), target);
  }

  // optional sint32 BirthPoint = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->birthpoint(), target);
  }

  // optional sint32 FaceDir = 4 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->facedir(), target);
  }

  // optional sint32 GuildId = 5 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->guildid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DungeonRpcTryEnterAsk)
  return target;
}

size_t DungeonRpcTryEnterAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DungeonRpcTryEnterAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional sint32 DungeonId = 1 [default = -1];
    if (has_dungeonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dungeonid());
    }

    // optional sint32 BirthPoint = 3 [default = -1];
    if (has_birthpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->birthpoint());
    }

    // optional sint32 FaceDir = 4 [default = -1];
    if (has_facedir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->facedir());
    }

    // optional sint32 GuildId = 5 [default = -1];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->guildid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcTryEnterAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DungeonRpcTryEnterAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonRpcTryEnterAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonRpcTryEnterAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DungeonRpcTryEnterAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DungeonRpcTryEnterAsk)
    MergeFrom(*source);
  }
}

void DungeonRpcTryEnterAsk::MergeFrom(const DungeonRpcTryEnterAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DungeonRpcTryEnterAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      dungeonid_ = from.dungeonid_;
    }
    if (cached_has_bits & 0x00000002u) {
      birthpoint_ = from.birthpoint_;
    }
    if (cached_has_bits & 0x00000004u) {
      facedir_ = from.facedir_;
    }
    if (cached_has_bits & 0x00000008u) {
      guildid_ = from.guildid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DungeonRpcTryEnterAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DungeonRpcTryEnterAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcTryEnterAsk::CopyFrom(const DungeonRpcTryEnterAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DungeonRpcTryEnterAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcTryEnterAsk::IsInitialized() const {
  return true;
}

void DungeonRpcTryEnterAsk::Swap(DungeonRpcTryEnterAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonRpcTryEnterAsk::InternalSwap(DungeonRpcTryEnterAsk* other) {
  using std::swap;
  swap(dungeonid_, other->dungeonid_);
  swap(birthpoint_, other->birthpoint_);
  swap(facedir_, other->facedir_);
  swap(guildid_, other->guildid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonRpcTryEnterAsk::GetMetadata() const {
  protobuf_DungeonRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DungeonRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonRpcTryEnterAsk

// optional sint32 DungeonId = 1 [default = -1];
bool DungeonRpcTryEnterAsk::has_dungeonid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DungeonRpcTryEnterAsk::set_has_dungeonid() {
  _has_bits_[0] |= 0x00000001u;
}
void DungeonRpcTryEnterAsk::clear_has_dungeonid() {
  _has_bits_[0] &= ~0x00000001u;
}
void DungeonRpcTryEnterAsk::clear_dungeonid() {
  dungeonid_ = -1;
  clear_has_dungeonid();
}
::google::protobuf::int32 DungeonRpcTryEnterAsk::dungeonid() const {
  // @@protoc_insertion_point(field_get:DungeonRpcTryEnterAsk.DungeonId)
  return dungeonid_;
}
void DungeonRpcTryEnterAsk::set_dungeonid(::google::protobuf::int32 value) {
  set_has_dungeonid();
  dungeonid_ = value;
  // @@protoc_insertion_point(field_set:DungeonRpcTryEnterAsk.DungeonId)
}

// optional sint32 BirthPoint = 3 [default = -1];
bool DungeonRpcTryEnterAsk::has_birthpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DungeonRpcTryEnterAsk::set_has_birthpoint() {
  _has_bits_[0] |= 0x00000002u;
}
void DungeonRpcTryEnterAsk::clear_has_birthpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
void DungeonRpcTryEnterAsk::clear_birthpoint() {
  birthpoint_ = -1;
  clear_has_birthpoint();
}
::google::protobuf::int32 DungeonRpcTryEnterAsk::birthpoint() const {
  // @@protoc_insertion_point(field_get:DungeonRpcTryEnterAsk.BirthPoint)
  return birthpoint_;
}
void DungeonRpcTryEnterAsk::set_birthpoint(::google::protobuf::int32 value) {
  set_has_birthpoint();
  birthpoint_ = value;
  // @@protoc_insertion_point(field_set:DungeonRpcTryEnterAsk.BirthPoint)
}

// optional sint32 FaceDir = 4 [default = -1];
bool DungeonRpcTryEnterAsk::has_facedir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DungeonRpcTryEnterAsk::set_has_facedir() {
  _has_bits_[0] |= 0x00000004u;
}
void DungeonRpcTryEnterAsk::clear_has_facedir() {
  _has_bits_[0] &= ~0x00000004u;
}
void DungeonRpcTryEnterAsk::clear_facedir() {
  facedir_ = -1;
  clear_has_facedir();
}
::google::protobuf::int32 DungeonRpcTryEnterAsk::facedir() const {
  // @@protoc_insertion_point(field_get:DungeonRpcTryEnterAsk.FaceDir)
  return facedir_;
}
void DungeonRpcTryEnterAsk::set_facedir(::google::protobuf::int32 value) {
  set_has_facedir();
  facedir_ = value;
  // @@protoc_insertion_point(field_set:DungeonRpcTryEnterAsk.FaceDir)
}

// optional sint32 GuildId = 5 [default = -1];
bool DungeonRpcTryEnterAsk::has_guildid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DungeonRpcTryEnterAsk::set_has_guildid() {
  _has_bits_[0] |= 0x00000008u;
}
void DungeonRpcTryEnterAsk::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000008u;
}
void DungeonRpcTryEnterAsk::clear_guildid() {
  guildid_ = -1;
  clear_has_guildid();
}
::google::protobuf::int32 DungeonRpcTryEnterAsk::guildid() const {
  // @@protoc_insertion_point(field_get:DungeonRpcTryEnterAsk.GuildId)
  return guildid_;
}
void DungeonRpcTryEnterAsk::set_guildid(::google::protobuf::int32 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:DungeonRpcTryEnterAsk.GuildId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonRpcTryEnterReply::kResultFieldNumber;
const int DungeonRpcTryEnterReply::kDungeonIdFieldNumber;
const int DungeonRpcTryEnterReply::kBirthPointFieldNumber;
const int DungeonRpcTryEnterReply::kFaceDirFieldNumber;
const int DungeonRpcTryEnterReply::kGuildIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonRpcTryEnterReply::DungeonRpcTryEnterReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DungeonRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DungeonRpcTryEnterReply)
}
DungeonRpcTryEnterReply::DungeonRpcTryEnterReply(const DungeonRpcTryEnterReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guildid_, &from.guildid_,
    static_cast<size_t>(reinterpret_cast<char*>(&facedir_) -
    reinterpret_cast<char*>(&guildid_)) + sizeof(facedir_));
  // @@protoc_insertion_point(copy_constructor:DungeonRpcTryEnterReply)
}

void DungeonRpcTryEnterReply::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = -1;
  result_ = -9999;
  dungeonid_ = -1;
  birthpoint_ = -1;
  facedir_ = -1;
}

DungeonRpcTryEnterReply::~DungeonRpcTryEnterReply() {
  // @@protoc_insertion_point(destructor:DungeonRpcTryEnterReply)
  SharedDtor();
}

void DungeonRpcTryEnterReply::SharedDtor() {
}

void DungeonRpcTryEnterReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcTryEnterReply::descriptor() {
  protobuf_DungeonRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DungeonRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonRpcTryEnterReply& DungeonRpcTryEnterReply::default_instance() {
  protobuf_DungeonRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonRpcTryEnterReply* DungeonRpcTryEnterReply::New(::google::protobuf::Arena* arena) const {
  DungeonRpcTryEnterReply* n = new DungeonRpcTryEnterReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonRpcTryEnterReply::Clear() {
// @@protoc_insertion_point(message_clear_start:DungeonRpcTryEnterReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    guildid_ = -1;
    result_ = -9999;
    dungeonid_ = -1;
    birthpoint_ = -1;
    facedir_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonRpcTryEnterReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DungeonRpcTryEnterReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 DungeonId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_dungeonid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dungeonid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 BirthPoint = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_birthpoint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &birthpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 FaceDir = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_facedir();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &facedir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 GuildId = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_guildid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &guildid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DungeonRpcTryEnterReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DungeonRpcTryEnterReply)
  return false;
#undef DO_
}

void DungeonRpcTryEnterReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DungeonRpcTryEnterReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 DungeonId = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->dungeonid(), output);
  }

  // optional sint32 BirthPoint = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->birthpoint(), output);
  }

  // optional sint32 FaceDir = 4 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->facedir(), output);
  }

  // optional sint32 GuildId = 5 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->guildid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DungeonRpcTryEnterReply)
}

::google::protobuf::uint8* DungeonRpcTryEnterReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DungeonRpcTryEnterReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 DungeonId = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->dungeonid(), target);
  }

  // optional sint32 BirthPoint = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->birthpoint(), target);
  }

  // optional sint32 FaceDir = 4 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->facedir(), target);
  }

  // optional sint32 GuildId = 5 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->guildid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DungeonRpcTryEnterReply)
  return target;
}

size_t DungeonRpcTryEnterReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DungeonRpcTryEnterReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional sint32 GuildId = 5 [default = -1];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->guildid());
    }

    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 DungeonId = 2 [default = -1];
    if (has_dungeonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dungeonid());
    }

    // optional sint32 BirthPoint = 3 [default = -1];
    if (has_birthpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->birthpoint());
    }

    // optional sint32 FaceDir = 4 [default = -1];
    if (has_facedir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->facedir());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcTryEnterReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DungeonRpcTryEnterReply)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonRpcTryEnterReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonRpcTryEnterReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DungeonRpcTryEnterReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DungeonRpcTryEnterReply)
    MergeFrom(*source);
  }
}

void DungeonRpcTryEnterReply::MergeFrom(const DungeonRpcTryEnterReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DungeonRpcTryEnterReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      guildid_ = from.guildid_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      dungeonid_ = from.dungeonid_;
    }
    if (cached_has_bits & 0x00000008u) {
      birthpoint_ = from.birthpoint_;
    }
    if (cached_has_bits & 0x00000010u) {
      facedir_ = from.facedir_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DungeonRpcTryEnterReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DungeonRpcTryEnterReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcTryEnterReply::CopyFrom(const DungeonRpcTryEnterReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DungeonRpcTryEnterReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcTryEnterReply::IsInitialized() const {
  return true;
}

void DungeonRpcTryEnterReply::Swap(DungeonRpcTryEnterReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonRpcTryEnterReply::InternalSwap(DungeonRpcTryEnterReply* other) {
  using std::swap;
  swap(guildid_, other->guildid_);
  swap(result_, other->result_);
  swap(dungeonid_, other->dungeonid_);
  swap(birthpoint_, other->birthpoint_);
  swap(facedir_, other->facedir_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonRpcTryEnterReply::GetMetadata() const {
  protobuf_DungeonRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DungeonRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonRpcTryEnterReply

// optional sint32 Result = 1 [default = -9999];
bool DungeonRpcTryEnterReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DungeonRpcTryEnterReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void DungeonRpcTryEnterReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void DungeonRpcTryEnterReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 DungeonRpcTryEnterReply::result() const {
  // @@protoc_insertion_point(field_get:DungeonRpcTryEnterReply.Result)
  return result_;
}
void DungeonRpcTryEnterReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:DungeonRpcTryEnterReply.Result)
}

// optional sint32 DungeonId = 2 [default = -1];
bool DungeonRpcTryEnterReply::has_dungeonid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DungeonRpcTryEnterReply::set_has_dungeonid() {
  _has_bits_[0] |= 0x00000004u;
}
void DungeonRpcTryEnterReply::clear_has_dungeonid() {
  _has_bits_[0] &= ~0x00000004u;
}
void DungeonRpcTryEnterReply::clear_dungeonid() {
  dungeonid_ = -1;
  clear_has_dungeonid();
}
::google::protobuf::int32 DungeonRpcTryEnterReply::dungeonid() const {
  // @@protoc_insertion_point(field_get:DungeonRpcTryEnterReply.DungeonId)
  return dungeonid_;
}
void DungeonRpcTryEnterReply::set_dungeonid(::google::protobuf::int32 value) {
  set_has_dungeonid();
  dungeonid_ = value;
  // @@protoc_insertion_point(field_set:DungeonRpcTryEnterReply.DungeonId)
}

// optional sint32 BirthPoint = 3 [default = -1];
bool DungeonRpcTryEnterReply::has_birthpoint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DungeonRpcTryEnterReply::set_has_birthpoint() {
  _has_bits_[0] |= 0x00000008u;
}
void DungeonRpcTryEnterReply::clear_has_birthpoint() {
  _has_bits_[0] &= ~0x00000008u;
}
void DungeonRpcTryEnterReply::clear_birthpoint() {
  birthpoint_ = -1;
  clear_has_birthpoint();
}
::google::protobuf::int32 DungeonRpcTryEnterReply::birthpoint() const {
  // @@protoc_insertion_point(field_get:DungeonRpcTryEnterReply.BirthPoint)
  return birthpoint_;
}
void DungeonRpcTryEnterReply::set_birthpoint(::google::protobuf::int32 value) {
  set_has_birthpoint();
  birthpoint_ = value;
  // @@protoc_insertion_point(field_set:DungeonRpcTryEnterReply.BirthPoint)
}

// optional sint32 FaceDir = 4 [default = -1];
bool DungeonRpcTryEnterReply::has_facedir() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DungeonRpcTryEnterReply::set_has_facedir() {
  _has_bits_[0] |= 0x00000010u;
}
void DungeonRpcTryEnterReply::clear_has_facedir() {
  _has_bits_[0] &= ~0x00000010u;
}
void DungeonRpcTryEnterReply::clear_facedir() {
  facedir_ = -1;
  clear_has_facedir();
}
::google::protobuf::int32 DungeonRpcTryEnterReply::facedir() const {
  // @@protoc_insertion_point(field_get:DungeonRpcTryEnterReply.FaceDir)
  return facedir_;
}
void DungeonRpcTryEnterReply::set_facedir(::google::protobuf::int32 value) {
  set_has_facedir();
  facedir_ = value;
  // @@protoc_insertion_point(field_set:DungeonRpcTryEnterReply.FaceDir)
}

// optional sint32 GuildId = 5 [default = -1];
bool DungeonRpcTryEnterReply::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DungeonRpcTryEnterReply::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
void DungeonRpcTryEnterReply::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
void DungeonRpcTryEnterReply::clear_guildid() {
  guildid_ = -1;
  clear_has_guildid();
}
::google::protobuf::int32 DungeonRpcTryEnterReply::guildid() const {
  // @@protoc_insertion_point(field_get:DungeonRpcTryEnterReply.GuildId)
  return guildid_;
}
void DungeonRpcTryEnterReply::set_guildid(::google::protobuf::int32 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:DungeonRpcTryEnterReply.GuildId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonRpcTransferNotify::kDungeonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonRpcTransferNotify::DungeonRpcTransferNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DungeonRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DungeonRpcTransferNotify)
}
DungeonRpcTransferNotify::DungeonRpcTransferNotify(const DungeonRpcTransferNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dungeonid_ = from.dungeonid_;
  // @@protoc_insertion_point(copy_constructor:DungeonRpcTransferNotify)
}

void DungeonRpcTransferNotify::SharedCtor() {
  _cached_size_ = 0;
  dungeonid_ = -1;
}

DungeonRpcTransferNotify::~DungeonRpcTransferNotify() {
  // @@protoc_insertion_point(destructor:DungeonRpcTransferNotify)
  SharedDtor();
}

void DungeonRpcTransferNotify::SharedDtor() {
}

void DungeonRpcTransferNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRpcTransferNotify::descriptor() {
  protobuf_DungeonRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DungeonRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonRpcTransferNotify& DungeonRpcTransferNotify::default_instance() {
  protobuf_DungeonRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonRpcTransferNotify* DungeonRpcTransferNotify::New(::google::protobuf::Arena* arena) const {
  DungeonRpcTransferNotify* n = new DungeonRpcTransferNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonRpcTransferNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:DungeonRpcTransferNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dungeonid_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonRpcTransferNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DungeonRpcTransferNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 DungeonId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_dungeonid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dungeonid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DungeonRpcTransferNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DungeonRpcTransferNotify)
  return false;
#undef DO_
}

void DungeonRpcTransferNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DungeonRpcTransferNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 DungeonId = 2 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->dungeonid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DungeonRpcTransferNotify)
}

::google::protobuf::uint8* DungeonRpcTransferNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DungeonRpcTransferNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 DungeonId = 2 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->dungeonid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DungeonRpcTransferNotify)
  return target;
}

size_t DungeonRpcTransferNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DungeonRpcTransferNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 DungeonId = 2 [default = -1];
  if (has_dungeonid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->dungeonid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRpcTransferNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DungeonRpcTransferNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonRpcTransferNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonRpcTransferNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DungeonRpcTransferNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DungeonRpcTransferNotify)
    MergeFrom(*source);
  }
}

void DungeonRpcTransferNotify::MergeFrom(const DungeonRpcTransferNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DungeonRpcTransferNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dungeonid()) {
    set_dungeonid(from.dungeonid());
  }
}

void DungeonRpcTransferNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DungeonRpcTransferNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRpcTransferNotify::CopyFrom(const DungeonRpcTransferNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DungeonRpcTransferNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRpcTransferNotify::IsInitialized() const {
  return true;
}

void DungeonRpcTransferNotify::Swap(DungeonRpcTransferNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonRpcTransferNotify::InternalSwap(DungeonRpcTransferNotify* other) {
  using std::swap;
  swap(dungeonid_, other->dungeonid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonRpcTransferNotify::GetMetadata() const {
  protobuf_DungeonRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DungeonRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonRpcTransferNotify

// optional sint32 DungeonId = 2 [default = -1];
bool DungeonRpcTransferNotify::has_dungeonid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DungeonRpcTransferNotify::set_has_dungeonid() {
  _has_bits_[0] |= 0x00000001u;
}
void DungeonRpcTransferNotify::clear_has_dungeonid() {
  _has_bits_[0] &= ~0x00000001u;
}
void DungeonRpcTransferNotify::clear_dungeonid() {
  dungeonid_ = -1;
  clear_has_dungeonid();
}
::google::protobuf::int32 DungeonRpcTransferNotify::dungeonid() const {
  // @@protoc_insertion_point(field_get:DungeonRpcTransferNotify.DungeonId)
  return dungeonid_;
}
void DungeonRpcTransferNotify::set_dungeonid(::google::protobuf::int32 value) {
  set_has_dungeonid();
  dungeonid_ = value;
  // @@protoc_insertion_point(field_set:DungeonRpcTransferNotify.DungeonId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
