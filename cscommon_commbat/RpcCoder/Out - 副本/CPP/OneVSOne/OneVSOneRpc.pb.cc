// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OneVSOneRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OneVSOneRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class OneVSOneRpcFlushAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OneVSOneRpcFlushAsk>
     _instance;
} _OneVSOneRpcFlushAsk_default_instance_;
class OneVSOneRpcFlushReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OneVSOneRpcFlushReply>
     _instance;
} _OneVSOneRpcFlushReply_default_instance_;
class OneVSOneActPeoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OneVSOneActPeo>
     _instance;
} _OneVSOneActPeo_default_instance_;
class OneVSOneRpcActAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OneVSOneRpcActAsk>
     _instance;
} _OneVSOneRpcActAsk_default_instance_;
class OneVSOneRpcActReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OneVSOneRpcActReply>
     _instance;
} _OneVSOneRpcActReply_default_instance_;
class OneVSOneRpcActMessageNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OneVSOneRpcActMessageNotify>
     _instance;
} _OneVSOneRpcActMessageNotify_default_instance_;
class OneVSOneRpcReplyActAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OneVSOneRpcReplyActAsk>
     _instance;
} _OneVSOneRpcReplyActAsk_default_instance_;
class OneVSOneRpcReplyActReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OneVSOneRpcReplyActReply>
     _instance;
} _OneVSOneRpcReplyActReply_default_instance_;
class OneVSOneRpcGetTopAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OneVSOneRpcGetTopAsk>
     _instance;
} _OneVSOneRpcGetTopAsk_default_instance_;
class OneVSOneRpcGetTopReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OneVSOneRpcGetTopReply>
     _instance;
} _OneVSOneRpcGetTopReply_default_instance_;
class OneVSOneRpcAdjustmentSkillAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OneVSOneRpcAdjustmentSkillAsk>
     _instance;
} _OneVSOneRpcAdjustmentSkillAsk_default_instance_;
class OneVSOneRpcAdjustmentSkillReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OneVSOneRpcAdjustmentSkillReply>
     _instance;
} _OneVSOneRpcAdjustmentSkillReply_default_instance_;
class OneVSOneRpcGetSkillAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OneVSOneRpcGetSkillAsk>
     _instance;
} _OneVSOneRpcGetSkillAsk_default_instance_;
class OneVSOneRpcGetSkillReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OneVSOneRpcGetSkillReply>
     _instance;
} _OneVSOneRpcGetSkillReply_default_instance_;
class OneVSOneRpcGetActMessageAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OneVSOneRpcGetActMessageAsk>
     _instance;
} _OneVSOneRpcGetActMessageAsk_default_instance_;
class OneVSOneRpcGetActMessageReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OneVSOneRpcGetActMessageReply>
     _instance;
} _OneVSOneRpcGetActMessageReply_default_instance_;
class OneVSOneRpcACTResultNotifyNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OneVSOneRpcACTResultNotifyNotify>
     _instance;
} _OneVSOneRpcACTResultNotifyNotify_default_instance_;
class OneVSOneOVOResultInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OneVSOneOVOResultInfo>
     _instance;
} _OneVSOneOVOResultInfo_default_instance_;

namespace protobuf_OneVSOneRpc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[18];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcFlushAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcFlushAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcFlushAsk, isopen_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcFlushReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcFlushReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcFlushReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcFlushReply, ranking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcFlushReply, fightingcapacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcFlushReply, onevsonenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcFlushReply, timerankings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcFlushReply, actpeos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcFlushReply, isopen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcFlushReply, locktime_),
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneActPeo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneActPeo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneActPeo, planname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneActPeo, ranking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneActPeo, fightingcapacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneActPeo, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneActPeo, mardid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneActPeo, lv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneActPeo, headpath_),
  0,
  2,
  3,
  4,
  5,
  6,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcActAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcActAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcActAsk, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcActAsk, ranking_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcActReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcActReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcActReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcActReply, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcActReply, planname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcActReply, onevsonenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcActReply, ranking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcActReply, iscopy_),
  4,
  3,
  0,
  5,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcActMessageNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcActMessageNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcActMessageNotify, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcActMessageNotify, planname_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcReplyActAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcReplyActAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcReplyActAsk, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcReplyActAsk, isok_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcReplyActReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcReplyActReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcReplyActReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcReplyActReply, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcReplyActReply, isok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcReplyActReply, planname_),
  2,
  1,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcGetTopAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcGetTopAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcGetTopReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcGetTopReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcGetTopReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcGetTopReply, topmesses_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcAdjustmentSkillAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcAdjustmentSkillAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcAdjustmentSkillAsk, skilldate_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcAdjustmentSkillReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcAdjustmentSkillReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcAdjustmentSkillReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcAdjustmentSkillReply, skilldate_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcGetSkillAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcGetSkillAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcGetSkillReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcGetSkillReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcGetSkillReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcGetSkillReply, skilldate_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcGetActMessageAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcGetActMessageAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcGetActMessageReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcGetActMessageReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcGetActMessageReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcGetActMessageReply, actmessages_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcACTResultNotifyNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcACTResultNotifyNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcACTResultNotifyNotify, ischanllengorwon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcACTResultNotifyNotify, chanllengor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneRpcACTResultNotifyNotify, beattacked_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneOVOResultInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneOVOResultInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneOVOResultInfo, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneOVOResultInfo, damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneOVOResultInfo, behurted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneOVOResultInfo, healed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneOVOResultInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneOVOResultInfo, ranking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneOVOResultInfo, beforeranking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneOVOResultInfo, jobid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneOVOResultInfo, headico_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneOVOResultInfo, lv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneVSOneOVOResultInfo, iswin_),
  8,
  2,
  3,
  4,
  0,
  5,
  9,
  10,
  1,
  7,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(OneVSOneRpcFlushAsk)},
  { 7, 20, sizeof(OneVSOneRpcFlushReply)},
  { 28, 40, sizeof(OneVSOneActPeo)},
  { 47, 54, sizeof(OneVSOneRpcActAsk)},
  { 56, 67, sizeof(OneVSOneRpcActReply)},
  { 73, 80, sizeof(OneVSOneRpcActMessageNotify)},
  { 82, 89, sizeof(OneVSOneRpcReplyActAsk)},
  { 91, 100, sizeof(OneVSOneRpcReplyActReply)},
  { 104, 109, sizeof(OneVSOneRpcGetTopAsk)},
  { 109, 116, sizeof(OneVSOneRpcGetTopReply)},
  { 118, 124, sizeof(OneVSOneRpcAdjustmentSkillAsk)},
  { 125, 132, sizeof(OneVSOneRpcAdjustmentSkillReply)},
  { 134, 139, sizeof(OneVSOneRpcGetSkillAsk)},
  { 139, 146, sizeof(OneVSOneRpcGetSkillReply)},
  { 148, 153, sizeof(OneVSOneRpcGetActMessageAsk)},
  { 153, 160, sizeof(OneVSOneRpcGetActMessageReply)},
  { 162, 170, sizeof(OneVSOneRpcACTResultNotifyNotify)},
  { 173, 189, sizeof(OneVSOneOVOResultInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneVSOneRpcFlushAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneVSOneRpcFlushReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneVSOneActPeo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneVSOneRpcActAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneVSOneRpcActReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneVSOneRpcActMessageNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneVSOneRpcReplyActAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneVSOneRpcReplyActReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneVSOneRpcGetTopAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneVSOneRpcGetTopReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneVSOneRpcAdjustmentSkillAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneVSOneRpcAdjustmentSkillReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneVSOneRpcGetSkillAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneVSOneRpcGetSkillReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneVSOneRpcGetActMessageAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneVSOneRpcGetActMessageReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneVSOneRpcACTResultNotifyNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneVSOneOVOResultInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "OneVSOneRpc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 18);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_PublicStruct_2eproto::InitDefaults();
  _OneVSOneRpcFlushAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OneVSOneRpcFlushAsk_default_instance_);_OneVSOneRpcFlushReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OneVSOneRpcFlushReply_default_instance_);_OneVSOneActPeo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OneVSOneActPeo_default_instance_);_OneVSOneRpcActAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OneVSOneRpcActAsk_default_instance_);_OneVSOneRpcActReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OneVSOneRpcActReply_default_instance_);_OneVSOneRpcActMessageNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OneVSOneRpcActMessageNotify_default_instance_);_OneVSOneRpcReplyActAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OneVSOneRpcReplyActAsk_default_instance_);_OneVSOneRpcReplyActReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OneVSOneRpcReplyActReply_default_instance_);_OneVSOneRpcGetTopAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OneVSOneRpcGetTopAsk_default_instance_);_OneVSOneRpcGetTopReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OneVSOneRpcGetTopReply_default_instance_);_OneVSOneRpcAdjustmentSkillAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OneVSOneRpcAdjustmentSkillAsk_default_instance_);_OneVSOneRpcAdjustmentSkillReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OneVSOneRpcAdjustmentSkillReply_default_instance_);_OneVSOneRpcGetSkillAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OneVSOneRpcGetSkillAsk_default_instance_);_OneVSOneRpcGetSkillReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OneVSOneRpcGetSkillReply_default_instance_);_OneVSOneRpcGetActMessageAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OneVSOneRpcGetActMessageAsk_default_instance_);_OneVSOneRpcGetActMessageReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OneVSOneRpcGetActMessageReply_default_instance_);_OneVSOneRpcACTResultNotifyNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OneVSOneRpcACTResultNotifyNotify_default_instance_);_OneVSOneOVOResultInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OneVSOneOVOResultInfo_default_instance_);_OneVSOneRpcACTResultNotifyNotify_default_instance_._instance.get_mutable()->chanllengor_ = const_cast< ::OneVSOneOVOResultInfo*>(
      ::OneVSOneOVOResultInfo::internal_default_instance());
  _OneVSOneRpcACTResultNotifyNotify_default_instance_._instance.get_mutable()->beattacked_ = const_cast< ::OneVSOneOVOResultInfo*>(
      ::OneVSOneOVOResultInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021OneVSOneRpc.proto\032\022PublicStruct.proto\""
      "(\n\023OneVSOneRpcFlushAsk\022\021\n\006IsOpen\030\001 \001(\021:\001"
      "0\"\345\001\n\025OneVSOneRpcFlushReply\022\025\n\006Result\030\001 "
      "\001(\021:\005-9999\022\023\n\007Ranking\030\002 \001(\021:\002-1\022\034\n\020Fight"
      "ingCapacity\030\003 \001(\021:\002-1\022\027\n\013OneVSOneNum\030\004 \001"
      "(\021:\002-1\022\036\n\014TimeRankings\030\005 \003(\0132\010.TimeTop\022 "
      "\n\007ActPeos\030\006 \003(\0132\017.OneVSOneActPeo\022\021\n\006IsOp"
      "en\030\007 \001(\021:\0010\022\024\n\010LockTime\030\010 \001(\021:\002-1\"\237\001\n\016On"
      "eVSOneActPeo\022\020\n\010PlanName\030\001 \001(\t\022\023\n\007Rankin"
      "g\030\003 \001(\021:\002-1\022\034\n\020FightingCapacity\030\004 \001(\021:\002-"
      "1\022\022\n\006UserId\030\005 \001(\022:\002-1\022\022\n\006MardID\030\007 \001(\021:\002-"
      "1\022\016\n\002LV\030\010 \001(\021:\002-1\022\020\n\010HeadPath\030\t \001(\t\"<\n\021O"
      "neVSOneRpcActAsk\022\022\n\006UserId\030\002 \001(\022:\002-1\022\023\n\007"
      "Ranking\030\004 \001(\021:\002-1\"\223\001\n\023OneVSOneRpcActRepl"
      "y\022\025\n\006Result\030\001 \001(\021:\005-9999\022\022\n\006UserId\030\002 \001(\022"
      ":\002-1\022\020\n\010PlanName\030\004 \001(\t\022\027\n\013OneVSOneNum\030\006 "
      "\001(\021:\002-1\022\023\n\007Ranking\030\007 \001(\021:\002-1\022\021\n\006IsCopy\030\010"
      " \001(\021:\0010\"C\n\033OneVSOneRpcActMessageNotify\022\022"
      "\n\006UserId\030\001 \001(\022:\002-1\022\020\n\010PlanName\030\002 \001(\t\">\n\026"
      "OneVSOneRpcReplyActAsk\022\022\n\006UserId\030\001 \001(\022:\002"
      "-1\022\020\n\004IsOK\030\002 \001(\021:\002-1\"i\n\030OneVSOneRpcReply"
      "ActReply\022\025\n\006Result\030\001 \001(\021:\005-9999\022\022\n\006UserI"
      "d\030\002 \001(\022:\002-1\022\020\n\004IsOK\030\004 \001(\021:\002-1\022\020\n\010PlanNam"
      "e\030\005 \001(\t\"\026\n\024OneVSOneRpcGetTopAsk\"L\n\026OneVS"
      "OneRpcGetTopReply\022\025\n\006Result\030\001 \001(\021:\005-9999"
      "\022\033\n\tTopMesses\030\002 \003(\0132\010.TopMess\"=\n\035OneVSOn"
      "eRpcAdjustmentSkillAsk\022\034\n\tSkillDate\030\001 \003("
      "\0132\t.OneSData\"V\n\037OneVSOneRpcAdjustmentSki"
      "llReply\022\025\n\006Result\030\001 \001(\021:\005-9999\022\034\n\tSkillD"
      "ate\030\002 \003(\0132\t.OneSData\"\030\n\026OneVSOneRpcGetSk"
      "illAsk\"O\n\030OneVSOneRpcGetSkillReply\022\025\n\006Re"
      "sult\030\001 \001(\021:\005-9999\022\034\n\tSkillDate\030\002 \003(\0132\t.O"
      "neSData\"\035\n\033OneVSOneRpcGetActMessageAsk\"X"
      "\n\035OneVSOneRpcGetActMessageReply\022\025\n\006Resul"
      "t\030\001 \001(\021:\005-9999\022 \n\013ActMessages\030\002 \003(\0132\013.Ac"
      "tMessage\"\230\001\n OneVSOneRpcACTResultNotifyN"
      "otify\022\033\n\020IsChanllengorWon\030\001 \001(\021:\0010\022+\n\013Ch"
      "anllengor\030\002 \001(\0132\026.OneVSOneOVOResultInfo\022"
      "*\n\nBeAttacked\030\003 \001(\0132\026.OneVSOneOVOResultI"
      "nfo\"\351\001\n\025OneVSOneOVOResultInfo\022\022\n\006UserId\030"
      "\001 \001(\022:\002-1\022\021\n\006Damage\030\002 \001(\021:\0010\022\023\n\010BeHurted"
      "\030\003 \001(\021:\0010\022\021\n\006Healed\030\004 \001(\021:\0010\022\014\n\004Name\030\005 \001"
      "(\t\022\022\n\007Ranking\030\007 \001(\021:\0010\022\031\n\rBeforeRanking\030"
      "\010 \001(\021:\002-1\022\021\n\005JobID\030\013 \001(\021:\002-1\022\017\n\007HeadICO\030"
      "\014 \001(\t\022\016\n\002LV\030\r \001(\021:\002-1\022\020\n\005IsWin\030\016 \001(\021:\0010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1799);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OneVSOneRpc.proto", &protobuf_RegisterTypes);
  ::protobuf_PublicStruct_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_OneVSOneRpc_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneVSOneRpcFlushAsk::kIsOpenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneVSOneRpcFlushAsk::OneVSOneRpcFlushAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_OneVSOneRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneVSOneRpcFlushAsk)
}
OneVSOneRpcFlushAsk::OneVSOneRpcFlushAsk(const OneVSOneRpcFlushAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isopen_ = from.isopen_;
  // @@protoc_insertion_point(copy_constructor:OneVSOneRpcFlushAsk)
}

void OneVSOneRpcFlushAsk::SharedCtor() {
  _cached_size_ = 0;
  isopen_ = 0;
}

OneVSOneRpcFlushAsk::~OneVSOneRpcFlushAsk() {
  // @@protoc_insertion_point(destructor:OneVSOneRpcFlushAsk)
  SharedDtor();
}

void OneVSOneRpcFlushAsk::SharedDtor() {
}

void OneVSOneRpcFlushAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneVSOneRpcFlushAsk::descriptor() {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneVSOneRpcFlushAsk& OneVSOneRpcFlushAsk::default_instance() {
  protobuf_OneVSOneRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneVSOneRpcFlushAsk* OneVSOneRpcFlushAsk::New(::google::protobuf::Arena* arena) const {
  OneVSOneRpcFlushAsk* n = new OneVSOneRpcFlushAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneVSOneRpcFlushAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:OneVSOneRpcFlushAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isopen_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneVSOneRpcFlushAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneVSOneRpcFlushAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 IsOpen = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_isopen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &isopen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OneVSOneRpcFlushAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneVSOneRpcFlushAsk)
  return false;
#undef DO_
}

void OneVSOneRpcFlushAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneVSOneRpcFlushAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 IsOpen = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->isopen(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneVSOneRpcFlushAsk)
}

::google::protobuf::uint8* OneVSOneRpcFlushAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OneVSOneRpcFlushAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 IsOpen = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->isopen(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneVSOneRpcFlushAsk)
  return target;
}

size_t OneVSOneRpcFlushAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneVSOneRpcFlushAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 IsOpen = 1 [default = 0];
  if (has_isopen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->isopen());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneVSOneRpcFlushAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneVSOneRpcFlushAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const OneVSOneRpcFlushAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneVSOneRpcFlushAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneVSOneRpcFlushAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneVSOneRpcFlushAsk)
    MergeFrom(*source);
  }
}

void OneVSOneRpcFlushAsk::MergeFrom(const OneVSOneRpcFlushAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneVSOneRpcFlushAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_isopen()) {
    set_isopen(from.isopen());
  }
}

void OneVSOneRpcFlushAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneVSOneRpcFlushAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneVSOneRpcFlushAsk::CopyFrom(const OneVSOneRpcFlushAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneVSOneRpcFlushAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVSOneRpcFlushAsk::IsInitialized() const {
  return true;
}

void OneVSOneRpcFlushAsk::Swap(OneVSOneRpcFlushAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneVSOneRpcFlushAsk::InternalSwap(OneVSOneRpcFlushAsk* other) {
  using std::swap;
  swap(isopen_, other->isopen_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneVSOneRpcFlushAsk::GetMetadata() const {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneVSOneRpcFlushAsk

// optional sint32 IsOpen = 1 [default = 0];
bool OneVSOneRpcFlushAsk::has_isopen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OneVSOneRpcFlushAsk::set_has_isopen() {
  _has_bits_[0] |= 0x00000001u;
}
void OneVSOneRpcFlushAsk::clear_has_isopen() {
  _has_bits_[0] &= ~0x00000001u;
}
void OneVSOneRpcFlushAsk::clear_isopen() {
  isopen_ = 0;
  clear_has_isopen();
}
::google::protobuf::int32 OneVSOneRpcFlushAsk::isopen() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcFlushAsk.IsOpen)
  return isopen_;
}
void OneVSOneRpcFlushAsk::set_isopen(::google::protobuf::int32 value) {
  set_has_isopen();
  isopen_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcFlushAsk.IsOpen)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneVSOneRpcFlushReply::kResultFieldNumber;
const int OneVSOneRpcFlushReply::kRankingFieldNumber;
const int OneVSOneRpcFlushReply::kFightingCapacityFieldNumber;
const int OneVSOneRpcFlushReply::kOneVSOneNumFieldNumber;
const int OneVSOneRpcFlushReply::kTimeRankingsFieldNumber;
const int OneVSOneRpcFlushReply::kActPeosFieldNumber;
const int OneVSOneRpcFlushReply::kIsOpenFieldNumber;
const int OneVSOneRpcFlushReply::kLockTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneVSOneRpcFlushReply::OneVSOneRpcFlushReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_OneVSOneRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneVSOneRpcFlushReply)
}
OneVSOneRpcFlushReply::OneVSOneRpcFlushReply(const OneVSOneRpcFlushReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      timerankings_(from.timerankings_),
      actpeos_(from.actpeos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&isopen_, &from.isopen_,
    static_cast<size_t>(reinterpret_cast<char*>(&onevsonenum_) -
    reinterpret_cast<char*>(&isopen_)) + sizeof(onevsonenum_));
  // @@protoc_insertion_point(copy_constructor:OneVSOneRpcFlushReply)
}

void OneVSOneRpcFlushReply::SharedCtor() {
  _cached_size_ = 0;
  isopen_ = 0;
  locktime_ = -1;
  result_ = -9999;
  ranking_ = -1;
  fightingcapacity_ = -1;
  onevsonenum_ = -1;
}

OneVSOneRpcFlushReply::~OneVSOneRpcFlushReply() {
  // @@protoc_insertion_point(destructor:OneVSOneRpcFlushReply)
  SharedDtor();
}

void OneVSOneRpcFlushReply::SharedDtor() {
}

void OneVSOneRpcFlushReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneVSOneRpcFlushReply::descriptor() {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneVSOneRpcFlushReply& OneVSOneRpcFlushReply::default_instance() {
  protobuf_OneVSOneRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneVSOneRpcFlushReply* OneVSOneRpcFlushReply::New(::google::protobuf::Arena* arena) const {
  OneVSOneRpcFlushReply* n = new OneVSOneRpcFlushReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneVSOneRpcFlushReply::Clear() {
// @@protoc_insertion_point(message_clear_start:OneVSOneRpcFlushReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timerankings_.Clear();
  actpeos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    isopen_ = 0;
    locktime_ = -1;
    result_ = -9999;
    ranking_ = -1;
    fightingcapacity_ = -1;
    onevsonenum_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneVSOneRpcFlushReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneVSOneRpcFlushReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Ranking = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ranking();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ranking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 FightingCapacity = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_fightingcapacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &fightingcapacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 OneVSOneNum = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_onevsonenum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &onevsonenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TimeTop TimeRankings = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timerankings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OneVSOneActPeo ActPeos = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actpeos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 IsOpen = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_isopen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &isopen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 LockTime = 8 [default = -1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_locktime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &locktime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OneVSOneRpcFlushReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneVSOneRpcFlushReply)
  return false;
#undef DO_
}

void OneVSOneRpcFlushReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneVSOneRpcFlushReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 Ranking = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->ranking(), output);
  }

  // optional sint32 FightingCapacity = 3 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->fightingcapacity(), output);
  }

  // optional sint32 OneVSOneNum = 4 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->onevsonenum(), output);
  }

  // repeated .TimeTop TimeRankings = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->timerankings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->timerankings(static_cast<int>(i)), output);
  }

  // repeated .OneVSOneActPeo ActPeos = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actpeos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->actpeos(static_cast<int>(i)), output);
  }

  // optional sint32 IsOpen = 7 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->isopen(), output);
  }

  // optional sint32 LockTime = 8 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->locktime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneVSOneRpcFlushReply)
}

::google::protobuf::uint8* OneVSOneRpcFlushReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OneVSOneRpcFlushReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 Ranking = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->ranking(), target);
  }

  // optional sint32 FightingCapacity = 3 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->fightingcapacity(), target);
  }

  // optional sint32 OneVSOneNum = 4 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->onevsonenum(), target);
  }

  // repeated .TimeTop TimeRankings = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->timerankings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->timerankings(static_cast<int>(i)), deterministic, target);
  }

  // repeated .OneVSOneActPeo ActPeos = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actpeos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->actpeos(static_cast<int>(i)), deterministic, target);
  }

  // optional sint32 IsOpen = 7 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->isopen(), target);
  }

  // optional sint32 LockTime = 8 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->locktime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneVSOneRpcFlushReply)
  return target;
}

size_t OneVSOneRpcFlushReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneVSOneRpcFlushReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .TimeTop TimeRankings = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->timerankings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timerankings(static_cast<int>(i)));
    }
  }

  // repeated .OneVSOneActPeo ActPeos = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->actpeos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actpeos(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional sint32 IsOpen = 7 [default = 0];
    if (has_isopen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->isopen());
    }

    // optional sint32 LockTime = 8 [default = -1];
    if (has_locktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->locktime());
    }

    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 Ranking = 2 [default = -1];
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ranking());
    }

    // optional sint32 FightingCapacity = 3 [default = -1];
    if (has_fightingcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->fightingcapacity());
    }

    // optional sint32 OneVSOneNum = 4 [default = -1];
    if (has_onevsonenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->onevsonenum());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneVSOneRpcFlushReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneVSOneRpcFlushReply)
  GOOGLE_DCHECK_NE(&from, this);
  const OneVSOneRpcFlushReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneVSOneRpcFlushReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneVSOneRpcFlushReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneVSOneRpcFlushReply)
    MergeFrom(*source);
  }
}

void OneVSOneRpcFlushReply::MergeFrom(const OneVSOneRpcFlushReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneVSOneRpcFlushReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timerankings_.MergeFrom(from.timerankings_);
  actpeos_.MergeFrom(from.actpeos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      isopen_ = from.isopen_;
    }
    if (cached_has_bits & 0x00000002u) {
      locktime_ = from.locktime_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      ranking_ = from.ranking_;
    }
    if (cached_has_bits & 0x00000010u) {
      fightingcapacity_ = from.fightingcapacity_;
    }
    if (cached_has_bits & 0x00000020u) {
      onevsonenum_ = from.onevsonenum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OneVSOneRpcFlushReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneVSOneRpcFlushReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneVSOneRpcFlushReply::CopyFrom(const OneVSOneRpcFlushReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneVSOneRpcFlushReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVSOneRpcFlushReply::IsInitialized() const {
  return true;
}

void OneVSOneRpcFlushReply::Swap(OneVSOneRpcFlushReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneVSOneRpcFlushReply::InternalSwap(OneVSOneRpcFlushReply* other) {
  using std::swap;
  timerankings_.InternalSwap(&other->timerankings_);
  actpeos_.InternalSwap(&other->actpeos_);
  swap(isopen_, other->isopen_);
  swap(locktime_, other->locktime_);
  swap(result_, other->result_);
  swap(ranking_, other->ranking_);
  swap(fightingcapacity_, other->fightingcapacity_);
  swap(onevsonenum_, other->onevsonenum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneVSOneRpcFlushReply::GetMetadata() const {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneVSOneRpcFlushReply

// optional sint32 Result = 1 [default = -9999];
bool OneVSOneRpcFlushReply::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OneVSOneRpcFlushReply::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void OneVSOneRpcFlushReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void OneVSOneRpcFlushReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 OneVSOneRpcFlushReply::result() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcFlushReply.Result)
  return result_;
}
void OneVSOneRpcFlushReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcFlushReply.Result)
}

// optional sint32 Ranking = 2 [default = -1];
bool OneVSOneRpcFlushReply::has_ranking() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OneVSOneRpcFlushReply::set_has_ranking() {
  _has_bits_[0] |= 0x00000008u;
}
void OneVSOneRpcFlushReply::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000008u;
}
void OneVSOneRpcFlushReply::clear_ranking() {
  ranking_ = -1;
  clear_has_ranking();
}
::google::protobuf::int32 OneVSOneRpcFlushReply::ranking() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcFlushReply.Ranking)
  return ranking_;
}
void OneVSOneRpcFlushReply::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcFlushReply.Ranking)
}

// optional sint32 FightingCapacity = 3 [default = -1];
bool OneVSOneRpcFlushReply::has_fightingcapacity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OneVSOneRpcFlushReply::set_has_fightingcapacity() {
  _has_bits_[0] |= 0x00000010u;
}
void OneVSOneRpcFlushReply::clear_has_fightingcapacity() {
  _has_bits_[0] &= ~0x00000010u;
}
void OneVSOneRpcFlushReply::clear_fightingcapacity() {
  fightingcapacity_ = -1;
  clear_has_fightingcapacity();
}
::google::protobuf::int32 OneVSOneRpcFlushReply::fightingcapacity() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcFlushReply.FightingCapacity)
  return fightingcapacity_;
}
void OneVSOneRpcFlushReply::set_fightingcapacity(::google::protobuf::int32 value) {
  set_has_fightingcapacity();
  fightingcapacity_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcFlushReply.FightingCapacity)
}

// optional sint32 OneVSOneNum = 4 [default = -1];
bool OneVSOneRpcFlushReply::has_onevsonenum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OneVSOneRpcFlushReply::set_has_onevsonenum() {
  _has_bits_[0] |= 0x00000020u;
}
void OneVSOneRpcFlushReply::clear_has_onevsonenum() {
  _has_bits_[0] &= ~0x00000020u;
}
void OneVSOneRpcFlushReply::clear_onevsonenum() {
  onevsonenum_ = -1;
  clear_has_onevsonenum();
}
::google::protobuf::int32 OneVSOneRpcFlushReply::onevsonenum() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcFlushReply.OneVSOneNum)
  return onevsonenum_;
}
void OneVSOneRpcFlushReply::set_onevsonenum(::google::protobuf::int32 value) {
  set_has_onevsonenum();
  onevsonenum_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcFlushReply.OneVSOneNum)
}

// repeated .TimeTop TimeRankings = 5;
int OneVSOneRpcFlushReply::timerankings_size() const {
  return timerankings_.size();
}
void OneVSOneRpcFlushReply::clear_timerankings() {
  timerankings_.Clear();
}
const ::TimeTop& OneVSOneRpcFlushReply::timerankings(int index) const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcFlushReply.TimeRankings)
  return timerankings_.Get(index);
}
::TimeTop* OneVSOneRpcFlushReply::mutable_timerankings(int index) {
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcFlushReply.TimeRankings)
  return timerankings_.Mutable(index);
}
::TimeTop* OneVSOneRpcFlushReply::add_timerankings() {
  // @@protoc_insertion_point(field_add:OneVSOneRpcFlushReply.TimeRankings)
  return timerankings_.Add();
}
::google::protobuf::RepeatedPtrField< ::TimeTop >*
OneVSOneRpcFlushReply::mutable_timerankings() {
  // @@protoc_insertion_point(field_mutable_list:OneVSOneRpcFlushReply.TimeRankings)
  return &timerankings_;
}
const ::google::protobuf::RepeatedPtrField< ::TimeTop >&
OneVSOneRpcFlushReply::timerankings() const {
  // @@protoc_insertion_point(field_list:OneVSOneRpcFlushReply.TimeRankings)
  return timerankings_;
}

// repeated .OneVSOneActPeo ActPeos = 6;
int OneVSOneRpcFlushReply::actpeos_size() const {
  return actpeos_.size();
}
void OneVSOneRpcFlushReply::clear_actpeos() {
  actpeos_.Clear();
}
const ::OneVSOneActPeo& OneVSOneRpcFlushReply::actpeos(int index) const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcFlushReply.ActPeos)
  return actpeos_.Get(index);
}
::OneVSOneActPeo* OneVSOneRpcFlushReply::mutable_actpeos(int index) {
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcFlushReply.ActPeos)
  return actpeos_.Mutable(index);
}
::OneVSOneActPeo* OneVSOneRpcFlushReply::add_actpeos() {
  // @@protoc_insertion_point(field_add:OneVSOneRpcFlushReply.ActPeos)
  return actpeos_.Add();
}
::google::protobuf::RepeatedPtrField< ::OneVSOneActPeo >*
OneVSOneRpcFlushReply::mutable_actpeos() {
  // @@protoc_insertion_point(field_mutable_list:OneVSOneRpcFlushReply.ActPeos)
  return &actpeos_;
}
const ::google::protobuf::RepeatedPtrField< ::OneVSOneActPeo >&
OneVSOneRpcFlushReply::actpeos() const {
  // @@protoc_insertion_point(field_list:OneVSOneRpcFlushReply.ActPeos)
  return actpeos_;
}

// optional sint32 IsOpen = 7 [default = 0];
bool OneVSOneRpcFlushReply::has_isopen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OneVSOneRpcFlushReply::set_has_isopen() {
  _has_bits_[0] |= 0x00000001u;
}
void OneVSOneRpcFlushReply::clear_has_isopen() {
  _has_bits_[0] &= ~0x00000001u;
}
void OneVSOneRpcFlushReply::clear_isopen() {
  isopen_ = 0;
  clear_has_isopen();
}
::google::protobuf::int32 OneVSOneRpcFlushReply::isopen() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcFlushReply.IsOpen)
  return isopen_;
}
void OneVSOneRpcFlushReply::set_isopen(::google::protobuf::int32 value) {
  set_has_isopen();
  isopen_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcFlushReply.IsOpen)
}

// optional sint32 LockTime = 8 [default = -1];
bool OneVSOneRpcFlushReply::has_locktime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OneVSOneRpcFlushReply::set_has_locktime() {
  _has_bits_[0] |= 0x00000002u;
}
void OneVSOneRpcFlushReply::clear_has_locktime() {
  _has_bits_[0] &= ~0x00000002u;
}
void OneVSOneRpcFlushReply::clear_locktime() {
  locktime_ = -1;
  clear_has_locktime();
}
::google::protobuf::int32 OneVSOneRpcFlushReply::locktime() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcFlushReply.LockTime)
  return locktime_;
}
void OneVSOneRpcFlushReply::set_locktime(::google::protobuf::int32 value) {
  set_has_locktime();
  locktime_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcFlushReply.LockTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneVSOneActPeo::kPlanNameFieldNumber;
const int OneVSOneActPeo::kRankingFieldNumber;
const int OneVSOneActPeo::kFightingCapacityFieldNumber;
const int OneVSOneActPeo::kUserIdFieldNumber;
const int OneVSOneActPeo::kMardIDFieldNumber;
const int OneVSOneActPeo::kLVFieldNumber;
const int OneVSOneActPeo::kHeadPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneVSOneActPeo::OneVSOneActPeo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_OneVSOneRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneVSOneActPeo)
}
OneVSOneActPeo::OneVSOneActPeo(const OneVSOneActPeo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  planname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_planname()) {
    planname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.planname_);
  }
  headpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_headpath()) {
    headpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headpath_);
  }
  ::memcpy(&ranking_, &from.ranking_,
    static_cast<size_t>(reinterpret_cast<char*>(&lv_) -
    reinterpret_cast<char*>(&ranking_)) + sizeof(lv_));
  // @@protoc_insertion_point(copy_constructor:OneVSOneActPeo)
}

void OneVSOneActPeo::SharedCtor() {
  _cached_size_ = 0;
  planname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ranking_ = -1;
  fightingcapacity_ = -1;
  userid_ = GOOGLE_LONGLONG(-1);
  mardid_ = -1;
  lv_ = -1;
}

OneVSOneActPeo::~OneVSOneActPeo() {
  // @@protoc_insertion_point(destructor:OneVSOneActPeo)
  SharedDtor();
}

void OneVSOneActPeo::SharedDtor() {
  planname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OneVSOneActPeo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneVSOneActPeo::descriptor() {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneVSOneActPeo& OneVSOneActPeo::default_instance() {
  protobuf_OneVSOneRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneVSOneActPeo* OneVSOneActPeo::New(::google::protobuf::Arena* arena) const {
  OneVSOneActPeo* n = new OneVSOneActPeo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneVSOneActPeo::Clear() {
// @@protoc_insertion_point(message_clear_start:OneVSOneActPeo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!planname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*planname_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!headpath_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*headpath_.UnsafeRawStringPointer())->clear();
    }
    ranking_ = -1;
    fightingcapacity_ = -1;
    userid_ = GOOGLE_LONGLONG(-1);
    mardid_ = -1;
    lv_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneVSOneActPeo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneVSOneActPeo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string PlanName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_planname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->planname().data(), static_cast<int>(this->planname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OneVSOneActPeo.PlanName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Ranking = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ranking();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ranking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 FightingCapacity = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_fightingcapacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &fightingcapacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 UserId = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 MardID = 7 [default = -1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_mardid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &mardid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 LV = 8 [default = -1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_lv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &lv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string HeadPath = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headpath().data(), static_cast<int>(this->headpath().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OneVSOneActPeo.HeadPath");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OneVSOneActPeo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneVSOneActPeo)
  return false;
#undef DO_
}

void OneVSOneActPeo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneVSOneActPeo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string PlanName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planname().data(), static_cast<int>(this->planname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OneVSOneActPeo.PlanName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->planname(), output);
  }

  // optional sint32 Ranking = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->ranking(), output);
  }

  // optional sint32 FightingCapacity = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->fightingcapacity(), output);
  }

  // optional sint64 UserId = 5 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->userid(), output);
  }

  // optional sint32 MardID = 7 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->mardid(), output);
  }

  // optional sint32 LV = 8 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->lv(), output);
  }

  // optional string HeadPath = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headpath().data(), static_cast<int>(this->headpath().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OneVSOneActPeo.HeadPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->headpath(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneVSOneActPeo)
}

::google::protobuf::uint8* OneVSOneActPeo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OneVSOneActPeo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string PlanName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planname().data(), static_cast<int>(this->planname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OneVSOneActPeo.PlanName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->planname(), target);
  }

  // optional sint32 Ranking = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->ranking(), target);
  }

  // optional sint32 FightingCapacity = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->fightingcapacity(), target);
  }

  // optional sint64 UserId = 5 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->userid(), target);
  }

  // optional sint32 MardID = 7 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->mardid(), target);
  }

  // optional sint32 LV = 8 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->lv(), target);
  }

  // optional string HeadPath = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headpath().data(), static_cast<int>(this->headpath().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OneVSOneActPeo.HeadPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->headpath(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneVSOneActPeo)
  return target;
}

size_t OneVSOneActPeo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneVSOneActPeo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string PlanName = 1;
    if (has_planname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planname());
    }

    // optional string HeadPath = 9;
    if (has_headpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headpath());
    }

    // optional sint32 Ranking = 3 [default = -1];
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ranking());
    }

    // optional sint32 FightingCapacity = 4 [default = -1];
    if (has_fightingcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->fightingcapacity());
    }

    // optional sint64 UserId = 5 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

    // optional sint32 MardID = 7 [default = -1];
    if (has_mardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->mardid());
    }

    // optional sint32 LV = 8 [default = -1];
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->lv());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneVSOneActPeo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneVSOneActPeo)
  GOOGLE_DCHECK_NE(&from, this);
  const OneVSOneActPeo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneVSOneActPeo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneVSOneActPeo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneVSOneActPeo)
    MergeFrom(*source);
  }
}

void OneVSOneActPeo::MergeFrom(const OneVSOneActPeo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneVSOneActPeo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_planname();
      planname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.planname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_headpath();
      headpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headpath_);
    }
    if (cached_has_bits & 0x00000004u) {
      ranking_ = from.ranking_;
    }
    if (cached_has_bits & 0x00000008u) {
      fightingcapacity_ = from.fightingcapacity_;
    }
    if (cached_has_bits & 0x00000010u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000020u) {
      mardid_ = from.mardid_;
    }
    if (cached_has_bits & 0x00000040u) {
      lv_ = from.lv_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OneVSOneActPeo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneVSOneActPeo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneVSOneActPeo::CopyFrom(const OneVSOneActPeo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneVSOneActPeo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVSOneActPeo::IsInitialized() const {
  return true;
}

void OneVSOneActPeo::Swap(OneVSOneActPeo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneVSOneActPeo::InternalSwap(OneVSOneActPeo* other) {
  using std::swap;
  planname_.Swap(&other->planname_);
  headpath_.Swap(&other->headpath_);
  swap(ranking_, other->ranking_);
  swap(fightingcapacity_, other->fightingcapacity_);
  swap(userid_, other->userid_);
  swap(mardid_, other->mardid_);
  swap(lv_, other->lv_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneVSOneActPeo::GetMetadata() const {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneVSOneActPeo

// optional string PlanName = 1;
bool OneVSOneActPeo::has_planname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OneVSOneActPeo::set_has_planname() {
  _has_bits_[0] |= 0x00000001u;
}
void OneVSOneActPeo::clear_has_planname() {
  _has_bits_[0] &= ~0x00000001u;
}
void OneVSOneActPeo::clear_planname() {
  planname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_planname();
}
const ::std::string& OneVSOneActPeo::planname() const {
  // @@protoc_insertion_point(field_get:OneVSOneActPeo.PlanName)
  return planname_.GetNoArena();
}
void OneVSOneActPeo::set_planname(const ::std::string& value) {
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OneVSOneActPeo.PlanName)
}
#if LANG_CXX11
void OneVSOneActPeo::set_planname(::std::string&& value) {
  set_has_planname();
  planname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OneVSOneActPeo.PlanName)
}
#endif
void OneVSOneActPeo::set_planname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OneVSOneActPeo.PlanName)
}
void OneVSOneActPeo::set_planname(const char* value, size_t size) {
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OneVSOneActPeo.PlanName)
}
::std::string* OneVSOneActPeo::mutable_planname() {
  set_has_planname();
  // @@protoc_insertion_point(field_mutable:OneVSOneActPeo.PlanName)
  return planname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OneVSOneActPeo::release_planname() {
  // @@protoc_insertion_point(field_release:OneVSOneActPeo.PlanName)
  clear_has_planname();
  return planname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OneVSOneActPeo::set_allocated_planname(::std::string* planname) {
  if (planname != NULL) {
    set_has_planname();
  } else {
    clear_has_planname();
  }
  planname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), planname);
  // @@protoc_insertion_point(field_set_allocated:OneVSOneActPeo.PlanName)
}

// optional sint32 Ranking = 3 [default = -1];
bool OneVSOneActPeo::has_ranking() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OneVSOneActPeo::set_has_ranking() {
  _has_bits_[0] |= 0x00000004u;
}
void OneVSOneActPeo::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000004u;
}
void OneVSOneActPeo::clear_ranking() {
  ranking_ = -1;
  clear_has_ranking();
}
::google::protobuf::int32 OneVSOneActPeo::ranking() const {
  // @@protoc_insertion_point(field_get:OneVSOneActPeo.Ranking)
  return ranking_;
}
void OneVSOneActPeo::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneActPeo.Ranking)
}

// optional sint32 FightingCapacity = 4 [default = -1];
bool OneVSOneActPeo::has_fightingcapacity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OneVSOneActPeo::set_has_fightingcapacity() {
  _has_bits_[0] |= 0x00000008u;
}
void OneVSOneActPeo::clear_has_fightingcapacity() {
  _has_bits_[0] &= ~0x00000008u;
}
void OneVSOneActPeo::clear_fightingcapacity() {
  fightingcapacity_ = -1;
  clear_has_fightingcapacity();
}
::google::protobuf::int32 OneVSOneActPeo::fightingcapacity() const {
  // @@protoc_insertion_point(field_get:OneVSOneActPeo.FightingCapacity)
  return fightingcapacity_;
}
void OneVSOneActPeo::set_fightingcapacity(::google::protobuf::int32 value) {
  set_has_fightingcapacity();
  fightingcapacity_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneActPeo.FightingCapacity)
}

// optional sint64 UserId = 5 [default = -1];
bool OneVSOneActPeo::has_userid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OneVSOneActPeo::set_has_userid() {
  _has_bits_[0] |= 0x00000010u;
}
void OneVSOneActPeo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000010u;
}
void OneVSOneActPeo::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 OneVSOneActPeo::userid() const {
  // @@protoc_insertion_point(field_get:OneVSOneActPeo.UserId)
  return userid_;
}
void OneVSOneActPeo::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneActPeo.UserId)
}

// optional sint32 MardID = 7 [default = -1];
bool OneVSOneActPeo::has_mardid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OneVSOneActPeo::set_has_mardid() {
  _has_bits_[0] |= 0x00000020u;
}
void OneVSOneActPeo::clear_has_mardid() {
  _has_bits_[0] &= ~0x00000020u;
}
void OneVSOneActPeo::clear_mardid() {
  mardid_ = -1;
  clear_has_mardid();
}
::google::protobuf::int32 OneVSOneActPeo::mardid() const {
  // @@protoc_insertion_point(field_get:OneVSOneActPeo.MardID)
  return mardid_;
}
void OneVSOneActPeo::set_mardid(::google::protobuf::int32 value) {
  set_has_mardid();
  mardid_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneActPeo.MardID)
}

// optional sint32 LV = 8 [default = -1];
bool OneVSOneActPeo::has_lv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OneVSOneActPeo::set_has_lv() {
  _has_bits_[0] |= 0x00000040u;
}
void OneVSOneActPeo::clear_has_lv() {
  _has_bits_[0] &= ~0x00000040u;
}
void OneVSOneActPeo::clear_lv() {
  lv_ = -1;
  clear_has_lv();
}
::google::protobuf::int32 OneVSOneActPeo::lv() const {
  // @@protoc_insertion_point(field_get:OneVSOneActPeo.LV)
  return lv_;
}
void OneVSOneActPeo::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneActPeo.LV)
}

// optional string HeadPath = 9;
bool OneVSOneActPeo::has_headpath() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OneVSOneActPeo::set_has_headpath() {
  _has_bits_[0] |= 0x00000002u;
}
void OneVSOneActPeo::clear_has_headpath() {
  _has_bits_[0] &= ~0x00000002u;
}
void OneVSOneActPeo::clear_headpath() {
  headpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headpath();
}
const ::std::string& OneVSOneActPeo::headpath() const {
  // @@protoc_insertion_point(field_get:OneVSOneActPeo.HeadPath)
  return headpath_.GetNoArena();
}
void OneVSOneActPeo::set_headpath(const ::std::string& value) {
  set_has_headpath();
  headpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OneVSOneActPeo.HeadPath)
}
#if LANG_CXX11
void OneVSOneActPeo::set_headpath(::std::string&& value) {
  set_has_headpath();
  headpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OneVSOneActPeo.HeadPath)
}
#endif
void OneVSOneActPeo::set_headpath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_headpath();
  headpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OneVSOneActPeo.HeadPath)
}
void OneVSOneActPeo::set_headpath(const char* value, size_t size) {
  set_has_headpath();
  headpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OneVSOneActPeo.HeadPath)
}
::std::string* OneVSOneActPeo::mutable_headpath() {
  set_has_headpath();
  // @@protoc_insertion_point(field_mutable:OneVSOneActPeo.HeadPath)
  return headpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OneVSOneActPeo::release_headpath() {
  // @@protoc_insertion_point(field_release:OneVSOneActPeo.HeadPath)
  clear_has_headpath();
  return headpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OneVSOneActPeo::set_allocated_headpath(::std::string* headpath) {
  if (headpath != NULL) {
    set_has_headpath();
  } else {
    clear_has_headpath();
  }
  headpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headpath);
  // @@protoc_insertion_point(field_set_allocated:OneVSOneActPeo.HeadPath)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneVSOneRpcActAsk::kUserIdFieldNumber;
const int OneVSOneRpcActAsk::kRankingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneVSOneRpcActAsk::OneVSOneRpcActAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_OneVSOneRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneVSOneRpcActAsk)
}
OneVSOneRpcActAsk::OneVSOneRpcActAsk(const OneVSOneRpcActAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ranking_, &from.ranking_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&ranking_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:OneVSOneRpcActAsk)
}

void OneVSOneRpcActAsk::SharedCtor() {
  _cached_size_ = 0;
  ranking_ = -1;
  userid_ = GOOGLE_LONGLONG(-1);
}

OneVSOneRpcActAsk::~OneVSOneRpcActAsk() {
  // @@protoc_insertion_point(destructor:OneVSOneRpcActAsk)
  SharedDtor();
}

void OneVSOneRpcActAsk::SharedDtor() {
}

void OneVSOneRpcActAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneVSOneRpcActAsk::descriptor() {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneVSOneRpcActAsk& OneVSOneRpcActAsk::default_instance() {
  protobuf_OneVSOneRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneVSOneRpcActAsk* OneVSOneRpcActAsk::New(::google::protobuf::Arena* arena) const {
  OneVSOneRpcActAsk* n = new OneVSOneRpcActAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneVSOneRpcActAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:OneVSOneRpcActAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ranking_ = -1;
    userid_ = GOOGLE_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneVSOneRpcActAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneVSOneRpcActAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Ranking = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ranking();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ranking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OneVSOneRpcActAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneVSOneRpcActAsk)
  return false;
#undef DO_
}

void OneVSOneRpcActAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneVSOneRpcActAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->userid(), output);
  }

  // optional sint32 Ranking = 4 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->ranking(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneVSOneRpcActAsk)
}

::google::protobuf::uint8* OneVSOneRpcActAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OneVSOneRpcActAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->userid(), target);
  }

  // optional sint32 Ranking = 4 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->ranking(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneVSOneRpcActAsk)
  return target;
}

size_t OneVSOneRpcActAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneVSOneRpcActAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Ranking = 4 [default = -1];
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ranking());
    }

    // optional sint64 UserId = 2 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneVSOneRpcActAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneVSOneRpcActAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const OneVSOneRpcActAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneVSOneRpcActAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneVSOneRpcActAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneVSOneRpcActAsk)
    MergeFrom(*source);
  }
}

void OneVSOneRpcActAsk::MergeFrom(const OneVSOneRpcActAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneVSOneRpcActAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ranking_ = from.ranking_;
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OneVSOneRpcActAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneVSOneRpcActAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneVSOneRpcActAsk::CopyFrom(const OneVSOneRpcActAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneVSOneRpcActAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVSOneRpcActAsk::IsInitialized() const {
  return true;
}

void OneVSOneRpcActAsk::Swap(OneVSOneRpcActAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneVSOneRpcActAsk::InternalSwap(OneVSOneRpcActAsk* other) {
  using std::swap;
  swap(ranking_, other->ranking_);
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneVSOneRpcActAsk::GetMetadata() const {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneVSOneRpcActAsk

// optional sint64 UserId = 2 [default = -1];
bool OneVSOneRpcActAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OneVSOneRpcActAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void OneVSOneRpcActAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void OneVSOneRpcActAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 OneVSOneRpcActAsk::userid() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcActAsk.UserId)
  return userid_;
}
void OneVSOneRpcActAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcActAsk.UserId)
}

// optional sint32 Ranking = 4 [default = -1];
bool OneVSOneRpcActAsk::has_ranking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OneVSOneRpcActAsk::set_has_ranking() {
  _has_bits_[0] |= 0x00000001u;
}
void OneVSOneRpcActAsk::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000001u;
}
void OneVSOneRpcActAsk::clear_ranking() {
  ranking_ = -1;
  clear_has_ranking();
}
::google::protobuf::int32 OneVSOneRpcActAsk::ranking() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcActAsk.Ranking)
  return ranking_;
}
void OneVSOneRpcActAsk::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcActAsk.Ranking)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneVSOneRpcActReply::kResultFieldNumber;
const int OneVSOneRpcActReply::kUserIdFieldNumber;
const int OneVSOneRpcActReply::kPlanNameFieldNumber;
const int OneVSOneRpcActReply::kOneVSOneNumFieldNumber;
const int OneVSOneRpcActReply::kRankingFieldNumber;
const int OneVSOneRpcActReply::kIsCopyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneVSOneRpcActReply::OneVSOneRpcActReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_OneVSOneRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneVSOneRpcActReply)
}
OneVSOneRpcActReply::OneVSOneRpcActReply(const OneVSOneRpcActReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  planname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_planname()) {
    planname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.planname_);
  }
  ::memcpy(&iscopy_, &from.iscopy_,
    static_cast<size_t>(reinterpret_cast<char*>(&onevsonenum_) -
    reinterpret_cast<char*>(&iscopy_)) + sizeof(onevsonenum_));
  // @@protoc_insertion_point(copy_constructor:OneVSOneRpcActReply)
}

void OneVSOneRpcActReply::SharedCtor() {
  _cached_size_ = 0;
  planname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iscopy_ = 0;
  ranking_ = -1;
  userid_ = GOOGLE_LONGLONG(-1);
  result_ = -9999;
  onevsonenum_ = -1;
}

OneVSOneRpcActReply::~OneVSOneRpcActReply() {
  // @@protoc_insertion_point(destructor:OneVSOneRpcActReply)
  SharedDtor();
}

void OneVSOneRpcActReply::SharedDtor() {
  planname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OneVSOneRpcActReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneVSOneRpcActReply::descriptor() {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneVSOneRpcActReply& OneVSOneRpcActReply::default_instance() {
  protobuf_OneVSOneRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneVSOneRpcActReply* OneVSOneRpcActReply::New(::google::protobuf::Arena* arena) const {
  OneVSOneRpcActReply* n = new OneVSOneRpcActReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneVSOneRpcActReply::Clear() {
// @@protoc_insertion_point(message_clear_start:OneVSOneRpcActReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_planname()) {
    GOOGLE_DCHECK(!planname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*planname_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 62u) {
    iscopy_ = 0;
    ranking_ = -1;
    userid_ = GOOGLE_LONGLONG(-1);
    result_ = -9999;
    onevsonenum_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneVSOneRpcActReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneVSOneRpcActReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 UserId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PlanName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_planname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->planname().data(), static_cast<int>(this->planname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OneVSOneRpcActReply.PlanName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 OneVSOneNum = 6 [default = -1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_onevsonenum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &onevsonenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Ranking = 7 [default = -1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_ranking();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ranking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 IsCopy = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_iscopy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &iscopy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OneVSOneRpcActReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneVSOneRpcActReply)
  return false;
#undef DO_
}

void OneVSOneRpcActReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneVSOneRpcActReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->userid(), output);
  }

  // optional string PlanName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planname().data(), static_cast<int>(this->planname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OneVSOneRpcActReply.PlanName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->planname(), output);
  }

  // optional sint32 OneVSOneNum = 6 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->onevsonenum(), output);
  }

  // optional sint32 Ranking = 7 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->ranking(), output);
  }

  // optional sint32 IsCopy = 8 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->iscopy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneVSOneRpcActReply)
}

::google::protobuf::uint8* OneVSOneRpcActReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OneVSOneRpcActReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->userid(), target);
  }

  // optional string PlanName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planname().data(), static_cast<int>(this->planname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OneVSOneRpcActReply.PlanName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->planname(), target);
  }

  // optional sint32 OneVSOneNum = 6 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->onevsonenum(), target);
  }

  // optional sint32 Ranking = 7 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->ranking(), target);
  }

  // optional sint32 IsCopy = 8 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->iscopy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneVSOneRpcActReply)
  return target;
}

size_t OneVSOneRpcActReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneVSOneRpcActReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string PlanName = 4;
    if (has_planname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planname());
    }

    // optional sint32 IsCopy = 8 [default = 0];
    if (has_iscopy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->iscopy());
    }

    // optional sint32 Ranking = 7 [default = -1];
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ranking());
    }

    // optional sint64 UserId = 2 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 OneVSOneNum = 6 [default = -1];
    if (has_onevsonenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->onevsonenum());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneVSOneRpcActReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneVSOneRpcActReply)
  GOOGLE_DCHECK_NE(&from, this);
  const OneVSOneRpcActReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneVSOneRpcActReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneVSOneRpcActReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneVSOneRpcActReply)
    MergeFrom(*source);
  }
}

void OneVSOneRpcActReply::MergeFrom(const OneVSOneRpcActReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneVSOneRpcActReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_planname();
      planname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.planname_);
    }
    if (cached_has_bits & 0x00000002u) {
      iscopy_ = from.iscopy_;
    }
    if (cached_has_bits & 0x00000004u) {
      ranking_ = from.ranking_;
    }
    if (cached_has_bits & 0x00000008u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000010u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000020u) {
      onevsonenum_ = from.onevsonenum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OneVSOneRpcActReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneVSOneRpcActReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneVSOneRpcActReply::CopyFrom(const OneVSOneRpcActReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneVSOneRpcActReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVSOneRpcActReply::IsInitialized() const {
  return true;
}

void OneVSOneRpcActReply::Swap(OneVSOneRpcActReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneVSOneRpcActReply::InternalSwap(OneVSOneRpcActReply* other) {
  using std::swap;
  planname_.Swap(&other->planname_);
  swap(iscopy_, other->iscopy_);
  swap(ranking_, other->ranking_);
  swap(userid_, other->userid_);
  swap(result_, other->result_);
  swap(onevsonenum_, other->onevsonenum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneVSOneRpcActReply::GetMetadata() const {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneVSOneRpcActReply

// optional sint32 Result = 1 [default = -9999];
bool OneVSOneRpcActReply::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OneVSOneRpcActReply::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
void OneVSOneRpcActReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
void OneVSOneRpcActReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 OneVSOneRpcActReply::result() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcActReply.Result)
  return result_;
}
void OneVSOneRpcActReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcActReply.Result)
}

// optional sint64 UserId = 2 [default = -1];
bool OneVSOneRpcActReply::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OneVSOneRpcActReply::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
void OneVSOneRpcActReply::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
void OneVSOneRpcActReply::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 OneVSOneRpcActReply::userid() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcActReply.UserId)
  return userid_;
}
void OneVSOneRpcActReply::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcActReply.UserId)
}

// optional string PlanName = 4;
bool OneVSOneRpcActReply::has_planname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OneVSOneRpcActReply::set_has_planname() {
  _has_bits_[0] |= 0x00000001u;
}
void OneVSOneRpcActReply::clear_has_planname() {
  _has_bits_[0] &= ~0x00000001u;
}
void OneVSOneRpcActReply::clear_planname() {
  planname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_planname();
}
const ::std::string& OneVSOneRpcActReply::planname() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcActReply.PlanName)
  return planname_.GetNoArena();
}
void OneVSOneRpcActReply::set_planname(const ::std::string& value) {
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OneVSOneRpcActReply.PlanName)
}
#if LANG_CXX11
void OneVSOneRpcActReply::set_planname(::std::string&& value) {
  set_has_planname();
  planname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OneVSOneRpcActReply.PlanName)
}
#endif
void OneVSOneRpcActReply::set_planname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OneVSOneRpcActReply.PlanName)
}
void OneVSOneRpcActReply::set_planname(const char* value, size_t size) {
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OneVSOneRpcActReply.PlanName)
}
::std::string* OneVSOneRpcActReply::mutable_planname() {
  set_has_planname();
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcActReply.PlanName)
  return planname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OneVSOneRpcActReply::release_planname() {
  // @@protoc_insertion_point(field_release:OneVSOneRpcActReply.PlanName)
  clear_has_planname();
  return planname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OneVSOneRpcActReply::set_allocated_planname(::std::string* planname) {
  if (planname != NULL) {
    set_has_planname();
  } else {
    clear_has_planname();
  }
  planname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), planname);
  // @@protoc_insertion_point(field_set_allocated:OneVSOneRpcActReply.PlanName)
}

// optional sint32 OneVSOneNum = 6 [default = -1];
bool OneVSOneRpcActReply::has_onevsonenum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OneVSOneRpcActReply::set_has_onevsonenum() {
  _has_bits_[0] |= 0x00000020u;
}
void OneVSOneRpcActReply::clear_has_onevsonenum() {
  _has_bits_[0] &= ~0x00000020u;
}
void OneVSOneRpcActReply::clear_onevsonenum() {
  onevsonenum_ = -1;
  clear_has_onevsonenum();
}
::google::protobuf::int32 OneVSOneRpcActReply::onevsonenum() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcActReply.OneVSOneNum)
  return onevsonenum_;
}
void OneVSOneRpcActReply::set_onevsonenum(::google::protobuf::int32 value) {
  set_has_onevsonenum();
  onevsonenum_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcActReply.OneVSOneNum)
}

// optional sint32 Ranking = 7 [default = -1];
bool OneVSOneRpcActReply::has_ranking() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OneVSOneRpcActReply::set_has_ranking() {
  _has_bits_[0] |= 0x00000004u;
}
void OneVSOneRpcActReply::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000004u;
}
void OneVSOneRpcActReply::clear_ranking() {
  ranking_ = -1;
  clear_has_ranking();
}
::google::protobuf::int32 OneVSOneRpcActReply::ranking() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcActReply.Ranking)
  return ranking_;
}
void OneVSOneRpcActReply::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcActReply.Ranking)
}

// optional sint32 IsCopy = 8 [default = 0];
bool OneVSOneRpcActReply::has_iscopy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OneVSOneRpcActReply::set_has_iscopy() {
  _has_bits_[0] |= 0x00000002u;
}
void OneVSOneRpcActReply::clear_has_iscopy() {
  _has_bits_[0] &= ~0x00000002u;
}
void OneVSOneRpcActReply::clear_iscopy() {
  iscopy_ = 0;
  clear_has_iscopy();
}
::google::protobuf::int32 OneVSOneRpcActReply::iscopy() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcActReply.IsCopy)
  return iscopy_;
}
void OneVSOneRpcActReply::set_iscopy(::google::protobuf::int32 value) {
  set_has_iscopy();
  iscopy_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcActReply.IsCopy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneVSOneRpcActMessageNotify::kUserIdFieldNumber;
const int OneVSOneRpcActMessageNotify::kPlanNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneVSOneRpcActMessageNotify::OneVSOneRpcActMessageNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_OneVSOneRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneVSOneRpcActMessageNotify)
}
OneVSOneRpcActMessageNotify::OneVSOneRpcActMessageNotify(const OneVSOneRpcActMessageNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  planname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_planname()) {
    planname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.planname_);
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:OneVSOneRpcActMessageNotify)
}

void OneVSOneRpcActMessageNotify::SharedCtor() {
  _cached_size_ = 0;
  planname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = GOOGLE_LONGLONG(-1);
}

OneVSOneRpcActMessageNotify::~OneVSOneRpcActMessageNotify() {
  // @@protoc_insertion_point(destructor:OneVSOneRpcActMessageNotify)
  SharedDtor();
}

void OneVSOneRpcActMessageNotify::SharedDtor() {
  planname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OneVSOneRpcActMessageNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneVSOneRpcActMessageNotify::descriptor() {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneVSOneRpcActMessageNotify& OneVSOneRpcActMessageNotify::default_instance() {
  protobuf_OneVSOneRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneVSOneRpcActMessageNotify* OneVSOneRpcActMessageNotify::New(::google::protobuf::Arena* arena) const {
  OneVSOneRpcActMessageNotify* n = new OneVSOneRpcActMessageNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneVSOneRpcActMessageNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:OneVSOneRpcActMessageNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!planname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*planname_.UnsafeRawStringPointer())->clear();
    }
    userid_ = GOOGLE_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneVSOneRpcActMessageNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneVSOneRpcActMessageNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PlanName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_planname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->planname().data(), static_cast<int>(this->planname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OneVSOneRpcActMessageNotify.PlanName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OneVSOneRpcActMessageNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneVSOneRpcActMessageNotify)
  return false;
#undef DO_
}

void OneVSOneRpcActMessageNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneVSOneRpcActMessageNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->userid(), output);
  }

  // optional string PlanName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planname().data(), static_cast<int>(this->planname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OneVSOneRpcActMessageNotify.PlanName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->planname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneVSOneRpcActMessageNotify)
}

::google::protobuf::uint8* OneVSOneRpcActMessageNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OneVSOneRpcActMessageNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->userid(), target);
  }

  // optional string PlanName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planname().data(), static_cast<int>(this->planname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OneVSOneRpcActMessageNotify.PlanName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->planname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneVSOneRpcActMessageNotify)
  return target;
}

size_t OneVSOneRpcActMessageNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneVSOneRpcActMessageNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string PlanName = 2;
    if (has_planname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planname());
    }

    // optional sint64 UserId = 1 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneVSOneRpcActMessageNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneVSOneRpcActMessageNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const OneVSOneRpcActMessageNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneVSOneRpcActMessageNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneVSOneRpcActMessageNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneVSOneRpcActMessageNotify)
    MergeFrom(*source);
  }
}

void OneVSOneRpcActMessageNotify::MergeFrom(const OneVSOneRpcActMessageNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneVSOneRpcActMessageNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_planname();
      planname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.planname_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OneVSOneRpcActMessageNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneVSOneRpcActMessageNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneVSOneRpcActMessageNotify::CopyFrom(const OneVSOneRpcActMessageNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneVSOneRpcActMessageNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVSOneRpcActMessageNotify::IsInitialized() const {
  return true;
}

void OneVSOneRpcActMessageNotify::Swap(OneVSOneRpcActMessageNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneVSOneRpcActMessageNotify::InternalSwap(OneVSOneRpcActMessageNotify* other) {
  using std::swap;
  planname_.Swap(&other->planname_);
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneVSOneRpcActMessageNotify::GetMetadata() const {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneVSOneRpcActMessageNotify

// optional sint64 UserId = 1 [default = -1];
bool OneVSOneRpcActMessageNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OneVSOneRpcActMessageNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void OneVSOneRpcActMessageNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void OneVSOneRpcActMessageNotify::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 OneVSOneRpcActMessageNotify::userid() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcActMessageNotify.UserId)
  return userid_;
}
void OneVSOneRpcActMessageNotify::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcActMessageNotify.UserId)
}

// optional string PlanName = 2;
bool OneVSOneRpcActMessageNotify::has_planname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OneVSOneRpcActMessageNotify::set_has_planname() {
  _has_bits_[0] |= 0x00000001u;
}
void OneVSOneRpcActMessageNotify::clear_has_planname() {
  _has_bits_[0] &= ~0x00000001u;
}
void OneVSOneRpcActMessageNotify::clear_planname() {
  planname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_planname();
}
const ::std::string& OneVSOneRpcActMessageNotify::planname() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcActMessageNotify.PlanName)
  return planname_.GetNoArena();
}
void OneVSOneRpcActMessageNotify::set_planname(const ::std::string& value) {
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OneVSOneRpcActMessageNotify.PlanName)
}
#if LANG_CXX11
void OneVSOneRpcActMessageNotify::set_planname(::std::string&& value) {
  set_has_planname();
  planname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OneVSOneRpcActMessageNotify.PlanName)
}
#endif
void OneVSOneRpcActMessageNotify::set_planname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OneVSOneRpcActMessageNotify.PlanName)
}
void OneVSOneRpcActMessageNotify::set_planname(const char* value, size_t size) {
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OneVSOneRpcActMessageNotify.PlanName)
}
::std::string* OneVSOneRpcActMessageNotify::mutable_planname() {
  set_has_planname();
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcActMessageNotify.PlanName)
  return planname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OneVSOneRpcActMessageNotify::release_planname() {
  // @@protoc_insertion_point(field_release:OneVSOneRpcActMessageNotify.PlanName)
  clear_has_planname();
  return planname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OneVSOneRpcActMessageNotify::set_allocated_planname(::std::string* planname) {
  if (planname != NULL) {
    set_has_planname();
  } else {
    clear_has_planname();
  }
  planname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), planname);
  // @@protoc_insertion_point(field_set_allocated:OneVSOneRpcActMessageNotify.PlanName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneVSOneRpcReplyActAsk::kUserIdFieldNumber;
const int OneVSOneRpcReplyActAsk::kIsOKFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneVSOneRpcReplyActAsk::OneVSOneRpcReplyActAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_OneVSOneRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneVSOneRpcReplyActAsk)
}
OneVSOneRpcReplyActAsk::OneVSOneRpcReplyActAsk(const OneVSOneRpcReplyActAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&isok_, &from.isok_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&isok_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:OneVSOneRpcReplyActAsk)
}

void OneVSOneRpcReplyActAsk::SharedCtor() {
  _cached_size_ = 0;
  isok_ = -1;
  userid_ = GOOGLE_LONGLONG(-1);
}

OneVSOneRpcReplyActAsk::~OneVSOneRpcReplyActAsk() {
  // @@protoc_insertion_point(destructor:OneVSOneRpcReplyActAsk)
  SharedDtor();
}

void OneVSOneRpcReplyActAsk::SharedDtor() {
}

void OneVSOneRpcReplyActAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneVSOneRpcReplyActAsk::descriptor() {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneVSOneRpcReplyActAsk& OneVSOneRpcReplyActAsk::default_instance() {
  protobuf_OneVSOneRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneVSOneRpcReplyActAsk* OneVSOneRpcReplyActAsk::New(::google::protobuf::Arena* arena) const {
  OneVSOneRpcReplyActAsk* n = new OneVSOneRpcReplyActAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneVSOneRpcReplyActAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:OneVSOneRpcReplyActAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    isok_ = -1;
    userid_ = GOOGLE_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneVSOneRpcReplyActAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneVSOneRpcReplyActAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 IsOK = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_isok();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &isok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OneVSOneRpcReplyActAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneVSOneRpcReplyActAsk)
  return false;
#undef DO_
}

void OneVSOneRpcReplyActAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneVSOneRpcReplyActAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->userid(), output);
  }

  // optional sint32 IsOK = 2 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->isok(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneVSOneRpcReplyActAsk)
}

::google::protobuf::uint8* OneVSOneRpcReplyActAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OneVSOneRpcReplyActAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->userid(), target);
  }

  // optional sint32 IsOK = 2 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->isok(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneVSOneRpcReplyActAsk)
  return target;
}

size_t OneVSOneRpcReplyActAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneVSOneRpcReplyActAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 IsOK = 2 [default = -1];
    if (has_isok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->isok());
    }

    // optional sint64 UserId = 1 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneVSOneRpcReplyActAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneVSOneRpcReplyActAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const OneVSOneRpcReplyActAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneVSOneRpcReplyActAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneVSOneRpcReplyActAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneVSOneRpcReplyActAsk)
    MergeFrom(*source);
  }
}

void OneVSOneRpcReplyActAsk::MergeFrom(const OneVSOneRpcReplyActAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneVSOneRpcReplyActAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      isok_ = from.isok_;
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OneVSOneRpcReplyActAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneVSOneRpcReplyActAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneVSOneRpcReplyActAsk::CopyFrom(const OneVSOneRpcReplyActAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneVSOneRpcReplyActAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVSOneRpcReplyActAsk::IsInitialized() const {
  return true;
}

void OneVSOneRpcReplyActAsk::Swap(OneVSOneRpcReplyActAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneVSOneRpcReplyActAsk::InternalSwap(OneVSOneRpcReplyActAsk* other) {
  using std::swap;
  swap(isok_, other->isok_);
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneVSOneRpcReplyActAsk::GetMetadata() const {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneVSOneRpcReplyActAsk

// optional sint64 UserId = 1 [default = -1];
bool OneVSOneRpcReplyActAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OneVSOneRpcReplyActAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void OneVSOneRpcReplyActAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void OneVSOneRpcReplyActAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 OneVSOneRpcReplyActAsk::userid() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcReplyActAsk.UserId)
  return userid_;
}
void OneVSOneRpcReplyActAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcReplyActAsk.UserId)
}

// optional sint32 IsOK = 2 [default = -1];
bool OneVSOneRpcReplyActAsk::has_isok() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OneVSOneRpcReplyActAsk::set_has_isok() {
  _has_bits_[0] |= 0x00000001u;
}
void OneVSOneRpcReplyActAsk::clear_has_isok() {
  _has_bits_[0] &= ~0x00000001u;
}
void OneVSOneRpcReplyActAsk::clear_isok() {
  isok_ = -1;
  clear_has_isok();
}
::google::protobuf::int32 OneVSOneRpcReplyActAsk::isok() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcReplyActAsk.IsOK)
  return isok_;
}
void OneVSOneRpcReplyActAsk::set_isok(::google::protobuf::int32 value) {
  set_has_isok();
  isok_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcReplyActAsk.IsOK)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneVSOneRpcReplyActReply::kResultFieldNumber;
const int OneVSOneRpcReplyActReply::kUserIdFieldNumber;
const int OneVSOneRpcReplyActReply::kIsOKFieldNumber;
const int OneVSOneRpcReplyActReply::kPlanNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneVSOneRpcReplyActReply::OneVSOneRpcReplyActReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_OneVSOneRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneVSOneRpcReplyActReply)
}
OneVSOneRpcReplyActReply::OneVSOneRpcReplyActReply(const OneVSOneRpcReplyActReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  planname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_planname()) {
    planname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.planname_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isok_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(isok_));
  // @@protoc_insertion_point(copy_constructor:OneVSOneRpcReplyActReply)
}

void OneVSOneRpcReplyActReply::SharedCtor() {
  _cached_size_ = 0;
  planname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = GOOGLE_LONGLONG(-1);
  result_ = -9999;
  isok_ = -1;
}

OneVSOneRpcReplyActReply::~OneVSOneRpcReplyActReply() {
  // @@protoc_insertion_point(destructor:OneVSOneRpcReplyActReply)
  SharedDtor();
}

void OneVSOneRpcReplyActReply::SharedDtor() {
  planname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OneVSOneRpcReplyActReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneVSOneRpcReplyActReply::descriptor() {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneVSOneRpcReplyActReply& OneVSOneRpcReplyActReply::default_instance() {
  protobuf_OneVSOneRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneVSOneRpcReplyActReply* OneVSOneRpcReplyActReply::New(::google::protobuf::Arena* arena) const {
  OneVSOneRpcReplyActReply* n = new OneVSOneRpcReplyActReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneVSOneRpcReplyActReply::Clear() {
// @@protoc_insertion_point(message_clear_start:OneVSOneRpcReplyActReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!planname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*planname_.UnsafeRawStringPointer())->clear();
    }
    userid_ = GOOGLE_LONGLONG(-1);
    result_ = -9999;
    isok_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneVSOneRpcReplyActReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneVSOneRpcReplyActReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 UserId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 IsOK = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_isok();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &isok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PlanName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_planname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->planname().data(), static_cast<int>(this->planname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OneVSOneRpcReplyActReply.PlanName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OneVSOneRpcReplyActReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneVSOneRpcReplyActReply)
  return false;
#undef DO_
}

void OneVSOneRpcReplyActReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneVSOneRpcReplyActReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->userid(), output);
  }

  // optional sint32 IsOK = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->isok(), output);
  }

  // optional string PlanName = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planname().data(), static_cast<int>(this->planname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OneVSOneRpcReplyActReply.PlanName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->planname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneVSOneRpcReplyActReply)
}

::google::protobuf::uint8* OneVSOneRpcReplyActReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OneVSOneRpcReplyActReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->userid(), target);
  }

  // optional sint32 IsOK = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->isok(), target);
  }

  // optional string PlanName = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planname().data(), static_cast<int>(this->planname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OneVSOneRpcReplyActReply.PlanName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->planname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneVSOneRpcReplyActReply)
  return target;
}

size_t OneVSOneRpcReplyActReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneVSOneRpcReplyActReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string PlanName = 5;
    if (has_planname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planname());
    }

    // optional sint64 UserId = 2 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 IsOK = 4 [default = -1];
    if (has_isok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->isok());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneVSOneRpcReplyActReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneVSOneRpcReplyActReply)
  GOOGLE_DCHECK_NE(&from, this);
  const OneVSOneRpcReplyActReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneVSOneRpcReplyActReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneVSOneRpcReplyActReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneVSOneRpcReplyActReply)
    MergeFrom(*source);
  }
}

void OneVSOneRpcReplyActReply::MergeFrom(const OneVSOneRpcReplyActReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneVSOneRpcReplyActReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_planname();
      planname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.planname_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      isok_ = from.isok_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OneVSOneRpcReplyActReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneVSOneRpcReplyActReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneVSOneRpcReplyActReply::CopyFrom(const OneVSOneRpcReplyActReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneVSOneRpcReplyActReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVSOneRpcReplyActReply::IsInitialized() const {
  return true;
}

void OneVSOneRpcReplyActReply::Swap(OneVSOneRpcReplyActReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneVSOneRpcReplyActReply::InternalSwap(OneVSOneRpcReplyActReply* other) {
  using std::swap;
  planname_.Swap(&other->planname_);
  swap(userid_, other->userid_);
  swap(result_, other->result_);
  swap(isok_, other->isok_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneVSOneRpcReplyActReply::GetMetadata() const {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneVSOneRpcReplyActReply

// optional sint32 Result = 1 [default = -9999];
bool OneVSOneRpcReplyActReply::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OneVSOneRpcReplyActReply::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void OneVSOneRpcReplyActReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void OneVSOneRpcReplyActReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 OneVSOneRpcReplyActReply::result() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcReplyActReply.Result)
  return result_;
}
void OneVSOneRpcReplyActReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcReplyActReply.Result)
}

// optional sint64 UserId = 2 [default = -1];
bool OneVSOneRpcReplyActReply::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OneVSOneRpcReplyActReply::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void OneVSOneRpcReplyActReply::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void OneVSOneRpcReplyActReply::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 OneVSOneRpcReplyActReply::userid() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcReplyActReply.UserId)
  return userid_;
}
void OneVSOneRpcReplyActReply::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcReplyActReply.UserId)
}

// optional sint32 IsOK = 4 [default = -1];
bool OneVSOneRpcReplyActReply::has_isok() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OneVSOneRpcReplyActReply::set_has_isok() {
  _has_bits_[0] |= 0x00000008u;
}
void OneVSOneRpcReplyActReply::clear_has_isok() {
  _has_bits_[0] &= ~0x00000008u;
}
void OneVSOneRpcReplyActReply::clear_isok() {
  isok_ = -1;
  clear_has_isok();
}
::google::protobuf::int32 OneVSOneRpcReplyActReply::isok() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcReplyActReply.IsOK)
  return isok_;
}
void OneVSOneRpcReplyActReply::set_isok(::google::protobuf::int32 value) {
  set_has_isok();
  isok_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcReplyActReply.IsOK)
}

// optional string PlanName = 5;
bool OneVSOneRpcReplyActReply::has_planname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OneVSOneRpcReplyActReply::set_has_planname() {
  _has_bits_[0] |= 0x00000001u;
}
void OneVSOneRpcReplyActReply::clear_has_planname() {
  _has_bits_[0] &= ~0x00000001u;
}
void OneVSOneRpcReplyActReply::clear_planname() {
  planname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_planname();
}
const ::std::string& OneVSOneRpcReplyActReply::planname() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcReplyActReply.PlanName)
  return planname_.GetNoArena();
}
void OneVSOneRpcReplyActReply::set_planname(const ::std::string& value) {
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OneVSOneRpcReplyActReply.PlanName)
}
#if LANG_CXX11
void OneVSOneRpcReplyActReply::set_planname(::std::string&& value) {
  set_has_planname();
  planname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OneVSOneRpcReplyActReply.PlanName)
}
#endif
void OneVSOneRpcReplyActReply::set_planname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OneVSOneRpcReplyActReply.PlanName)
}
void OneVSOneRpcReplyActReply::set_planname(const char* value, size_t size) {
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OneVSOneRpcReplyActReply.PlanName)
}
::std::string* OneVSOneRpcReplyActReply::mutable_planname() {
  set_has_planname();
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcReplyActReply.PlanName)
  return planname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OneVSOneRpcReplyActReply::release_planname() {
  // @@protoc_insertion_point(field_release:OneVSOneRpcReplyActReply.PlanName)
  clear_has_planname();
  return planname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OneVSOneRpcReplyActReply::set_allocated_planname(::std::string* planname) {
  if (planname != NULL) {
    set_has_planname();
  } else {
    clear_has_planname();
  }
  planname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), planname);
  // @@protoc_insertion_point(field_set_allocated:OneVSOneRpcReplyActReply.PlanName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneVSOneRpcGetTopAsk::OneVSOneRpcGetTopAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_OneVSOneRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneVSOneRpcGetTopAsk)
}
OneVSOneRpcGetTopAsk::OneVSOneRpcGetTopAsk(const OneVSOneRpcGetTopAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OneVSOneRpcGetTopAsk)
}

void OneVSOneRpcGetTopAsk::SharedCtor() {
  _cached_size_ = 0;
}

OneVSOneRpcGetTopAsk::~OneVSOneRpcGetTopAsk() {
  // @@protoc_insertion_point(destructor:OneVSOneRpcGetTopAsk)
  SharedDtor();
}

void OneVSOneRpcGetTopAsk::SharedDtor() {
}

void OneVSOneRpcGetTopAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneVSOneRpcGetTopAsk::descriptor() {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneVSOneRpcGetTopAsk& OneVSOneRpcGetTopAsk::default_instance() {
  protobuf_OneVSOneRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneVSOneRpcGetTopAsk* OneVSOneRpcGetTopAsk::New(::google::protobuf::Arena* arena) const {
  OneVSOneRpcGetTopAsk* n = new OneVSOneRpcGetTopAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneVSOneRpcGetTopAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:OneVSOneRpcGetTopAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneVSOneRpcGetTopAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneVSOneRpcGetTopAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:OneVSOneRpcGetTopAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneVSOneRpcGetTopAsk)
  return false;
#undef DO_
}

void OneVSOneRpcGetTopAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneVSOneRpcGetTopAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneVSOneRpcGetTopAsk)
}

::google::protobuf::uint8* OneVSOneRpcGetTopAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OneVSOneRpcGetTopAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneVSOneRpcGetTopAsk)
  return target;
}

size_t OneVSOneRpcGetTopAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneVSOneRpcGetTopAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneVSOneRpcGetTopAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneVSOneRpcGetTopAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const OneVSOneRpcGetTopAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneVSOneRpcGetTopAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneVSOneRpcGetTopAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneVSOneRpcGetTopAsk)
    MergeFrom(*source);
  }
}

void OneVSOneRpcGetTopAsk::MergeFrom(const OneVSOneRpcGetTopAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneVSOneRpcGetTopAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OneVSOneRpcGetTopAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneVSOneRpcGetTopAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneVSOneRpcGetTopAsk::CopyFrom(const OneVSOneRpcGetTopAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneVSOneRpcGetTopAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVSOneRpcGetTopAsk::IsInitialized() const {
  return true;
}

void OneVSOneRpcGetTopAsk::Swap(OneVSOneRpcGetTopAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneVSOneRpcGetTopAsk::InternalSwap(OneVSOneRpcGetTopAsk* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneVSOneRpcGetTopAsk::GetMetadata() const {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneVSOneRpcGetTopAsk

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneVSOneRpcGetTopReply::kResultFieldNumber;
const int OneVSOneRpcGetTopReply::kTopMessesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneVSOneRpcGetTopReply::OneVSOneRpcGetTopReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_OneVSOneRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneVSOneRpcGetTopReply)
}
OneVSOneRpcGetTopReply::OneVSOneRpcGetTopReply(const OneVSOneRpcGetTopReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      topmesses_(from.topmesses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:OneVSOneRpcGetTopReply)
}

void OneVSOneRpcGetTopReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

OneVSOneRpcGetTopReply::~OneVSOneRpcGetTopReply() {
  // @@protoc_insertion_point(destructor:OneVSOneRpcGetTopReply)
  SharedDtor();
}

void OneVSOneRpcGetTopReply::SharedDtor() {
}

void OneVSOneRpcGetTopReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneVSOneRpcGetTopReply::descriptor() {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneVSOneRpcGetTopReply& OneVSOneRpcGetTopReply::default_instance() {
  protobuf_OneVSOneRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneVSOneRpcGetTopReply* OneVSOneRpcGetTopReply::New(::google::protobuf::Arena* arena) const {
  OneVSOneRpcGetTopReply* n = new OneVSOneRpcGetTopReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneVSOneRpcGetTopReply::Clear() {
// @@protoc_insertion_point(message_clear_start:OneVSOneRpcGetTopReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topmesses_.Clear();
  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneVSOneRpcGetTopReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneVSOneRpcGetTopReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TopMess TopMesses = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_topmesses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OneVSOneRpcGetTopReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneVSOneRpcGetTopReply)
  return false;
#undef DO_
}

void OneVSOneRpcGetTopReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneVSOneRpcGetTopReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // repeated .TopMess TopMesses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->topmesses_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->topmesses(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneVSOneRpcGetTopReply)
}

::google::protobuf::uint8* OneVSOneRpcGetTopReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OneVSOneRpcGetTopReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // repeated .TopMess TopMesses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->topmesses_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->topmesses(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneVSOneRpcGetTopReply)
  return target;
}

size_t OneVSOneRpcGetTopReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneVSOneRpcGetTopReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .TopMess TopMesses = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->topmesses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topmesses(static_cast<int>(i)));
    }
  }

  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneVSOneRpcGetTopReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneVSOneRpcGetTopReply)
  GOOGLE_DCHECK_NE(&from, this);
  const OneVSOneRpcGetTopReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneVSOneRpcGetTopReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneVSOneRpcGetTopReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneVSOneRpcGetTopReply)
    MergeFrom(*source);
  }
}

void OneVSOneRpcGetTopReply::MergeFrom(const OneVSOneRpcGetTopReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneVSOneRpcGetTopReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topmesses_.MergeFrom(from.topmesses_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void OneVSOneRpcGetTopReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneVSOneRpcGetTopReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneVSOneRpcGetTopReply::CopyFrom(const OneVSOneRpcGetTopReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneVSOneRpcGetTopReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVSOneRpcGetTopReply::IsInitialized() const {
  return true;
}

void OneVSOneRpcGetTopReply::Swap(OneVSOneRpcGetTopReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneVSOneRpcGetTopReply::InternalSwap(OneVSOneRpcGetTopReply* other) {
  using std::swap;
  topmesses_.InternalSwap(&other->topmesses_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneVSOneRpcGetTopReply::GetMetadata() const {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneVSOneRpcGetTopReply

// optional sint32 Result = 1 [default = -9999];
bool OneVSOneRpcGetTopReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OneVSOneRpcGetTopReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void OneVSOneRpcGetTopReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void OneVSOneRpcGetTopReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 OneVSOneRpcGetTopReply::result() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcGetTopReply.Result)
  return result_;
}
void OneVSOneRpcGetTopReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcGetTopReply.Result)
}

// repeated .TopMess TopMesses = 2;
int OneVSOneRpcGetTopReply::topmesses_size() const {
  return topmesses_.size();
}
void OneVSOneRpcGetTopReply::clear_topmesses() {
  topmesses_.Clear();
}
const ::TopMess& OneVSOneRpcGetTopReply::topmesses(int index) const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcGetTopReply.TopMesses)
  return topmesses_.Get(index);
}
::TopMess* OneVSOneRpcGetTopReply::mutable_topmesses(int index) {
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcGetTopReply.TopMesses)
  return topmesses_.Mutable(index);
}
::TopMess* OneVSOneRpcGetTopReply::add_topmesses() {
  // @@protoc_insertion_point(field_add:OneVSOneRpcGetTopReply.TopMesses)
  return topmesses_.Add();
}
::google::protobuf::RepeatedPtrField< ::TopMess >*
OneVSOneRpcGetTopReply::mutable_topmesses() {
  // @@protoc_insertion_point(field_mutable_list:OneVSOneRpcGetTopReply.TopMesses)
  return &topmesses_;
}
const ::google::protobuf::RepeatedPtrField< ::TopMess >&
OneVSOneRpcGetTopReply::topmesses() const {
  // @@protoc_insertion_point(field_list:OneVSOneRpcGetTopReply.TopMesses)
  return topmesses_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneVSOneRpcAdjustmentSkillAsk::kSkillDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneVSOneRpcAdjustmentSkillAsk::OneVSOneRpcAdjustmentSkillAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_OneVSOneRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneVSOneRpcAdjustmentSkillAsk)
}
OneVSOneRpcAdjustmentSkillAsk::OneVSOneRpcAdjustmentSkillAsk(const OneVSOneRpcAdjustmentSkillAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      skilldate_(from.skilldate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OneVSOneRpcAdjustmentSkillAsk)
}

void OneVSOneRpcAdjustmentSkillAsk::SharedCtor() {
  _cached_size_ = 0;
}

OneVSOneRpcAdjustmentSkillAsk::~OneVSOneRpcAdjustmentSkillAsk() {
  // @@protoc_insertion_point(destructor:OneVSOneRpcAdjustmentSkillAsk)
  SharedDtor();
}

void OneVSOneRpcAdjustmentSkillAsk::SharedDtor() {
}

void OneVSOneRpcAdjustmentSkillAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneVSOneRpcAdjustmentSkillAsk::descriptor() {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneVSOneRpcAdjustmentSkillAsk& OneVSOneRpcAdjustmentSkillAsk::default_instance() {
  protobuf_OneVSOneRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneVSOneRpcAdjustmentSkillAsk* OneVSOneRpcAdjustmentSkillAsk::New(::google::protobuf::Arena* arena) const {
  OneVSOneRpcAdjustmentSkillAsk* n = new OneVSOneRpcAdjustmentSkillAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneVSOneRpcAdjustmentSkillAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:OneVSOneRpcAdjustmentSkillAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skilldate_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneVSOneRpcAdjustmentSkillAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneVSOneRpcAdjustmentSkillAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OneSData SkillDate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilldate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OneVSOneRpcAdjustmentSkillAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneVSOneRpcAdjustmentSkillAsk)
  return false;
#undef DO_
}

void OneVSOneRpcAdjustmentSkillAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneVSOneRpcAdjustmentSkillAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OneSData SkillDate = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skilldate_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skilldate(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneVSOneRpcAdjustmentSkillAsk)
}

::google::protobuf::uint8* OneVSOneRpcAdjustmentSkillAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OneVSOneRpcAdjustmentSkillAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OneSData SkillDate = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skilldate_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->skilldate(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneVSOneRpcAdjustmentSkillAsk)
  return target;
}

size_t OneVSOneRpcAdjustmentSkillAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneVSOneRpcAdjustmentSkillAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .OneSData SkillDate = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->skilldate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skilldate(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneVSOneRpcAdjustmentSkillAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneVSOneRpcAdjustmentSkillAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const OneVSOneRpcAdjustmentSkillAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneVSOneRpcAdjustmentSkillAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneVSOneRpcAdjustmentSkillAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneVSOneRpcAdjustmentSkillAsk)
    MergeFrom(*source);
  }
}

void OneVSOneRpcAdjustmentSkillAsk::MergeFrom(const OneVSOneRpcAdjustmentSkillAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneVSOneRpcAdjustmentSkillAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skilldate_.MergeFrom(from.skilldate_);
}

void OneVSOneRpcAdjustmentSkillAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneVSOneRpcAdjustmentSkillAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneVSOneRpcAdjustmentSkillAsk::CopyFrom(const OneVSOneRpcAdjustmentSkillAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneVSOneRpcAdjustmentSkillAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVSOneRpcAdjustmentSkillAsk::IsInitialized() const {
  return true;
}

void OneVSOneRpcAdjustmentSkillAsk::Swap(OneVSOneRpcAdjustmentSkillAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneVSOneRpcAdjustmentSkillAsk::InternalSwap(OneVSOneRpcAdjustmentSkillAsk* other) {
  using std::swap;
  skilldate_.InternalSwap(&other->skilldate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneVSOneRpcAdjustmentSkillAsk::GetMetadata() const {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneVSOneRpcAdjustmentSkillAsk

// repeated .OneSData SkillDate = 1;
int OneVSOneRpcAdjustmentSkillAsk::skilldate_size() const {
  return skilldate_.size();
}
void OneVSOneRpcAdjustmentSkillAsk::clear_skilldate() {
  skilldate_.Clear();
}
const ::OneSData& OneVSOneRpcAdjustmentSkillAsk::skilldate(int index) const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcAdjustmentSkillAsk.SkillDate)
  return skilldate_.Get(index);
}
::OneSData* OneVSOneRpcAdjustmentSkillAsk::mutable_skilldate(int index) {
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcAdjustmentSkillAsk.SkillDate)
  return skilldate_.Mutable(index);
}
::OneSData* OneVSOneRpcAdjustmentSkillAsk::add_skilldate() {
  // @@protoc_insertion_point(field_add:OneVSOneRpcAdjustmentSkillAsk.SkillDate)
  return skilldate_.Add();
}
::google::protobuf::RepeatedPtrField< ::OneSData >*
OneVSOneRpcAdjustmentSkillAsk::mutable_skilldate() {
  // @@protoc_insertion_point(field_mutable_list:OneVSOneRpcAdjustmentSkillAsk.SkillDate)
  return &skilldate_;
}
const ::google::protobuf::RepeatedPtrField< ::OneSData >&
OneVSOneRpcAdjustmentSkillAsk::skilldate() const {
  // @@protoc_insertion_point(field_list:OneVSOneRpcAdjustmentSkillAsk.SkillDate)
  return skilldate_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneVSOneRpcAdjustmentSkillReply::kResultFieldNumber;
const int OneVSOneRpcAdjustmentSkillReply::kSkillDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneVSOneRpcAdjustmentSkillReply::OneVSOneRpcAdjustmentSkillReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_OneVSOneRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneVSOneRpcAdjustmentSkillReply)
}
OneVSOneRpcAdjustmentSkillReply::OneVSOneRpcAdjustmentSkillReply(const OneVSOneRpcAdjustmentSkillReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      skilldate_(from.skilldate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:OneVSOneRpcAdjustmentSkillReply)
}

void OneVSOneRpcAdjustmentSkillReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

OneVSOneRpcAdjustmentSkillReply::~OneVSOneRpcAdjustmentSkillReply() {
  // @@protoc_insertion_point(destructor:OneVSOneRpcAdjustmentSkillReply)
  SharedDtor();
}

void OneVSOneRpcAdjustmentSkillReply::SharedDtor() {
}

void OneVSOneRpcAdjustmentSkillReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneVSOneRpcAdjustmentSkillReply::descriptor() {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneVSOneRpcAdjustmentSkillReply& OneVSOneRpcAdjustmentSkillReply::default_instance() {
  protobuf_OneVSOneRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneVSOneRpcAdjustmentSkillReply* OneVSOneRpcAdjustmentSkillReply::New(::google::protobuf::Arena* arena) const {
  OneVSOneRpcAdjustmentSkillReply* n = new OneVSOneRpcAdjustmentSkillReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneVSOneRpcAdjustmentSkillReply::Clear() {
// @@protoc_insertion_point(message_clear_start:OneVSOneRpcAdjustmentSkillReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skilldate_.Clear();
  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneVSOneRpcAdjustmentSkillReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneVSOneRpcAdjustmentSkillReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OneSData SkillDate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilldate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OneVSOneRpcAdjustmentSkillReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneVSOneRpcAdjustmentSkillReply)
  return false;
#undef DO_
}

void OneVSOneRpcAdjustmentSkillReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneVSOneRpcAdjustmentSkillReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // repeated .OneSData SkillDate = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skilldate_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skilldate(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneVSOneRpcAdjustmentSkillReply)
}

::google::protobuf::uint8* OneVSOneRpcAdjustmentSkillReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OneVSOneRpcAdjustmentSkillReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // repeated .OneSData SkillDate = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skilldate_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->skilldate(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneVSOneRpcAdjustmentSkillReply)
  return target;
}

size_t OneVSOneRpcAdjustmentSkillReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneVSOneRpcAdjustmentSkillReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .OneSData SkillDate = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->skilldate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skilldate(static_cast<int>(i)));
    }
  }

  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneVSOneRpcAdjustmentSkillReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneVSOneRpcAdjustmentSkillReply)
  GOOGLE_DCHECK_NE(&from, this);
  const OneVSOneRpcAdjustmentSkillReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneVSOneRpcAdjustmentSkillReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneVSOneRpcAdjustmentSkillReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneVSOneRpcAdjustmentSkillReply)
    MergeFrom(*source);
  }
}

void OneVSOneRpcAdjustmentSkillReply::MergeFrom(const OneVSOneRpcAdjustmentSkillReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneVSOneRpcAdjustmentSkillReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skilldate_.MergeFrom(from.skilldate_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void OneVSOneRpcAdjustmentSkillReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneVSOneRpcAdjustmentSkillReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneVSOneRpcAdjustmentSkillReply::CopyFrom(const OneVSOneRpcAdjustmentSkillReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneVSOneRpcAdjustmentSkillReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVSOneRpcAdjustmentSkillReply::IsInitialized() const {
  return true;
}

void OneVSOneRpcAdjustmentSkillReply::Swap(OneVSOneRpcAdjustmentSkillReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneVSOneRpcAdjustmentSkillReply::InternalSwap(OneVSOneRpcAdjustmentSkillReply* other) {
  using std::swap;
  skilldate_.InternalSwap(&other->skilldate_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneVSOneRpcAdjustmentSkillReply::GetMetadata() const {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneVSOneRpcAdjustmentSkillReply

// optional sint32 Result = 1 [default = -9999];
bool OneVSOneRpcAdjustmentSkillReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OneVSOneRpcAdjustmentSkillReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void OneVSOneRpcAdjustmentSkillReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void OneVSOneRpcAdjustmentSkillReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 OneVSOneRpcAdjustmentSkillReply::result() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcAdjustmentSkillReply.Result)
  return result_;
}
void OneVSOneRpcAdjustmentSkillReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcAdjustmentSkillReply.Result)
}

// repeated .OneSData SkillDate = 2;
int OneVSOneRpcAdjustmentSkillReply::skilldate_size() const {
  return skilldate_.size();
}
void OneVSOneRpcAdjustmentSkillReply::clear_skilldate() {
  skilldate_.Clear();
}
const ::OneSData& OneVSOneRpcAdjustmentSkillReply::skilldate(int index) const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcAdjustmentSkillReply.SkillDate)
  return skilldate_.Get(index);
}
::OneSData* OneVSOneRpcAdjustmentSkillReply::mutable_skilldate(int index) {
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcAdjustmentSkillReply.SkillDate)
  return skilldate_.Mutable(index);
}
::OneSData* OneVSOneRpcAdjustmentSkillReply::add_skilldate() {
  // @@protoc_insertion_point(field_add:OneVSOneRpcAdjustmentSkillReply.SkillDate)
  return skilldate_.Add();
}
::google::protobuf::RepeatedPtrField< ::OneSData >*
OneVSOneRpcAdjustmentSkillReply::mutable_skilldate() {
  // @@protoc_insertion_point(field_mutable_list:OneVSOneRpcAdjustmentSkillReply.SkillDate)
  return &skilldate_;
}
const ::google::protobuf::RepeatedPtrField< ::OneSData >&
OneVSOneRpcAdjustmentSkillReply::skilldate() const {
  // @@protoc_insertion_point(field_list:OneVSOneRpcAdjustmentSkillReply.SkillDate)
  return skilldate_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneVSOneRpcGetSkillAsk::OneVSOneRpcGetSkillAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_OneVSOneRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneVSOneRpcGetSkillAsk)
}
OneVSOneRpcGetSkillAsk::OneVSOneRpcGetSkillAsk(const OneVSOneRpcGetSkillAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OneVSOneRpcGetSkillAsk)
}

void OneVSOneRpcGetSkillAsk::SharedCtor() {
  _cached_size_ = 0;
}

OneVSOneRpcGetSkillAsk::~OneVSOneRpcGetSkillAsk() {
  // @@protoc_insertion_point(destructor:OneVSOneRpcGetSkillAsk)
  SharedDtor();
}

void OneVSOneRpcGetSkillAsk::SharedDtor() {
}

void OneVSOneRpcGetSkillAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneVSOneRpcGetSkillAsk::descriptor() {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneVSOneRpcGetSkillAsk& OneVSOneRpcGetSkillAsk::default_instance() {
  protobuf_OneVSOneRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneVSOneRpcGetSkillAsk* OneVSOneRpcGetSkillAsk::New(::google::protobuf::Arena* arena) const {
  OneVSOneRpcGetSkillAsk* n = new OneVSOneRpcGetSkillAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneVSOneRpcGetSkillAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:OneVSOneRpcGetSkillAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneVSOneRpcGetSkillAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneVSOneRpcGetSkillAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:OneVSOneRpcGetSkillAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneVSOneRpcGetSkillAsk)
  return false;
#undef DO_
}

void OneVSOneRpcGetSkillAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneVSOneRpcGetSkillAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneVSOneRpcGetSkillAsk)
}

::google::protobuf::uint8* OneVSOneRpcGetSkillAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OneVSOneRpcGetSkillAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneVSOneRpcGetSkillAsk)
  return target;
}

size_t OneVSOneRpcGetSkillAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneVSOneRpcGetSkillAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneVSOneRpcGetSkillAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneVSOneRpcGetSkillAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const OneVSOneRpcGetSkillAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneVSOneRpcGetSkillAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneVSOneRpcGetSkillAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneVSOneRpcGetSkillAsk)
    MergeFrom(*source);
  }
}

void OneVSOneRpcGetSkillAsk::MergeFrom(const OneVSOneRpcGetSkillAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneVSOneRpcGetSkillAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OneVSOneRpcGetSkillAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneVSOneRpcGetSkillAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneVSOneRpcGetSkillAsk::CopyFrom(const OneVSOneRpcGetSkillAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneVSOneRpcGetSkillAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVSOneRpcGetSkillAsk::IsInitialized() const {
  return true;
}

void OneVSOneRpcGetSkillAsk::Swap(OneVSOneRpcGetSkillAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneVSOneRpcGetSkillAsk::InternalSwap(OneVSOneRpcGetSkillAsk* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneVSOneRpcGetSkillAsk::GetMetadata() const {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneVSOneRpcGetSkillAsk

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneVSOneRpcGetSkillReply::kResultFieldNumber;
const int OneVSOneRpcGetSkillReply::kSkillDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneVSOneRpcGetSkillReply::OneVSOneRpcGetSkillReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_OneVSOneRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneVSOneRpcGetSkillReply)
}
OneVSOneRpcGetSkillReply::OneVSOneRpcGetSkillReply(const OneVSOneRpcGetSkillReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      skilldate_(from.skilldate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:OneVSOneRpcGetSkillReply)
}

void OneVSOneRpcGetSkillReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

OneVSOneRpcGetSkillReply::~OneVSOneRpcGetSkillReply() {
  // @@protoc_insertion_point(destructor:OneVSOneRpcGetSkillReply)
  SharedDtor();
}

void OneVSOneRpcGetSkillReply::SharedDtor() {
}

void OneVSOneRpcGetSkillReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneVSOneRpcGetSkillReply::descriptor() {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneVSOneRpcGetSkillReply& OneVSOneRpcGetSkillReply::default_instance() {
  protobuf_OneVSOneRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneVSOneRpcGetSkillReply* OneVSOneRpcGetSkillReply::New(::google::protobuf::Arena* arena) const {
  OneVSOneRpcGetSkillReply* n = new OneVSOneRpcGetSkillReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneVSOneRpcGetSkillReply::Clear() {
// @@protoc_insertion_point(message_clear_start:OneVSOneRpcGetSkillReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skilldate_.Clear();
  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneVSOneRpcGetSkillReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneVSOneRpcGetSkillReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OneSData SkillDate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilldate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OneVSOneRpcGetSkillReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneVSOneRpcGetSkillReply)
  return false;
#undef DO_
}

void OneVSOneRpcGetSkillReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneVSOneRpcGetSkillReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // repeated .OneSData SkillDate = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skilldate_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skilldate(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneVSOneRpcGetSkillReply)
}

::google::protobuf::uint8* OneVSOneRpcGetSkillReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OneVSOneRpcGetSkillReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // repeated .OneSData SkillDate = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skilldate_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->skilldate(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneVSOneRpcGetSkillReply)
  return target;
}

size_t OneVSOneRpcGetSkillReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneVSOneRpcGetSkillReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .OneSData SkillDate = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->skilldate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skilldate(static_cast<int>(i)));
    }
  }

  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneVSOneRpcGetSkillReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneVSOneRpcGetSkillReply)
  GOOGLE_DCHECK_NE(&from, this);
  const OneVSOneRpcGetSkillReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneVSOneRpcGetSkillReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneVSOneRpcGetSkillReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneVSOneRpcGetSkillReply)
    MergeFrom(*source);
  }
}

void OneVSOneRpcGetSkillReply::MergeFrom(const OneVSOneRpcGetSkillReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneVSOneRpcGetSkillReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skilldate_.MergeFrom(from.skilldate_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void OneVSOneRpcGetSkillReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneVSOneRpcGetSkillReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneVSOneRpcGetSkillReply::CopyFrom(const OneVSOneRpcGetSkillReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneVSOneRpcGetSkillReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVSOneRpcGetSkillReply::IsInitialized() const {
  return true;
}

void OneVSOneRpcGetSkillReply::Swap(OneVSOneRpcGetSkillReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneVSOneRpcGetSkillReply::InternalSwap(OneVSOneRpcGetSkillReply* other) {
  using std::swap;
  skilldate_.InternalSwap(&other->skilldate_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneVSOneRpcGetSkillReply::GetMetadata() const {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneVSOneRpcGetSkillReply

// optional sint32 Result = 1 [default = -9999];
bool OneVSOneRpcGetSkillReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OneVSOneRpcGetSkillReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void OneVSOneRpcGetSkillReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void OneVSOneRpcGetSkillReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 OneVSOneRpcGetSkillReply::result() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcGetSkillReply.Result)
  return result_;
}
void OneVSOneRpcGetSkillReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcGetSkillReply.Result)
}

// repeated .OneSData SkillDate = 2;
int OneVSOneRpcGetSkillReply::skilldate_size() const {
  return skilldate_.size();
}
void OneVSOneRpcGetSkillReply::clear_skilldate() {
  skilldate_.Clear();
}
const ::OneSData& OneVSOneRpcGetSkillReply::skilldate(int index) const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcGetSkillReply.SkillDate)
  return skilldate_.Get(index);
}
::OneSData* OneVSOneRpcGetSkillReply::mutable_skilldate(int index) {
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcGetSkillReply.SkillDate)
  return skilldate_.Mutable(index);
}
::OneSData* OneVSOneRpcGetSkillReply::add_skilldate() {
  // @@protoc_insertion_point(field_add:OneVSOneRpcGetSkillReply.SkillDate)
  return skilldate_.Add();
}
::google::protobuf::RepeatedPtrField< ::OneSData >*
OneVSOneRpcGetSkillReply::mutable_skilldate() {
  // @@protoc_insertion_point(field_mutable_list:OneVSOneRpcGetSkillReply.SkillDate)
  return &skilldate_;
}
const ::google::protobuf::RepeatedPtrField< ::OneSData >&
OneVSOneRpcGetSkillReply::skilldate() const {
  // @@protoc_insertion_point(field_list:OneVSOneRpcGetSkillReply.SkillDate)
  return skilldate_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneVSOneRpcGetActMessageAsk::OneVSOneRpcGetActMessageAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_OneVSOneRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneVSOneRpcGetActMessageAsk)
}
OneVSOneRpcGetActMessageAsk::OneVSOneRpcGetActMessageAsk(const OneVSOneRpcGetActMessageAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OneVSOneRpcGetActMessageAsk)
}

void OneVSOneRpcGetActMessageAsk::SharedCtor() {
  _cached_size_ = 0;
}

OneVSOneRpcGetActMessageAsk::~OneVSOneRpcGetActMessageAsk() {
  // @@protoc_insertion_point(destructor:OneVSOneRpcGetActMessageAsk)
  SharedDtor();
}

void OneVSOneRpcGetActMessageAsk::SharedDtor() {
}

void OneVSOneRpcGetActMessageAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneVSOneRpcGetActMessageAsk::descriptor() {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneVSOneRpcGetActMessageAsk& OneVSOneRpcGetActMessageAsk::default_instance() {
  protobuf_OneVSOneRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneVSOneRpcGetActMessageAsk* OneVSOneRpcGetActMessageAsk::New(::google::protobuf::Arena* arena) const {
  OneVSOneRpcGetActMessageAsk* n = new OneVSOneRpcGetActMessageAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneVSOneRpcGetActMessageAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:OneVSOneRpcGetActMessageAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneVSOneRpcGetActMessageAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneVSOneRpcGetActMessageAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:OneVSOneRpcGetActMessageAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneVSOneRpcGetActMessageAsk)
  return false;
#undef DO_
}

void OneVSOneRpcGetActMessageAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneVSOneRpcGetActMessageAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneVSOneRpcGetActMessageAsk)
}

::google::protobuf::uint8* OneVSOneRpcGetActMessageAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OneVSOneRpcGetActMessageAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneVSOneRpcGetActMessageAsk)
  return target;
}

size_t OneVSOneRpcGetActMessageAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneVSOneRpcGetActMessageAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneVSOneRpcGetActMessageAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneVSOneRpcGetActMessageAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const OneVSOneRpcGetActMessageAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneVSOneRpcGetActMessageAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneVSOneRpcGetActMessageAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneVSOneRpcGetActMessageAsk)
    MergeFrom(*source);
  }
}

void OneVSOneRpcGetActMessageAsk::MergeFrom(const OneVSOneRpcGetActMessageAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneVSOneRpcGetActMessageAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OneVSOneRpcGetActMessageAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneVSOneRpcGetActMessageAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneVSOneRpcGetActMessageAsk::CopyFrom(const OneVSOneRpcGetActMessageAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneVSOneRpcGetActMessageAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVSOneRpcGetActMessageAsk::IsInitialized() const {
  return true;
}

void OneVSOneRpcGetActMessageAsk::Swap(OneVSOneRpcGetActMessageAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneVSOneRpcGetActMessageAsk::InternalSwap(OneVSOneRpcGetActMessageAsk* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneVSOneRpcGetActMessageAsk::GetMetadata() const {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneVSOneRpcGetActMessageAsk

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneVSOneRpcGetActMessageReply::kResultFieldNumber;
const int OneVSOneRpcGetActMessageReply::kActMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneVSOneRpcGetActMessageReply::OneVSOneRpcGetActMessageReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_OneVSOneRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneVSOneRpcGetActMessageReply)
}
OneVSOneRpcGetActMessageReply::OneVSOneRpcGetActMessageReply(const OneVSOneRpcGetActMessageReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      actmessages_(from.actmessages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:OneVSOneRpcGetActMessageReply)
}

void OneVSOneRpcGetActMessageReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

OneVSOneRpcGetActMessageReply::~OneVSOneRpcGetActMessageReply() {
  // @@protoc_insertion_point(destructor:OneVSOneRpcGetActMessageReply)
  SharedDtor();
}

void OneVSOneRpcGetActMessageReply::SharedDtor() {
}

void OneVSOneRpcGetActMessageReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneVSOneRpcGetActMessageReply::descriptor() {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneVSOneRpcGetActMessageReply& OneVSOneRpcGetActMessageReply::default_instance() {
  protobuf_OneVSOneRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneVSOneRpcGetActMessageReply* OneVSOneRpcGetActMessageReply::New(::google::protobuf::Arena* arena) const {
  OneVSOneRpcGetActMessageReply* n = new OneVSOneRpcGetActMessageReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneVSOneRpcGetActMessageReply::Clear() {
// @@protoc_insertion_point(message_clear_start:OneVSOneRpcGetActMessageReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actmessages_.Clear();
  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneVSOneRpcGetActMessageReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneVSOneRpcGetActMessageReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ActMessage ActMessages = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actmessages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OneVSOneRpcGetActMessageReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneVSOneRpcGetActMessageReply)
  return false;
#undef DO_
}

void OneVSOneRpcGetActMessageReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneVSOneRpcGetActMessageReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // repeated .ActMessage ActMessages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actmessages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->actmessages(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneVSOneRpcGetActMessageReply)
}

::google::protobuf::uint8* OneVSOneRpcGetActMessageReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OneVSOneRpcGetActMessageReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // repeated .ActMessage ActMessages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actmessages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->actmessages(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneVSOneRpcGetActMessageReply)
  return target;
}

size_t OneVSOneRpcGetActMessageReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneVSOneRpcGetActMessageReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ActMessage ActMessages = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->actmessages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actmessages(static_cast<int>(i)));
    }
  }

  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneVSOneRpcGetActMessageReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneVSOneRpcGetActMessageReply)
  GOOGLE_DCHECK_NE(&from, this);
  const OneVSOneRpcGetActMessageReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneVSOneRpcGetActMessageReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneVSOneRpcGetActMessageReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneVSOneRpcGetActMessageReply)
    MergeFrom(*source);
  }
}

void OneVSOneRpcGetActMessageReply::MergeFrom(const OneVSOneRpcGetActMessageReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneVSOneRpcGetActMessageReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actmessages_.MergeFrom(from.actmessages_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void OneVSOneRpcGetActMessageReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneVSOneRpcGetActMessageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneVSOneRpcGetActMessageReply::CopyFrom(const OneVSOneRpcGetActMessageReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneVSOneRpcGetActMessageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVSOneRpcGetActMessageReply::IsInitialized() const {
  return true;
}

void OneVSOneRpcGetActMessageReply::Swap(OneVSOneRpcGetActMessageReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneVSOneRpcGetActMessageReply::InternalSwap(OneVSOneRpcGetActMessageReply* other) {
  using std::swap;
  actmessages_.InternalSwap(&other->actmessages_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneVSOneRpcGetActMessageReply::GetMetadata() const {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneVSOneRpcGetActMessageReply

// optional sint32 Result = 1 [default = -9999];
bool OneVSOneRpcGetActMessageReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OneVSOneRpcGetActMessageReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void OneVSOneRpcGetActMessageReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void OneVSOneRpcGetActMessageReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 OneVSOneRpcGetActMessageReply::result() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcGetActMessageReply.Result)
  return result_;
}
void OneVSOneRpcGetActMessageReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcGetActMessageReply.Result)
}

// repeated .ActMessage ActMessages = 2;
int OneVSOneRpcGetActMessageReply::actmessages_size() const {
  return actmessages_.size();
}
void OneVSOneRpcGetActMessageReply::clear_actmessages() {
  actmessages_.Clear();
}
const ::ActMessage& OneVSOneRpcGetActMessageReply::actmessages(int index) const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcGetActMessageReply.ActMessages)
  return actmessages_.Get(index);
}
::ActMessage* OneVSOneRpcGetActMessageReply::mutable_actmessages(int index) {
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcGetActMessageReply.ActMessages)
  return actmessages_.Mutable(index);
}
::ActMessage* OneVSOneRpcGetActMessageReply::add_actmessages() {
  // @@protoc_insertion_point(field_add:OneVSOneRpcGetActMessageReply.ActMessages)
  return actmessages_.Add();
}
::google::protobuf::RepeatedPtrField< ::ActMessage >*
OneVSOneRpcGetActMessageReply::mutable_actmessages() {
  // @@protoc_insertion_point(field_mutable_list:OneVSOneRpcGetActMessageReply.ActMessages)
  return &actmessages_;
}
const ::google::protobuf::RepeatedPtrField< ::ActMessage >&
OneVSOneRpcGetActMessageReply::actmessages() const {
  // @@protoc_insertion_point(field_list:OneVSOneRpcGetActMessageReply.ActMessages)
  return actmessages_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneVSOneRpcACTResultNotifyNotify::kIsChanllengorWonFieldNumber;
const int OneVSOneRpcACTResultNotifyNotify::kChanllengorFieldNumber;
const int OneVSOneRpcACTResultNotifyNotify::kBeAttackedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneVSOneRpcACTResultNotifyNotify::OneVSOneRpcACTResultNotifyNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_OneVSOneRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneVSOneRpcACTResultNotifyNotify)
}
OneVSOneRpcACTResultNotifyNotify::OneVSOneRpcACTResultNotifyNotify(const OneVSOneRpcACTResultNotifyNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_chanllengor()) {
    chanllengor_ = new ::OneVSOneOVOResultInfo(*from.chanllengor_);
  } else {
    chanllengor_ = NULL;
  }
  if (from.has_beattacked()) {
    beattacked_ = new ::OneVSOneOVOResultInfo(*from.beattacked_);
  } else {
    beattacked_ = NULL;
  }
  ischanllengorwon_ = from.ischanllengorwon_;
  // @@protoc_insertion_point(copy_constructor:OneVSOneRpcACTResultNotifyNotify)
}

void OneVSOneRpcACTResultNotifyNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chanllengor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ischanllengorwon_) -
      reinterpret_cast<char*>(&chanllengor_)) + sizeof(ischanllengorwon_));
}

OneVSOneRpcACTResultNotifyNotify::~OneVSOneRpcACTResultNotifyNotify() {
  // @@protoc_insertion_point(destructor:OneVSOneRpcACTResultNotifyNotify)
  SharedDtor();
}

void OneVSOneRpcACTResultNotifyNotify::SharedDtor() {
  if (this != internal_default_instance()) delete chanllengor_;
  if (this != internal_default_instance()) delete beattacked_;
}

void OneVSOneRpcACTResultNotifyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneVSOneRpcACTResultNotifyNotify::descriptor() {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneVSOneRpcACTResultNotifyNotify& OneVSOneRpcACTResultNotifyNotify::default_instance() {
  protobuf_OneVSOneRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneVSOneRpcACTResultNotifyNotify* OneVSOneRpcACTResultNotifyNotify::New(::google::protobuf::Arena* arena) const {
  OneVSOneRpcACTResultNotifyNotify* n = new OneVSOneRpcACTResultNotifyNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneVSOneRpcACTResultNotifyNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:OneVSOneRpcACTResultNotifyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(chanllengor_ != NULL);
      chanllengor_->::OneVSOneOVOResultInfo::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(beattacked_ != NULL);
      beattacked_->::OneVSOneOVOResultInfo::Clear();
    }
  }
  ischanllengorwon_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneVSOneRpcACTResultNotifyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneVSOneRpcACTResultNotifyNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 IsChanllengorWon = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ischanllengorwon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ischanllengorwon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .OneVSOneOVOResultInfo Chanllengor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chanllengor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .OneVSOneOVOResultInfo BeAttacked = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_beattacked()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OneVSOneRpcACTResultNotifyNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneVSOneRpcACTResultNotifyNotify)
  return false;
#undef DO_
}

void OneVSOneRpcACTResultNotifyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneVSOneRpcACTResultNotifyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 IsChanllengorWon = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->ischanllengorwon(), output);
  }

  // optional .OneVSOneOVOResultInfo Chanllengor = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->chanllengor_, output);
  }

  // optional .OneVSOneOVOResultInfo BeAttacked = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->beattacked_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneVSOneRpcACTResultNotifyNotify)
}

::google::protobuf::uint8* OneVSOneRpcACTResultNotifyNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OneVSOneRpcACTResultNotifyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 IsChanllengorWon = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->ischanllengorwon(), target);
  }

  // optional .OneVSOneOVOResultInfo Chanllengor = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->chanllengor_, deterministic, target);
  }

  // optional .OneVSOneOVOResultInfo BeAttacked = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->beattacked_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneVSOneRpcACTResultNotifyNotify)
  return target;
}

size_t OneVSOneRpcACTResultNotifyNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneVSOneRpcACTResultNotifyNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .OneVSOneOVOResultInfo Chanllengor = 2;
    if (has_chanllengor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chanllengor_);
    }

    // optional .OneVSOneOVOResultInfo BeAttacked = 3;
    if (has_beattacked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->beattacked_);
    }

    // optional sint32 IsChanllengorWon = 1 [default = 0];
    if (has_ischanllengorwon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ischanllengorwon());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneVSOneRpcACTResultNotifyNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneVSOneRpcACTResultNotifyNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const OneVSOneRpcACTResultNotifyNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneVSOneRpcACTResultNotifyNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneVSOneRpcACTResultNotifyNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneVSOneRpcACTResultNotifyNotify)
    MergeFrom(*source);
  }
}

void OneVSOneRpcACTResultNotifyNotify::MergeFrom(const OneVSOneRpcACTResultNotifyNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneVSOneRpcACTResultNotifyNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_chanllengor()->::OneVSOneOVOResultInfo::MergeFrom(from.chanllengor());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_beattacked()->::OneVSOneOVOResultInfo::MergeFrom(from.beattacked());
    }
    if (cached_has_bits & 0x00000004u) {
      ischanllengorwon_ = from.ischanllengorwon_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OneVSOneRpcACTResultNotifyNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneVSOneRpcACTResultNotifyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneVSOneRpcACTResultNotifyNotify::CopyFrom(const OneVSOneRpcACTResultNotifyNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneVSOneRpcACTResultNotifyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVSOneRpcACTResultNotifyNotify::IsInitialized() const {
  return true;
}

void OneVSOneRpcACTResultNotifyNotify::Swap(OneVSOneRpcACTResultNotifyNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneVSOneRpcACTResultNotifyNotify::InternalSwap(OneVSOneRpcACTResultNotifyNotify* other) {
  using std::swap;
  swap(chanllengor_, other->chanllengor_);
  swap(beattacked_, other->beattacked_);
  swap(ischanllengorwon_, other->ischanllengorwon_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneVSOneRpcACTResultNotifyNotify::GetMetadata() const {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneVSOneRpcACTResultNotifyNotify

// optional sint32 IsChanllengorWon = 1 [default = 0];
bool OneVSOneRpcACTResultNotifyNotify::has_ischanllengorwon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OneVSOneRpcACTResultNotifyNotify::set_has_ischanllengorwon() {
  _has_bits_[0] |= 0x00000004u;
}
void OneVSOneRpcACTResultNotifyNotify::clear_has_ischanllengorwon() {
  _has_bits_[0] &= ~0x00000004u;
}
void OneVSOneRpcACTResultNotifyNotify::clear_ischanllengorwon() {
  ischanllengorwon_ = 0;
  clear_has_ischanllengorwon();
}
::google::protobuf::int32 OneVSOneRpcACTResultNotifyNotify::ischanllengorwon() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcACTResultNotifyNotify.IsChanllengorWon)
  return ischanllengorwon_;
}
void OneVSOneRpcACTResultNotifyNotify::set_ischanllengorwon(::google::protobuf::int32 value) {
  set_has_ischanllengorwon();
  ischanllengorwon_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcACTResultNotifyNotify.IsChanllengorWon)
}

// optional .OneVSOneOVOResultInfo Chanllengor = 2;
bool OneVSOneRpcACTResultNotifyNotify::has_chanllengor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OneVSOneRpcACTResultNotifyNotify::set_has_chanllengor() {
  _has_bits_[0] |= 0x00000001u;
}
void OneVSOneRpcACTResultNotifyNotify::clear_has_chanllengor() {
  _has_bits_[0] &= ~0x00000001u;
}
void OneVSOneRpcACTResultNotifyNotify::clear_chanllengor() {
  if (chanllengor_ != NULL) chanllengor_->::OneVSOneOVOResultInfo::Clear();
  clear_has_chanllengor();
}
const ::OneVSOneOVOResultInfo& OneVSOneRpcACTResultNotifyNotify::chanllengor() const {
  const ::OneVSOneOVOResultInfo* p = chanllengor_;
  // @@protoc_insertion_point(field_get:OneVSOneRpcACTResultNotifyNotify.Chanllengor)
  return p != NULL ? *p : *reinterpret_cast<const ::OneVSOneOVOResultInfo*>(
      &::_OneVSOneOVOResultInfo_default_instance_);
}
::OneVSOneOVOResultInfo* OneVSOneRpcACTResultNotifyNotify::mutable_chanllengor() {
  set_has_chanllengor();
  if (chanllengor_ == NULL) {
    chanllengor_ = new ::OneVSOneOVOResultInfo;
  }
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcACTResultNotifyNotify.Chanllengor)
  return chanllengor_;
}
::OneVSOneOVOResultInfo* OneVSOneRpcACTResultNotifyNotify::release_chanllengor() {
  // @@protoc_insertion_point(field_release:OneVSOneRpcACTResultNotifyNotify.Chanllengor)
  clear_has_chanllengor();
  ::OneVSOneOVOResultInfo* temp = chanllengor_;
  chanllengor_ = NULL;
  return temp;
}
void OneVSOneRpcACTResultNotifyNotify::set_allocated_chanllengor(::OneVSOneOVOResultInfo* chanllengor) {
  delete chanllengor_;
  chanllengor_ = chanllengor;
  if (chanllengor) {
    set_has_chanllengor();
  } else {
    clear_has_chanllengor();
  }
  // @@protoc_insertion_point(field_set_allocated:OneVSOneRpcACTResultNotifyNotify.Chanllengor)
}

// optional .OneVSOneOVOResultInfo BeAttacked = 3;
bool OneVSOneRpcACTResultNotifyNotify::has_beattacked() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OneVSOneRpcACTResultNotifyNotify::set_has_beattacked() {
  _has_bits_[0] |= 0x00000002u;
}
void OneVSOneRpcACTResultNotifyNotify::clear_has_beattacked() {
  _has_bits_[0] &= ~0x00000002u;
}
void OneVSOneRpcACTResultNotifyNotify::clear_beattacked() {
  if (beattacked_ != NULL) beattacked_->::OneVSOneOVOResultInfo::Clear();
  clear_has_beattacked();
}
const ::OneVSOneOVOResultInfo& OneVSOneRpcACTResultNotifyNotify::beattacked() const {
  const ::OneVSOneOVOResultInfo* p = beattacked_;
  // @@protoc_insertion_point(field_get:OneVSOneRpcACTResultNotifyNotify.BeAttacked)
  return p != NULL ? *p : *reinterpret_cast<const ::OneVSOneOVOResultInfo*>(
      &::_OneVSOneOVOResultInfo_default_instance_);
}
::OneVSOneOVOResultInfo* OneVSOneRpcACTResultNotifyNotify::mutable_beattacked() {
  set_has_beattacked();
  if (beattacked_ == NULL) {
    beattacked_ = new ::OneVSOneOVOResultInfo;
  }
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcACTResultNotifyNotify.BeAttacked)
  return beattacked_;
}
::OneVSOneOVOResultInfo* OneVSOneRpcACTResultNotifyNotify::release_beattacked() {
  // @@protoc_insertion_point(field_release:OneVSOneRpcACTResultNotifyNotify.BeAttacked)
  clear_has_beattacked();
  ::OneVSOneOVOResultInfo* temp = beattacked_;
  beattacked_ = NULL;
  return temp;
}
void OneVSOneRpcACTResultNotifyNotify::set_allocated_beattacked(::OneVSOneOVOResultInfo* beattacked) {
  delete beattacked_;
  beattacked_ = beattacked;
  if (beattacked) {
    set_has_beattacked();
  } else {
    clear_has_beattacked();
  }
  // @@protoc_insertion_point(field_set_allocated:OneVSOneRpcACTResultNotifyNotify.BeAttacked)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneVSOneOVOResultInfo::kUserIdFieldNumber;
const int OneVSOneOVOResultInfo::kDamageFieldNumber;
const int OneVSOneOVOResultInfo::kBeHurtedFieldNumber;
const int OneVSOneOVOResultInfo::kHealedFieldNumber;
const int OneVSOneOVOResultInfo::kNameFieldNumber;
const int OneVSOneOVOResultInfo::kRankingFieldNumber;
const int OneVSOneOVOResultInfo::kBeforeRankingFieldNumber;
const int OneVSOneOVOResultInfo::kJobIDFieldNumber;
const int OneVSOneOVOResultInfo::kHeadICOFieldNumber;
const int OneVSOneOVOResultInfo::kLVFieldNumber;
const int OneVSOneOVOResultInfo::kIsWinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneVSOneOVOResultInfo::OneVSOneOVOResultInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_OneVSOneRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneVSOneOVOResultInfo)
}
OneVSOneOVOResultInfo::OneVSOneOVOResultInfo(const OneVSOneOVOResultInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  headico_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_headico()) {
    headico_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headico_);
  }
  ::memcpy(&damage_, &from.damage_,
    static_cast<size_t>(reinterpret_cast<char*>(&jobid_) -
    reinterpret_cast<char*>(&damage_)) + sizeof(jobid_));
  // @@protoc_insertion_point(copy_constructor:OneVSOneOVOResultInfo)
}

void OneVSOneOVOResultInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headico_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&damage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iswin_) -
      reinterpret_cast<char*>(&damage_)) + sizeof(iswin_));
  lv_ = -1;
  userid_ = GOOGLE_LONGLONG(-1);
  beforeranking_ = -1;
  jobid_ = -1;
}

OneVSOneOVOResultInfo::~OneVSOneOVOResultInfo() {
  // @@protoc_insertion_point(destructor:OneVSOneOVOResultInfo)
  SharedDtor();
}

void OneVSOneOVOResultInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headico_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OneVSOneOVOResultInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneVSOneOVOResultInfo::descriptor() {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneVSOneOVOResultInfo& OneVSOneOVOResultInfo::default_instance() {
  protobuf_OneVSOneRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneVSOneOVOResultInfo* OneVSOneOVOResultInfo::New(::google::protobuf::Arena* arena) const {
  OneVSOneOVOResultInfo* n = new OneVSOneOVOResultInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneVSOneOVOResultInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OneVSOneOVOResultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!headico_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*headico_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&damage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&iswin_) -
        reinterpret_cast<char*>(&damage_)) + sizeof(iswin_));
    lv_ = -1;
  }
  if (cached_has_bits & 1792u) {
    userid_ = GOOGLE_LONGLONG(-1);
    beforeranking_ = -1;
    jobid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneVSOneOVOResultInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneVSOneOVOResultInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Damage = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 BeHurted = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_behurted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &behurted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Healed = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_healed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &healed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OneVSOneOVOResultInfo.Name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Ranking = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_ranking();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ranking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 BeforeRanking = 8 [default = -1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_beforeranking();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &beforeranking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 JobID = 11 [default = -1];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_jobid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &jobid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string HeadICO = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headico()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headico().data(), static_cast<int>(this->headico().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OneVSOneOVOResultInfo.HeadICO");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 LV = 13 [default = -1];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_lv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &lv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 IsWin = 14 [default = 0];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_iswin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &iswin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OneVSOneOVOResultInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneVSOneOVOResultInfo)
  return false;
#undef DO_
}

void OneVSOneOVOResultInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneVSOneOVOResultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->userid(), output);
  }

  // optional sint32 Damage = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->damage(), output);
  }

  // optional sint32 BeHurted = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->behurted(), output);
  }

  // optional sint32 Healed = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->healed(), output);
  }

  // optional string Name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OneVSOneOVOResultInfo.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional sint32 Ranking = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->ranking(), output);
  }

  // optional sint32 BeforeRanking = 8 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->beforeranking(), output);
  }

  // optional sint32 JobID = 11 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->jobid(), output);
  }

  // optional string HeadICO = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headico().data(), static_cast<int>(this->headico().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OneVSOneOVOResultInfo.HeadICO");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->headico(), output);
  }

  // optional sint32 LV = 13 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->lv(), output);
  }

  // optional sint32 IsWin = 14 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(14, this->iswin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OneVSOneOVOResultInfo)
}

::google::protobuf::uint8* OneVSOneOVOResultInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OneVSOneOVOResultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->userid(), target);
  }

  // optional sint32 Damage = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->damage(), target);
  }

  // optional sint32 BeHurted = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->behurted(), target);
  }

  // optional sint32 Healed = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->healed(), target);
  }

  // optional string Name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OneVSOneOVOResultInfo.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional sint32 Ranking = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->ranking(), target);
  }

  // optional sint32 BeforeRanking = 8 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->beforeranking(), target);
  }

  // optional sint32 JobID = 11 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->jobid(), target);
  }

  // optional string HeadICO = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headico().data(), static_cast<int>(this->headico().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OneVSOneOVOResultInfo.HeadICO");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->headico(), target);
  }

  // optional sint32 LV = 13 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->lv(), target);
  }

  // optional sint32 IsWin = 14 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(14, this->iswin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneVSOneOVOResultInfo)
  return target;
}

size_t OneVSOneOVOResultInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneVSOneOVOResultInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string Name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string HeadICO = 12;
    if (has_headico()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headico());
    }

    // optional sint32 Damage = 2 [default = 0];
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->damage());
    }

    // optional sint32 BeHurted = 3 [default = 0];
    if (has_behurted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->behurted());
    }

    // optional sint32 Healed = 4 [default = 0];
    if (has_healed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->healed());
    }

    // optional sint32 Ranking = 7 [default = 0];
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ranking());
    }

    // optional sint32 IsWin = 14 [default = 0];
    if (has_iswin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->iswin());
    }

    // optional sint32 LV = 13 [default = -1];
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->lv());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional sint64 UserId = 1 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

    // optional sint32 BeforeRanking = 8 [default = -1];
    if (has_beforeranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->beforeranking());
    }

    // optional sint32 JobID = 11 [default = -1];
    if (has_jobid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->jobid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneVSOneOVOResultInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneVSOneOVOResultInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OneVSOneOVOResultInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneVSOneOVOResultInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneVSOneOVOResultInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneVSOneOVOResultInfo)
    MergeFrom(*source);
  }
}

void OneVSOneOVOResultInfo::MergeFrom(const OneVSOneOVOResultInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneVSOneOVOResultInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_headico();
      headico_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headico_);
    }
    if (cached_has_bits & 0x00000004u) {
      damage_ = from.damage_;
    }
    if (cached_has_bits & 0x00000008u) {
      behurted_ = from.behurted_;
    }
    if (cached_has_bits & 0x00000010u) {
      healed_ = from.healed_;
    }
    if (cached_has_bits & 0x00000020u) {
      ranking_ = from.ranking_;
    }
    if (cached_has_bits & 0x00000040u) {
      iswin_ = from.iswin_;
    }
    if (cached_has_bits & 0x00000080u) {
      lv_ = from.lv_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000200u) {
      beforeranking_ = from.beforeranking_;
    }
    if (cached_has_bits & 0x00000400u) {
      jobid_ = from.jobid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OneVSOneOVOResultInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneVSOneOVOResultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneVSOneOVOResultInfo::CopyFrom(const OneVSOneOVOResultInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneVSOneOVOResultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneVSOneOVOResultInfo::IsInitialized() const {
  return true;
}

void OneVSOneOVOResultInfo::Swap(OneVSOneOVOResultInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneVSOneOVOResultInfo::InternalSwap(OneVSOneOVOResultInfo* other) {
  using std::swap;
  name_.Swap(&other->name_);
  headico_.Swap(&other->headico_);
  swap(damage_, other->damage_);
  swap(behurted_, other->behurted_);
  swap(healed_, other->healed_);
  swap(ranking_, other->ranking_);
  swap(iswin_, other->iswin_);
  swap(lv_, other->lv_);
  swap(userid_, other->userid_);
  swap(beforeranking_, other->beforeranking_);
  swap(jobid_, other->jobid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneVSOneOVOResultInfo::GetMetadata() const {
  protobuf_OneVSOneRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_OneVSOneRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneVSOneOVOResultInfo

// optional sint64 UserId = 1 [default = -1];
bool OneVSOneOVOResultInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void OneVSOneOVOResultInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000100u;
}
void OneVSOneOVOResultInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000100u;
}
void OneVSOneOVOResultInfo::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 OneVSOneOVOResultInfo::userid() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.UserId)
  return userid_;
}
void OneVSOneOVOResultInfo::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.UserId)
}

// optional sint32 Damage = 2 [default = 0];
bool OneVSOneOVOResultInfo::has_damage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OneVSOneOVOResultInfo::set_has_damage() {
  _has_bits_[0] |= 0x00000004u;
}
void OneVSOneOVOResultInfo::clear_has_damage() {
  _has_bits_[0] &= ~0x00000004u;
}
void OneVSOneOVOResultInfo::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
::google::protobuf::int32 OneVSOneOVOResultInfo::damage() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.Damage)
  return damage_;
}
void OneVSOneOVOResultInfo::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.Damage)
}

// optional sint32 BeHurted = 3 [default = 0];
bool OneVSOneOVOResultInfo::has_behurted() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OneVSOneOVOResultInfo::set_has_behurted() {
  _has_bits_[0] |= 0x00000008u;
}
void OneVSOneOVOResultInfo::clear_has_behurted() {
  _has_bits_[0] &= ~0x00000008u;
}
void OneVSOneOVOResultInfo::clear_behurted() {
  behurted_ = 0;
  clear_has_behurted();
}
::google::protobuf::int32 OneVSOneOVOResultInfo::behurted() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.BeHurted)
  return behurted_;
}
void OneVSOneOVOResultInfo::set_behurted(::google::protobuf::int32 value) {
  set_has_behurted();
  behurted_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.BeHurted)
}

// optional sint32 Healed = 4 [default = 0];
bool OneVSOneOVOResultInfo::has_healed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OneVSOneOVOResultInfo::set_has_healed() {
  _has_bits_[0] |= 0x00000010u;
}
void OneVSOneOVOResultInfo::clear_has_healed() {
  _has_bits_[0] &= ~0x00000010u;
}
void OneVSOneOVOResultInfo::clear_healed() {
  healed_ = 0;
  clear_has_healed();
}
::google::protobuf::int32 OneVSOneOVOResultInfo::healed() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.Healed)
  return healed_;
}
void OneVSOneOVOResultInfo::set_healed(::google::protobuf::int32 value) {
  set_has_healed();
  healed_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.Healed)
}

// optional string Name = 5;
bool OneVSOneOVOResultInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OneVSOneOVOResultInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void OneVSOneOVOResultInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void OneVSOneOVOResultInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& OneVSOneOVOResultInfo::name() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.Name)
  return name_.GetNoArena();
}
void OneVSOneOVOResultInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.Name)
}
#if LANG_CXX11
void OneVSOneOVOResultInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OneVSOneOVOResultInfo.Name)
}
#endif
void OneVSOneOVOResultInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OneVSOneOVOResultInfo.Name)
}
void OneVSOneOVOResultInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OneVSOneOVOResultInfo.Name)
}
::std::string* OneVSOneOVOResultInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:OneVSOneOVOResultInfo.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OneVSOneOVOResultInfo::release_name() {
  // @@protoc_insertion_point(field_release:OneVSOneOVOResultInfo.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OneVSOneOVOResultInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OneVSOneOVOResultInfo.Name)
}

// optional sint32 Ranking = 7 [default = 0];
bool OneVSOneOVOResultInfo::has_ranking() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OneVSOneOVOResultInfo::set_has_ranking() {
  _has_bits_[0] |= 0x00000020u;
}
void OneVSOneOVOResultInfo::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000020u;
}
void OneVSOneOVOResultInfo::clear_ranking() {
  ranking_ = 0;
  clear_has_ranking();
}
::google::protobuf::int32 OneVSOneOVOResultInfo::ranking() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.Ranking)
  return ranking_;
}
void OneVSOneOVOResultInfo::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.Ranking)
}

// optional sint32 BeforeRanking = 8 [default = -1];
bool OneVSOneOVOResultInfo::has_beforeranking() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void OneVSOneOVOResultInfo::set_has_beforeranking() {
  _has_bits_[0] |= 0x00000200u;
}
void OneVSOneOVOResultInfo::clear_has_beforeranking() {
  _has_bits_[0] &= ~0x00000200u;
}
void OneVSOneOVOResultInfo::clear_beforeranking() {
  beforeranking_ = -1;
  clear_has_beforeranking();
}
::google::protobuf::int32 OneVSOneOVOResultInfo::beforeranking() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.BeforeRanking)
  return beforeranking_;
}
void OneVSOneOVOResultInfo::set_beforeranking(::google::protobuf::int32 value) {
  set_has_beforeranking();
  beforeranking_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.BeforeRanking)
}

// optional sint32 JobID = 11 [default = -1];
bool OneVSOneOVOResultInfo::has_jobid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void OneVSOneOVOResultInfo::set_has_jobid() {
  _has_bits_[0] |= 0x00000400u;
}
void OneVSOneOVOResultInfo::clear_has_jobid() {
  _has_bits_[0] &= ~0x00000400u;
}
void OneVSOneOVOResultInfo::clear_jobid() {
  jobid_ = -1;
  clear_has_jobid();
}
::google::protobuf::int32 OneVSOneOVOResultInfo::jobid() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.JobID)
  return jobid_;
}
void OneVSOneOVOResultInfo::set_jobid(::google::protobuf::int32 value) {
  set_has_jobid();
  jobid_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.JobID)
}

// optional string HeadICO = 12;
bool OneVSOneOVOResultInfo::has_headico() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OneVSOneOVOResultInfo::set_has_headico() {
  _has_bits_[0] |= 0x00000002u;
}
void OneVSOneOVOResultInfo::clear_has_headico() {
  _has_bits_[0] &= ~0x00000002u;
}
void OneVSOneOVOResultInfo::clear_headico() {
  headico_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headico();
}
const ::std::string& OneVSOneOVOResultInfo::headico() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.HeadICO)
  return headico_.GetNoArena();
}
void OneVSOneOVOResultInfo::set_headico(const ::std::string& value) {
  set_has_headico();
  headico_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.HeadICO)
}
#if LANG_CXX11
void OneVSOneOVOResultInfo::set_headico(::std::string&& value) {
  set_has_headico();
  headico_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OneVSOneOVOResultInfo.HeadICO)
}
#endif
void OneVSOneOVOResultInfo::set_headico(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_headico();
  headico_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OneVSOneOVOResultInfo.HeadICO)
}
void OneVSOneOVOResultInfo::set_headico(const char* value, size_t size) {
  set_has_headico();
  headico_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OneVSOneOVOResultInfo.HeadICO)
}
::std::string* OneVSOneOVOResultInfo::mutable_headico() {
  set_has_headico();
  // @@protoc_insertion_point(field_mutable:OneVSOneOVOResultInfo.HeadICO)
  return headico_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OneVSOneOVOResultInfo::release_headico() {
  // @@protoc_insertion_point(field_release:OneVSOneOVOResultInfo.HeadICO)
  clear_has_headico();
  return headico_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OneVSOneOVOResultInfo::set_allocated_headico(::std::string* headico) {
  if (headico != NULL) {
    set_has_headico();
  } else {
    clear_has_headico();
  }
  headico_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headico);
  // @@protoc_insertion_point(field_set_allocated:OneVSOneOVOResultInfo.HeadICO)
}

// optional sint32 LV = 13 [default = -1];
bool OneVSOneOVOResultInfo::has_lv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OneVSOneOVOResultInfo::set_has_lv() {
  _has_bits_[0] |= 0x00000080u;
}
void OneVSOneOVOResultInfo::clear_has_lv() {
  _has_bits_[0] &= ~0x00000080u;
}
void OneVSOneOVOResultInfo::clear_lv() {
  lv_ = -1;
  clear_has_lv();
}
::google::protobuf::int32 OneVSOneOVOResultInfo::lv() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.LV)
  return lv_;
}
void OneVSOneOVOResultInfo::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.LV)
}

// optional sint32 IsWin = 14 [default = 0];
bool OneVSOneOVOResultInfo::has_iswin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OneVSOneOVOResultInfo::set_has_iswin() {
  _has_bits_[0] |= 0x00000040u;
}
void OneVSOneOVOResultInfo::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000040u;
}
void OneVSOneOVOResultInfo::clear_iswin() {
  iswin_ = 0;
  clear_has_iswin();
}
::google::protobuf::int32 OneVSOneOVOResultInfo::iswin() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.IsWin)
  return iswin_;
}
void OneVSOneOVOResultInfo::set_iswin(::google::protobuf::int32 value) {
  set_has_iswin();
  iswin_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.IsWin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
