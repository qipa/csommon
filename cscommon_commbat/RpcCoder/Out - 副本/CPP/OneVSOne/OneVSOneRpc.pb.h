// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OneVSOneRpc.proto

#ifndef PROTOBUF_OneVSOneRpc_2eproto__INCLUDED
#define PROTOBUF_OneVSOneRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)
class OneVSOneActPeo;
class OneVSOneActPeoDefaultTypeInternal;
extern OneVSOneActPeoDefaultTypeInternal _OneVSOneActPeo_default_instance_;
class OneVSOneOVOResultInfo;
class OneVSOneOVOResultInfoDefaultTypeInternal;
extern OneVSOneOVOResultInfoDefaultTypeInternal _OneVSOneOVOResultInfo_default_instance_;
class OneVSOneRpcACTResultNotifyNotify;
class OneVSOneRpcACTResultNotifyNotifyDefaultTypeInternal;
extern OneVSOneRpcACTResultNotifyNotifyDefaultTypeInternal _OneVSOneRpcACTResultNotifyNotify_default_instance_;
class OneVSOneRpcActAsk;
class OneVSOneRpcActAskDefaultTypeInternal;
extern OneVSOneRpcActAskDefaultTypeInternal _OneVSOneRpcActAsk_default_instance_;
class OneVSOneRpcActMessageNotify;
class OneVSOneRpcActMessageNotifyDefaultTypeInternal;
extern OneVSOneRpcActMessageNotifyDefaultTypeInternal _OneVSOneRpcActMessageNotify_default_instance_;
class OneVSOneRpcActReply;
class OneVSOneRpcActReplyDefaultTypeInternal;
extern OneVSOneRpcActReplyDefaultTypeInternal _OneVSOneRpcActReply_default_instance_;
class OneVSOneRpcAdjustmentSkillAsk;
class OneVSOneRpcAdjustmentSkillAskDefaultTypeInternal;
extern OneVSOneRpcAdjustmentSkillAskDefaultTypeInternal _OneVSOneRpcAdjustmentSkillAsk_default_instance_;
class OneVSOneRpcAdjustmentSkillReply;
class OneVSOneRpcAdjustmentSkillReplyDefaultTypeInternal;
extern OneVSOneRpcAdjustmentSkillReplyDefaultTypeInternal _OneVSOneRpcAdjustmentSkillReply_default_instance_;
class OneVSOneRpcFlushAsk;
class OneVSOneRpcFlushAskDefaultTypeInternal;
extern OneVSOneRpcFlushAskDefaultTypeInternal _OneVSOneRpcFlushAsk_default_instance_;
class OneVSOneRpcFlushReply;
class OneVSOneRpcFlushReplyDefaultTypeInternal;
extern OneVSOneRpcFlushReplyDefaultTypeInternal _OneVSOneRpcFlushReply_default_instance_;
class OneVSOneRpcGetActMessageAsk;
class OneVSOneRpcGetActMessageAskDefaultTypeInternal;
extern OneVSOneRpcGetActMessageAskDefaultTypeInternal _OneVSOneRpcGetActMessageAsk_default_instance_;
class OneVSOneRpcGetActMessageReply;
class OneVSOneRpcGetActMessageReplyDefaultTypeInternal;
extern OneVSOneRpcGetActMessageReplyDefaultTypeInternal _OneVSOneRpcGetActMessageReply_default_instance_;
class OneVSOneRpcGetSkillAsk;
class OneVSOneRpcGetSkillAskDefaultTypeInternal;
extern OneVSOneRpcGetSkillAskDefaultTypeInternal _OneVSOneRpcGetSkillAsk_default_instance_;
class OneVSOneRpcGetSkillReply;
class OneVSOneRpcGetSkillReplyDefaultTypeInternal;
extern OneVSOneRpcGetSkillReplyDefaultTypeInternal _OneVSOneRpcGetSkillReply_default_instance_;
class OneVSOneRpcGetTopAsk;
class OneVSOneRpcGetTopAskDefaultTypeInternal;
extern OneVSOneRpcGetTopAskDefaultTypeInternal _OneVSOneRpcGetTopAsk_default_instance_;
class OneVSOneRpcGetTopReply;
class OneVSOneRpcGetTopReplyDefaultTypeInternal;
extern OneVSOneRpcGetTopReplyDefaultTypeInternal _OneVSOneRpcGetTopReply_default_instance_;
class OneVSOneRpcReplyActAsk;
class OneVSOneRpcReplyActAskDefaultTypeInternal;
extern OneVSOneRpcReplyActAskDefaultTypeInternal _OneVSOneRpcReplyActAsk_default_instance_;
class OneVSOneRpcReplyActReply;
class OneVSOneRpcReplyActReplyDefaultTypeInternal;
extern OneVSOneRpcReplyActReplyDefaultTypeInternal _OneVSOneRpcReplyActReply_default_instance_;

namespace protobuf_OneVSOneRpc_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_OneVSOneRpc_2eproto

// ===================================================================

class OneVSOneRpcFlushAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OneVSOneRpcFlushAsk) */ {
 public:
  OneVSOneRpcFlushAsk();
  virtual ~OneVSOneRpcFlushAsk();

  OneVSOneRpcFlushAsk(const OneVSOneRpcFlushAsk& from);

  inline OneVSOneRpcFlushAsk& operator=(const OneVSOneRpcFlushAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneVSOneRpcFlushAsk(OneVSOneRpcFlushAsk&& from) noexcept
    : OneVSOneRpcFlushAsk() {
    *this = ::std::move(from);
  }

  inline OneVSOneRpcFlushAsk& operator=(OneVSOneRpcFlushAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneVSOneRpcFlushAsk& default_instance();

  static inline const OneVSOneRpcFlushAsk* internal_default_instance() {
    return reinterpret_cast<const OneVSOneRpcFlushAsk*>(
               &_OneVSOneRpcFlushAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(OneVSOneRpcFlushAsk* other);
  friend void swap(OneVSOneRpcFlushAsk& a, OneVSOneRpcFlushAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneVSOneRpcFlushAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  OneVSOneRpcFlushAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OneVSOneRpcFlushAsk& from);
  void MergeFrom(const OneVSOneRpcFlushAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OneVSOneRpcFlushAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 IsOpen = 1 [default = 0];
  bool has_isopen() const;
  void clear_isopen();
  static const int kIsOpenFieldNumber = 1;
  ::google::protobuf::int32 isopen() const;
  void set_isopen(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:OneVSOneRpcFlushAsk)
 private:
  void set_has_isopen();
  void clear_has_isopen();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 isopen_;
  friend struct protobuf_OneVSOneRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneVSOneRpcFlushReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OneVSOneRpcFlushReply) */ {
 public:
  OneVSOneRpcFlushReply();
  virtual ~OneVSOneRpcFlushReply();

  OneVSOneRpcFlushReply(const OneVSOneRpcFlushReply& from);

  inline OneVSOneRpcFlushReply& operator=(const OneVSOneRpcFlushReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneVSOneRpcFlushReply(OneVSOneRpcFlushReply&& from) noexcept
    : OneVSOneRpcFlushReply() {
    *this = ::std::move(from);
  }

  inline OneVSOneRpcFlushReply& operator=(OneVSOneRpcFlushReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneVSOneRpcFlushReply& default_instance();

  static inline const OneVSOneRpcFlushReply* internal_default_instance() {
    return reinterpret_cast<const OneVSOneRpcFlushReply*>(
               &_OneVSOneRpcFlushReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(OneVSOneRpcFlushReply* other);
  friend void swap(OneVSOneRpcFlushReply& a, OneVSOneRpcFlushReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneVSOneRpcFlushReply* New() const PROTOBUF_FINAL { return New(NULL); }

  OneVSOneRpcFlushReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OneVSOneRpcFlushReply& from);
  void MergeFrom(const OneVSOneRpcFlushReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OneVSOneRpcFlushReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TimeTop TimeRankings = 5;
  int timerankings_size() const;
  void clear_timerankings();
  static const int kTimeRankingsFieldNumber = 5;
  const ::TimeTop& timerankings(int index) const;
  ::TimeTop* mutable_timerankings(int index);
  ::TimeTop* add_timerankings();
  ::google::protobuf::RepeatedPtrField< ::TimeTop >*
      mutable_timerankings();
  const ::google::protobuf::RepeatedPtrField< ::TimeTop >&
      timerankings() const;

  // repeated .OneVSOneActPeo ActPeos = 6;
  int actpeos_size() const;
  void clear_actpeos();
  static const int kActPeosFieldNumber = 6;
  const ::OneVSOneActPeo& actpeos(int index) const;
  ::OneVSOneActPeo* mutable_actpeos(int index);
  ::OneVSOneActPeo* add_actpeos();
  ::google::protobuf::RepeatedPtrField< ::OneVSOneActPeo >*
      mutable_actpeos();
  const ::google::protobuf::RepeatedPtrField< ::OneVSOneActPeo >&
      actpeos() const;

  // optional sint32 IsOpen = 7 [default = 0];
  bool has_isopen() const;
  void clear_isopen();
  static const int kIsOpenFieldNumber = 7;
  ::google::protobuf::int32 isopen() const;
  void set_isopen(::google::protobuf::int32 value);

  // optional sint32 LockTime = 8 [default = -1];
  bool has_locktime() const;
  void clear_locktime();
  static const int kLockTimeFieldNumber = 8;
  ::google::protobuf::int32 locktime() const;
  void set_locktime(::google::protobuf::int32 value);

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional sint32 Ranking = 2 [default = -1];
  bool has_ranking() const;
  void clear_ranking();
  static const int kRankingFieldNumber = 2;
  ::google::protobuf::int32 ranking() const;
  void set_ranking(::google::protobuf::int32 value);

  // optional sint32 FightingCapacity = 3 [default = -1];
  bool has_fightingcapacity() const;
  void clear_fightingcapacity();
  static const int kFightingCapacityFieldNumber = 3;
  ::google::protobuf::int32 fightingcapacity() const;
  void set_fightingcapacity(::google::protobuf::int32 value);

  // optional sint32 OneVSOneNum = 4 [default = -1];
  bool has_onevsonenum() const;
  void clear_onevsonenum();
  static const int kOneVSOneNumFieldNumber = 4;
  ::google::protobuf::int32 onevsonenum() const;
  void set_onevsonenum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:OneVSOneRpcFlushReply)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_ranking();
  void clear_has_ranking();
  void set_has_fightingcapacity();
  void clear_has_fightingcapacity();
  void set_has_onevsonenum();
  void clear_has_onevsonenum();
  void set_has_isopen();
  void clear_has_isopen();
  void set_has_locktime();
  void clear_has_locktime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::TimeTop > timerankings_;
  ::google::protobuf::RepeatedPtrField< ::OneVSOneActPeo > actpeos_;
  ::google::protobuf::int32 isopen_;
  ::google::protobuf::int32 locktime_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 ranking_;
  ::google::protobuf::int32 fightingcapacity_;
  ::google::protobuf::int32 onevsonenum_;
  friend struct protobuf_OneVSOneRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneVSOneActPeo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OneVSOneActPeo) */ {
 public:
  OneVSOneActPeo();
  virtual ~OneVSOneActPeo();

  OneVSOneActPeo(const OneVSOneActPeo& from);

  inline OneVSOneActPeo& operator=(const OneVSOneActPeo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneVSOneActPeo(OneVSOneActPeo&& from) noexcept
    : OneVSOneActPeo() {
    *this = ::std::move(from);
  }

  inline OneVSOneActPeo& operator=(OneVSOneActPeo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneVSOneActPeo& default_instance();

  static inline const OneVSOneActPeo* internal_default_instance() {
    return reinterpret_cast<const OneVSOneActPeo*>(
               &_OneVSOneActPeo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(OneVSOneActPeo* other);
  friend void swap(OneVSOneActPeo& a, OneVSOneActPeo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneVSOneActPeo* New() const PROTOBUF_FINAL { return New(NULL); }

  OneVSOneActPeo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OneVSOneActPeo& from);
  void MergeFrom(const OneVSOneActPeo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OneVSOneActPeo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string PlanName = 1;
  bool has_planname() const;
  void clear_planname();
  static const int kPlanNameFieldNumber = 1;
  const ::std::string& planname() const;
  void set_planname(const ::std::string& value);
  #if LANG_CXX11
  void set_planname(::std::string&& value);
  #endif
  void set_planname(const char* value);
  void set_planname(const char* value, size_t size);
  ::std::string* mutable_planname();
  ::std::string* release_planname();
  void set_allocated_planname(::std::string* planname);

  // optional string HeadPath = 9;
  bool has_headpath() const;
  void clear_headpath();
  static const int kHeadPathFieldNumber = 9;
  const ::std::string& headpath() const;
  void set_headpath(const ::std::string& value);
  #if LANG_CXX11
  void set_headpath(::std::string&& value);
  #endif
  void set_headpath(const char* value);
  void set_headpath(const char* value, size_t size);
  ::std::string* mutable_headpath();
  ::std::string* release_headpath();
  void set_allocated_headpath(::std::string* headpath);

  // optional sint32 Ranking = 3 [default = -1];
  bool has_ranking() const;
  void clear_ranking();
  static const int kRankingFieldNumber = 3;
  ::google::protobuf::int32 ranking() const;
  void set_ranking(::google::protobuf::int32 value);

  // optional sint32 FightingCapacity = 4 [default = -1];
  bool has_fightingcapacity() const;
  void clear_fightingcapacity();
  static const int kFightingCapacityFieldNumber = 4;
  ::google::protobuf::int32 fightingcapacity() const;
  void set_fightingcapacity(::google::protobuf::int32 value);

  // optional sint64 UserId = 5 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 5;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // optional sint32 MardID = 7 [default = -1];
  bool has_mardid() const;
  void clear_mardid();
  static const int kMardIDFieldNumber = 7;
  ::google::protobuf::int32 mardid() const;
  void set_mardid(::google::protobuf::int32 value);

  // optional sint32 LV = 8 [default = -1];
  bool has_lv() const;
  void clear_lv();
  static const int kLVFieldNumber = 8;
  ::google::protobuf::int32 lv() const;
  void set_lv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:OneVSOneActPeo)
 private:
  void set_has_planname();
  void clear_has_planname();
  void set_has_ranking();
  void clear_has_ranking();
  void set_has_fightingcapacity();
  void clear_has_fightingcapacity();
  void set_has_userid();
  void clear_has_userid();
  void set_has_mardid();
  void clear_has_mardid();
  void set_has_lv();
  void clear_has_lv();
  void set_has_headpath();
  void clear_has_headpath();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr planname_;
  ::google::protobuf::internal::ArenaStringPtr headpath_;
  ::google::protobuf::int32 ranking_;
  ::google::protobuf::int32 fightingcapacity_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 mardid_;
  ::google::protobuf::int32 lv_;
  friend struct protobuf_OneVSOneRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneVSOneRpcActAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OneVSOneRpcActAsk) */ {
 public:
  OneVSOneRpcActAsk();
  virtual ~OneVSOneRpcActAsk();

  OneVSOneRpcActAsk(const OneVSOneRpcActAsk& from);

  inline OneVSOneRpcActAsk& operator=(const OneVSOneRpcActAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneVSOneRpcActAsk(OneVSOneRpcActAsk&& from) noexcept
    : OneVSOneRpcActAsk() {
    *this = ::std::move(from);
  }

  inline OneVSOneRpcActAsk& operator=(OneVSOneRpcActAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneVSOneRpcActAsk& default_instance();

  static inline const OneVSOneRpcActAsk* internal_default_instance() {
    return reinterpret_cast<const OneVSOneRpcActAsk*>(
               &_OneVSOneRpcActAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(OneVSOneRpcActAsk* other);
  friend void swap(OneVSOneRpcActAsk& a, OneVSOneRpcActAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneVSOneRpcActAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  OneVSOneRpcActAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OneVSOneRpcActAsk& from);
  void MergeFrom(const OneVSOneRpcActAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OneVSOneRpcActAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Ranking = 4 [default = -1];
  bool has_ranking() const;
  void clear_ranking();
  static const int kRankingFieldNumber = 4;
  ::google::protobuf::int32 ranking() const;
  void set_ranking(::google::protobuf::int32 value);

  // optional sint64 UserId = 2 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:OneVSOneRpcActAsk)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_ranking();
  void clear_has_ranking();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 ranking_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_OneVSOneRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneVSOneRpcActReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OneVSOneRpcActReply) */ {
 public:
  OneVSOneRpcActReply();
  virtual ~OneVSOneRpcActReply();

  OneVSOneRpcActReply(const OneVSOneRpcActReply& from);

  inline OneVSOneRpcActReply& operator=(const OneVSOneRpcActReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneVSOneRpcActReply(OneVSOneRpcActReply&& from) noexcept
    : OneVSOneRpcActReply() {
    *this = ::std::move(from);
  }

  inline OneVSOneRpcActReply& operator=(OneVSOneRpcActReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneVSOneRpcActReply& default_instance();

  static inline const OneVSOneRpcActReply* internal_default_instance() {
    return reinterpret_cast<const OneVSOneRpcActReply*>(
               &_OneVSOneRpcActReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(OneVSOneRpcActReply* other);
  friend void swap(OneVSOneRpcActReply& a, OneVSOneRpcActReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneVSOneRpcActReply* New() const PROTOBUF_FINAL { return New(NULL); }

  OneVSOneRpcActReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OneVSOneRpcActReply& from);
  void MergeFrom(const OneVSOneRpcActReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OneVSOneRpcActReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string PlanName = 4;
  bool has_planname() const;
  void clear_planname();
  static const int kPlanNameFieldNumber = 4;
  const ::std::string& planname() const;
  void set_planname(const ::std::string& value);
  #if LANG_CXX11
  void set_planname(::std::string&& value);
  #endif
  void set_planname(const char* value);
  void set_planname(const char* value, size_t size);
  ::std::string* mutable_planname();
  ::std::string* release_planname();
  void set_allocated_planname(::std::string* planname);

  // optional sint32 IsCopy = 8 [default = 0];
  bool has_iscopy() const;
  void clear_iscopy();
  static const int kIsCopyFieldNumber = 8;
  ::google::protobuf::int32 iscopy() const;
  void set_iscopy(::google::protobuf::int32 value);

  // optional sint32 Ranking = 7 [default = -1];
  bool has_ranking() const;
  void clear_ranking();
  static const int kRankingFieldNumber = 7;
  ::google::protobuf::int32 ranking() const;
  void set_ranking(::google::protobuf::int32 value);

  // optional sint64 UserId = 2 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional sint32 OneVSOneNum = 6 [default = -1];
  bool has_onevsonenum() const;
  void clear_onevsonenum();
  static const int kOneVSOneNumFieldNumber = 6;
  ::google::protobuf::int32 onevsonenum() const;
  void set_onevsonenum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:OneVSOneRpcActReply)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_userid();
  void clear_has_userid();
  void set_has_planname();
  void clear_has_planname();
  void set_has_onevsonenum();
  void clear_has_onevsonenum();
  void set_has_ranking();
  void clear_has_ranking();
  void set_has_iscopy();
  void clear_has_iscopy();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr planname_;
  ::google::protobuf::int32 iscopy_;
  ::google::protobuf::int32 ranking_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 onevsonenum_;
  friend struct protobuf_OneVSOneRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneVSOneRpcActMessageNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OneVSOneRpcActMessageNotify) */ {
 public:
  OneVSOneRpcActMessageNotify();
  virtual ~OneVSOneRpcActMessageNotify();

  OneVSOneRpcActMessageNotify(const OneVSOneRpcActMessageNotify& from);

  inline OneVSOneRpcActMessageNotify& operator=(const OneVSOneRpcActMessageNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneVSOneRpcActMessageNotify(OneVSOneRpcActMessageNotify&& from) noexcept
    : OneVSOneRpcActMessageNotify() {
    *this = ::std::move(from);
  }

  inline OneVSOneRpcActMessageNotify& operator=(OneVSOneRpcActMessageNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneVSOneRpcActMessageNotify& default_instance();

  static inline const OneVSOneRpcActMessageNotify* internal_default_instance() {
    return reinterpret_cast<const OneVSOneRpcActMessageNotify*>(
               &_OneVSOneRpcActMessageNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(OneVSOneRpcActMessageNotify* other);
  friend void swap(OneVSOneRpcActMessageNotify& a, OneVSOneRpcActMessageNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneVSOneRpcActMessageNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  OneVSOneRpcActMessageNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OneVSOneRpcActMessageNotify& from);
  void MergeFrom(const OneVSOneRpcActMessageNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OneVSOneRpcActMessageNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string PlanName = 2;
  bool has_planname() const;
  void clear_planname();
  static const int kPlanNameFieldNumber = 2;
  const ::std::string& planname() const;
  void set_planname(const ::std::string& value);
  #if LANG_CXX11
  void set_planname(::std::string&& value);
  #endif
  void set_planname(const char* value);
  void set_planname(const char* value, size_t size);
  ::std::string* mutable_planname();
  ::std::string* release_planname();
  void set_allocated_planname(::std::string* planname);

  // optional sint64 UserId = 1 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:OneVSOneRpcActMessageNotify)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_planname();
  void clear_has_planname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr planname_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_OneVSOneRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneVSOneRpcReplyActAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OneVSOneRpcReplyActAsk) */ {
 public:
  OneVSOneRpcReplyActAsk();
  virtual ~OneVSOneRpcReplyActAsk();

  OneVSOneRpcReplyActAsk(const OneVSOneRpcReplyActAsk& from);

  inline OneVSOneRpcReplyActAsk& operator=(const OneVSOneRpcReplyActAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneVSOneRpcReplyActAsk(OneVSOneRpcReplyActAsk&& from) noexcept
    : OneVSOneRpcReplyActAsk() {
    *this = ::std::move(from);
  }

  inline OneVSOneRpcReplyActAsk& operator=(OneVSOneRpcReplyActAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneVSOneRpcReplyActAsk& default_instance();

  static inline const OneVSOneRpcReplyActAsk* internal_default_instance() {
    return reinterpret_cast<const OneVSOneRpcReplyActAsk*>(
               &_OneVSOneRpcReplyActAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(OneVSOneRpcReplyActAsk* other);
  friend void swap(OneVSOneRpcReplyActAsk& a, OneVSOneRpcReplyActAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneVSOneRpcReplyActAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  OneVSOneRpcReplyActAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OneVSOneRpcReplyActAsk& from);
  void MergeFrom(const OneVSOneRpcReplyActAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OneVSOneRpcReplyActAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 IsOK = 2 [default = -1];
  bool has_isok() const;
  void clear_isok();
  static const int kIsOKFieldNumber = 2;
  ::google::protobuf::int32 isok() const;
  void set_isok(::google::protobuf::int32 value);

  // optional sint64 UserId = 1 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:OneVSOneRpcReplyActAsk)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_isok();
  void clear_has_isok();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 isok_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_OneVSOneRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneVSOneRpcReplyActReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OneVSOneRpcReplyActReply) */ {
 public:
  OneVSOneRpcReplyActReply();
  virtual ~OneVSOneRpcReplyActReply();

  OneVSOneRpcReplyActReply(const OneVSOneRpcReplyActReply& from);

  inline OneVSOneRpcReplyActReply& operator=(const OneVSOneRpcReplyActReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneVSOneRpcReplyActReply(OneVSOneRpcReplyActReply&& from) noexcept
    : OneVSOneRpcReplyActReply() {
    *this = ::std::move(from);
  }

  inline OneVSOneRpcReplyActReply& operator=(OneVSOneRpcReplyActReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneVSOneRpcReplyActReply& default_instance();

  static inline const OneVSOneRpcReplyActReply* internal_default_instance() {
    return reinterpret_cast<const OneVSOneRpcReplyActReply*>(
               &_OneVSOneRpcReplyActReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(OneVSOneRpcReplyActReply* other);
  friend void swap(OneVSOneRpcReplyActReply& a, OneVSOneRpcReplyActReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneVSOneRpcReplyActReply* New() const PROTOBUF_FINAL { return New(NULL); }

  OneVSOneRpcReplyActReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OneVSOneRpcReplyActReply& from);
  void MergeFrom(const OneVSOneRpcReplyActReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OneVSOneRpcReplyActReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string PlanName = 5;
  bool has_planname() const;
  void clear_planname();
  static const int kPlanNameFieldNumber = 5;
  const ::std::string& planname() const;
  void set_planname(const ::std::string& value);
  #if LANG_CXX11
  void set_planname(::std::string&& value);
  #endif
  void set_planname(const char* value);
  void set_planname(const char* value, size_t size);
  ::std::string* mutable_planname();
  ::std::string* release_planname();
  void set_allocated_planname(::std::string* planname);

  // optional sint64 UserId = 2 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional sint32 IsOK = 4 [default = -1];
  bool has_isok() const;
  void clear_isok();
  static const int kIsOKFieldNumber = 4;
  ::google::protobuf::int32 isok() const;
  void set_isok(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:OneVSOneRpcReplyActReply)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_userid();
  void clear_has_userid();
  void set_has_isok();
  void clear_has_isok();
  void set_has_planname();
  void clear_has_planname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr planname_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 isok_;
  friend struct protobuf_OneVSOneRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneVSOneRpcGetTopAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OneVSOneRpcGetTopAsk) */ {
 public:
  OneVSOneRpcGetTopAsk();
  virtual ~OneVSOneRpcGetTopAsk();

  OneVSOneRpcGetTopAsk(const OneVSOneRpcGetTopAsk& from);

  inline OneVSOneRpcGetTopAsk& operator=(const OneVSOneRpcGetTopAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneVSOneRpcGetTopAsk(OneVSOneRpcGetTopAsk&& from) noexcept
    : OneVSOneRpcGetTopAsk() {
    *this = ::std::move(from);
  }

  inline OneVSOneRpcGetTopAsk& operator=(OneVSOneRpcGetTopAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneVSOneRpcGetTopAsk& default_instance();

  static inline const OneVSOneRpcGetTopAsk* internal_default_instance() {
    return reinterpret_cast<const OneVSOneRpcGetTopAsk*>(
               &_OneVSOneRpcGetTopAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(OneVSOneRpcGetTopAsk* other);
  friend void swap(OneVSOneRpcGetTopAsk& a, OneVSOneRpcGetTopAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneVSOneRpcGetTopAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  OneVSOneRpcGetTopAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OneVSOneRpcGetTopAsk& from);
  void MergeFrom(const OneVSOneRpcGetTopAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OneVSOneRpcGetTopAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:OneVSOneRpcGetTopAsk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_OneVSOneRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneVSOneRpcGetTopReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OneVSOneRpcGetTopReply) */ {
 public:
  OneVSOneRpcGetTopReply();
  virtual ~OneVSOneRpcGetTopReply();

  OneVSOneRpcGetTopReply(const OneVSOneRpcGetTopReply& from);

  inline OneVSOneRpcGetTopReply& operator=(const OneVSOneRpcGetTopReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneVSOneRpcGetTopReply(OneVSOneRpcGetTopReply&& from) noexcept
    : OneVSOneRpcGetTopReply() {
    *this = ::std::move(from);
  }

  inline OneVSOneRpcGetTopReply& operator=(OneVSOneRpcGetTopReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneVSOneRpcGetTopReply& default_instance();

  static inline const OneVSOneRpcGetTopReply* internal_default_instance() {
    return reinterpret_cast<const OneVSOneRpcGetTopReply*>(
               &_OneVSOneRpcGetTopReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(OneVSOneRpcGetTopReply* other);
  friend void swap(OneVSOneRpcGetTopReply& a, OneVSOneRpcGetTopReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneVSOneRpcGetTopReply* New() const PROTOBUF_FINAL { return New(NULL); }

  OneVSOneRpcGetTopReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OneVSOneRpcGetTopReply& from);
  void MergeFrom(const OneVSOneRpcGetTopReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OneVSOneRpcGetTopReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TopMess TopMesses = 2;
  int topmesses_size() const;
  void clear_topmesses();
  static const int kTopMessesFieldNumber = 2;
  const ::TopMess& topmesses(int index) const;
  ::TopMess* mutable_topmesses(int index);
  ::TopMess* add_topmesses();
  ::google::protobuf::RepeatedPtrField< ::TopMess >*
      mutable_topmesses();
  const ::google::protobuf::RepeatedPtrField< ::TopMess >&
      topmesses() const;

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:OneVSOneRpcGetTopReply)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::TopMess > topmesses_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_OneVSOneRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneVSOneRpcAdjustmentSkillAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OneVSOneRpcAdjustmentSkillAsk) */ {
 public:
  OneVSOneRpcAdjustmentSkillAsk();
  virtual ~OneVSOneRpcAdjustmentSkillAsk();

  OneVSOneRpcAdjustmentSkillAsk(const OneVSOneRpcAdjustmentSkillAsk& from);

  inline OneVSOneRpcAdjustmentSkillAsk& operator=(const OneVSOneRpcAdjustmentSkillAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneVSOneRpcAdjustmentSkillAsk(OneVSOneRpcAdjustmentSkillAsk&& from) noexcept
    : OneVSOneRpcAdjustmentSkillAsk() {
    *this = ::std::move(from);
  }

  inline OneVSOneRpcAdjustmentSkillAsk& operator=(OneVSOneRpcAdjustmentSkillAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneVSOneRpcAdjustmentSkillAsk& default_instance();

  static inline const OneVSOneRpcAdjustmentSkillAsk* internal_default_instance() {
    return reinterpret_cast<const OneVSOneRpcAdjustmentSkillAsk*>(
               &_OneVSOneRpcAdjustmentSkillAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(OneVSOneRpcAdjustmentSkillAsk* other);
  friend void swap(OneVSOneRpcAdjustmentSkillAsk& a, OneVSOneRpcAdjustmentSkillAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneVSOneRpcAdjustmentSkillAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  OneVSOneRpcAdjustmentSkillAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OneVSOneRpcAdjustmentSkillAsk& from);
  void MergeFrom(const OneVSOneRpcAdjustmentSkillAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OneVSOneRpcAdjustmentSkillAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .OneSData SkillDate = 1;
  int skilldate_size() const;
  void clear_skilldate();
  static const int kSkillDateFieldNumber = 1;
  const ::OneSData& skilldate(int index) const;
  ::OneSData* mutable_skilldate(int index);
  ::OneSData* add_skilldate();
  ::google::protobuf::RepeatedPtrField< ::OneSData >*
      mutable_skilldate();
  const ::google::protobuf::RepeatedPtrField< ::OneSData >&
      skilldate() const;

  // @@protoc_insertion_point(class_scope:OneVSOneRpcAdjustmentSkillAsk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::OneSData > skilldate_;
  friend struct protobuf_OneVSOneRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneVSOneRpcAdjustmentSkillReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OneVSOneRpcAdjustmentSkillReply) */ {
 public:
  OneVSOneRpcAdjustmentSkillReply();
  virtual ~OneVSOneRpcAdjustmentSkillReply();

  OneVSOneRpcAdjustmentSkillReply(const OneVSOneRpcAdjustmentSkillReply& from);

  inline OneVSOneRpcAdjustmentSkillReply& operator=(const OneVSOneRpcAdjustmentSkillReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneVSOneRpcAdjustmentSkillReply(OneVSOneRpcAdjustmentSkillReply&& from) noexcept
    : OneVSOneRpcAdjustmentSkillReply() {
    *this = ::std::move(from);
  }

  inline OneVSOneRpcAdjustmentSkillReply& operator=(OneVSOneRpcAdjustmentSkillReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneVSOneRpcAdjustmentSkillReply& default_instance();

  static inline const OneVSOneRpcAdjustmentSkillReply* internal_default_instance() {
    return reinterpret_cast<const OneVSOneRpcAdjustmentSkillReply*>(
               &_OneVSOneRpcAdjustmentSkillReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(OneVSOneRpcAdjustmentSkillReply* other);
  friend void swap(OneVSOneRpcAdjustmentSkillReply& a, OneVSOneRpcAdjustmentSkillReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneVSOneRpcAdjustmentSkillReply* New() const PROTOBUF_FINAL { return New(NULL); }

  OneVSOneRpcAdjustmentSkillReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OneVSOneRpcAdjustmentSkillReply& from);
  void MergeFrom(const OneVSOneRpcAdjustmentSkillReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OneVSOneRpcAdjustmentSkillReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .OneSData SkillDate = 2;
  int skilldate_size() const;
  void clear_skilldate();
  static const int kSkillDateFieldNumber = 2;
  const ::OneSData& skilldate(int index) const;
  ::OneSData* mutable_skilldate(int index);
  ::OneSData* add_skilldate();
  ::google::protobuf::RepeatedPtrField< ::OneSData >*
      mutable_skilldate();
  const ::google::protobuf::RepeatedPtrField< ::OneSData >&
      skilldate() const;

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:OneVSOneRpcAdjustmentSkillReply)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::OneSData > skilldate_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_OneVSOneRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneVSOneRpcGetSkillAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OneVSOneRpcGetSkillAsk) */ {
 public:
  OneVSOneRpcGetSkillAsk();
  virtual ~OneVSOneRpcGetSkillAsk();

  OneVSOneRpcGetSkillAsk(const OneVSOneRpcGetSkillAsk& from);

  inline OneVSOneRpcGetSkillAsk& operator=(const OneVSOneRpcGetSkillAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneVSOneRpcGetSkillAsk(OneVSOneRpcGetSkillAsk&& from) noexcept
    : OneVSOneRpcGetSkillAsk() {
    *this = ::std::move(from);
  }

  inline OneVSOneRpcGetSkillAsk& operator=(OneVSOneRpcGetSkillAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneVSOneRpcGetSkillAsk& default_instance();

  static inline const OneVSOneRpcGetSkillAsk* internal_default_instance() {
    return reinterpret_cast<const OneVSOneRpcGetSkillAsk*>(
               &_OneVSOneRpcGetSkillAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(OneVSOneRpcGetSkillAsk* other);
  friend void swap(OneVSOneRpcGetSkillAsk& a, OneVSOneRpcGetSkillAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneVSOneRpcGetSkillAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  OneVSOneRpcGetSkillAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OneVSOneRpcGetSkillAsk& from);
  void MergeFrom(const OneVSOneRpcGetSkillAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OneVSOneRpcGetSkillAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:OneVSOneRpcGetSkillAsk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_OneVSOneRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneVSOneRpcGetSkillReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OneVSOneRpcGetSkillReply) */ {
 public:
  OneVSOneRpcGetSkillReply();
  virtual ~OneVSOneRpcGetSkillReply();

  OneVSOneRpcGetSkillReply(const OneVSOneRpcGetSkillReply& from);

  inline OneVSOneRpcGetSkillReply& operator=(const OneVSOneRpcGetSkillReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneVSOneRpcGetSkillReply(OneVSOneRpcGetSkillReply&& from) noexcept
    : OneVSOneRpcGetSkillReply() {
    *this = ::std::move(from);
  }

  inline OneVSOneRpcGetSkillReply& operator=(OneVSOneRpcGetSkillReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneVSOneRpcGetSkillReply& default_instance();

  static inline const OneVSOneRpcGetSkillReply* internal_default_instance() {
    return reinterpret_cast<const OneVSOneRpcGetSkillReply*>(
               &_OneVSOneRpcGetSkillReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(OneVSOneRpcGetSkillReply* other);
  friend void swap(OneVSOneRpcGetSkillReply& a, OneVSOneRpcGetSkillReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneVSOneRpcGetSkillReply* New() const PROTOBUF_FINAL { return New(NULL); }

  OneVSOneRpcGetSkillReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OneVSOneRpcGetSkillReply& from);
  void MergeFrom(const OneVSOneRpcGetSkillReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OneVSOneRpcGetSkillReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .OneSData SkillDate = 2;
  int skilldate_size() const;
  void clear_skilldate();
  static const int kSkillDateFieldNumber = 2;
  const ::OneSData& skilldate(int index) const;
  ::OneSData* mutable_skilldate(int index);
  ::OneSData* add_skilldate();
  ::google::protobuf::RepeatedPtrField< ::OneSData >*
      mutable_skilldate();
  const ::google::protobuf::RepeatedPtrField< ::OneSData >&
      skilldate() const;

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:OneVSOneRpcGetSkillReply)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::OneSData > skilldate_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_OneVSOneRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneVSOneRpcGetActMessageAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OneVSOneRpcGetActMessageAsk) */ {
 public:
  OneVSOneRpcGetActMessageAsk();
  virtual ~OneVSOneRpcGetActMessageAsk();

  OneVSOneRpcGetActMessageAsk(const OneVSOneRpcGetActMessageAsk& from);

  inline OneVSOneRpcGetActMessageAsk& operator=(const OneVSOneRpcGetActMessageAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneVSOneRpcGetActMessageAsk(OneVSOneRpcGetActMessageAsk&& from) noexcept
    : OneVSOneRpcGetActMessageAsk() {
    *this = ::std::move(from);
  }

  inline OneVSOneRpcGetActMessageAsk& operator=(OneVSOneRpcGetActMessageAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneVSOneRpcGetActMessageAsk& default_instance();

  static inline const OneVSOneRpcGetActMessageAsk* internal_default_instance() {
    return reinterpret_cast<const OneVSOneRpcGetActMessageAsk*>(
               &_OneVSOneRpcGetActMessageAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(OneVSOneRpcGetActMessageAsk* other);
  friend void swap(OneVSOneRpcGetActMessageAsk& a, OneVSOneRpcGetActMessageAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneVSOneRpcGetActMessageAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  OneVSOneRpcGetActMessageAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OneVSOneRpcGetActMessageAsk& from);
  void MergeFrom(const OneVSOneRpcGetActMessageAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OneVSOneRpcGetActMessageAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:OneVSOneRpcGetActMessageAsk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_OneVSOneRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneVSOneRpcGetActMessageReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OneVSOneRpcGetActMessageReply) */ {
 public:
  OneVSOneRpcGetActMessageReply();
  virtual ~OneVSOneRpcGetActMessageReply();

  OneVSOneRpcGetActMessageReply(const OneVSOneRpcGetActMessageReply& from);

  inline OneVSOneRpcGetActMessageReply& operator=(const OneVSOneRpcGetActMessageReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneVSOneRpcGetActMessageReply(OneVSOneRpcGetActMessageReply&& from) noexcept
    : OneVSOneRpcGetActMessageReply() {
    *this = ::std::move(from);
  }

  inline OneVSOneRpcGetActMessageReply& operator=(OneVSOneRpcGetActMessageReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneVSOneRpcGetActMessageReply& default_instance();

  static inline const OneVSOneRpcGetActMessageReply* internal_default_instance() {
    return reinterpret_cast<const OneVSOneRpcGetActMessageReply*>(
               &_OneVSOneRpcGetActMessageReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(OneVSOneRpcGetActMessageReply* other);
  friend void swap(OneVSOneRpcGetActMessageReply& a, OneVSOneRpcGetActMessageReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneVSOneRpcGetActMessageReply* New() const PROTOBUF_FINAL { return New(NULL); }

  OneVSOneRpcGetActMessageReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OneVSOneRpcGetActMessageReply& from);
  void MergeFrom(const OneVSOneRpcGetActMessageReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OneVSOneRpcGetActMessageReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ActMessage ActMessages = 2;
  int actmessages_size() const;
  void clear_actmessages();
  static const int kActMessagesFieldNumber = 2;
  const ::ActMessage& actmessages(int index) const;
  ::ActMessage* mutable_actmessages(int index);
  ::ActMessage* add_actmessages();
  ::google::protobuf::RepeatedPtrField< ::ActMessage >*
      mutable_actmessages();
  const ::google::protobuf::RepeatedPtrField< ::ActMessage >&
      actmessages() const;

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:OneVSOneRpcGetActMessageReply)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ActMessage > actmessages_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_OneVSOneRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneVSOneRpcACTResultNotifyNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OneVSOneRpcACTResultNotifyNotify) */ {
 public:
  OneVSOneRpcACTResultNotifyNotify();
  virtual ~OneVSOneRpcACTResultNotifyNotify();

  OneVSOneRpcACTResultNotifyNotify(const OneVSOneRpcACTResultNotifyNotify& from);

  inline OneVSOneRpcACTResultNotifyNotify& operator=(const OneVSOneRpcACTResultNotifyNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneVSOneRpcACTResultNotifyNotify(OneVSOneRpcACTResultNotifyNotify&& from) noexcept
    : OneVSOneRpcACTResultNotifyNotify() {
    *this = ::std::move(from);
  }

  inline OneVSOneRpcACTResultNotifyNotify& operator=(OneVSOneRpcACTResultNotifyNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneVSOneRpcACTResultNotifyNotify& default_instance();

  static inline const OneVSOneRpcACTResultNotifyNotify* internal_default_instance() {
    return reinterpret_cast<const OneVSOneRpcACTResultNotifyNotify*>(
               &_OneVSOneRpcACTResultNotifyNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(OneVSOneRpcACTResultNotifyNotify* other);
  friend void swap(OneVSOneRpcACTResultNotifyNotify& a, OneVSOneRpcACTResultNotifyNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneVSOneRpcACTResultNotifyNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  OneVSOneRpcACTResultNotifyNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OneVSOneRpcACTResultNotifyNotify& from);
  void MergeFrom(const OneVSOneRpcACTResultNotifyNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OneVSOneRpcACTResultNotifyNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .OneVSOneOVOResultInfo Chanllengor = 2;
  bool has_chanllengor() const;
  void clear_chanllengor();
  static const int kChanllengorFieldNumber = 2;
  const ::OneVSOneOVOResultInfo& chanllengor() const;
  ::OneVSOneOVOResultInfo* mutable_chanllengor();
  ::OneVSOneOVOResultInfo* release_chanllengor();
  void set_allocated_chanllengor(::OneVSOneOVOResultInfo* chanllengor);

  // optional .OneVSOneOVOResultInfo BeAttacked = 3;
  bool has_beattacked() const;
  void clear_beattacked();
  static const int kBeAttackedFieldNumber = 3;
  const ::OneVSOneOVOResultInfo& beattacked() const;
  ::OneVSOneOVOResultInfo* mutable_beattacked();
  ::OneVSOneOVOResultInfo* release_beattacked();
  void set_allocated_beattacked(::OneVSOneOVOResultInfo* beattacked);

  // optional sint32 IsChanllengorWon = 1 [default = 0];
  bool has_ischanllengorwon() const;
  void clear_ischanllengorwon();
  static const int kIsChanllengorWonFieldNumber = 1;
  ::google::protobuf::int32 ischanllengorwon() const;
  void set_ischanllengorwon(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:OneVSOneRpcACTResultNotifyNotify)
 private:
  void set_has_ischanllengorwon();
  void clear_has_ischanllengorwon();
  void set_has_chanllengor();
  void clear_has_chanllengor();
  void set_has_beattacked();
  void clear_has_beattacked();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::OneVSOneOVOResultInfo* chanllengor_;
  ::OneVSOneOVOResultInfo* beattacked_;
  ::google::protobuf::int32 ischanllengorwon_;
  friend struct protobuf_OneVSOneRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneVSOneOVOResultInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OneVSOneOVOResultInfo) */ {
 public:
  OneVSOneOVOResultInfo();
  virtual ~OneVSOneOVOResultInfo();

  OneVSOneOVOResultInfo(const OneVSOneOVOResultInfo& from);

  inline OneVSOneOVOResultInfo& operator=(const OneVSOneOVOResultInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneVSOneOVOResultInfo(OneVSOneOVOResultInfo&& from) noexcept
    : OneVSOneOVOResultInfo() {
    *this = ::std::move(from);
  }

  inline OneVSOneOVOResultInfo& operator=(OneVSOneOVOResultInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneVSOneOVOResultInfo& default_instance();

  static inline const OneVSOneOVOResultInfo* internal_default_instance() {
    return reinterpret_cast<const OneVSOneOVOResultInfo*>(
               &_OneVSOneOVOResultInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(OneVSOneOVOResultInfo* other);
  friend void swap(OneVSOneOVOResultInfo& a, OneVSOneOVOResultInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneVSOneOVOResultInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  OneVSOneOVOResultInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OneVSOneOVOResultInfo& from);
  void MergeFrom(const OneVSOneOVOResultInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OneVSOneOVOResultInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 5;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string HeadICO = 12;
  bool has_headico() const;
  void clear_headico();
  static const int kHeadICOFieldNumber = 12;
  const ::std::string& headico() const;
  void set_headico(const ::std::string& value);
  #if LANG_CXX11
  void set_headico(::std::string&& value);
  #endif
  void set_headico(const char* value);
  void set_headico(const char* value, size_t size);
  ::std::string* mutable_headico();
  ::std::string* release_headico();
  void set_allocated_headico(::std::string* headico);

  // optional sint32 Damage = 2 [default = 0];
  bool has_damage() const;
  void clear_damage();
  static const int kDamageFieldNumber = 2;
  ::google::protobuf::int32 damage() const;
  void set_damage(::google::protobuf::int32 value);

  // optional sint32 BeHurted = 3 [default = 0];
  bool has_behurted() const;
  void clear_behurted();
  static const int kBeHurtedFieldNumber = 3;
  ::google::protobuf::int32 behurted() const;
  void set_behurted(::google::protobuf::int32 value);

  // optional sint32 Healed = 4 [default = 0];
  bool has_healed() const;
  void clear_healed();
  static const int kHealedFieldNumber = 4;
  ::google::protobuf::int32 healed() const;
  void set_healed(::google::protobuf::int32 value);

  // optional sint32 Ranking = 7 [default = 0];
  bool has_ranking() const;
  void clear_ranking();
  static const int kRankingFieldNumber = 7;
  ::google::protobuf::int32 ranking() const;
  void set_ranking(::google::protobuf::int32 value);

  // optional sint32 IsWin = 14 [default = 0];
  bool has_iswin() const;
  void clear_iswin();
  static const int kIsWinFieldNumber = 14;
  ::google::protobuf::int32 iswin() const;
  void set_iswin(::google::protobuf::int32 value);

  // optional sint32 LV = 13 [default = -1];
  bool has_lv() const;
  void clear_lv();
  static const int kLVFieldNumber = 13;
  ::google::protobuf::int32 lv() const;
  void set_lv(::google::protobuf::int32 value);

  // optional sint64 UserId = 1 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // optional sint32 BeforeRanking = 8 [default = -1];
  bool has_beforeranking() const;
  void clear_beforeranking();
  static const int kBeforeRankingFieldNumber = 8;
  ::google::protobuf::int32 beforeranking() const;
  void set_beforeranking(::google::protobuf::int32 value);

  // optional sint32 JobID = 11 [default = -1];
  bool has_jobid() const;
  void clear_jobid();
  static const int kJobIDFieldNumber = 11;
  ::google::protobuf::int32 jobid() const;
  void set_jobid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:OneVSOneOVOResultInfo)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_damage();
  void clear_has_damage();
  void set_has_behurted();
  void clear_has_behurted();
  void set_has_healed();
  void clear_has_healed();
  void set_has_name();
  void clear_has_name();
  void set_has_ranking();
  void clear_has_ranking();
  void set_has_beforeranking();
  void clear_has_beforeranking();
  void set_has_jobid();
  void clear_has_jobid();
  void set_has_headico();
  void clear_has_headico();
  void set_has_lv();
  void clear_has_lv();
  void set_has_iswin();
  void clear_has_iswin();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr headico_;
  ::google::protobuf::int32 damage_;
  ::google::protobuf::int32 behurted_;
  ::google::protobuf::int32 healed_;
  ::google::protobuf::int32 ranking_;
  ::google::protobuf::int32 iswin_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 beforeranking_;
  ::google::protobuf::int32 jobid_;
  friend struct protobuf_OneVSOneRpc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OneVSOneRpcFlushAsk

// optional sint32 IsOpen = 1 [default = 0];
inline bool OneVSOneRpcFlushAsk::has_isopen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneVSOneRpcFlushAsk::set_has_isopen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneVSOneRpcFlushAsk::clear_has_isopen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneVSOneRpcFlushAsk::clear_isopen() {
  isopen_ = 0;
  clear_has_isopen();
}
inline ::google::protobuf::int32 OneVSOneRpcFlushAsk::isopen() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcFlushAsk.IsOpen)
  return isopen_;
}
inline void OneVSOneRpcFlushAsk::set_isopen(::google::protobuf::int32 value) {
  set_has_isopen();
  isopen_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcFlushAsk.IsOpen)
}

// -------------------------------------------------------------------

// OneVSOneRpcFlushReply

// optional sint32 Result = 1 [default = -9999];
inline bool OneVSOneRpcFlushReply::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OneVSOneRpcFlushReply::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OneVSOneRpcFlushReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OneVSOneRpcFlushReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 OneVSOneRpcFlushReply::result() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcFlushReply.Result)
  return result_;
}
inline void OneVSOneRpcFlushReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcFlushReply.Result)
}

// optional sint32 Ranking = 2 [default = -1];
inline bool OneVSOneRpcFlushReply::has_ranking() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OneVSOneRpcFlushReply::set_has_ranking() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OneVSOneRpcFlushReply::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OneVSOneRpcFlushReply::clear_ranking() {
  ranking_ = -1;
  clear_has_ranking();
}
inline ::google::protobuf::int32 OneVSOneRpcFlushReply::ranking() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcFlushReply.Ranking)
  return ranking_;
}
inline void OneVSOneRpcFlushReply::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcFlushReply.Ranking)
}

// optional sint32 FightingCapacity = 3 [default = -1];
inline bool OneVSOneRpcFlushReply::has_fightingcapacity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OneVSOneRpcFlushReply::set_has_fightingcapacity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OneVSOneRpcFlushReply::clear_has_fightingcapacity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OneVSOneRpcFlushReply::clear_fightingcapacity() {
  fightingcapacity_ = -1;
  clear_has_fightingcapacity();
}
inline ::google::protobuf::int32 OneVSOneRpcFlushReply::fightingcapacity() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcFlushReply.FightingCapacity)
  return fightingcapacity_;
}
inline void OneVSOneRpcFlushReply::set_fightingcapacity(::google::protobuf::int32 value) {
  set_has_fightingcapacity();
  fightingcapacity_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcFlushReply.FightingCapacity)
}

// optional sint32 OneVSOneNum = 4 [default = -1];
inline bool OneVSOneRpcFlushReply::has_onevsonenum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OneVSOneRpcFlushReply::set_has_onevsonenum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OneVSOneRpcFlushReply::clear_has_onevsonenum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OneVSOneRpcFlushReply::clear_onevsonenum() {
  onevsonenum_ = -1;
  clear_has_onevsonenum();
}
inline ::google::protobuf::int32 OneVSOneRpcFlushReply::onevsonenum() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcFlushReply.OneVSOneNum)
  return onevsonenum_;
}
inline void OneVSOneRpcFlushReply::set_onevsonenum(::google::protobuf::int32 value) {
  set_has_onevsonenum();
  onevsonenum_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcFlushReply.OneVSOneNum)
}

// repeated .TimeTop TimeRankings = 5;
inline int OneVSOneRpcFlushReply::timerankings_size() const {
  return timerankings_.size();
}
inline void OneVSOneRpcFlushReply::clear_timerankings() {
  timerankings_.Clear();
}
inline const ::TimeTop& OneVSOneRpcFlushReply::timerankings(int index) const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcFlushReply.TimeRankings)
  return timerankings_.Get(index);
}
inline ::TimeTop* OneVSOneRpcFlushReply::mutable_timerankings(int index) {
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcFlushReply.TimeRankings)
  return timerankings_.Mutable(index);
}
inline ::TimeTop* OneVSOneRpcFlushReply::add_timerankings() {
  // @@protoc_insertion_point(field_add:OneVSOneRpcFlushReply.TimeRankings)
  return timerankings_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::TimeTop >*
OneVSOneRpcFlushReply::mutable_timerankings() {
  // @@protoc_insertion_point(field_mutable_list:OneVSOneRpcFlushReply.TimeRankings)
  return &timerankings_;
}
inline const ::google::protobuf::RepeatedPtrField< ::TimeTop >&
OneVSOneRpcFlushReply::timerankings() const {
  // @@protoc_insertion_point(field_list:OneVSOneRpcFlushReply.TimeRankings)
  return timerankings_;
}

// repeated .OneVSOneActPeo ActPeos = 6;
inline int OneVSOneRpcFlushReply::actpeos_size() const {
  return actpeos_.size();
}
inline void OneVSOneRpcFlushReply::clear_actpeos() {
  actpeos_.Clear();
}
inline const ::OneVSOneActPeo& OneVSOneRpcFlushReply::actpeos(int index) const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcFlushReply.ActPeos)
  return actpeos_.Get(index);
}
inline ::OneVSOneActPeo* OneVSOneRpcFlushReply::mutable_actpeos(int index) {
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcFlushReply.ActPeos)
  return actpeos_.Mutable(index);
}
inline ::OneVSOneActPeo* OneVSOneRpcFlushReply::add_actpeos() {
  // @@protoc_insertion_point(field_add:OneVSOneRpcFlushReply.ActPeos)
  return actpeos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::OneVSOneActPeo >*
OneVSOneRpcFlushReply::mutable_actpeos() {
  // @@protoc_insertion_point(field_mutable_list:OneVSOneRpcFlushReply.ActPeos)
  return &actpeos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::OneVSOneActPeo >&
OneVSOneRpcFlushReply::actpeos() const {
  // @@protoc_insertion_point(field_list:OneVSOneRpcFlushReply.ActPeos)
  return actpeos_;
}

// optional sint32 IsOpen = 7 [default = 0];
inline bool OneVSOneRpcFlushReply::has_isopen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneVSOneRpcFlushReply::set_has_isopen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneVSOneRpcFlushReply::clear_has_isopen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneVSOneRpcFlushReply::clear_isopen() {
  isopen_ = 0;
  clear_has_isopen();
}
inline ::google::protobuf::int32 OneVSOneRpcFlushReply::isopen() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcFlushReply.IsOpen)
  return isopen_;
}
inline void OneVSOneRpcFlushReply::set_isopen(::google::protobuf::int32 value) {
  set_has_isopen();
  isopen_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcFlushReply.IsOpen)
}

// optional sint32 LockTime = 8 [default = -1];
inline bool OneVSOneRpcFlushReply::has_locktime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneVSOneRpcFlushReply::set_has_locktime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneVSOneRpcFlushReply::clear_has_locktime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneVSOneRpcFlushReply::clear_locktime() {
  locktime_ = -1;
  clear_has_locktime();
}
inline ::google::protobuf::int32 OneVSOneRpcFlushReply::locktime() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcFlushReply.LockTime)
  return locktime_;
}
inline void OneVSOneRpcFlushReply::set_locktime(::google::protobuf::int32 value) {
  set_has_locktime();
  locktime_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcFlushReply.LockTime)
}

// -------------------------------------------------------------------

// OneVSOneActPeo

// optional string PlanName = 1;
inline bool OneVSOneActPeo::has_planname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneVSOneActPeo::set_has_planname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneVSOneActPeo::clear_has_planname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneVSOneActPeo::clear_planname() {
  planname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_planname();
}
inline const ::std::string& OneVSOneActPeo::planname() const {
  // @@protoc_insertion_point(field_get:OneVSOneActPeo.PlanName)
  return planname_.GetNoArena();
}
inline void OneVSOneActPeo::set_planname(const ::std::string& value) {
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OneVSOneActPeo.PlanName)
}
#if LANG_CXX11
inline void OneVSOneActPeo::set_planname(::std::string&& value) {
  set_has_planname();
  planname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OneVSOneActPeo.PlanName)
}
#endif
inline void OneVSOneActPeo::set_planname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OneVSOneActPeo.PlanName)
}
inline void OneVSOneActPeo::set_planname(const char* value, size_t size) {
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OneVSOneActPeo.PlanName)
}
inline ::std::string* OneVSOneActPeo::mutable_planname() {
  set_has_planname();
  // @@protoc_insertion_point(field_mutable:OneVSOneActPeo.PlanName)
  return planname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneVSOneActPeo::release_planname() {
  // @@protoc_insertion_point(field_release:OneVSOneActPeo.PlanName)
  clear_has_planname();
  return planname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneVSOneActPeo::set_allocated_planname(::std::string* planname) {
  if (planname != NULL) {
    set_has_planname();
  } else {
    clear_has_planname();
  }
  planname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), planname);
  // @@protoc_insertion_point(field_set_allocated:OneVSOneActPeo.PlanName)
}

// optional sint32 Ranking = 3 [default = -1];
inline bool OneVSOneActPeo::has_ranking() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OneVSOneActPeo::set_has_ranking() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OneVSOneActPeo::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OneVSOneActPeo::clear_ranking() {
  ranking_ = -1;
  clear_has_ranking();
}
inline ::google::protobuf::int32 OneVSOneActPeo::ranking() const {
  // @@protoc_insertion_point(field_get:OneVSOneActPeo.Ranking)
  return ranking_;
}
inline void OneVSOneActPeo::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneActPeo.Ranking)
}

// optional sint32 FightingCapacity = 4 [default = -1];
inline bool OneVSOneActPeo::has_fightingcapacity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OneVSOneActPeo::set_has_fightingcapacity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OneVSOneActPeo::clear_has_fightingcapacity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OneVSOneActPeo::clear_fightingcapacity() {
  fightingcapacity_ = -1;
  clear_has_fightingcapacity();
}
inline ::google::protobuf::int32 OneVSOneActPeo::fightingcapacity() const {
  // @@protoc_insertion_point(field_get:OneVSOneActPeo.FightingCapacity)
  return fightingcapacity_;
}
inline void OneVSOneActPeo::set_fightingcapacity(::google::protobuf::int32 value) {
  set_has_fightingcapacity();
  fightingcapacity_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneActPeo.FightingCapacity)
}

// optional sint64 UserId = 5 [default = -1];
inline bool OneVSOneActPeo::has_userid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OneVSOneActPeo::set_has_userid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OneVSOneActPeo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OneVSOneActPeo::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 OneVSOneActPeo::userid() const {
  // @@protoc_insertion_point(field_get:OneVSOneActPeo.UserId)
  return userid_;
}
inline void OneVSOneActPeo::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneActPeo.UserId)
}

// optional sint32 MardID = 7 [default = -1];
inline bool OneVSOneActPeo::has_mardid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OneVSOneActPeo::set_has_mardid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OneVSOneActPeo::clear_has_mardid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OneVSOneActPeo::clear_mardid() {
  mardid_ = -1;
  clear_has_mardid();
}
inline ::google::protobuf::int32 OneVSOneActPeo::mardid() const {
  // @@protoc_insertion_point(field_get:OneVSOneActPeo.MardID)
  return mardid_;
}
inline void OneVSOneActPeo::set_mardid(::google::protobuf::int32 value) {
  set_has_mardid();
  mardid_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneActPeo.MardID)
}

// optional sint32 LV = 8 [default = -1];
inline bool OneVSOneActPeo::has_lv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OneVSOneActPeo::set_has_lv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OneVSOneActPeo::clear_has_lv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OneVSOneActPeo::clear_lv() {
  lv_ = -1;
  clear_has_lv();
}
inline ::google::protobuf::int32 OneVSOneActPeo::lv() const {
  // @@protoc_insertion_point(field_get:OneVSOneActPeo.LV)
  return lv_;
}
inline void OneVSOneActPeo::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneActPeo.LV)
}

// optional string HeadPath = 9;
inline bool OneVSOneActPeo::has_headpath() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneVSOneActPeo::set_has_headpath() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneVSOneActPeo::clear_has_headpath() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneVSOneActPeo::clear_headpath() {
  headpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headpath();
}
inline const ::std::string& OneVSOneActPeo::headpath() const {
  // @@protoc_insertion_point(field_get:OneVSOneActPeo.HeadPath)
  return headpath_.GetNoArena();
}
inline void OneVSOneActPeo::set_headpath(const ::std::string& value) {
  set_has_headpath();
  headpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OneVSOneActPeo.HeadPath)
}
#if LANG_CXX11
inline void OneVSOneActPeo::set_headpath(::std::string&& value) {
  set_has_headpath();
  headpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OneVSOneActPeo.HeadPath)
}
#endif
inline void OneVSOneActPeo::set_headpath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_headpath();
  headpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OneVSOneActPeo.HeadPath)
}
inline void OneVSOneActPeo::set_headpath(const char* value, size_t size) {
  set_has_headpath();
  headpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OneVSOneActPeo.HeadPath)
}
inline ::std::string* OneVSOneActPeo::mutable_headpath() {
  set_has_headpath();
  // @@protoc_insertion_point(field_mutable:OneVSOneActPeo.HeadPath)
  return headpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneVSOneActPeo::release_headpath() {
  // @@protoc_insertion_point(field_release:OneVSOneActPeo.HeadPath)
  clear_has_headpath();
  return headpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneVSOneActPeo::set_allocated_headpath(::std::string* headpath) {
  if (headpath != NULL) {
    set_has_headpath();
  } else {
    clear_has_headpath();
  }
  headpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headpath);
  // @@protoc_insertion_point(field_set_allocated:OneVSOneActPeo.HeadPath)
}

// -------------------------------------------------------------------

// OneVSOneRpcActAsk

// optional sint64 UserId = 2 [default = -1];
inline bool OneVSOneRpcActAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneVSOneRpcActAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneVSOneRpcActAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneVSOneRpcActAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 OneVSOneRpcActAsk::userid() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcActAsk.UserId)
  return userid_;
}
inline void OneVSOneRpcActAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcActAsk.UserId)
}

// optional sint32 Ranking = 4 [default = -1];
inline bool OneVSOneRpcActAsk::has_ranking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneVSOneRpcActAsk::set_has_ranking() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneVSOneRpcActAsk::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneVSOneRpcActAsk::clear_ranking() {
  ranking_ = -1;
  clear_has_ranking();
}
inline ::google::protobuf::int32 OneVSOneRpcActAsk::ranking() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcActAsk.Ranking)
  return ranking_;
}
inline void OneVSOneRpcActAsk::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcActAsk.Ranking)
}

// -------------------------------------------------------------------

// OneVSOneRpcActReply

// optional sint32 Result = 1 [default = -9999];
inline bool OneVSOneRpcActReply::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OneVSOneRpcActReply::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OneVSOneRpcActReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OneVSOneRpcActReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 OneVSOneRpcActReply::result() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcActReply.Result)
  return result_;
}
inline void OneVSOneRpcActReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcActReply.Result)
}

// optional sint64 UserId = 2 [default = -1];
inline bool OneVSOneRpcActReply::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OneVSOneRpcActReply::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OneVSOneRpcActReply::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OneVSOneRpcActReply::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 OneVSOneRpcActReply::userid() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcActReply.UserId)
  return userid_;
}
inline void OneVSOneRpcActReply::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcActReply.UserId)
}

// optional string PlanName = 4;
inline bool OneVSOneRpcActReply::has_planname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneVSOneRpcActReply::set_has_planname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneVSOneRpcActReply::clear_has_planname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneVSOneRpcActReply::clear_planname() {
  planname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_planname();
}
inline const ::std::string& OneVSOneRpcActReply::planname() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcActReply.PlanName)
  return planname_.GetNoArena();
}
inline void OneVSOneRpcActReply::set_planname(const ::std::string& value) {
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OneVSOneRpcActReply.PlanName)
}
#if LANG_CXX11
inline void OneVSOneRpcActReply::set_planname(::std::string&& value) {
  set_has_planname();
  planname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OneVSOneRpcActReply.PlanName)
}
#endif
inline void OneVSOneRpcActReply::set_planname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OneVSOneRpcActReply.PlanName)
}
inline void OneVSOneRpcActReply::set_planname(const char* value, size_t size) {
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OneVSOneRpcActReply.PlanName)
}
inline ::std::string* OneVSOneRpcActReply::mutable_planname() {
  set_has_planname();
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcActReply.PlanName)
  return planname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneVSOneRpcActReply::release_planname() {
  // @@protoc_insertion_point(field_release:OneVSOneRpcActReply.PlanName)
  clear_has_planname();
  return planname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneVSOneRpcActReply::set_allocated_planname(::std::string* planname) {
  if (planname != NULL) {
    set_has_planname();
  } else {
    clear_has_planname();
  }
  planname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), planname);
  // @@protoc_insertion_point(field_set_allocated:OneVSOneRpcActReply.PlanName)
}

// optional sint32 OneVSOneNum = 6 [default = -1];
inline bool OneVSOneRpcActReply::has_onevsonenum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OneVSOneRpcActReply::set_has_onevsonenum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OneVSOneRpcActReply::clear_has_onevsonenum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OneVSOneRpcActReply::clear_onevsonenum() {
  onevsonenum_ = -1;
  clear_has_onevsonenum();
}
inline ::google::protobuf::int32 OneVSOneRpcActReply::onevsonenum() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcActReply.OneVSOneNum)
  return onevsonenum_;
}
inline void OneVSOneRpcActReply::set_onevsonenum(::google::protobuf::int32 value) {
  set_has_onevsonenum();
  onevsonenum_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcActReply.OneVSOneNum)
}

// optional sint32 Ranking = 7 [default = -1];
inline bool OneVSOneRpcActReply::has_ranking() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OneVSOneRpcActReply::set_has_ranking() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OneVSOneRpcActReply::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OneVSOneRpcActReply::clear_ranking() {
  ranking_ = -1;
  clear_has_ranking();
}
inline ::google::protobuf::int32 OneVSOneRpcActReply::ranking() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcActReply.Ranking)
  return ranking_;
}
inline void OneVSOneRpcActReply::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcActReply.Ranking)
}

// optional sint32 IsCopy = 8 [default = 0];
inline bool OneVSOneRpcActReply::has_iscopy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneVSOneRpcActReply::set_has_iscopy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneVSOneRpcActReply::clear_has_iscopy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneVSOneRpcActReply::clear_iscopy() {
  iscopy_ = 0;
  clear_has_iscopy();
}
inline ::google::protobuf::int32 OneVSOneRpcActReply::iscopy() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcActReply.IsCopy)
  return iscopy_;
}
inline void OneVSOneRpcActReply::set_iscopy(::google::protobuf::int32 value) {
  set_has_iscopy();
  iscopy_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcActReply.IsCopy)
}

// -------------------------------------------------------------------

// OneVSOneRpcActMessageNotify

// optional sint64 UserId = 1 [default = -1];
inline bool OneVSOneRpcActMessageNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneVSOneRpcActMessageNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneVSOneRpcActMessageNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneVSOneRpcActMessageNotify::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 OneVSOneRpcActMessageNotify::userid() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcActMessageNotify.UserId)
  return userid_;
}
inline void OneVSOneRpcActMessageNotify::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcActMessageNotify.UserId)
}

// optional string PlanName = 2;
inline bool OneVSOneRpcActMessageNotify::has_planname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneVSOneRpcActMessageNotify::set_has_planname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneVSOneRpcActMessageNotify::clear_has_planname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneVSOneRpcActMessageNotify::clear_planname() {
  planname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_planname();
}
inline const ::std::string& OneVSOneRpcActMessageNotify::planname() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcActMessageNotify.PlanName)
  return planname_.GetNoArena();
}
inline void OneVSOneRpcActMessageNotify::set_planname(const ::std::string& value) {
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OneVSOneRpcActMessageNotify.PlanName)
}
#if LANG_CXX11
inline void OneVSOneRpcActMessageNotify::set_planname(::std::string&& value) {
  set_has_planname();
  planname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OneVSOneRpcActMessageNotify.PlanName)
}
#endif
inline void OneVSOneRpcActMessageNotify::set_planname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OneVSOneRpcActMessageNotify.PlanName)
}
inline void OneVSOneRpcActMessageNotify::set_planname(const char* value, size_t size) {
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OneVSOneRpcActMessageNotify.PlanName)
}
inline ::std::string* OneVSOneRpcActMessageNotify::mutable_planname() {
  set_has_planname();
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcActMessageNotify.PlanName)
  return planname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneVSOneRpcActMessageNotify::release_planname() {
  // @@protoc_insertion_point(field_release:OneVSOneRpcActMessageNotify.PlanName)
  clear_has_planname();
  return planname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneVSOneRpcActMessageNotify::set_allocated_planname(::std::string* planname) {
  if (planname != NULL) {
    set_has_planname();
  } else {
    clear_has_planname();
  }
  planname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), planname);
  // @@protoc_insertion_point(field_set_allocated:OneVSOneRpcActMessageNotify.PlanName)
}

// -------------------------------------------------------------------

// OneVSOneRpcReplyActAsk

// optional sint64 UserId = 1 [default = -1];
inline bool OneVSOneRpcReplyActAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneVSOneRpcReplyActAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneVSOneRpcReplyActAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneVSOneRpcReplyActAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 OneVSOneRpcReplyActAsk::userid() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcReplyActAsk.UserId)
  return userid_;
}
inline void OneVSOneRpcReplyActAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcReplyActAsk.UserId)
}

// optional sint32 IsOK = 2 [default = -1];
inline bool OneVSOneRpcReplyActAsk::has_isok() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneVSOneRpcReplyActAsk::set_has_isok() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneVSOneRpcReplyActAsk::clear_has_isok() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneVSOneRpcReplyActAsk::clear_isok() {
  isok_ = -1;
  clear_has_isok();
}
inline ::google::protobuf::int32 OneVSOneRpcReplyActAsk::isok() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcReplyActAsk.IsOK)
  return isok_;
}
inline void OneVSOneRpcReplyActAsk::set_isok(::google::protobuf::int32 value) {
  set_has_isok();
  isok_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcReplyActAsk.IsOK)
}

// -------------------------------------------------------------------

// OneVSOneRpcReplyActReply

// optional sint32 Result = 1 [default = -9999];
inline bool OneVSOneRpcReplyActReply::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OneVSOneRpcReplyActReply::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OneVSOneRpcReplyActReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OneVSOneRpcReplyActReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 OneVSOneRpcReplyActReply::result() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcReplyActReply.Result)
  return result_;
}
inline void OneVSOneRpcReplyActReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcReplyActReply.Result)
}

// optional sint64 UserId = 2 [default = -1];
inline bool OneVSOneRpcReplyActReply::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneVSOneRpcReplyActReply::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneVSOneRpcReplyActReply::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneVSOneRpcReplyActReply::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 OneVSOneRpcReplyActReply::userid() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcReplyActReply.UserId)
  return userid_;
}
inline void OneVSOneRpcReplyActReply::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcReplyActReply.UserId)
}

// optional sint32 IsOK = 4 [default = -1];
inline bool OneVSOneRpcReplyActReply::has_isok() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OneVSOneRpcReplyActReply::set_has_isok() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OneVSOneRpcReplyActReply::clear_has_isok() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OneVSOneRpcReplyActReply::clear_isok() {
  isok_ = -1;
  clear_has_isok();
}
inline ::google::protobuf::int32 OneVSOneRpcReplyActReply::isok() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcReplyActReply.IsOK)
  return isok_;
}
inline void OneVSOneRpcReplyActReply::set_isok(::google::protobuf::int32 value) {
  set_has_isok();
  isok_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcReplyActReply.IsOK)
}

// optional string PlanName = 5;
inline bool OneVSOneRpcReplyActReply::has_planname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneVSOneRpcReplyActReply::set_has_planname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneVSOneRpcReplyActReply::clear_has_planname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneVSOneRpcReplyActReply::clear_planname() {
  planname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_planname();
}
inline const ::std::string& OneVSOneRpcReplyActReply::planname() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcReplyActReply.PlanName)
  return planname_.GetNoArena();
}
inline void OneVSOneRpcReplyActReply::set_planname(const ::std::string& value) {
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OneVSOneRpcReplyActReply.PlanName)
}
#if LANG_CXX11
inline void OneVSOneRpcReplyActReply::set_planname(::std::string&& value) {
  set_has_planname();
  planname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OneVSOneRpcReplyActReply.PlanName)
}
#endif
inline void OneVSOneRpcReplyActReply::set_planname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OneVSOneRpcReplyActReply.PlanName)
}
inline void OneVSOneRpcReplyActReply::set_planname(const char* value, size_t size) {
  set_has_planname();
  planname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OneVSOneRpcReplyActReply.PlanName)
}
inline ::std::string* OneVSOneRpcReplyActReply::mutable_planname() {
  set_has_planname();
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcReplyActReply.PlanName)
  return planname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneVSOneRpcReplyActReply::release_planname() {
  // @@protoc_insertion_point(field_release:OneVSOneRpcReplyActReply.PlanName)
  clear_has_planname();
  return planname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneVSOneRpcReplyActReply::set_allocated_planname(::std::string* planname) {
  if (planname != NULL) {
    set_has_planname();
  } else {
    clear_has_planname();
  }
  planname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), planname);
  // @@protoc_insertion_point(field_set_allocated:OneVSOneRpcReplyActReply.PlanName)
}

// -------------------------------------------------------------------

// OneVSOneRpcGetTopAsk

// -------------------------------------------------------------------

// OneVSOneRpcGetTopReply

// optional sint32 Result = 1 [default = -9999];
inline bool OneVSOneRpcGetTopReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneVSOneRpcGetTopReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneVSOneRpcGetTopReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneVSOneRpcGetTopReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 OneVSOneRpcGetTopReply::result() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcGetTopReply.Result)
  return result_;
}
inline void OneVSOneRpcGetTopReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcGetTopReply.Result)
}

// repeated .TopMess TopMesses = 2;
inline int OneVSOneRpcGetTopReply::topmesses_size() const {
  return topmesses_.size();
}
inline void OneVSOneRpcGetTopReply::clear_topmesses() {
  topmesses_.Clear();
}
inline const ::TopMess& OneVSOneRpcGetTopReply::topmesses(int index) const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcGetTopReply.TopMesses)
  return topmesses_.Get(index);
}
inline ::TopMess* OneVSOneRpcGetTopReply::mutable_topmesses(int index) {
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcGetTopReply.TopMesses)
  return topmesses_.Mutable(index);
}
inline ::TopMess* OneVSOneRpcGetTopReply::add_topmesses() {
  // @@protoc_insertion_point(field_add:OneVSOneRpcGetTopReply.TopMesses)
  return topmesses_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::TopMess >*
OneVSOneRpcGetTopReply::mutable_topmesses() {
  // @@protoc_insertion_point(field_mutable_list:OneVSOneRpcGetTopReply.TopMesses)
  return &topmesses_;
}
inline const ::google::protobuf::RepeatedPtrField< ::TopMess >&
OneVSOneRpcGetTopReply::topmesses() const {
  // @@protoc_insertion_point(field_list:OneVSOneRpcGetTopReply.TopMesses)
  return topmesses_;
}

// -------------------------------------------------------------------

// OneVSOneRpcAdjustmentSkillAsk

// repeated .OneSData SkillDate = 1;
inline int OneVSOneRpcAdjustmentSkillAsk::skilldate_size() const {
  return skilldate_.size();
}
inline void OneVSOneRpcAdjustmentSkillAsk::clear_skilldate() {
  skilldate_.Clear();
}
inline const ::OneSData& OneVSOneRpcAdjustmentSkillAsk::skilldate(int index) const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcAdjustmentSkillAsk.SkillDate)
  return skilldate_.Get(index);
}
inline ::OneSData* OneVSOneRpcAdjustmentSkillAsk::mutable_skilldate(int index) {
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcAdjustmentSkillAsk.SkillDate)
  return skilldate_.Mutable(index);
}
inline ::OneSData* OneVSOneRpcAdjustmentSkillAsk::add_skilldate() {
  // @@protoc_insertion_point(field_add:OneVSOneRpcAdjustmentSkillAsk.SkillDate)
  return skilldate_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::OneSData >*
OneVSOneRpcAdjustmentSkillAsk::mutable_skilldate() {
  // @@protoc_insertion_point(field_mutable_list:OneVSOneRpcAdjustmentSkillAsk.SkillDate)
  return &skilldate_;
}
inline const ::google::protobuf::RepeatedPtrField< ::OneSData >&
OneVSOneRpcAdjustmentSkillAsk::skilldate() const {
  // @@protoc_insertion_point(field_list:OneVSOneRpcAdjustmentSkillAsk.SkillDate)
  return skilldate_;
}

// -------------------------------------------------------------------

// OneVSOneRpcAdjustmentSkillReply

// optional sint32 Result = 1 [default = -9999];
inline bool OneVSOneRpcAdjustmentSkillReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneVSOneRpcAdjustmentSkillReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneVSOneRpcAdjustmentSkillReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneVSOneRpcAdjustmentSkillReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 OneVSOneRpcAdjustmentSkillReply::result() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcAdjustmentSkillReply.Result)
  return result_;
}
inline void OneVSOneRpcAdjustmentSkillReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcAdjustmentSkillReply.Result)
}

// repeated .OneSData SkillDate = 2;
inline int OneVSOneRpcAdjustmentSkillReply::skilldate_size() const {
  return skilldate_.size();
}
inline void OneVSOneRpcAdjustmentSkillReply::clear_skilldate() {
  skilldate_.Clear();
}
inline const ::OneSData& OneVSOneRpcAdjustmentSkillReply::skilldate(int index) const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcAdjustmentSkillReply.SkillDate)
  return skilldate_.Get(index);
}
inline ::OneSData* OneVSOneRpcAdjustmentSkillReply::mutable_skilldate(int index) {
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcAdjustmentSkillReply.SkillDate)
  return skilldate_.Mutable(index);
}
inline ::OneSData* OneVSOneRpcAdjustmentSkillReply::add_skilldate() {
  // @@protoc_insertion_point(field_add:OneVSOneRpcAdjustmentSkillReply.SkillDate)
  return skilldate_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::OneSData >*
OneVSOneRpcAdjustmentSkillReply::mutable_skilldate() {
  // @@protoc_insertion_point(field_mutable_list:OneVSOneRpcAdjustmentSkillReply.SkillDate)
  return &skilldate_;
}
inline const ::google::protobuf::RepeatedPtrField< ::OneSData >&
OneVSOneRpcAdjustmentSkillReply::skilldate() const {
  // @@protoc_insertion_point(field_list:OneVSOneRpcAdjustmentSkillReply.SkillDate)
  return skilldate_;
}

// -------------------------------------------------------------------

// OneVSOneRpcGetSkillAsk

// -------------------------------------------------------------------

// OneVSOneRpcGetSkillReply

// optional sint32 Result = 1 [default = -9999];
inline bool OneVSOneRpcGetSkillReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneVSOneRpcGetSkillReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneVSOneRpcGetSkillReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneVSOneRpcGetSkillReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 OneVSOneRpcGetSkillReply::result() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcGetSkillReply.Result)
  return result_;
}
inline void OneVSOneRpcGetSkillReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcGetSkillReply.Result)
}

// repeated .OneSData SkillDate = 2;
inline int OneVSOneRpcGetSkillReply::skilldate_size() const {
  return skilldate_.size();
}
inline void OneVSOneRpcGetSkillReply::clear_skilldate() {
  skilldate_.Clear();
}
inline const ::OneSData& OneVSOneRpcGetSkillReply::skilldate(int index) const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcGetSkillReply.SkillDate)
  return skilldate_.Get(index);
}
inline ::OneSData* OneVSOneRpcGetSkillReply::mutable_skilldate(int index) {
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcGetSkillReply.SkillDate)
  return skilldate_.Mutable(index);
}
inline ::OneSData* OneVSOneRpcGetSkillReply::add_skilldate() {
  // @@protoc_insertion_point(field_add:OneVSOneRpcGetSkillReply.SkillDate)
  return skilldate_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::OneSData >*
OneVSOneRpcGetSkillReply::mutable_skilldate() {
  // @@protoc_insertion_point(field_mutable_list:OneVSOneRpcGetSkillReply.SkillDate)
  return &skilldate_;
}
inline const ::google::protobuf::RepeatedPtrField< ::OneSData >&
OneVSOneRpcGetSkillReply::skilldate() const {
  // @@protoc_insertion_point(field_list:OneVSOneRpcGetSkillReply.SkillDate)
  return skilldate_;
}

// -------------------------------------------------------------------

// OneVSOneRpcGetActMessageAsk

// -------------------------------------------------------------------

// OneVSOneRpcGetActMessageReply

// optional sint32 Result = 1 [default = -9999];
inline bool OneVSOneRpcGetActMessageReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneVSOneRpcGetActMessageReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneVSOneRpcGetActMessageReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneVSOneRpcGetActMessageReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 OneVSOneRpcGetActMessageReply::result() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcGetActMessageReply.Result)
  return result_;
}
inline void OneVSOneRpcGetActMessageReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcGetActMessageReply.Result)
}

// repeated .ActMessage ActMessages = 2;
inline int OneVSOneRpcGetActMessageReply::actmessages_size() const {
  return actmessages_.size();
}
inline void OneVSOneRpcGetActMessageReply::clear_actmessages() {
  actmessages_.Clear();
}
inline const ::ActMessage& OneVSOneRpcGetActMessageReply::actmessages(int index) const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcGetActMessageReply.ActMessages)
  return actmessages_.Get(index);
}
inline ::ActMessage* OneVSOneRpcGetActMessageReply::mutable_actmessages(int index) {
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcGetActMessageReply.ActMessages)
  return actmessages_.Mutable(index);
}
inline ::ActMessage* OneVSOneRpcGetActMessageReply::add_actmessages() {
  // @@protoc_insertion_point(field_add:OneVSOneRpcGetActMessageReply.ActMessages)
  return actmessages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ActMessage >*
OneVSOneRpcGetActMessageReply::mutable_actmessages() {
  // @@protoc_insertion_point(field_mutable_list:OneVSOneRpcGetActMessageReply.ActMessages)
  return &actmessages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ActMessage >&
OneVSOneRpcGetActMessageReply::actmessages() const {
  // @@protoc_insertion_point(field_list:OneVSOneRpcGetActMessageReply.ActMessages)
  return actmessages_;
}

// -------------------------------------------------------------------

// OneVSOneRpcACTResultNotifyNotify

// optional sint32 IsChanllengorWon = 1 [default = 0];
inline bool OneVSOneRpcACTResultNotifyNotify::has_ischanllengorwon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OneVSOneRpcACTResultNotifyNotify::set_has_ischanllengorwon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OneVSOneRpcACTResultNotifyNotify::clear_has_ischanllengorwon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OneVSOneRpcACTResultNotifyNotify::clear_ischanllengorwon() {
  ischanllengorwon_ = 0;
  clear_has_ischanllengorwon();
}
inline ::google::protobuf::int32 OneVSOneRpcACTResultNotifyNotify::ischanllengorwon() const {
  // @@protoc_insertion_point(field_get:OneVSOneRpcACTResultNotifyNotify.IsChanllengorWon)
  return ischanllengorwon_;
}
inline void OneVSOneRpcACTResultNotifyNotify::set_ischanllengorwon(::google::protobuf::int32 value) {
  set_has_ischanllengorwon();
  ischanllengorwon_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneRpcACTResultNotifyNotify.IsChanllengorWon)
}

// optional .OneVSOneOVOResultInfo Chanllengor = 2;
inline bool OneVSOneRpcACTResultNotifyNotify::has_chanllengor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneVSOneRpcACTResultNotifyNotify::set_has_chanllengor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneVSOneRpcACTResultNotifyNotify::clear_has_chanllengor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneVSOneRpcACTResultNotifyNotify::clear_chanllengor() {
  if (chanllengor_ != NULL) chanllengor_->::OneVSOneOVOResultInfo::Clear();
  clear_has_chanllengor();
}
inline const ::OneVSOneOVOResultInfo& OneVSOneRpcACTResultNotifyNotify::chanllengor() const {
  const ::OneVSOneOVOResultInfo* p = chanllengor_;
  // @@protoc_insertion_point(field_get:OneVSOneRpcACTResultNotifyNotify.Chanllengor)
  return p != NULL ? *p : *reinterpret_cast<const ::OneVSOneOVOResultInfo*>(
      &::_OneVSOneOVOResultInfo_default_instance_);
}
inline ::OneVSOneOVOResultInfo* OneVSOneRpcACTResultNotifyNotify::mutable_chanllengor() {
  set_has_chanllengor();
  if (chanllengor_ == NULL) {
    chanllengor_ = new ::OneVSOneOVOResultInfo;
  }
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcACTResultNotifyNotify.Chanllengor)
  return chanllengor_;
}
inline ::OneVSOneOVOResultInfo* OneVSOneRpcACTResultNotifyNotify::release_chanllengor() {
  // @@protoc_insertion_point(field_release:OneVSOneRpcACTResultNotifyNotify.Chanllengor)
  clear_has_chanllengor();
  ::OneVSOneOVOResultInfo* temp = chanllengor_;
  chanllengor_ = NULL;
  return temp;
}
inline void OneVSOneRpcACTResultNotifyNotify::set_allocated_chanllengor(::OneVSOneOVOResultInfo* chanllengor) {
  delete chanllengor_;
  chanllengor_ = chanllengor;
  if (chanllengor) {
    set_has_chanllengor();
  } else {
    clear_has_chanllengor();
  }
  // @@protoc_insertion_point(field_set_allocated:OneVSOneRpcACTResultNotifyNotify.Chanllengor)
}

// optional .OneVSOneOVOResultInfo BeAttacked = 3;
inline bool OneVSOneRpcACTResultNotifyNotify::has_beattacked() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneVSOneRpcACTResultNotifyNotify::set_has_beattacked() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneVSOneRpcACTResultNotifyNotify::clear_has_beattacked() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneVSOneRpcACTResultNotifyNotify::clear_beattacked() {
  if (beattacked_ != NULL) beattacked_->::OneVSOneOVOResultInfo::Clear();
  clear_has_beattacked();
}
inline const ::OneVSOneOVOResultInfo& OneVSOneRpcACTResultNotifyNotify::beattacked() const {
  const ::OneVSOneOVOResultInfo* p = beattacked_;
  // @@protoc_insertion_point(field_get:OneVSOneRpcACTResultNotifyNotify.BeAttacked)
  return p != NULL ? *p : *reinterpret_cast<const ::OneVSOneOVOResultInfo*>(
      &::_OneVSOneOVOResultInfo_default_instance_);
}
inline ::OneVSOneOVOResultInfo* OneVSOneRpcACTResultNotifyNotify::mutable_beattacked() {
  set_has_beattacked();
  if (beattacked_ == NULL) {
    beattacked_ = new ::OneVSOneOVOResultInfo;
  }
  // @@protoc_insertion_point(field_mutable:OneVSOneRpcACTResultNotifyNotify.BeAttacked)
  return beattacked_;
}
inline ::OneVSOneOVOResultInfo* OneVSOneRpcACTResultNotifyNotify::release_beattacked() {
  // @@protoc_insertion_point(field_release:OneVSOneRpcACTResultNotifyNotify.BeAttacked)
  clear_has_beattacked();
  ::OneVSOneOVOResultInfo* temp = beattacked_;
  beattacked_ = NULL;
  return temp;
}
inline void OneVSOneRpcACTResultNotifyNotify::set_allocated_beattacked(::OneVSOneOVOResultInfo* beattacked) {
  delete beattacked_;
  beattacked_ = beattacked;
  if (beattacked) {
    set_has_beattacked();
  } else {
    clear_has_beattacked();
  }
  // @@protoc_insertion_point(field_set_allocated:OneVSOneRpcACTResultNotifyNotify.BeAttacked)
}

// -------------------------------------------------------------------

// OneVSOneOVOResultInfo

// optional sint64 UserId = 1 [default = -1];
inline bool OneVSOneOVOResultInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OneVSOneOVOResultInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OneVSOneOVOResultInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OneVSOneOVOResultInfo::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 OneVSOneOVOResultInfo::userid() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.UserId)
  return userid_;
}
inline void OneVSOneOVOResultInfo::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.UserId)
}

// optional sint32 Damage = 2 [default = 0];
inline bool OneVSOneOVOResultInfo::has_damage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OneVSOneOVOResultInfo::set_has_damage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OneVSOneOVOResultInfo::clear_has_damage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OneVSOneOVOResultInfo::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 OneVSOneOVOResultInfo::damage() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.Damage)
  return damage_;
}
inline void OneVSOneOVOResultInfo::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.Damage)
}

// optional sint32 BeHurted = 3 [default = 0];
inline bool OneVSOneOVOResultInfo::has_behurted() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OneVSOneOVOResultInfo::set_has_behurted() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OneVSOneOVOResultInfo::clear_has_behurted() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OneVSOneOVOResultInfo::clear_behurted() {
  behurted_ = 0;
  clear_has_behurted();
}
inline ::google::protobuf::int32 OneVSOneOVOResultInfo::behurted() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.BeHurted)
  return behurted_;
}
inline void OneVSOneOVOResultInfo::set_behurted(::google::protobuf::int32 value) {
  set_has_behurted();
  behurted_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.BeHurted)
}

// optional sint32 Healed = 4 [default = 0];
inline bool OneVSOneOVOResultInfo::has_healed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OneVSOneOVOResultInfo::set_has_healed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OneVSOneOVOResultInfo::clear_has_healed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OneVSOneOVOResultInfo::clear_healed() {
  healed_ = 0;
  clear_has_healed();
}
inline ::google::protobuf::int32 OneVSOneOVOResultInfo::healed() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.Healed)
  return healed_;
}
inline void OneVSOneOVOResultInfo::set_healed(::google::protobuf::int32 value) {
  set_has_healed();
  healed_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.Healed)
}

// optional string Name = 5;
inline bool OneVSOneOVOResultInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneVSOneOVOResultInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneVSOneOVOResultInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneVSOneOVOResultInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& OneVSOneOVOResultInfo::name() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.Name)
  return name_.GetNoArena();
}
inline void OneVSOneOVOResultInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.Name)
}
#if LANG_CXX11
inline void OneVSOneOVOResultInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OneVSOneOVOResultInfo.Name)
}
#endif
inline void OneVSOneOVOResultInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OneVSOneOVOResultInfo.Name)
}
inline void OneVSOneOVOResultInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OneVSOneOVOResultInfo.Name)
}
inline ::std::string* OneVSOneOVOResultInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:OneVSOneOVOResultInfo.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneVSOneOVOResultInfo::release_name() {
  // @@protoc_insertion_point(field_release:OneVSOneOVOResultInfo.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneVSOneOVOResultInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OneVSOneOVOResultInfo.Name)
}

// optional sint32 Ranking = 7 [default = 0];
inline bool OneVSOneOVOResultInfo::has_ranking() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OneVSOneOVOResultInfo::set_has_ranking() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OneVSOneOVOResultInfo::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OneVSOneOVOResultInfo::clear_ranking() {
  ranking_ = 0;
  clear_has_ranking();
}
inline ::google::protobuf::int32 OneVSOneOVOResultInfo::ranking() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.Ranking)
  return ranking_;
}
inline void OneVSOneOVOResultInfo::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.Ranking)
}

// optional sint32 BeforeRanking = 8 [default = -1];
inline bool OneVSOneOVOResultInfo::has_beforeranking() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OneVSOneOVOResultInfo::set_has_beforeranking() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OneVSOneOVOResultInfo::clear_has_beforeranking() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OneVSOneOVOResultInfo::clear_beforeranking() {
  beforeranking_ = -1;
  clear_has_beforeranking();
}
inline ::google::protobuf::int32 OneVSOneOVOResultInfo::beforeranking() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.BeforeRanking)
  return beforeranking_;
}
inline void OneVSOneOVOResultInfo::set_beforeranking(::google::protobuf::int32 value) {
  set_has_beforeranking();
  beforeranking_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.BeforeRanking)
}

// optional sint32 JobID = 11 [default = -1];
inline bool OneVSOneOVOResultInfo::has_jobid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OneVSOneOVOResultInfo::set_has_jobid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OneVSOneOVOResultInfo::clear_has_jobid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OneVSOneOVOResultInfo::clear_jobid() {
  jobid_ = -1;
  clear_has_jobid();
}
inline ::google::protobuf::int32 OneVSOneOVOResultInfo::jobid() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.JobID)
  return jobid_;
}
inline void OneVSOneOVOResultInfo::set_jobid(::google::protobuf::int32 value) {
  set_has_jobid();
  jobid_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.JobID)
}

// optional string HeadICO = 12;
inline bool OneVSOneOVOResultInfo::has_headico() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneVSOneOVOResultInfo::set_has_headico() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneVSOneOVOResultInfo::clear_has_headico() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneVSOneOVOResultInfo::clear_headico() {
  headico_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headico();
}
inline const ::std::string& OneVSOneOVOResultInfo::headico() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.HeadICO)
  return headico_.GetNoArena();
}
inline void OneVSOneOVOResultInfo::set_headico(const ::std::string& value) {
  set_has_headico();
  headico_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.HeadICO)
}
#if LANG_CXX11
inline void OneVSOneOVOResultInfo::set_headico(::std::string&& value) {
  set_has_headico();
  headico_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OneVSOneOVOResultInfo.HeadICO)
}
#endif
inline void OneVSOneOVOResultInfo::set_headico(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_headico();
  headico_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OneVSOneOVOResultInfo.HeadICO)
}
inline void OneVSOneOVOResultInfo::set_headico(const char* value, size_t size) {
  set_has_headico();
  headico_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OneVSOneOVOResultInfo.HeadICO)
}
inline ::std::string* OneVSOneOVOResultInfo::mutable_headico() {
  set_has_headico();
  // @@protoc_insertion_point(field_mutable:OneVSOneOVOResultInfo.HeadICO)
  return headico_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneVSOneOVOResultInfo::release_headico() {
  // @@protoc_insertion_point(field_release:OneVSOneOVOResultInfo.HeadICO)
  clear_has_headico();
  return headico_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneVSOneOVOResultInfo::set_allocated_headico(::std::string* headico) {
  if (headico != NULL) {
    set_has_headico();
  } else {
    clear_has_headico();
  }
  headico_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headico);
  // @@protoc_insertion_point(field_set_allocated:OneVSOneOVOResultInfo.HeadICO)
}

// optional sint32 LV = 13 [default = -1];
inline bool OneVSOneOVOResultInfo::has_lv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OneVSOneOVOResultInfo::set_has_lv() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OneVSOneOVOResultInfo::clear_has_lv() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OneVSOneOVOResultInfo::clear_lv() {
  lv_ = -1;
  clear_has_lv();
}
inline ::google::protobuf::int32 OneVSOneOVOResultInfo::lv() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.LV)
  return lv_;
}
inline void OneVSOneOVOResultInfo::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.LV)
}

// optional sint32 IsWin = 14 [default = 0];
inline bool OneVSOneOVOResultInfo::has_iswin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OneVSOneOVOResultInfo::set_has_iswin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OneVSOneOVOResultInfo::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OneVSOneOVOResultInfo::clear_iswin() {
  iswin_ = 0;
  clear_has_iswin();
}
inline ::google::protobuf::int32 OneVSOneOVOResultInfo::iswin() const {
  // @@protoc_insertion_point(field_get:OneVSOneOVOResultInfo.IsWin)
  return iswin_;
}
inline void OneVSOneOVOResultInfo::set_iswin(::google::protobuf::int32 value) {
  set_has_iswin();
  iswin_ = value;
  // @@protoc_insertion_point(field_set:OneVSOneOVOResultInfo.IsWin)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_OneVSOneRpc_2eproto__INCLUDED
