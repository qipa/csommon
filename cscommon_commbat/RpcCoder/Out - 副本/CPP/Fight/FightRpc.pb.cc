// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FightRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FightRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class FightRpcReadyAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightRpcReadyAsk>
     _instance;
} _FightRpcReadyAsk_default_instance_;
class FightRpcReadyReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightRpcReadyReply>
     _instance;
} _FightRpcReadyReply_default_instance_;
class FightRpcActionNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightRpcActionNotify>
     _instance;
} _FightRpcActionNotify_default_instance_;
class FightRpcResultNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightRpcResultNotify>
     _instance;
} _FightRpcResultNotify_default_instance_;
class FightRpcEnterAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightRpcEnterAsk>
     _instance;
} _FightRpcEnterAsk_default_instance_;
class FightRpcEnterReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightRpcEnterReply>
     _instance;
} _FightRpcEnterReply_default_instance_;
class FightPrizeInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightPrizeInfo>
     _instance;
} _FightPrizeInfo_default_instance_;
class FightKillInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightKillInfo>
     _instance;
} _FightKillInfo_default_instance_;
class FightRpcStartNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightRpcStartNotify>
     _instance;
} _FightRpcStartNotify_default_instance_;
class FightUseSkillActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightUseSkillAction>
     _instance;
} _FightUseSkillAction_default_instance_;
class FightBuffActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightBuffAction>
     _instance;
} _FightBuffAction_default_instance_;
class FightCharHitActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightCharHitAction>
     _instance;
} _FightCharHitAction_default_instance_;
class FightOfflineActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightOfflineAction>
     _instance;
} _FightOfflineAction_default_instance_;
class FightStateActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightStateAction>
     _instance;
} _FightStateAction_default_instance_;
class FightCharDeadActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightCharDeadAction>
     _instance;
} _FightCharDeadAction_default_instance_;
class FightCharReviveActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightCharReviveAction>
     _instance;
} _FightCharReviveAction_default_instance_;
class FightHitTargetInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightHitTargetInfo>
     _instance;
} _FightHitTargetInfo_default_instance_;
class FightComboSkillActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightComboSkillAction>
     _instance;
} _FightComboSkillAction_default_instance_;
class FightEndSkillActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightEndSkillAction>
     _instance;
} _FightEndSkillAction_default_instance_;
class FightCityActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightCityAction>
     _instance;
} _FightCityAction_default_instance_;
class FightSnipeActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightSnipeAction>
     _instance;
} _FightSnipeAction_default_instance_;
class FightHurtActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightHurtAction>
     _instance;
} _FightHurtAction_default_instance_;
class FightDodgeActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightDodgeAction>
     _instance;
} _FightDodgeAction_default_instance_;
class FightRemoveObjActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightRemoveObjAction>
     _instance;
} _FightRemoveObjAction_default_instance_;
class FightStormBaseActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightStormBaseAction>
     _instance;
} _FightStormBaseAction_default_instance_;
class FightStormResActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightStormResAction>
     _instance;
} _FightStormResAction_default_instance_;
class FightStormFlagActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightStormFlagAction>
     _instance;
} _FightStormFlagAction_default_instance_;
class FightStormCampActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightStormCampAction>
     _instance;
} _FightStormCampAction_default_instance_;
class FightStormResultActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightStormResultAction>
     _instance;
} _FightStormResultAction_default_instance_;
class FightStormCampInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightStormCampInfo>
     _instance;
} _FightStormCampInfo_default_instance_;
class FightStormPlayerInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightStormPlayerInfo>
     _instance;
} _FightStormPlayerInfo_default_instance_;
class FightCreateActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightCreateAction>
     _instance;
} _FightCreateAction_default_instance_;
class FightQuickFinishActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightQuickFinishAction>
     _instance;
} _FightQuickFinishAction_default_instance_;
class FightFinishLevelActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightFinishLevelAction>
     _instance;
} _FightFinishLevelAction_default_instance_;
class FightTowerLockActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightTowerLockAction>
     _instance;
} _FightTowerLockAction_default_instance_;
class FightStormStartActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightStormStartAction>
     _instance;
} _FightStormStartAction_default_instance_;
class FightEscapeStartActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightEscapeStartAction>
     _instance;
} _FightEscapeStartAction_default_instance_;
class FightEscapeResultActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightEscapeResultAction>
     _instance;
} _FightEscapeResultAction_default_instance_;
class FightGMAddHpActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightGMAddHpAction>
     _instance;
} _FightGMAddHpAction_default_instance_;
class FightTRandSkillActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightTRandSkillAction>
     _instance;
} _FightTRandSkillAction_default_instance_;
class FightGuildDBeginActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightGuildDBeginAction>
     _instance;
} _FightGuildDBeginAction_default_instance_;
class FightGuildDEndActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightGuildDEndAction>
     _instance;
} _FightGuildDEndAction_default_instance_;
class FightTransferActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightTransferAction>
     _instance;
} _FightTransferAction_default_instance_;
class FightHeroFightInfoActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightHeroFightInfoAction>
     _instance;
} _FightHeroFightInfoAction_default_instance_;
class FightGuildFightBeginActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightGuildFightBeginAction>
     _instance;
} _FightGuildFightBeginAction_default_instance_;
class FightGuildFightEndActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightGuildFightEndAction>
     _instance;
} _FightGuildFightEndAction_default_instance_;
class FightGuildFightHpActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightGuildFightHpAction>
     _instance;
} _FightGuildFightHpAction_default_instance_;
class FightEffectTranslateActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightEffectTranslateAction>
     _instance;
} _FightEffectTranslateAction_default_instance_;
class FightCollectActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightCollectAction>
     _instance;
} _FightCollectAction_default_instance_;
class FightCollectionShowEffectActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightCollectionShowEffectAction>
     _instance;
} _FightCollectionShowEffectAction_default_instance_;
class FightAutoFightActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightAutoFightAction>
     _instance;
} _FightAutoFightAction_default_instance_;
class FightUseItemActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightUseItemAction>
     _instance;
} _FightUseItemAction_default_instance_;
class FightStormKillEffectActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightStormKillEffectAction>
     _instance;
} _FightStormKillEffectAction_default_instance_;
class FightOneVSOneStartActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightOneVSOneStartAction>
     _instance;
} _FightOneVSOneStartAction_default_instance_;
class FightOneVSOneResultActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightOneVSOneResultAction>
     _instance;
} _FightOneVSOneResultAction_default_instance_;
class FightSightActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightSightAction>
     _instance;
} _FightSightAction_default_instance_;
class FightEventTriggerActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightEventTriggerAction>
     _instance;
} _FightEventTriggerAction_default_instance_;
class FightQuitActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightQuitAction>
     _instance;
} _FightQuitAction_default_instance_;
class FightProductActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightProductAction>
     _instance;
} _FightProductAction_default_instance_;
class FightStartEndActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FightStartEndAction>
     _instance;
} _FightStartEndAction_default_instance_;

namespace protobuf_FightRpc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[60];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcReadyAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcReadyAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcReadyReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcReadyReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcReadyReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcReadyReply, tick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcReadyReply, randnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcReadyReply, idhelper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcReadyReply, actionarr_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcActionNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcActionNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcActionNotify, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcActionNotify, frame_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcResultNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcResultNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcResultNotify, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcResultNotify, dengeonid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcResultNotify, star_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcResultNotify, fighttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcResultNotify, prizelist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcResultNotify, killlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcResultNotify, firststarlight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcResultNotify, secondstarlight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcResultNotify, thirdstarlight_),
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  5,
  6,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcEnterAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcEnterAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcEnterAsk, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcEnterAsk, dungeonkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcEnterAsk, sessionkey_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcEnterReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcEnterReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcEnterReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcEnterReply, tick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcEnterReply, randnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcEnterReply, idhelper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcEnterReply, actionarr_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPrizeInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPrizeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPrizeInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPrizeInfo, count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightKillInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightKillInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightKillInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightKillInfo, count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcStartNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRpcStartNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUseSkillAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUseSkillAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUseSkillAction, objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUseSkillAction, skillid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUseSkillAction, posinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUseSkillAction, targetobjid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUseSkillAction, targetpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUseSkillAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUseSkillAction, v3pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUseSkillAction, time_),
  3,
  4,
  0,
  5,
  1,
  2,
  ~0u,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightBuffAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightBuffAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightBuffAction, objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightBuffAction, attackerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightBuffAction, optype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightBuffAction, buffid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightBuffAction, remaintime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightBuffAction, bufflv_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharHitAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharHitAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharHitAction, objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharHitAction, skillid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharHitAction, targetlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharHitAction, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharHitAction, posinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharHitAction, backdir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharHitAction, segmentindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharHitAction, attacksegment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharHitAction, ishitground_),
  4,
  5,
  ~0u,
  6,
  0,
  1,
  7,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightOfflineAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightOfflineAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightOfflineAction, objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightOfflineAction, isoffline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightOfflineAction, isaidelegate_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStateAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStateAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStateAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStateAction, objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStateAction, posinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStateAction, targetpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStateAction, intpara_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStateAction, ladderobjid_),
  2,
  3,
  0,
  1,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharDeadAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharDeadAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharDeadAction, objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharDeadAction, posinfo_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharReviveAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharReviveAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharReviveAction, objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharReviveAction, posinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharReviveAction, curhp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharReviveAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharReviveAction, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharReviveAction, manualrevive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharReviveAction, remaintimes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharReviveAction, needmoney_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharReviveAction, maxhp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCharReviveAction, totaltimes_),
  4,
  0,
  1,
  5,
  6,
  2,
  7,
  8,
  3,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHitTargetInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHitTargetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHitTargetInfo, objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHitTargetInfo, posinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHitTargetInfo, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHitTargetInfo, enemyindex_),
  2,
  0,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightComboSkillAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightComboSkillAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightComboSkillAction, objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightComboSkillAction, skillid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightComboSkillAction, flag_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEndSkillAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEndSkillAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEndSkillAction, objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEndSkillAction, skillid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEndSkillAction, posinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEndSkillAction, comboskillid_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCityAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCityAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCityAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCityAction, objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCityAction, posinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCityAction, targetpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCityAction, intpara_),
  3,
  4,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightSnipeAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightSnipeAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightSnipeAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightSnipeAction, objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightSnipeAction, targetpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightSnipeAction, campid_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHurtAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHurtAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHurtAction, objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHurtAction, skillid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHurtAction, attackback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHurtAction, attackair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHurtAction, backdir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHurtAction, targetobjid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHurtAction, ownhp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHurtAction, targethp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHurtAction, ownhpchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHurtAction, targethpchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHurtAction, iscrit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHurtAction, totaldamage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHurtAction, segmentindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHurtAction, hurttype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHurtAction, attacksegment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHurtAction, ishitground_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHurtAction, targetmaxhp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHurtAction, enemyindex_),
  6,
  7,
  1,
  2,
  0,
  8,
  9,
  10,
  11,
  12,
  3,
  13,
  14,
  15,
  16,
  4,
  17,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightDodgeAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightDodgeAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightDodgeAction, objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightDodgeAction, skillid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightDodgeAction, attackerobjid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightDodgeAction, type_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRemoveObjAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRemoveObjAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRemoveObjAction, objid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormBaseAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormBaseAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormBaseAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormBaseAction, mark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormBaseAction, campid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormBaseAction, objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormBaseAction, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormBaseAction, name_),
  2,
  3,
  4,
  5,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormResAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormResAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormResAction, baseid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormResAction, campid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormResAction, updatenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormResAction, totalnum_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormFlagAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormFlagAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormFlagAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormFlagAction, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormFlagAction, flagobjid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormFlagAction, objid1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormFlagAction, objid2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormFlagAction, result_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormCampAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormCampAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormCampAction, objarr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormCampAction, campid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormCampAction, totalnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormCampAction, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormCampAction, type_),
  ~0u,
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormResultAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormResultAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormResultAction, camparr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormResultAction, issvrsend_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormCampInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormCampInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormCampInfo, playerarr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormCampInfo, campid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormCampInfo, totalnum_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormPlayerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormPlayerInfo, killednum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormPlayerInfo, deadtimes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormPlayerInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormPlayerInfo, flagtimes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormPlayerInfo, prof_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormPlayerInfo, outputdamage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormPlayerInfo, enduredamage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormPlayerInfo, treatdamage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormPlayerInfo, objid_),
  1,
  2,
  0,
  3,
  6,
  4,
  5,
  8,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCreateAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCreateAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCreateAction, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCreateAction, configid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCreateAction, objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCreateAction, posinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCreateAction, objtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCreateAction, campid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCreateAction, posinfo2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCreateAction, intparalist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCreateAction, floatparalist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCreateAction, curstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCreateAction, curhp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCreateAction, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCreateAction, equipbuffarr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCreateAction, equipskillarr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCreateAction, attrarr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCreateAction, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCreateAction, tabletype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCreateAction, isshoweffect_),
  4,
  5,
  6,
  0,
  7,
  8,
  1,
  ~0u,
  ~0u,
  9,
  10,
  2,
  ~0u,
  ~0u,
  ~0u,
  11,
  12,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightQuickFinishAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightQuickFinishAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightQuickFinishAction, type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightFinishLevelAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightFinishLevelAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightFinishLevelAction, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightFinishLevelAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightFinishLevelAction, wallobjid_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightTowerLockAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightTowerLockAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightTowerLockAction, targetobjid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightTowerLockAction, objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightTowerLockAction, type_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormStartAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormStartAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormStartAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormStartAction, time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEscapeStartAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEscapeStartAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEscapeStartAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEscapeStartAction, time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEscapeResultAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEscapeResultAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEscapeResultAction, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGMAddHpAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGMAddHpAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGMAddHpAction, objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGMAddHpAction, addnum_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightTRandSkillAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightTRandSkillAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGuildDBeginAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGuildDBeginAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGuildDBeginAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGuildDBeginAction, time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGuildDEndAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGuildDEndAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGuildDEndAction, time_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightTransferAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightTransferAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightTransferAction, dungeonid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightTransferAction, dungeontype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightTransferAction, birthpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightTransferAction, facedir_),
  2,
  3,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHeroFightInfoAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHeroFightInfoAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHeroFightInfoAction, heroinfoarr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHeroFightInfoAction, functionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHeroFightInfoAction, mycampid_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGuildFightBeginAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGuildFightBeginAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGuildFightBeginAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGuildFightBeginAction, time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGuildFightEndAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGuildFightEndAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGuildFightEndAction, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGuildFightEndAction, victorycampid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGuildFightHpAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGuildFightHpAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGuildFightHpAction, campid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGuildFightHpAction, maxhp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightGuildFightHpAction, curhp_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEffectTranslateAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEffectTranslateAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEffectTranslateAction, objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEffectTranslateAction, objtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEffectTranslateAction, targetobjid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEffectTranslateAction, targetpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEffectTranslateAction, angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEffectTranslateAction, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEffectTranslateAction, distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEffectTranslateAction, posinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEffectTranslateAction, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEffectTranslateAction, skillid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEffectTranslateAction, segementindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEffectTranslateAction, spritename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEffectTranslateAction, bullettype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEffectTranslateAction, isirregularityeffect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEffectTranslateAction, translatetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEffectTranslateAction, time_),
  6,
  7,
  8,
  0,
  9,
  10,
  11,
  1,
  3,
  12,
  13,
  2,
  14,
  4,
  5,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCollectAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCollectAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCollectAction, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCollectAction, player_objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCollectAction, collection_objid_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCollectionShowEffectAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCollectionShowEffectAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCollectionShowEffectAction, objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightCollectionShowEffectAction, isshoweffect_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAutoFightAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAutoFightAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAutoFightAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightAutoFightAction, objid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUseItemAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUseItemAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUseItemAction, templateid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUseItemAction, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightUseItemAction, player_objid_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormKillEffectAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormKillEffectAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormKillEffectAction, objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStormKillEffectAction, num_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightOneVSOneStartAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightOneVSOneStartAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightOneVSOneStartAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightOneVSOneStartAction, time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightOneVSOneResultAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightOneVSOneResultAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightOneVSOneResultAction, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightSightAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightSightAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightSightAction, actionarr_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEventTriggerAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEventTriggerAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightEventTriggerAction, eventid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightQuitAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightQuitAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightQuitAction, type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightProductAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightProductAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightProductAction, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightProductAction, lifeskillid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightProductAction, player_objid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightProductAction, productionid_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStartEndAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStartEndAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStartEndAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStartEndAction, time_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(FightRpcReadyAsk)},
  { 5, 15, sizeof(FightRpcReadyReply)},
  { 20, 27, sizeof(FightRpcActionNotify)},
  { 29, 43, sizeof(FightRpcResultNotify)},
  { 52, 60, sizeof(FightRpcEnterAsk)},
  { 63, 73, sizeof(FightRpcEnterReply)},
  { 78, 85, sizeof(FightPrizeInfo)},
  { 87, 94, sizeof(FightKillInfo)},
  { 96, 101, sizeof(FightRpcStartNotify)},
  { 101, 114, sizeof(FightUseSkillAction)},
  { 122, 133, sizeof(FightBuffAction)},
  { 139, 153, sizeof(FightCharHitAction)},
  { 162, 170, sizeof(FightOfflineAction)},
  { 173, 184, sizeof(FightStateAction)},
  { 190, 197, sizeof(FightCharDeadAction)},
  { 199, 214, sizeof(FightCharReviveAction)},
  { 224, 233, sizeof(FightHitTargetInfo)},
  { 237, 245, sizeof(FightComboSkillAction)},
  { 248, 257, sizeof(FightEndSkillAction)},
  { 261, 271, sizeof(FightCityAction)},
  { 276, 285, sizeof(FightSnipeAction)},
  { 289, 312, sizeof(FightHurtAction)},
  { 330, 339, sizeof(FightDodgeAction)},
  { 343, 349, sizeof(FightRemoveObjAction)},
  { 350, 361, sizeof(FightStormBaseAction)},
  { 367, 376, sizeof(FightStormResAction)},
  { 380, 391, sizeof(FightStormFlagAction)},
  { 397, 407, sizeof(FightStormCampAction)},
  { 412, 419, sizeof(FightStormResultAction)},
  { 421, 429, sizeof(FightStormCampInfo)},
  { 432, 446, sizeof(FightStormPlayerInfo)},
  { 455, 478, sizeof(FightCreateAction)},
  { 496, 502, sizeof(FightQuickFinishAction)},
  { 503, 511, sizeof(FightFinishLevelAction)},
  { 514, 522, sizeof(FightTowerLockAction)},
  { 525, 532, sizeof(FightStormStartAction)},
  { 534, 541, sizeof(FightEscapeStartAction)},
  { 543, 549, sizeof(FightEscapeResultAction)},
  { 550, 557, sizeof(FightGMAddHpAction)},
  { 559, 564, sizeof(FightTRandSkillAction)},
  { 564, 571, sizeof(FightGuildDBeginAction)},
  { 573, 579, sizeof(FightGuildDEndAction)},
  { 580, 589, sizeof(FightTransferAction)},
  { 593, 601, sizeof(FightHeroFightInfoAction)},
  { 604, 611, sizeof(FightGuildFightBeginAction)},
  { 613, 620, sizeof(FightGuildFightEndAction)},
  { 622, 630, sizeof(FightGuildFightHpAction)},
  { 633, 654, sizeof(FightEffectTranslateAction)},
  { 670, 678, sizeof(FightCollectAction)},
  { 681, 688, sizeof(FightCollectionShowEffectAction)},
  { 690, 697, sizeof(FightAutoFightAction)},
  { 699, 707, sizeof(FightUseItemAction)},
  { 710, 717, sizeof(FightStormKillEffectAction)},
  { 719, 726, sizeof(FightOneVSOneStartAction)},
  { 728, 734, sizeof(FightOneVSOneResultAction)},
  { 735, 741, sizeof(FightSightAction)},
  { 742, 748, sizeof(FightEventTriggerAction)},
  { 749, 755, sizeof(FightQuitAction)},
  { 756, 765, sizeof(FightProductAction)},
  { 769, 776, sizeof(FightStartEndAction)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightRpcReadyAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightRpcReadyReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightRpcActionNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightRpcResultNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightRpcEnterAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightRpcEnterReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightPrizeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightKillInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightRpcStartNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightUseSkillAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightBuffAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightCharHitAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightOfflineAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightStateAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightCharDeadAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightCharReviveAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightHitTargetInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightComboSkillAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightEndSkillAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightCityAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightSnipeAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightHurtAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightDodgeAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightRemoveObjAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightStormBaseAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightStormResAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightStormFlagAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightStormCampAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightStormResultAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightStormCampInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightStormPlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightCreateAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightQuickFinishAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightFinishLevelAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightTowerLockAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightStormStartAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightEscapeStartAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightEscapeResultAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightGMAddHpAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightTRandSkillAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightGuildDBeginAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightGuildDEndAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightTransferAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightHeroFightInfoAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightGuildFightBeginAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightGuildFightEndAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightGuildFightHpAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightEffectTranslateAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightCollectAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightCollectionShowEffectAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightAutoFightAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightUseItemAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightStormKillEffectAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightOneVSOneStartAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightOneVSOneResultAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightSightAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightEventTriggerAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightQuitAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightProductAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FightStartEndAction_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "FightRpc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 60);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_PublicStruct_2eproto::InitDefaults();
  _FightRpcReadyAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightRpcReadyAsk_default_instance_);_FightRpcReadyReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightRpcReadyReply_default_instance_);_FightRpcActionNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightRpcActionNotify_default_instance_);_FightRpcResultNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightRpcResultNotify_default_instance_);_FightRpcEnterAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightRpcEnterAsk_default_instance_);_FightRpcEnterReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightRpcEnterReply_default_instance_);_FightPrizeInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightPrizeInfo_default_instance_);_FightKillInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightKillInfo_default_instance_);_FightRpcStartNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightRpcStartNotify_default_instance_);_FightUseSkillAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightUseSkillAction_default_instance_);_FightBuffAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightBuffAction_default_instance_);_FightCharHitAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightCharHitAction_default_instance_);_FightOfflineAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightOfflineAction_default_instance_);_FightStateAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightStateAction_default_instance_);_FightCharDeadAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightCharDeadAction_default_instance_);_FightCharReviveAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightCharReviveAction_default_instance_);_FightHitTargetInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightHitTargetInfo_default_instance_);_FightComboSkillAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightComboSkillAction_default_instance_);_FightEndSkillAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightEndSkillAction_default_instance_);_FightCityAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightCityAction_default_instance_);_FightSnipeAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightSnipeAction_default_instance_);_FightHurtAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightHurtAction_default_instance_);_FightDodgeAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightDodgeAction_default_instance_);_FightRemoveObjAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightRemoveObjAction_default_instance_);_FightStormBaseAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightStormBaseAction_default_instance_);_FightStormResAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightStormResAction_default_instance_);_FightStormFlagAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightStormFlagAction_default_instance_);_FightStormCampAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightStormCampAction_default_instance_);_FightStormResultAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightStormResultAction_default_instance_);_FightStormCampInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightStormCampInfo_default_instance_);_FightStormPlayerInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightStormPlayerInfo_default_instance_);_FightCreateAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightCreateAction_default_instance_);_FightQuickFinishAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightQuickFinishAction_default_instance_);_FightFinishLevelAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightFinishLevelAction_default_instance_);_FightTowerLockAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightTowerLockAction_default_instance_);_FightStormStartAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightStormStartAction_default_instance_);_FightEscapeStartAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightEscapeStartAction_default_instance_);_FightEscapeResultAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightEscapeResultAction_default_instance_);_FightGMAddHpAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightGMAddHpAction_default_instance_);_FightTRandSkillAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightTRandSkillAction_default_instance_);_FightGuildDBeginAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightGuildDBeginAction_default_instance_);_FightGuildDEndAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightGuildDEndAction_default_instance_);_FightTransferAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightTransferAction_default_instance_);_FightHeroFightInfoAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightHeroFightInfoAction_default_instance_);_FightGuildFightBeginAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightGuildFightBeginAction_default_instance_);_FightGuildFightEndAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightGuildFightEndAction_default_instance_);_FightGuildFightHpAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightGuildFightHpAction_default_instance_);_FightEffectTranslateAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightEffectTranslateAction_default_instance_);_FightCollectAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightCollectAction_default_instance_);_FightCollectionShowEffectAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightCollectionShowEffectAction_default_instance_);_FightAutoFightAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightAutoFightAction_default_instance_);_FightUseItemAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightUseItemAction_default_instance_);_FightStormKillEffectAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightStormKillEffectAction_default_instance_);_FightOneVSOneStartAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightOneVSOneStartAction_default_instance_);_FightOneVSOneResultAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightOneVSOneResultAction_default_instance_);_FightSightAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightSightAction_default_instance_);_FightEventTriggerAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightEventTriggerAction_default_instance_);_FightQuitAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightQuitAction_default_instance_);_FightProductAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightProductAction_default_instance_);_FightStartEndAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FightStartEndAction_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016FightRpc.proto\032\022PublicStruct.proto\"\022\n\020"
      "FightRpcReadyAsk\"{\n\022FightRpcReadyReply\022\025"
      "\n\006Result\030\001 \001(\021:\005-9999\022\020\n\004Tick\030\002 \001(\021:\002-1\022"
      "\023\n\007RandNum\030\003 \001(\021:\002-1\022\024\n\010IdHelper\030\004 \001(\021:\002"
      "-1\022\021\n\tActionArr\030\005 \003(\014\"7\n\024FightRpcActionN"
      "otify\022\014\n\004Data\030\001 \001(\014\022\021\n\005Frame\030\002 \001(\021:\002-1\"\205"
      "\002\n\024FightRpcResultNotify\022\022\n\006Result\030\001 \001(\021:"
      "\002-1\022\025\n\tDengeonId\030\002 \001(\021:\002-1\022\020\n\004Star\030\004 \001(\021"
      ":\002-1\022\025\n\tFightTime\030\005 \001(\021:\002-1\022\"\n\tPrizeList"
      "\030\006 \003(\0132\017.FightPrizeInfo\022 \n\010KillList\030\007 \003("
      "\0132\016.FightKillInfo\022\032\n\016FirstStarLight\030\010 \001("
      "\021:\002-1\022\033\n\017SecondStarLight\030\t \001(\021:\002-1\022\032\n\016Th"
      "irdStarLight\030\n \001(\021:\002-1\"N\n\020FightRpcEnterA"
      "sk\022\022\n\006UserId\030\001 \001(\022:\002-1\022\022\n\nDungeonKey\030\002 \001"
      "(\t\022\022\n\nSessionKey\030\003 \001(\t\"{\n\022FightRpcEnterR"
      "eply\022\025\n\006Result\030\001 \001(\021:\005-9999\022\020\n\004Tick\030\002 \001("
      "\021:\002-1\022\023\n\007RandNum\030\003 \001(\021:\002-1\022\024\n\010IdHelper\030\004"
      " \001(\021:\002-1\022\021\n\tActionArr\030\005 \003(\014\"3\n\016FightPriz"
      "eInfo\022\016\n\002Id\030\001 \001(\021:\002-1\022\021\n\005Count\030\002 \001(\021:\002-1"
      "\"2\n\rFightKillInfo\022\016\n\002Id\030\001 \001(\021:\002-1\022\021\n\005Cou"
      "nt\030\002 \001(\021:\002-1\"\025\n\023FightRpcStartNotify\"\254\001\n\023"
      "FightUseSkillAction\022\021\n\005ObjId\030\001 \001(\021:\002-1\022\023"
      "\n\007SkillId\030\002 \001(\021:\002-1\022\017\n\007PosInfo\030\003 \001(\014\022\027\n\013"
      "TargetObjId\030\004 \001(\021:\002-1\022\021\n\tTargetPos\030\005 \001(\014"
      "\022\017\n\004Type\030\006 \001(\021:\0010\022\r\n\005V3Pos\030\007 \003(\002\022\020\n\004Time"
      "\030\010 \001(\021:\002-1\"\220\001\n\017FightBuffAction\022\021\n\005ObjId\030"
      "\002 \001(\021:\002-1\022\026\n\nAttackerId\030\003 \001(\021:\002-1\022\022\n\006OpT"
      "ype\030\004 \001(\021:\002-1\022\022\n\006BuffId\030\005 \001(\021:\002-1\022\026\n\nRem"
      "ainTime\030\007 \001(\021:\002-1\022\022\n\006BuffLv\030\010 \001(\021:\002-1\"\354\001"
      "\n\022FightCharHitAction\022\021\n\005ObjId\030\002 \001(\021:\002-1\022"
      "\023\n\007SkillId\030\003 \001(\021:\002-1\022\'\n\nTargetList\030\007 \003(\013"
      "2\023.FightHitTargetInfo\022\017\n\003Seq\030\010 \001(\021:\002-1\022\017"
      "\n\007PosInfo\030\013 \001(\014\022\022\n\007BackDir\030\031 \001(\021:\0010\022\030\n\014S"
      "egmentIndex\030\036 \001(\021:\002-1\022\031\n\rAttackSegment\030\037"
      " \001(\021:\002-1\022\032\n\013IsHitGround\030  \001(\010:\005false\"^\n\022"
      "FightOfflineAction\022\021\n\005ObjId\030\001 \001(\021:\002-1\022\030\n"
      "\tIsOffline\030\002 \001(\010:\005false\022\033\n\014IsAIDelegate\030"
      "\003 \001(\010:\005false\"\211\001\n\020FightStateAction\022\020\n\004Typ"
      "e\030\001 \001(\021:\002-1\022\021\n\005ObjId\030\002 \001(\021:\002-1\022\017\n\007PosInf"
      "o\030\003 \001(\014\022\021\n\tTargetPos\030\004 \001(\014\022\023\n\007IntPara\030\005 "
      "\001(\021:\002-1\022\027\n\013LadderObjId\030\006 \001(\021:\002-1\"9\n\023Figh"
      "tCharDeadAction\022\021\n\005ObjId\030\001 \001(\021:\002-1\022\017\n\007Po"
      "sInfo\030\002 \001(\014\"\344\001\n\025FightCharReviveAction\022\021\n"
      "\005ObjId\030\001 \001(\021:\002-1\022\017\n\007PosInfo\030\002 \001(\014\022\020\n\005Cur"
      "Hp\030\003 \001(\021:\0010\022\020\n\004Type\030\004 \001(\021:\002-1\022\020\n\004Time\030\005 "
      "\001(\021:\002-1\022\027\n\014ManualRevive\030\006 \001(\021:\0010\022\027\n\013Rema"
      "inTimes\030\007 \001(\021:\002-1\022\025\n\tNeedMoney\030\010 \001(\021:\002-1"
      "\022\020\n\005MaxHP\030\n \001(\021:\0010\022\026\n\nTotalTimes\030\013 \001(\021:\002"
      "-1\"a\n\022FightHitTargetInfo\022\021\n\005ObjId\030\001 \001(\021:"
      "\002-1\022\017\n\007PosInfo\030\002 \001(\014\022\017\n\004Flag\030\003 \001(\021:\0010\022\026\n"
      "\nEnemyIndex\030\005 \001(\021:\002-1\"Q\n\025FightComboSkill"
      "Action\022\021\n\005ObjId\030\002 \001(\021:\002-1\022\023\n\007SkillId\030\003 \001"
      "(\021:\002-1\022\020\n\004Flag\030\004 \001(\021:\002-1\"h\n\023FightEndSkil"
      "lAction\022\021\n\005ObjId\030\001 \001(\021:\002-1\022\023\n\007SkillId\030\002 "
      "\001(\021:\002-1\022\017\n\007PosInfo\030\003 \001(\014\022\030\n\014ComboSkillId"
      "\030\004 \001(\021:\002-1\"o\n\017FightCityAction\022\020\n\004Type\030\001 "
      "\001(\021:\002-1\022\021\n\005ObjId\030\002 \001(\021:\002-1\022\017\n\007PosInfo\030\003 "
      "\001(\014\022\021\n\tTargetPos\030\004 \001(\014\022\023\n\007IntPara\030\005 \001(\021:"
      "\002-1\"^\n\020FightSnipeAction\022\020\n\004Type\030\001 \001(\021:\002-"
      "1\022\021\n\005ObjId\030\002 \001(\021:\002-1\022\021\n\tTargetPos\030\003 \001(\014\022"
      "\022\n\006CampId\030\004 \001(\021:\002-1\"\301\003\n\017FightHurtAction\022"
      "\021\n\005ObjId\030\001 \001(\021:\002-1\022\023\n\007SkillId\030\002 \001(\021:\002-1\022"
      "\031\n\nAttackBack\030\003 \001(\010:\005false\022\030\n\tAttackAir\030"
      "\006 \001(\010:\005false\022\022\n\007BackDir\030\017 \001(\021:\0010\022\027\n\013Targ"
      "etObjId\030\020 \001(\021:\002-1\022\021\n\005OwnHP\030\021 \001(\021:\002-1\022\024\n\010"
      "TargetHP\030\022 \001(\021:\002-1\022\027\n\013OwnHPChange\030\023 \001(\021:"
      "\002-1\022\032\n\016TargetHPChange\030\024 \001(\021:\002-1\022\025\n\006IsCri"
      "t\030\027 \001(\010:\005false\022\027\n\013TotalDamage\030\030 \001(\021:\002-1\022"
      "\030\n\014SegmentIndex\030\036 \001(\021:\002-1\022\024\n\010HurtType\030\037 "
      "\001(\021:\002-1\022\031\n\rAttackSegment\030  \001(\021:\002-1\022\032\n\013Is"
      "HitGround\030! \001(\010:\005false\022\027\n\013TargetMaxHP\030\" "
      "\001(\021:\002-1\022\026\n\nEnemyIndex\030# \001(\021:\002-1\"f\n\020Fight"
      "DodgeAction\022\021\n\005ObjId\030\001 \001(\021:\002-1\022\023\n\007SkillI"
      "d\030\002 \001(\021:\002-1\022\031\n\rAttackerObjId\030\003 \001(\021:\002-1\022\017"
      "\n\004Type\030\004 \001(\021:\0011\")\n\024FightRemoveObjAction\022"
      "\021\n\005ObjId\030\001 \001(\021:\002-1\"\177\n\024FightStormBaseActi"
      "on\022\020\n\004Type\030\001 \001(\021:\002-1\022\020\n\004Mark\030\002 \001(\021:\002-1\022\022"
      "\n\006CampId\030\003 \001(\021:\002-1\022\021\n\005ObjId\030\004 \001(\021:\002-1\022\016\n"
      "\002ID\030\005 \001(\021:\002-1\022\014\n\004Name\030\006 \001(\t\"j\n\023FightStor"
      "mResAction\022\022\n\006BaseId\030\001 \001(\021:\002-1\022\022\n\006CampId"
      "\030\002 \001(\021:\002-1\022\025\n\tUpdateNum\030\003 \001(\021:\002-1\022\024\n\010Tot"
      "alNum\030\004 \001(\021:\002-1\"\214\001\n\024FightStormFlagAction"
      "\022\017\n\004Type\030\001 \001(\021:\0011\022\020\n\004Time\030\002 \001(\021:\002-1\022\025\n\tF"
      "lagObjId\030\003 \001(\021:\002-1\022\022\n\006ObjId1\030\004 \001(\021:\002-1\022\022"
      "\n\006ObjId2\030\005 \001(\021:\002-1\022\022\n\006Result\030\006 \001(\021:\002-1\"t"
      "\n\024FightStormCampAction\022\016\n\006ObjArr\030\001 \003(\021\022\022"
      "\n\006CampId\030\002 \001(\021:\002-1\022\023\n\010TotalNum\030\003 \001(\021:\0010\022"
      "\021\n\005Color\030\004 \001(\021:\002-1\022\020\n\004Type\030\005 \001(\021:\002-1\"X\n\026"
      "FightStormResultAction\022$\n\007CampArr\030\001 \003(\0132"
      "\023.FightStormCampInfo\022\030\n\tIsSvrSend\030\003 \001(\010:"
      "\005false\"h\n\022FightStormCampInfo\022(\n\tPlayerAr"
      "r\030\001 \003(\0132\025.FightStormPlayerInfo\022\022\n\006CampId"
      "\030\002 \001(\021:\002-1\022\024\n\010TotalNum\030\003 \001(\021:\002-1\"\330\001\n\024Fig"
      "htStormPlayerInfo\022\024\n\tKilledNum\030\001 \001(\021:\0010\022"
      "\024\n\tDeadTimes\030\002 \001(\021:\0010\022\014\n\004Name\030\004 \001(\t\022\024\n\tF"
      "lagTimes\030\005 \001(\021:\0010\022\020\n\004Prof\030\006 \001(\021:\002-1\022\030\n\014O"
      "utputDamage\030\007 \001(\022:\002-1\022\030\n\014EndureDamage\030\010 "
      "\001(\022:\002-1\022\027\n\013TreatDamage\030\t \001(\022:\002-1\022\021\n\005ObjI"
      "d\030\n \001(\021:\002-1\"\264\003\n\021FightCreateAction\022\022\n\006Use"
      "rId\030\001 \001(\022:\002-1\022\024\n\010ConfigId\030\002 \001(\021:\002-1\022\021\n\005O"
      "bjId\030\003 \001(\021:\002-1\022\017\n\007PosInfo\030\004 \001(\014\022\023\n\007ObjTy"
      "pe\030\005 \001(\021:\002-1\022\022\n\006CampId\030\006 \001(\021:\002-1\022\020\n\010PosI"
      "nfo2\030\007 \001(\014\022\023\n\013IntParaList\030\010 \003(\021\022\025\n\rFloat"
      "ParaList\030\t \003(\002\022\024\n\010CurState\030\n \001(\021:\002-1\022\021\n\005"
      "CurHp\030\013 \001(\021:\002-1\022\014\n\004Name\030\014 \001(\t\022&\n\014EquipBu"
      "ffArr\030\r \003(\0132\020.EquipSkillBuff2\022\'\n\rEquipSk"
      "illArr\030\016 \003(\0132\020.EquipSkillBuff2\022\033\n\007AttrAr"
      "r\030\017 \003(\0132\n.KeyValue2\022\021\n\005Level\030\020 \001(\021:\002-1\022\025"
      "\n\tTableType\030\021 \001(\021:\002-1\022\033\n\014IsShowEffect\030\022 "
      "\001(\010:\005false\")\n\026FightQuickFinishAction\022\017\n\004"
      "Type\030\001 \001(\021:\0010\"T\n\026FightFinishLevelAction\022"
      "\022\n\006Result\030\001 \001(\021:\002-1\022\017\n\004Type\030\002 \001(\021:\0012\022\025\n\t"
      "WallObjId\030\003 \001(\021:\002-1\"S\n\024FightTowerLockAct"
      "ion\022\027\n\013TargetObjId\030\001 \001(\021:\002-1\022\021\n\005ObjId\030\002 "
      "\001(\021:\002-1\022\017\n\004Type\030\003 \001(\021:\0010\";\n\025FightStormSt"
      "artAction\022\020\n\004Type\030\001 \001(\021:\002-1\022\020\n\004Time\030\002 \001("
      "\021:\002-1\"<\n\026FightEscapeStartAction\022\020\n\004Type\030"
      "\001 \001(\021:\002-1\022\020\n\004Time\030\002 \001(\021:\002-1\"-\n\027FightEsca"
      "peResultAction\022\022\n\006Result\030\001 \001(\021:\002-1\";\n\022Fi"
      "ghtGMAddHpAction\022\021\n\005ObjId\030\001 \001(\021:\002-1\022\022\n\006A"
      "ddNum\030\002 \001(\021:\002-1\"\027\n\025FightTRandSkillAction"
      "\"<\n\026FightGuildDBeginAction\022\020\n\004Type\030\001 \001(\021"
      ":\002-1\022\020\n\004Time\030\002 \001(\021:\002-1\"(\n\024FightGuildDEnd"
      "Action\022\020\n\004Time\030\001 \001(\021:\002-1\"q\n\023FightTransfe"
      "rAction\022\025\n\tDungeonId\030\001 \001(\021:\002-1\022\027\n\013Dungeo"
      "nType\030\002 \001(\021:\002-1\022\026\n\nBirthPoint\030\003 \001(\021:\002-1\022"
      "\022\n\007FaceDir\030\004 \001(\021:\0010\"m\n\030FightHeroFightInf"
      "oAction\022#\n\013HeroInfoArr\030\001 \003(\0132\016.HeroFight"
      "Info\022\026\n\nFunctionId\030\002 \001(\021:\002-1\022\024\n\010MyCampId"
      "\030\003 \001(\021:\002-1\"@\n\032FightGuildFightBeginAction"
      "\022\020\n\004Type\030\001 \001(\021:\002-1\022\020\n\004Time\030\002 \001(\021:\002-1\"G\n\030"
      "FightGuildFightEndAction\022\020\n\004Time\030\001 \001(\021:\002"
      "-1\022\031\n\rVictoryCampId\030\002 \001(\021:\002-1\"Q\n\027FightGu"
      "ildFightHpAction\022\022\n\006CampId\030\001 \001(\021:\002-1\022\020\n\005"
      "MaxHp\030\002 \001(\021:\0010\022\020\n\005CurHp\030\003 \001(\021:\0010\"\375\002\n\032Fig"
      "htEffectTranslateAction\022\021\n\005ObjId\030\001 \001(\021:\002"
      "-1\022\023\n\007ObjType\030\002 \001(\021:\002-1\022\027\n\013TargetObjId\030\003"
      " \001(\021:\002-1\022\021\n\tTargetPos\030\004 \001(\014\022\021\n\005Angle\030\005 \001"
      "(\021:\002-1\022\021\n\005Speed\030\006 \001(\021:\002-1\022\024\n\010Distance\030\010 "
      "\001(\021:\002-1\022\017\n\007PosInfo\030\t \001(\014\022\021\n\006Status\030\n \001(\021"
      ":\0010\022\023\n\007SkillId\030\013 \001(\021:\002-1\022\031\n\rSegementInde"
      "x\030\014 \001(\021:\002-1\022\022\n\nSpriteName\030\r \001(\t\022\026\n\nBulle"
      "tType\030\016 \001(\021:\002-1\022#\n\024IsIrregularityEffect\030"
      "\017 \001(\010:\005false\022\030\n\rTranslateType\030\021 \001(\021:\0010\022\020"
      "\n\004Time\030\022 \001(\002:\002-1\"_\n\022FightCollectAction\022\021"
      "\n\006Status\030\001 \001(\021:\0011\022\030\n\014Player_ObjId\030\002 \001(\021:"
      "\002-1\022\034\n\020Collection_ObjId\030\003 \001(\021:\002-1\"Q\n\037Fig"
      "htCollectionShowEffectAction\022\021\n\005ObjId\030\001 "
      "\001(\021:\002-1\022\033\n\014IsShowEffect\030\002 \001(\010:\005false\":\n\024"
      "FightAutoFightAction\022\017\n\004Type\030\001 \001(\021:\0010\022\021\n"
      "\005ObjId\030\002 \001(\021:\002-1\"Y\n\022FightUseItemAction\022\026"
      "\n\nTemplateId\030\001 \001(\021:\002-1\022\021\n\006Status\030\002 \001(\021:\001"
      "1\022\030\n\014Player_ObjId\030\003 \001(\021:\002-1\"@\n\032FightStor"
      "mKillEffectAction\022\021\n\005ObjId\030\001 \001(\021:\002-1\022\017\n\003"
      "Num\030\002 \001(\021:\002-1\">\n\030FightOneVSOneStartActio"
      "n\022\020\n\004Type\030\001 \001(\021:\002-1\022\020\n\004Time\030\002 \001(\021:\002-1\"/\n"
      "\031FightOneVSOneResultAction\022\022\n\006Result\030\001 \001"
      "(\021:\002-1\"%\n\020FightSightAction\022\021\n\tActionArr\030"
      "\002 \003(\014\".\n\027FightEventTriggerAction\022\023\n\007Even"
      "tId\030\001 \001(\021:\002-1\"\"\n\017FightQuitAction\022\017\n\004Type"
      "\030\001 \001(\021:\0010\"u\n\022FightProductAction\022\022\n\006Statu"
      "s\030\001 \001(\021:\002-1\022\027\n\013LifeSkillId\030\003 \001(\021:\002-1\022\030\n\014"
      "Player_ObjId\030\005 \001(\021:\002-1\022\030\n\014ProductionId\030\t"
      " \001(\021:\002-1\"7\n\023FightStartEndAction\022\017\n\004Type\030"
      "\001 \001(\021:\0010\022\017\n\004Time\030\002 \001(\021:\0010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6585);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FightRpc.proto", &protobuf_RegisterTypes);
  ::protobuf_PublicStruct_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_FightRpc_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightRpcReadyAsk::FightRpcReadyAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightRpcReadyAsk)
}
FightRpcReadyAsk::FightRpcReadyAsk(const FightRpcReadyAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FightRpcReadyAsk)
}

void FightRpcReadyAsk::SharedCtor() {
  _cached_size_ = 0;
}

FightRpcReadyAsk::~FightRpcReadyAsk() {
  // @@protoc_insertion_point(destructor:FightRpcReadyAsk)
  SharedDtor();
}

void FightRpcReadyAsk::SharedDtor() {
}

void FightRpcReadyAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightRpcReadyAsk::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightRpcReadyAsk& FightRpcReadyAsk::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightRpcReadyAsk* FightRpcReadyAsk::New(::google::protobuf::Arena* arena) const {
  FightRpcReadyAsk* n = new FightRpcReadyAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightRpcReadyAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:FightRpcReadyAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightRpcReadyAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightRpcReadyAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:FightRpcReadyAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightRpcReadyAsk)
  return false;
#undef DO_
}

void FightRpcReadyAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightRpcReadyAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightRpcReadyAsk)
}

::google::protobuf::uint8* FightRpcReadyAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightRpcReadyAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightRpcReadyAsk)
  return target;
}

size_t FightRpcReadyAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightRpcReadyAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRpcReadyAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightRpcReadyAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const FightRpcReadyAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightRpcReadyAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightRpcReadyAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightRpcReadyAsk)
    MergeFrom(*source);
  }
}

void FightRpcReadyAsk::MergeFrom(const FightRpcReadyAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightRpcReadyAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FightRpcReadyAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightRpcReadyAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightRpcReadyAsk::CopyFrom(const FightRpcReadyAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightRpcReadyAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRpcReadyAsk::IsInitialized() const {
  return true;
}

void FightRpcReadyAsk::Swap(FightRpcReadyAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightRpcReadyAsk::InternalSwap(FightRpcReadyAsk* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightRpcReadyAsk::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightRpcReadyAsk

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightRpcReadyReply::kResultFieldNumber;
const int FightRpcReadyReply::kTickFieldNumber;
const int FightRpcReadyReply::kRandNumFieldNumber;
const int FightRpcReadyReply::kIdHelperFieldNumber;
const int FightRpcReadyReply::kActionArrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightRpcReadyReply::FightRpcReadyReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightRpcReadyReply)
}
FightRpcReadyReply::FightRpcReadyReply(const FightRpcReadyReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      actionarr_(from.actionarr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&idhelper_) -
    reinterpret_cast<char*>(&result_)) + sizeof(idhelper_));
  // @@protoc_insertion_point(copy_constructor:FightRpcReadyReply)
}

void FightRpcReadyReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  tick_ = -1;
  randnum_ = -1;
  idhelper_ = -1;
}

FightRpcReadyReply::~FightRpcReadyReply() {
  // @@protoc_insertion_point(destructor:FightRpcReadyReply)
  SharedDtor();
}

void FightRpcReadyReply::SharedDtor() {
}

void FightRpcReadyReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightRpcReadyReply::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightRpcReadyReply& FightRpcReadyReply::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightRpcReadyReply* FightRpcReadyReply::New(::google::protobuf::Arena* arena) const {
  FightRpcReadyReply* n = new FightRpcReadyReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightRpcReadyReply::Clear() {
// @@protoc_insertion_point(message_clear_start:FightRpcReadyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actionarr_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    result_ = -9999;
    tick_ = -1;
    randnum_ = -1;
    idhelper_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightRpcReadyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightRpcReadyReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Tick = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 RandNum = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_randnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &randnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 IdHelper = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_idhelper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &idhelper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes ActionArr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_actionarr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightRpcReadyReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightRpcReadyReply)
  return false;
#undef DO_
}

void FightRpcReadyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightRpcReadyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 Tick = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->tick(), output);
  }

  // optional sint32 RandNum = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->randnum(), output);
  }

  // optional sint32 IdHelper = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->idhelper(), output);
  }

  // repeated bytes ActionArr = 5;
  for (int i = 0, n = this->actionarr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->actionarr(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightRpcReadyReply)
}

::google::protobuf::uint8* FightRpcReadyReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightRpcReadyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 Tick = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->tick(), target);
  }

  // optional sint32 RandNum = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->randnum(), target);
  }

  // optional sint32 IdHelper = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->idhelper(), target);
  }

  // repeated bytes ActionArr = 5;
  for (int i = 0, n = this->actionarr_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->actionarr(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightRpcReadyReply)
  return target;
}

size_t FightRpcReadyReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightRpcReadyReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated bytes ActionArr = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->actionarr_size());
  for (int i = 0, n = this->actionarr_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->actionarr(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 Tick = 2 [default = -1];
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->tick());
    }

    // optional sint32 RandNum = 3 [default = -1];
    if (has_randnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->randnum());
    }

    // optional sint32 IdHelper = 4 [default = -1];
    if (has_idhelper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->idhelper());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRpcReadyReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightRpcReadyReply)
  GOOGLE_DCHECK_NE(&from, this);
  const FightRpcReadyReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightRpcReadyReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightRpcReadyReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightRpcReadyReply)
    MergeFrom(*source);
  }
}

void FightRpcReadyReply::MergeFrom(const FightRpcReadyReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightRpcReadyReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actionarr_.MergeFrom(from.actionarr_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      tick_ = from.tick_;
    }
    if (cached_has_bits & 0x00000004u) {
      randnum_ = from.randnum_;
    }
    if (cached_has_bits & 0x00000008u) {
      idhelper_ = from.idhelper_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightRpcReadyReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightRpcReadyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightRpcReadyReply::CopyFrom(const FightRpcReadyReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightRpcReadyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRpcReadyReply::IsInitialized() const {
  return true;
}

void FightRpcReadyReply::Swap(FightRpcReadyReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightRpcReadyReply::InternalSwap(FightRpcReadyReply* other) {
  using std::swap;
  actionarr_.InternalSwap(&other->actionarr_);
  swap(result_, other->result_);
  swap(tick_, other->tick_);
  swap(randnum_, other->randnum_);
  swap(idhelper_, other->idhelper_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightRpcReadyReply::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightRpcReadyReply

// optional sint32 Result = 1 [default = -9999];
bool FightRpcReadyReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightRpcReadyReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void FightRpcReadyReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightRpcReadyReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 FightRpcReadyReply::result() const {
  // @@protoc_insertion_point(field_get:FightRpcReadyReply.Result)
  return result_;
}
void FightRpcReadyReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FightRpcReadyReply.Result)
}

// optional sint32 Tick = 2 [default = -1];
bool FightRpcReadyReply::has_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightRpcReadyReply::set_has_tick() {
  _has_bits_[0] |= 0x00000002u;
}
void FightRpcReadyReply::clear_has_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightRpcReadyReply::clear_tick() {
  tick_ = -1;
  clear_has_tick();
}
::google::protobuf::int32 FightRpcReadyReply::tick() const {
  // @@protoc_insertion_point(field_get:FightRpcReadyReply.Tick)
  return tick_;
}
void FightRpcReadyReply::set_tick(::google::protobuf::int32 value) {
  set_has_tick();
  tick_ = value;
  // @@protoc_insertion_point(field_set:FightRpcReadyReply.Tick)
}

// optional sint32 RandNum = 3 [default = -1];
bool FightRpcReadyReply::has_randnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightRpcReadyReply::set_has_randnum() {
  _has_bits_[0] |= 0x00000004u;
}
void FightRpcReadyReply::clear_has_randnum() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightRpcReadyReply::clear_randnum() {
  randnum_ = -1;
  clear_has_randnum();
}
::google::protobuf::int32 FightRpcReadyReply::randnum() const {
  // @@protoc_insertion_point(field_get:FightRpcReadyReply.RandNum)
  return randnum_;
}
void FightRpcReadyReply::set_randnum(::google::protobuf::int32 value) {
  set_has_randnum();
  randnum_ = value;
  // @@protoc_insertion_point(field_set:FightRpcReadyReply.RandNum)
}

// optional sint32 IdHelper = 4 [default = -1];
bool FightRpcReadyReply::has_idhelper() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightRpcReadyReply::set_has_idhelper() {
  _has_bits_[0] |= 0x00000008u;
}
void FightRpcReadyReply::clear_has_idhelper() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightRpcReadyReply::clear_idhelper() {
  idhelper_ = -1;
  clear_has_idhelper();
}
::google::protobuf::int32 FightRpcReadyReply::idhelper() const {
  // @@protoc_insertion_point(field_get:FightRpcReadyReply.IdHelper)
  return idhelper_;
}
void FightRpcReadyReply::set_idhelper(::google::protobuf::int32 value) {
  set_has_idhelper();
  idhelper_ = value;
  // @@protoc_insertion_point(field_set:FightRpcReadyReply.IdHelper)
}

// repeated bytes ActionArr = 5;
int FightRpcReadyReply::actionarr_size() const {
  return actionarr_.size();
}
void FightRpcReadyReply::clear_actionarr() {
  actionarr_.Clear();
}
const ::std::string& FightRpcReadyReply::actionarr(int index) const {
  // @@protoc_insertion_point(field_get:FightRpcReadyReply.ActionArr)
  return actionarr_.Get(index);
}
::std::string* FightRpcReadyReply::mutable_actionarr(int index) {
  // @@protoc_insertion_point(field_mutable:FightRpcReadyReply.ActionArr)
  return actionarr_.Mutable(index);
}
void FightRpcReadyReply::set_actionarr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:FightRpcReadyReply.ActionArr)
  actionarr_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void FightRpcReadyReply::set_actionarr(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:FightRpcReadyReply.ActionArr)
  actionarr_.Mutable(index)->assign(std::move(value));
}
#endif
void FightRpcReadyReply::set_actionarr(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actionarr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FightRpcReadyReply.ActionArr)
}
void FightRpcReadyReply::set_actionarr(int index, const void* value, size_t size) {
  actionarr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FightRpcReadyReply.ActionArr)
}
::std::string* FightRpcReadyReply::add_actionarr() {
  // @@protoc_insertion_point(field_add_mutable:FightRpcReadyReply.ActionArr)
  return actionarr_.Add();
}
void FightRpcReadyReply::add_actionarr(const ::std::string& value) {
  actionarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FightRpcReadyReply.ActionArr)
}
#if LANG_CXX11
void FightRpcReadyReply::add_actionarr(::std::string&& value) {
  actionarr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FightRpcReadyReply.ActionArr)
}
#endif
void FightRpcReadyReply::add_actionarr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actionarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FightRpcReadyReply.ActionArr)
}
void FightRpcReadyReply::add_actionarr(const void* value, size_t size) {
  actionarr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FightRpcReadyReply.ActionArr)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
FightRpcReadyReply::actionarr() const {
  // @@protoc_insertion_point(field_list:FightRpcReadyReply.ActionArr)
  return actionarr_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
FightRpcReadyReply::mutable_actionarr() {
  // @@protoc_insertion_point(field_mutable_list:FightRpcReadyReply.ActionArr)
  return &actionarr_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightRpcActionNotify::kDataFieldNumber;
const int FightRpcActionNotify::kFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightRpcActionNotify::FightRpcActionNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightRpcActionNotify)
}
FightRpcActionNotify::FightRpcActionNotify(const FightRpcActionNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  frame_ = from.frame_;
  // @@protoc_insertion_point(copy_constructor:FightRpcActionNotify)
}

void FightRpcActionNotify::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_ = -1;
}

FightRpcActionNotify::~FightRpcActionNotify() {
  // @@protoc_insertion_point(destructor:FightRpcActionNotify)
  SharedDtor();
}

void FightRpcActionNotify::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FightRpcActionNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightRpcActionNotify::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightRpcActionNotify& FightRpcActionNotify::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightRpcActionNotify* FightRpcActionNotify::New(::google::protobuf::Arena* arena) const {
  FightRpcActionNotify* n = new FightRpcActionNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightRpcActionNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:FightRpcActionNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
    frame_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightRpcActionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightRpcActionNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes Data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Frame = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_frame();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightRpcActionNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightRpcActionNotify)
  return false;
#undef DO_
}

void FightRpcActionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightRpcActionNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes Data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // optional sint32 Frame = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->frame(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightRpcActionNotify)
}

::google::protobuf::uint8* FightRpcActionNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightRpcActionNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes Data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // optional sint32 Frame = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->frame(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightRpcActionNotify)
  return target;
}

size_t FightRpcActionNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightRpcActionNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes Data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional sint32 Frame = 2 [default = -1];
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->frame());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRpcActionNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightRpcActionNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const FightRpcActionNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightRpcActionNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightRpcActionNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightRpcActionNotify)
    MergeFrom(*source);
  }
}

void FightRpcActionNotify::MergeFrom(const FightRpcActionNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightRpcActionNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      frame_ = from.frame_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightRpcActionNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightRpcActionNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightRpcActionNotify::CopyFrom(const FightRpcActionNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightRpcActionNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRpcActionNotify::IsInitialized() const {
  return true;
}

void FightRpcActionNotify::Swap(FightRpcActionNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightRpcActionNotify::InternalSwap(FightRpcActionNotify* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(frame_, other->frame_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightRpcActionNotify::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightRpcActionNotify

// optional bytes Data = 1;
bool FightRpcActionNotify::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightRpcActionNotify::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void FightRpcActionNotify::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightRpcActionNotify::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& FightRpcActionNotify::data() const {
  // @@protoc_insertion_point(field_get:FightRpcActionNotify.Data)
  return data_.GetNoArena();
}
void FightRpcActionNotify::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightRpcActionNotify.Data)
}
#if LANG_CXX11
void FightRpcActionNotify::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightRpcActionNotify.Data)
}
#endif
void FightRpcActionNotify::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightRpcActionNotify.Data)
}
void FightRpcActionNotify::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightRpcActionNotify.Data)
}
::std::string* FightRpcActionNotify::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:FightRpcActionNotify.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightRpcActionNotify::release_data() {
  // @@protoc_insertion_point(field_release:FightRpcActionNotify.Data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightRpcActionNotify::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:FightRpcActionNotify.Data)
}

// optional sint32 Frame = 2 [default = -1];
bool FightRpcActionNotify::has_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightRpcActionNotify::set_has_frame() {
  _has_bits_[0] |= 0x00000002u;
}
void FightRpcActionNotify::clear_has_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightRpcActionNotify::clear_frame() {
  frame_ = -1;
  clear_has_frame();
}
::google::protobuf::int32 FightRpcActionNotify::frame() const {
  // @@protoc_insertion_point(field_get:FightRpcActionNotify.Frame)
  return frame_;
}
void FightRpcActionNotify::set_frame(::google::protobuf::int32 value) {
  set_has_frame();
  frame_ = value;
  // @@protoc_insertion_point(field_set:FightRpcActionNotify.Frame)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightRpcResultNotify::kResultFieldNumber;
const int FightRpcResultNotify::kDengeonIdFieldNumber;
const int FightRpcResultNotify::kStarFieldNumber;
const int FightRpcResultNotify::kFightTimeFieldNumber;
const int FightRpcResultNotify::kPrizeListFieldNumber;
const int FightRpcResultNotify::kKillListFieldNumber;
const int FightRpcResultNotify::kFirstStarLightFieldNumber;
const int FightRpcResultNotify::kSecondStarLightFieldNumber;
const int FightRpcResultNotify::kThirdStarLightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightRpcResultNotify::FightRpcResultNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightRpcResultNotify)
}
FightRpcResultNotify::FightRpcResultNotify(const FightRpcResultNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      prizelist_(from.prizelist_),
      killlist_(from.killlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&thirdstarlight_, &from.thirdstarlight_,
    static_cast<size_t>(reinterpret_cast<char*>(&secondstarlight_) -
    reinterpret_cast<char*>(&thirdstarlight_)) + sizeof(secondstarlight_));
  // @@protoc_insertion_point(copy_constructor:FightRpcResultNotify)
}

void FightRpcResultNotify::SharedCtor() {
  _cached_size_ = 0;
  thirdstarlight_ = -1;
  result_ = -1;
  dengeonid_ = -1;
  star_ = -1;
  fighttime_ = -1;
  firststarlight_ = -1;
  secondstarlight_ = -1;
}

FightRpcResultNotify::~FightRpcResultNotify() {
  // @@protoc_insertion_point(destructor:FightRpcResultNotify)
  SharedDtor();
}

void FightRpcResultNotify::SharedDtor() {
}

void FightRpcResultNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightRpcResultNotify::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightRpcResultNotify& FightRpcResultNotify::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightRpcResultNotify* FightRpcResultNotify::New(::google::protobuf::Arena* arena) const {
  FightRpcResultNotify* n = new FightRpcResultNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightRpcResultNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:FightRpcResultNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prizelist_.Clear();
  killlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    thirdstarlight_ = -1;
    result_ = -1;
    dengeonid_ = -1;
    star_ = -1;
    fighttime_ = -1;
    firststarlight_ = -1;
    secondstarlight_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightRpcResultNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightRpcResultNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 DengeonId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_dengeonid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dengeonid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Star = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_star();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 FightTime = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_fighttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &fighttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .FightPrizeInfo PrizeList = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prizelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .FightKillInfo KillList = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_killlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 FirstStarLight = 8 [default = -1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_firststarlight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &firststarlight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 SecondStarLight = 9 [default = -1];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_secondstarlight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &secondstarlight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ThirdStarLight = 10 [default = -1];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_thirdstarlight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &thirdstarlight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightRpcResultNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightRpcResultNotify)
  return false;
#undef DO_
}

void FightRpcResultNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightRpcResultNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 DengeonId = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->dengeonid(), output);
  }

  // optional sint32 Star = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->star(), output);
  }

  // optional sint32 FightTime = 5 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->fighttime(), output);
  }

  // repeated .FightPrizeInfo PrizeList = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prizelist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->prizelist(static_cast<int>(i)), output);
  }

  // repeated .FightKillInfo KillList = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->killlist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->killlist(static_cast<int>(i)), output);
  }

  // optional sint32 FirstStarLight = 8 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->firststarlight(), output);
  }

  // optional sint32 SecondStarLight = 9 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->secondstarlight(), output);
  }

  // optional sint32 ThirdStarLight = 10 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->thirdstarlight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightRpcResultNotify)
}

::google::protobuf::uint8* FightRpcResultNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightRpcResultNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 DengeonId = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->dengeonid(), target);
  }

  // optional sint32 Star = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->star(), target);
  }

  // optional sint32 FightTime = 5 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->fighttime(), target);
  }

  // repeated .FightPrizeInfo PrizeList = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prizelist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->prizelist(static_cast<int>(i)), deterministic, target);
  }

  // repeated .FightKillInfo KillList = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->killlist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->killlist(static_cast<int>(i)), deterministic, target);
  }

  // optional sint32 FirstStarLight = 8 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->firststarlight(), target);
  }

  // optional sint32 SecondStarLight = 9 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->secondstarlight(), target);
  }

  // optional sint32 ThirdStarLight = 10 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->thirdstarlight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightRpcResultNotify)
  return target;
}

size_t FightRpcResultNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightRpcResultNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .FightPrizeInfo PrizeList = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->prizelist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prizelist(static_cast<int>(i)));
    }
  }

  // repeated .FightKillInfo KillList = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->killlist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->killlist(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional sint32 ThirdStarLight = 10 [default = -1];
    if (has_thirdstarlight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->thirdstarlight());
    }

    // optional sint32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 DengeonId = 2 [default = -1];
    if (has_dengeonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dengeonid());
    }

    // optional sint32 Star = 4 [default = -1];
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->star());
    }

    // optional sint32 FightTime = 5 [default = -1];
    if (has_fighttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->fighttime());
    }

    // optional sint32 FirstStarLight = 8 [default = -1];
    if (has_firststarlight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->firststarlight());
    }

    // optional sint32 SecondStarLight = 9 [default = -1];
    if (has_secondstarlight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->secondstarlight());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRpcResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightRpcResultNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const FightRpcResultNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightRpcResultNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightRpcResultNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightRpcResultNotify)
    MergeFrom(*source);
  }
}

void FightRpcResultNotify::MergeFrom(const FightRpcResultNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightRpcResultNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prizelist_.MergeFrom(from.prizelist_);
  killlist_.MergeFrom(from.killlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      thirdstarlight_ = from.thirdstarlight_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      dengeonid_ = from.dengeonid_;
    }
    if (cached_has_bits & 0x00000008u) {
      star_ = from.star_;
    }
    if (cached_has_bits & 0x00000010u) {
      fighttime_ = from.fighttime_;
    }
    if (cached_has_bits & 0x00000020u) {
      firststarlight_ = from.firststarlight_;
    }
    if (cached_has_bits & 0x00000040u) {
      secondstarlight_ = from.secondstarlight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightRpcResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightRpcResultNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightRpcResultNotify::CopyFrom(const FightRpcResultNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightRpcResultNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRpcResultNotify::IsInitialized() const {
  return true;
}

void FightRpcResultNotify::Swap(FightRpcResultNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightRpcResultNotify::InternalSwap(FightRpcResultNotify* other) {
  using std::swap;
  prizelist_.InternalSwap(&other->prizelist_);
  killlist_.InternalSwap(&other->killlist_);
  swap(thirdstarlight_, other->thirdstarlight_);
  swap(result_, other->result_);
  swap(dengeonid_, other->dengeonid_);
  swap(star_, other->star_);
  swap(fighttime_, other->fighttime_);
  swap(firststarlight_, other->firststarlight_);
  swap(secondstarlight_, other->secondstarlight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightRpcResultNotify::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightRpcResultNotify

// optional sint32 Result = 1 [default = -1];
bool FightRpcResultNotify::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightRpcResultNotify::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void FightRpcResultNotify::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightRpcResultNotify::clear_result() {
  result_ = -1;
  clear_has_result();
}
::google::protobuf::int32 FightRpcResultNotify::result() const {
  // @@protoc_insertion_point(field_get:FightRpcResultNotify.Result)
  return result_;
}
void FightRpcResultNotify::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FightRpcResultNotify.Result)
}

// optional sint32 DengeonId = 2 [default = -1];
bool FightRpcResultNotify::has_dengeonid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightRpcResultNotify::set_has_dengeonid() {
  _has_bits_[0] |= 0x00000004u;
}
void FightRpcResultNotify::clear_has_dengeonid() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightRpcResultNotify::clear_dengeonid() {
  dengeonid_ = -1;
  clear_has_dengeonid();
}
::google::protobuf::int32 FightRpcResultNotify::dengeonid() const {
  // @@protoc_insertion_point(field_get:FightRpcResultNotify.DengeonId)
  return dengeonid_;
}
void FightRpcResultNotify::set_dengeonid(::google::protobuf::int32 value) {
  set_has_dengeonid();
  dengeonid_ = value;
  // @@protoc_insertion_point(field_set:FightRpcResultNotify.DengeonId)
}

// optional sint32 Star = 4 [default = -1];
bool FightRpcResultNotify::has_star() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightRpcResultNotify::set_has_star() {
  _has_bits_[0] |= 0x00000008u;
}
void FightRpcResultNotify::clear_has_star() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightRpcResultNotify::clear_star() {
  star_ = -1;
  clear_has_star();
}
::google::protobuf::int32 FightRpcResultNotify::star() const {
  // @@protoc_insertion_point(field_get:FightRpcResultNotify.Star)
  return star_;
}
void FightRpcResultNotify::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:FightRpcResultNotify.Star)
}

// optional sint32 FightTime = 5 [default = -1];
bool FightRpcResultNotify::has_fighttime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FightRpcResultNotify::set_has_fighttime() {
  _has_bits_[0] |= 0x00000010u;
}
void FightRpcResultNotify::clear_has_fighttime() {
  _has_bits_[0] &= ~0x00000010u;
}
void FightRpcResultNotify::clear_fighttime() {
  fighttime_ = -1;
  clear_has_fighttime();
}
::google::protobuf::int32 FightRpcResultNotify::fighttime() const {
  // @@protoc_insertion_point(field_get:FightRpcResultNotify.FightTime)
  return fighttime_;
}
void FightRpcResultNotify::set_fighttime(::google::protobuf::int32 value) {
  set_has_fighttime();
  fighttime_ = value;
  // @@protoc_insertion_point(field_set:FightRpcResultNotify.FightTime)
}

// repeated .FightPrizeInfo PrizeList = 6;
int FightRpcResultNotify::prizelist_size() const {
  return prizelist_.size();
}
void FightRpcResultNotify::clear_prizelist() {
  prizelist_.Clear();
}
const ::FightPrizeInfo& FightRpcResultNotify::prizelist(int index) const {
  // @@protoc_insertion_point(field_get:FightRpcResultNotify.PrizeList)
  return prizelist_.Get(index);
}
::FightPrizeInfo* FightRpcResultNotify::mutable_prizelist(int index) {
  // @@protoc_insertion_point(field_mutable:FightRpcResultNotify.PrizeList)
  return prizelist_.Mutable(index);
}
::FightPrizeInfo* FightRpcResultNotify::add_prizelist() {
  // @@protoc_insertion_point(field_add:FightRpcResultNotify.PrizeList)
  return prizelist_.Add();
}
::google::protobuf::RepeatedPtrField< ::FightPrizeInfo >*
FightRpcResultNotify::mutable_prizelist() {
  // @@protoc_insertion_point(field_mutable_list:FightRpcResultNotify.PrizeList)
  return &prizelist_;
}
const ::google::protobuf::RepeatedPtrField< ::FightPrizeInfo >&
FightRpcResultNotify::prizelist() const {
  // @@protoc_insertion_point(field_list:FightRpcResultNotify.PrizeList)
  return prizelist_;
}

// repeated .FightKillInfo KillList = 7;
int FightRpcResultNotify::killlist_size() const {
  return killlist_.size();
}
void FightRpcResultNotify::clear_killlist() {
  killlist_.Clear();
}
const ::FightKillInfo& FightRpcResultNotify::killlist(int index) const {
  // @@protoc_insertion_point(field_get:FightRpcResultNotify.KillList)
  return killlist_.Get(index);
}
::FightKillInfo* FightRpcResultNotify::mutable_killlist(int index) {
  // @@protoc_insertion_point(field_mutable:FightRpcResultNotify.KillList)
  return killlist_.Mutable(index);
}
::FightKillInfo* FightRpcResultNotify::add_killlist() {
  // @@protoc_insertion_point(field_add:FightRpcResultNotify.KillList)
  return killlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::FightKillInfo >*
FightRpcResultNotify::mutable_killlist() {
  // @@protoc_insertion_point(field_mutable_list:FightRpcResultNotify.KillList)
  return &killlist_;
}
const ::google::protobuf::RepeatedPtrField< ::FightKillInfo >&
FightRpcResultNotify::killlist() const {
  // @@protoc_insertion_point(field_list:FightRpcResultNotify.KillList)
  return killlist_;
}

// optional sint32 FirstStarLight = 8 [default = -1];
bool FightRpcResultNotify::has_firststarlight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FightRpcResultNotify::set_has_firststarlight() {
  _has_bits_[0] |= 0x00000020u;
}
void FightRpcResultNotify::clear_has_firststarlight() {
  _has_bits_[0] &= ~0x00000020u;
}
void FightRpcResultNotify::clear_firststarlight() {
  firststarlight_ = -1;
  clear_has_firststarlight();
}
::google::protobuf::int32 FightRpcResultNotify::firststarlight() const {
  // @@protoc_insertion_point(field_get:FightRpcResultNotify.FirstStarLight)
  return firststarlight_;
}
void FightRpcResultNotify::set_firststarlight(::google::protobuf::int32 value) {
  set_has_firststarlight();
  firststarlight_ = value;
  // @@protoc_insertion_point(field_set:FightRpcResultNotify.FirstStarLight)
}

// optional sint32 SecondStarLight = 9 [default = -1];
bool FightRpcResultNotify::has_secondstarlight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FightRpcResultNotify::set_has_secondstarlight() {
  _has_bits_[0] |= 0x00000040u;
}
void FightRpcResultNotify::clear_has_secondstarlight() {
  _has_bits_[0] &= ~0x00000040u;
}
void FightRpcResultNotify::clear_secondstarlight() {
  secondstarlight_ = -1;
  clear_has_secondstarlight();
}
::google::protobuf::int32 FightRpcResultNotify::secondstarlight() const {
  // @@protoc_insertion_point(field_get:FightRpcResultNotify.SecondStarLight)
  return secondstarlight_;
}
void FightRpcResultNotify::set_secondstarlight(::google::protobuf::int32 value) {
  set_has_secondstarlight();
  secondstarlight_ = value;
  // @@protoc_insertion_point(field_set:FightRpcResultNotify.SecondStarLight)
}

// optional sint32 ThirdStarLight = 10 [default = -1];
bool FightRpcResultNotify::has_thirdstarlight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightRpcResultNotify::set_has_thirdstarlight() {
  _has_bits_[0] |= 0x00000001u;
}
void FightRpcResultNotify::clear_has_thirdstarlight() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightRpcResultNotify::clear_thirdstarlight() {
  thirdstarlight_ = -1;
  clear_has_thirdstarlight();
}
::google::protobuf::int32 FightRpcResultNotify::thirdstarlight() const {
  // @@protoc_insertion_point(field_get:FightRpcResultNotify.ThirdStarLight)
  return thirdstarlight_;
}
void FightRpcResultNotify::set_thirdstarlight(::google::protobuf::int32 value) {
  set_has_thirdstarlight();
  thirdstarlight_ = value;
  // @@protoc_insertion_point(field_set:FightRpcResultNotify.ThirdStarLight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightRpcEnterAsk::kUserIdFieldNumber;
const int FightRpcEnterAsk::kDungeonKeyFieldNumber;
const int FightRpcEnterAsk::kSessionKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightRpcEnterAsk::FightRpcEnterAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightRpcEnterAsk)
}
FightRpcEnterAsk::FightRpcEnterAsk(const FightRpcEnterAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dungeonkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dungeonkey()) {
    dungeonkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dungeonkey_);
  }
  sessionkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionkey()) {
    sessionkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionkey_);
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:FightRpcEnterAsk)
}

void FightRpcEnterAsk::SharedCtor() {
  _cached_size_ = 0;
  dungeonkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = GOOGLE_LONGLONG(-1);
}

FightRpcEnterAsk::~FightRpcEnterAsk() {
  // @@protoc_insertion_point(destructor:FightRpcEnterAsk)
  SharedDtor();
}

void FightRpcEnterAsk::SharedDtor() {
  dungeonkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FightRpcEnterAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightRpcEnterAsk::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightRpcEnterAsk& FightRpcEnterAsk::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightRpcEnterAsk* FightRpcEnterAsk::New(::google::protobuf::Arena* arena) const {
  FightRpcEnterAsk* n = new FightRpcEnterAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightRpcEnterAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:FightRpcEnterAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!dungeonkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dungeonkey_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!sessionkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sessionkey_.UnsafeRawStringPointer())->clear();
    }
    userid_ = GOOGLE_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightRpcEnterAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightRpcEnterAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DungeonKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dungeonkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dungeonkey().data(), static_cast<int>(this->dungeonkey().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FightRpcEnterAsk.DungeonKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SessionKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionkey().data(), static_cast<int>(this->sessionkey().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FightRpcEnterAsk.SessionKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightRpcEnterAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightRpcEnterAsk)
  return false;
#undef DO_
}

void FightRpcEnterAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightRpcEnterAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->userid(), output);
  }

  // optional string DungeonKey = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dungeonkey().data(), static_cast<int>(this->dungeonkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FightRpcEnterAsk.DungeonKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dungeonkey(), output);
  }

  // optional string SessionKey = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionkey().data(), static_cast<int>(this->sessionkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FightRpcEnterAsk.SessionKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sessionkey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightRpcEnterAsk)
}

::google::protobuf::uint8* FightRpcEnterAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightRpcEnterAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->userid(), target);
  }

  // optional string DungeonKey = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dungeonkey().data(), static_cast<int>(this->dungeonkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FightRpcEnterAsk.DungeonKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dungeonkey(), target);
  }

  // optional string SessionKey = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionkey().data(), static_cast<int>(this->sessionkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FightRpcEnterAsk.SessionKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sessionkey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightRpcEnterAsk)
  return target;
}

size_t FightRpcEnterAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightRpcEnterAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string DungeonKey = 2;
    if (has_dungeonkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dungeonkey());
    }

    // optional string SessionKey = 3;
    if (has_sessionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sessionkey());
    }

    // optional sint64 UserId = 1 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRpcEnterAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightRpcEnterAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const FightRpcEnterAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightRpcEnterAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightRpcEnterAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightRpcEnterAsk)
    MergeFrom(*source);
  }
}

void FightRpcEnterAsk::MergeFrom(const FightRpcEnterAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightRpcEnterAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_dungeonkey();
      dungeonkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dungeonkey_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sessionkey();
      sessionkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionkey_);
    }
    if (cached_has_bits & 0x00000004u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightRpcEnterAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightRpcEnterAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightRpcEnterAsk::CopyFrom(const FightRpcEnterAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightRpcEnterAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRpcEnterAsk::IsInitialized() const {
  return true;
}

void FightRpcEnterAsk::Swap(FightRpcEnterAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightRpcEnterAsk::InternalSwap(FightRpcEnterAsk* other) {
  using std::swap;
  dungeonkey_.Swap(&other->dungeonkey_);
  sessionkey_.Swap(&other->sessionkey_);
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightRpcEnterAsk::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightRpcEnterAsk

// optional sint64 UserId = 1 [default = -1];
bool FightRpcEnterAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightRpcEnterAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
void FightRpcEnterAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightRpcEnterAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 FightRpcEnterAsk::userid() const {
  // @@protoc_insertion_point(field_get:FightRpcEnterAsk.UserId)
  return userid_;
}
void FightRpcEnterAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FightRpcEnterAsk.UserId)
}

// optional string DungeonKey = 2;
bool FightRpcEnterAsk::has_dungeonkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightRpcEnterAsk::set_has_dungeonkey() {
  _has_bits_[0] |= 0x00000001u;
}
void FightRpcEnterAsk::clear_has_dungeonkey() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightRpcEnterAsk::clear_dungeonkey() {
  dungeonkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dungeonkey();
}
const ::std::string& FightRpcEnterAsk::dungeonkey() const {
  // @@protoc_insertion_point(field_get:FightRpcEnterAsk.DungeonKey)
  return dungeonkey_.GetNoArena();
}
void FightRpcEnterAsk::set_dungeonkey(const ::std::string& value) {
  set_has_dungeonkey();
  dungeonkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightRpcEnterAsk.DungeonKey)
}
#if LANG_CXX11
void FightRpcEnterAsk::set_dungeonkey(::std::string&& value) {
  set_has_dungeonkey();
  dungeonkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightRpcEnterAsk.DungeonKey)
}
#endif
void FightRpcEnterAsk::set_dungeonkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dungeonkey();
  dungeonkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightRpcEnterAsk.DungeonKey)
}
void FightRpcEnterAsk::set_dungeonkey(const char* value, size_t size) {
  set_has_dungeonkey();
  dungeonkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightRpcEnterAsk.DungeonKey)
}
::std::string* FightRpcEnterAsk::mutable_dungeonkey() {
  set_has_dungeonkey();
  // @@protoc_insertion_point(field_mutable:FightRpcEnterAsk.DungeonKey)
  return dungeonkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightRpcEnterAsk::release_dungeonkey() {
  // @@protoc_insertion_point(field_release:FightRpcEnterAsk.DungeonKey)
  clear_has_dungeonkey();
  return dungeonkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightRpcEnterAsk::set_allocated_dungeonkey(::std::string* dungeonkey) {
  if (dungeonkey != NULL) {
    set_has_dungeonkey();
  } else {
    clear_has_dungeonkey();
  }
  dungeonkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dungeonkey);
  // @@protoc_insertion_point(field_set_allocated:FightRpcEnterAsk.DungeonKey)
}

// optional string SessionKey = 3;
bool FightRpcEnterAsk::has_sessionkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightRpcEnterAsk::set_has_sessionkey() {
  _has_bits_[0] |= 0x00000002u;
}
void FightRpcEnterAsk::clear_has_sessionkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightRpcEnterAsk::clear_sessionkey() {
  sessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionkey();
}
const ::std::string& FightRpcEnterAsk::sessionkey() const {
  // @@protoc_insertion_point(field_get:FightRpcEnterAsk.SessionKey)
  return sessionkey_.GetNoArena();
}
void FightRpcEnterAsk::set_sessionkey(const ::std::string& value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightRpcEnterAsk.SessionKey)
}
#if LANG_CXX11
void FightRpcEnterAsk::set_sessionkey(::std::string&& value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightRpcEnterAsk.SessionKey)
}
#endif
void FightRpcEnterAsk::set_sessionkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightRpcEnterAsk.SessionKey)
}
void FightRpcEnterAsk::set_sessionkey(const char* value, size_t size) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightRpcEnterAsk.SessionKey)
}
::std::string* FightRpcEnterAsk::mutable_sessionkey() {
  set_has_sessionkey();
  // @@protoc_insertion_point(field_mutable:FightRpcEnterAsk.SessionKey)
  return sessionkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightRpcEnterAsk::release_sessionkey() {
  // @@protoc_insertion_point(field_release:FightRpcEnterAsk.SessionKey)
  clear_has_sessionkey();
  return sessionkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightRpcEnterAsk::set_allocated_sessionkey(::std::string* sessionkey) {
  if (sessionkey != NULL) {
    set_has_sessionkey();
  } else {
    clear_has_sessionkey();
  }
  sessionkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionkey);
  // @@protoc_insertion_point(field_set_allocated:FightRpcEnterAsk.SessionKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightRpcEnterReply::kResultFieldNumber;
const int FightRpcEnterReply::kTickFieldNumber;
const int FightRpcEnterReply::kRandNumFieldNumber;
const int FightRpcEnterReply::kIdHelperFieldNumber;
const int FightRpcEnterReply::kActionArrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightRpcEnterReply::FightRpcEnterReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightRpcEnterReply)
}
FightRpcEnterReply::FightRpcEnterReply(const FightRpcEnterReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      actionarr_(from.actionarr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&idhelper_) -
    reinterpret_cast<char*>(&result_)) + sizeof(idhelper_));
  // @@protoc_insertion_point(copy_constructor:FightRpcEnterReply)
}

void FightRpcEnterReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  tick_ = -1;
  randnum_ = -1;
  idhelper_ = -1;
}

FightRpcEnterReply::~FightRpcEnterReply() {
  // @@protoc_insertion_point(destructor:FightRpcEnterReply)
  SharedDtor();
}

void FightRpcEnterReply::SharedDtor() {
}

void FightRpcEnterReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightRpcEnterReply::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightRpcEnterReply& FightRpcEnterReply::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightRpcEnterReply* FightRpcEnterReply::New(::google::protobuf::Arena* arena) const {
  FightRpcEnterReply* n = new FightRpcEnterReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightRpcEnterReply::Clear() {
// @@protoc_insertion_point(message_clear_start:FightRpcEnterReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actionarr_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    result_ = -9999;
    tick_ = -1;
    randnum_ = -1;
    idhelper_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightRpcEnterReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightRpcEnterReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Tick = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 RandNum = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_randnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &randnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 IdHelper = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_idhelper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &idhelper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes ActionArr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_actionarr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightRpcEnterReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightRpcEnterReply)
  return false;
#undef DO_
}

void FightRpcEnterReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightRpcEnterReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 Tick = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->tick(), output);
  }

  // optional sint32 RandNum = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->randnum(), output);
  }

  // optional sint32 IdHelper = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->idhelper(), output);
  }

  // repeated bytes ActionArr = 5;
  for (int i = 0, n = this->actionarr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->actionarr(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightRpcEnterReply)
}

::google::protobuf::uint8* FightRpcEnterReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightRpcEnterReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 Tick = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->tick(), target);
  }

  // optional sint32 RandNum = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->randnum(), target);
  }

  // optional sint32 IdHelper = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->idhelper(), target);
  }

  // repeated bytes ActionArr = 5;
  for (int i = 0, n = this->actionarr_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->actionarr(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightRpcEnterReply)
  return target;
}

size_t FightRpcEnterReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightRpcEnterReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated bytes ActionArr = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->actionarr_size());
  for (int i = 0, n = this->actionarr_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->actionarr(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 Tick = 2 [default = -1];
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->tick());
    }

    // optional sint32 RandNum = 3 [default = -1];
    if (has_randnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->randnum());
    }

    // optional sint32 IdHelper = 4 [default = -1];
    if (has_idhelper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->idhelper());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRpcEnterReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightRpcEnterReply)
  GOOGLE_DCHECK_NE(&from, this);
  const FightRpcEnterReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightRpcEnterReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightRpcEnterReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightRpcEnterReply)
    MergeFrom(*source);
  }
}

void FightRpcEnterReply::MergeFrom(const FightRpcEnterReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightRpcEnterReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actionarr_.MergeFrom(from.actionarr_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      tick_ = from.tick_;
    }
    if (cached_has_bits & 0x00000004u) {
      randnum_ = from.randnum_;
    }
    if (cached_has_bits & 0x00000008u) {
      idhelper_ = from.idhelper_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightRpcEnterReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightRpcEnterReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightRpcEnterReply::CopyFrom(const FightRpcEnterReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightRpcEnterReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRpcEnterReply::IsInitialized() const {
  return true;
}

void FightRpcEnterReply::Swap(FightRpcEnterReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightRpcEnterReply::InternalSwap(FightRpcEnterReply* other) {
  using std::swap;
  actionarr_.InternalSwap(&other->actionarr_);
  swap(result_, other->result_);
  swap(tick_, other->tick_);
  swap(randnum_, other->randnum_);
  swap(idhelper_, other->idhelper_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightRpcEnterReply::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightRpcEnterReply

// optional sint32 Result = 1 [default = -9999];
bool FightRpcEnterReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightRpcEnterReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void FightRpcEnterReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightRpcEnterReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 FightRpcEnterReply::result() const {
  // @@protoc_insertion_point(field_get:FightRpcEnterReply.Result)
  return result_;
}
void FightRpcEnterReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FightRpcEnterReply.Result)
}

// optional sint32 Tick = 2 [default = -1];
bool FightRpcEnterReply::has_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightRpcEnterReply::set_has_tick() {
  _has_bits_[0] |= 0x00000002u;
}
void FightRpcEnterReply::clear_has_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightRpcEnterReply::clear_tick() {
  tick_ = -1;
  clear_has_tick();
}
::google::protobuf::int32 FightRpcEnterReply::tick() const {
  // @@protoc_insertion_point(field_get:FightRpcEnterReply.Tick)
  return tick_;
}
void FightRpcEnterReply::set_tick(::google::protobuf::int32 value) {
  set_has_tick();
  tick_ = value;
  // @@protoc_insertion_point(field_set:FightRpcEnterReply.Tick)
}

// optional sint32 RandNum = 3 [default = -1];
bool FightRpcEnterReply::has_randnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightRpcEnterReply::set_has_randnum() {
  _has_bits_[0] |= 0x00000004u;
}
void FightRpcEnterReply::clear_has_randnum() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightRpcEnterReply::clear_randnum() {
  randnum_ = -1;
  clear_has_randnum();
}
::google::protobuf::int32 FightRpcEnterReply::randnum() const {
  // @@protoc_insertion_point(field_get:FightRpcEnterReply.RandNum)
  return randnum_;
}
void FightRpcEnterReply::set_randnum(::google::protobuf::int32 value) {
  set_has_randnum();
  randnum_ = value;
  // @@protoc_insertion_point(field_set:FightRpcEnterReply.RandNum)
}

// optional sint32 IdHelper = 4 [default = -1];
bool FightRpcEnterReply::has_idhelper() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightRpcEnterReply::set_has_idhelper() {
  _has_bits_[0] |= 0x00000008u;
}
void FightRpcEnterReply::clear_has_idhelper() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightRpcEnterReply::clear_idhelper() {
  idhelper_ = -1;
  clear_has_idhelper();
}
::google::protobuf::int32 FightRpcEnterReply::idhelper() const {
  // @@protoc_insertion_point(field_get:FightRpcEnterReply.IdHelper)
  return idhelper_;
}
void FightRpcEnterReply::set_idhelper(::google::protobuf::int32 value) {
  set_has_idhelper();
  idhelper_ = value;
  // @@protoc_insertion_point(field_set:FightRpcEnterReply.IdHelper)
}

// repeated bytes ActionArr = 5;
int FightRpcEnterReply::actionarr_size() const {
  return actionarr_.size();
}
void FightRpcEnterReply::clear_actionarr() {
  actionarr_.Clear();
}
const ::std::string& FightRpcEnterReply::actionarr(int index) const {
  // @@protoc_insertion_point(field_get:FightRpcEnterReply.ActionArr)
  return actionarr_.Get(index);
}
::std::string* FightRpcEnterReply::mutable_actionarr(int index) {
  // @@protoc_insertion_point(field_mutable:FightRpcEnterReply.ActionArr)
  return actionarr_.Mutable(index);
}
void FightRpcEnterReply::set_actionarr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:FightRpcEnterReply.ActionArr)
  actionarr_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void FightRpcEnterReply::set_actionarr(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:FightRpcEnterReply.ActionArr)
  actionarr_.Mutable(index)->assign(std::move(value));
}
#endif
void FightRpcEnterReply::set_actionarr(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actionarr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FightRpcEnterReply.ActionArr)
}
void FightRpcEnterReply::set_actionarr(int index, const void* value, size_t size) {
  actionarr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FightRpcEnterReply.ActionArr)
}
::std::string* FightRpcEnterReply::add_actionarr() {
  // @@protoc_insertion_point(field_add_mutable:FightRpcEnterReply.ActionArr)
  return actionarr_.Add();
}
void FightRpcEnterReply::add_actionarr(const ::std::string& value) {
  actionarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FightRpcEnterReply.ActionArr)
}
#if LANG_CXX11
void FightRpcEnterReply::add_actionarr(::std::string&& value) {
  actionarr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FightRpcEnterReply.ActionArr)
}
#endif
void FightRpcEnterReply::add_actionarr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actionarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FightRpcEnterReply.ActionArr)
}
void FightRpcEnterReply::add_actionarr(const void* value, size_t size) {
  actionarr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FightRpcEnterReply.ActionArr)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
FightRpcEnterReply::actionarr() const {
  // @@protoc_insertion_point(field_list:FightRpcEnterReply.ActionArr)
  return actionarr_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
FightRpcEnterReply::mutable_actionarr() {
  // @@protoc_insertion_point(field_mutable_list:FightRpcEnterReply.ActionArr)
  return &actionarr_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightPrizeInfo::kIdFieldNumber;
const int FightPrizeInfo::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightPrizeInfo::FightPrizeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightPrizeInfo)
}
FightPrizeInfo::FightPrizeInfo(const FightPrizeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:FightPrizeInfo)
}

void FightPrizeInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  count_ = -1;
}

FightPrizeInfo::~FightPrizeInfo() {
  // @@protoc_insertion_point(destructor:FightPrizeInfo)
  SharedDtor();
}

void FightPrizeInfo::SharedDtor() {
}

void FightPrizeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightPrizeInfo::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightPrizeInfo& FightPrizeInfo::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightPrizeInfo* FightPrizeInfo::New(::google::protobuf::Arena* arena) const {
  FightPrizeInfo* n = new FightPrizeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightPrizeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:FightPrizeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    id_ = -1;
    count_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightPrizeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightPrizeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Id = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Count = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightPrizeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightPrizeInfo)
  return false;
#undef DO_
}

void FightPrizeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightPrizeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Id = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // optional sint32 Count = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightPrizeInfo)
}

::google::protobuf::uint8* FightPrizeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightPrizeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Id = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->id(), target);
  }

  // optional sint32 Count = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightPrizeInfo)
  return target;
}

size_t FightPrizeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightPrizeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // optional sint32 Count = 2 [default = -1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightPrizeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightPrizeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FightPrizeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightPrizeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightPrizeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightPrizeInfo)
    MergeFrom(*source);
  }
}

void FightPrizeInfo::MergeFrom(const FightPrizeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightPrizeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightPrizeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightPrizeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightPrizeInfo::CopyFrom(const FightPrizeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightPrizeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightPrizeInfo::IsInitialized() const {
  return true;
}

void FightPrizeInfo::Swap(FightPrizeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightPrizeInfo::InternalSwap(FightPrizeInfo* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightPrizeInfo::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightPrizeInfo

// optional sint32 Id = 1 [default = -1];
bool FightPrizeInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightPrizeInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FightPrizeInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightPrizeInfo::clear_id() {
  id_ = -1;
  clear_has_id();
}
::google::protobuf::int32 FightPrizeInfo::id() const {
  // @@protoc_insertion_point(field_get:FightPrizeInfo.Id)
  return id_;
}
void FightPrizeInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:FightPrizeInfo.Id)
}

// optional sint32 Count = 2 [default = -1];
bool FightPrizeInfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightPrizeInfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void FightPrizeInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightPrizeInfo::clear_count() {
  count_ = -1;
  clear_has_count();
}
::google::protobuf::int32 FightPrizeInfo::count() const {
  // @@protoc_insertion_point(field_get:FightPrizeInfo.Count)
  return count_;
}
void FightPrizeInfo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:FightPrizeInfo.Count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightKillInfo::kIdFieldNumber;
const int FightKillInfo::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightKillInfo::FightKillInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightKillInfo)
}
FightKillInfo::FightKillInfo(const FightKillInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:FightKillInfo)
}

void FightKillInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = -1;
  count_ = -1;
}

FightKillInfo::~FightKillInfo() {
  // @@protoc_insertion_point(destructor:FightKillInfo)
  SharedDtor();
}

void FightKillInfo::SharedDtor() {
}

void FightKillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightKillInfo::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightKillInfo& FightKillInfo::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightKillInfo* FightKillInfo::New(::google::protobuf::Arena* arena) const {
  FightKillInfo* n = new FightKillInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightKillInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:FightKillInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    id_ = -1;
    count_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightKillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightKillInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Id = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Count = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightKillInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightKillInfo)
  return false;
#undef DO_
}

void FightKillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightKillInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Id = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // optional sint32 Count = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightKillInfo)
}

::google::protobuf::uint8* FightKillInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightKillInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Id = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->id(), target);
  }

  // optional sint32 Count = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightKillInfo)
  return target;
}

size_t FightKillInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightKillInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Id = 1 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // optional sint32 Count = 2 [default = -1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightKillInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightKillInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FightKillInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightKillInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightKillInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightKillInfo)
    MergeFrom(*source);
  }
}

void FightKillInfo::MergeFrom(const FightKillInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightKillInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightKillInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightKillInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightKillInfo::CopyFrom(const FightKillInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightKillInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightKillInfo::IsInitialized() const {
  return true;
}

void FightKillInfo::Swap(FightKillInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightKillInfo::InternalSwap(FightKillInfo* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightKillInfo::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightKillInfo

// optional sint32 Id = 1 [default = -1];
bool FightKillInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightKillInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FightKillInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightKillInfo::clear_id() {
  id_ = -1;
  clear_has_id();
}
::google::protobuf::int32 FightKillInfo::id() const {
  // @@protoc_insertion_point(field_get:FightKillInfo.Id)
  return id_;
}
void FightKillInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:FightKillInfo.Id)
}

// optional sint32 Count = 2 [default = -1];
bool FightKillInfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightKillInfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void FightKillInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightKillInfo::clear_count() {
  count_ = -1;
  clear_has_count();
}
::google::protobuf::int32 FightKillInfo::count() const {
  // @@protoc_insertion_point(field_get:FightKillInfo.Count)
  return count_;
}
void FightKillInfo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:FightKillInfo.Count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightRpcStartNotify::FightRpcStartNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightRpcStartNotify)
}
FightRpcStartNotify::FightRpcStartNotify(const FightRpcStartNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FightRpcStartNotify)
}

void FightRpcStartNotify::SharedCtor() {
  _cached_size_ = 0;
}

FightRpcStartNotify::~FightRpcStartNotify() {
  // @@protoc_insertion_point(destructor:FightRpcStartNotify)
  SharedDtor();
}

void FightRpcStartNotify::SharedDtor() {
}

void FightRpcStartNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightRpcStartNotify::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightRpcStartNotify& FightRpcStartNotify::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightRpcStartNotify* FightRpcStartNotify::New(::google::protobuf::Arena* arena) const {
  FightRpcStartNotify* n = new FightRpcStartNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightRpcStartNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:FightRpcStartNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightRpcStartNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightRpcStartNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:FightRpcStartNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightRpcStartNotify)
  return false;
#undef DO_
}

void FightRpcStartNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightRpcStartNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightRpcStartNotify)
}

::google::protobuf::uint8* FightRpcStartNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightRpcStartNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightRpcStartNotify)
  return target;
}

size_t FightRpcStartNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightRpcStartNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRpcStartNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightRpcStartNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const FightRpcStartNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightRpcStartNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightRpcStartNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightRpcStartNotify)
    MergeFrom(*source);
  }
}

void FightRpcStartNotify::MergeFrom(const FightRpcStartNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightRpcStartNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FightRpcStartNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightRpcStartNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightRpcStartNotify::CopyFrom(const FightRpcStartNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightRpcStartNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRpcStartNotify::IsInitialized() const {
  return true;
}

void FightRpcStartNotify::Swap(FightRpcStartNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightRpcStartNotify::InternalSwap(FightRpcStartNotify* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightRpcStartNotify::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightRpcStartNotify

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightUseSkillAction::kObjIdFieldNumber;
const int FightUseSkillAction::kSkillIdFieldNumber;
const int FightUseSkillAction::kPosInfoFieldNumber;
const int FightUseSkillAction::kTargetObjIdFieldNumber;
const int FightUseSkillAction::kTargetPosFieldNumber;
const int FightUseSkillAction::kTypeFieldNumber;
const int FightUseSkillAction::kV3PosFieldNumber;
const int FightUseSkillAction::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightUseSkillAction::FightUseSkillAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightUseSkillAction)
}
FightUseSkillAction::FightUseSkillAction(const FightUseSkillAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      v3pos_(from.v3pos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  posinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_posinfo()) {
    posinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo_);
  }
  targetpos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_targetpos()) {
    targetpos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetpos_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&type_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:FightUseSkillAction)
}

void FightUseSkillAction::SharedCtor() {
  _cached_size_ = 0;
  posinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetpos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  objid_ = -1;
  skillid_ = -1;
  targetobjid_ = -1;
  time_ = -1;
}

FightUseSkillAction::~FightUseSkillAction() {
  // @@protoc_insertion_point(destructor:FightUseSkillAction)
  SharedDtor();
}

void FightUseSkillAction::SharedDtor() {
  posinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetpos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FightUseSkillAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightUseSkillAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightUseSkillAction& FightUseSkillAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightUseSkillAction* FightUseSkillAction::New(::google::protobuf::Arena* arena) const {
  FightUseSkillAction* n = new FightUseSkillAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightUseSkillAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightUseSkillAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v3pos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!posinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*posinfo_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!targetpos_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*targetpos_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 124u) {
    type_ = 0;
    objid_ = -1;
    skillid_ = -1;
    targetobjid_ = -1;
    time_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightUseSkillAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightUseSkillAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ObjId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 SkillId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_skillid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skillid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes PosInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_posinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TargetObjId = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_targetobjid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &targetobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes TargetPos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_targetpos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Type = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float V3Pos = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61u, input, this->mutable_v3pos())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_v3pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Time = 8 [default = -1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightUseSkillAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightUseSkillAction)
  return false;
#undef DO_
}

void FightUseSkillAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightUseSkillAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->objid(), output);
  }

  // optional sint32 SkillId = 2 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->skillid(), output);
  }

  // optional bytes PosInfo = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->posinfo(), output);
  }

  // optional sint32 TargetObjId = 4 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->targetobjid(), output);
  }

  // optional bytes TargetPos = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->targetpos(), output);
  }

  // optional sint32 Type = 6 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->type(), output);
  }

  // repeated float V3Pos = 7;
  for (int i = 0, n = this->v3pos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->v3pos(i), output);
  }

  // optional sint32 Time = 8 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightUseSkillAction)
}

::google::protobuf::uint8* FightUseSkillAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightUseSkillAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->objid(), target);
  }

  // optional sint32 SkillId = 2 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->skillid(), target);
  }

  // optional bytes PosInfo = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->posinfo(), target);
  }

  // optional sint32 TargetObjId = 4 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->targetobjid(), target);
  }

  // optional bytes TargetPos = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->targetpos(), target);
  }

  // optional sint32 Type = 6 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->type(), target);
  }

  // repeated float V3Pos = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(7, this->v3pos_, target);

  // optional sint32 Time = 8 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightUseSkillAction)
  return target;
}

size_t FightUseSkillAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightUseSkillAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float V3Pos = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->v3pos_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->v3pos_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes PosInfo = 3;
    if (has_posinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->posinfo());
    }

    // optional bytes TargetPos = 5;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->targetpos());
    }

    // optional sint32 Type = 6 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 ObjId = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

    // optional sint32 SkillId = 2 [default = -1];
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skillid());
    }

    // optional sint32 TargetObjId = 4 [default = -1];
    if (has_targetobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->targetobjid());
    }

    // optional sint32 Time = 8 [default = -1];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightUseSkillAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightUseSkillAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightUseSkillAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightUseSkillAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightUseSkillAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightUseSkillAction)
    MergeFrom(*source);
  }
}

void FightUseSkillAction::MergeFrom(const FightUseSkillAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightUseSkillAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v3pos_.MergeFrom(from.v3pos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_posinfo();
      posinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_targetpos();
      targetpos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetpos_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      objid_ = from.objid_;
    }
    if (cached_has_bits & 0x00000010u) {
      skillid_ = from.skillid_;
    }
    if (cached_has_bits & 0x00000020u) {
      targetobjid_ = from.targetobjid_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightUseSkillAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightUseSkillAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightUseSkillAction::CopyFrom(const FightUseSkillAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightUseSkillAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightUseSkillAction::IsInitialized() const {
  return true;
}

void FightUseSkillAction::Swap(FightUseSkillAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightUseSkillAction::InternalSwap(FightUseSkillAction* other) {
  using std::swap;
  v3pos_.InternalSwap(&other->v3pos_);
  posinfo_.Swap(&other->posinfo_);
  targetpos_.Swap(&other->targetpos_);
  swap(type_, other->type_);
  swap(objid_, other->objid_);
  swap(skillid_, other->skillid_);
  swap(targetobjid_, other->targetobjid_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightUseSkillAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightUseSkillAction

// optional sint32 ObjId = 1 [default = -1];
bool FightUseSkillAction::has_objid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightUseSkillAction::set_has_objid() {
  _has_bits_[0] |= 0x00000008u;
}
void FightUseSkillAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightUseSkillAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightUseSkillAction::objid() const {
  // @@protoc_insertion_point(field_get:FightUseSkillAction.ObjId)
  return objid_;
}
void FightUseSkillAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightUseSkillAction.ObjId)
}

// optional sint32 SkillId = 2 [default = -1];
bool FightUseSkillAction::has_skillid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FightUseSkillAction::set_has_skillid() {
  _has_bits_[0] |= 0x00000010u;
}
void FightUseSkillAction::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000010u;
}
void FightUseSkillAction::clear_skillid() {
  skillid_ = -1;
  clear_has_skillid();
}
::google::protobuf::int32 FightUseSkillAction::skillid() const {
  // @@protoc_insertion_point(field_get:FightUseSkillAction.SkillId)
  return skillid_;
}
void FightUseSkillAction::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:FightUseSkillAction.SkillId)
}

// optional bytes PosInfo = 3;
bool FightUseSkillAction::has_posinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightUseSkillAction::set_has_posinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void FightUseSkillAction::clear_has_posinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightUseSkillAction::clear_posinfo() {
  posinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo();
}
const ::std::string& FightUseSkillAction::posinfo() const {
  // @@protoc_insertion_point(field_get:FightUseSkillAction.PosInfo)
  return posinfo_.GetNoArena();
}
void FightUseSkillAction::set_posinfo(const ::std::string& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightUseSkillAction.PosInfo)
}
#if LANG_CXX11
void FightUseSkillAction::set_posinfo(::std::string&& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightUseSkillAction.PosInfo)
}
#endif
void FightUseSkillAction::set_posinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightUseSkillAction.PosInfo)
}
void FightUseSkillAction::set_posinfo(const void* value, size_t size) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightUseSkillAction.PosInfo)
}
::std::string* FightUseSkillAction::mutable_posinfo() {
  set_has_posinfo();
  // @@protoc_insertion_point(field_mutable:FightUseSkillAction.PosInfo)
  return posinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightUseSkillAction::release_posinfo() {
  // @@protoc_insertion_point(field_release:FightUseSkillAction.PosInfo)
  clear_has_posinfo();
  return posinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightUseSkillAction::set_allocated_posinfo(::std::string* posinfo) {
  if (posinfo != NULL) {
    set_has_posinfo();
  } else {
    clear_has_posinfo();
  }
  posinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo);
  // @@protoc_insertion_point(field_set_allocated:FightUseSkillAction.PosInfo)
}

// optional sint32 TargetObjId = 4 [default = -1];
bool FightUseSkillAction::has_targetobjid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FightUseSkillAction::set_has_targetobjid() {
  _has_bits_[0] |= 0x00000020u;
}
void FightUseSkillAction::clear_has_targetobjid() {
  _has_bits_[0] &= ~0x00000020u;
}
void FightUseSkillAction::clear_targetobjid() {
  targetobjid_ = -1;
  clear_has_targetobjid();
}
::google::protobuf::int32 FightUseSkillAction::targetobjid() const {
  // @@protoc_insertion_point(field_get:FightUseSkillAction.TargetObjId)
  return targetobjid_;
}
void FightUseSkillAction::set_targetobjid(::google::protobuf::int32 value) {
  set_has_targetobjid();
  targetobjid_ = value;
  // @@protoc_insertion_point(field_set:FightUseSkillAction.TargetObjId)
}

// optional bytes TargetPos = 5;
bool FightUseSkillAction::has_targetpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightUseSkillAction::set_has_targetpos() {
  _has_bits_[0] |= 0x00000002u;
}
void FightUseSkillAction::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightUseSkillAction::clear_targetpos() {
  targetpos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetpos();
}
const ::std::string& FightUseSkillAction::targetpos() const {
  // @@protoc_insertion_point(field_get:FightUseSkillAction.TargetPos)
  return targetpos_.GetNoArena();
}
void FightUseSkillAction::set_targetpos(const ::std::string& value) {
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightUseSkillAction.TargetPos)
}
#if LANG_CXX11
void FightUseSkillAction::set_targetpos(::std::string&& value) {
  set_has_targetpos();
  targetpos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightUseSkillAction.TargetPos)
}
#endif
void FightUseSkillAction::set_targetpos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightUseSkillAction.TargetPos)
}
void FightUseSkillAction::set_targetpos(const void* value, size_t size) {
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightUseSkillAction.TargetPos)
}
::std::string* FightUseSkillAction::mutable_targetpos() {
  set_has_targetpos();
  // @@protoc_insertion_point(field_mutable:FightUseSkillAction.TargetPos)
  return targetpos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightUseSkillAction::release_targetpos() {
  // @@protoc_insertion_point(field_release:FightUseSkillAction.TargetPos)
  clear_has_targetpos();
  return targetpos_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightUseSkillAction::set_allocated_targetpos(::std::string* targetpos) {
  if (targetpos != NULL) {
    set_has_targetpos();
  } else {
    clear_has_targetpos();
  }
  targetpos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetpos);
  // @@protoc_insertion_point(field_set_allocated:FightUseSkillAction.TargetPos)
}

// optional sint32 Type = 6 [default = 0];
bool FightUseSkillAction::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightUseSkillAction::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void FightUseSkillAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightUseSkillAction::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 FightUseSkillAction::type() const {
  // @@protoc_insertion_point(field_get:FightUseSkillAction.Type)
  return type_;
}
void FightUseSkillAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightUseSkillAction.Type)
}

// repeated float V3Pos = 7;
int FightUseSkillAction::v3pos_size() const {
  return v3pos_.size();
}
void FightUseSkillAction::clear_v3pos() {
  v3pos_.Clear();
}
float FightUseSkillAction::v3pos(int index) const {
  // @@protoc_insertion_point(field_get:FightUseSkillAction.V3Pos)
  return v3pos_.Get(index);
}
void FightUseSkillAction::set_v3pos(int index, float value) {
  v3pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:FightUseSkillAction.V3Pos)
}
void FightUseSkillAction::add_v3pos(float value) {
  v3pos_.Add(value);
  // @@protoc_insertion_point(field_add:FightUseSkillAction.V3Pos)
}
const ::google::protobuf::RepeatedField< float >&
FightUseSkillAction::v3pos() const {
  // @@protoc_insertion_point(field_list:FightUseSkillAction.V3Pos)
  return v3pos_;
}
::google::protobuf::RepeatedField< float >*
FightUseSkillAction::mutable_v3pos() {
  // @@protoc_insertion_point(field_mutable_list:FightUseSkillAction.V3Pos)
  return &v3pos_;
}

// optional sint32 Time = 8 [default = -1];
bool FightUseSkillAction::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FightUseSkillAction::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
void FightUseSkillAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void FightUseSkillAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
::google::protobuf::int32 FightUseSkillAction::time() const {
  // @@protoc_insertion_point(field_get:FightUseSkillAction.Time)
  return time_;
}
void FightUseSkillAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightUseSkillAction.Time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightBuffAction::kObjIdFieldNumber;
const int FightBuffAction::kAttackerIdFieldNumber;
const int FightBuffAction::kOpTypeFieldNumber;
const int FightBuffAction::kBuffIdFieldNumber;
const int FightBuffAction::kRemainTimeFieldNumber;
const int FightBuffAction::kBuffLvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightBuffAction::FightBuffAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightBuffAction)
}
FightBuffAction::FightBuffAction(const FightBuffAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&objid_, &from.objid_,
    static_cast<size_t>(reinterpret_cast<char*>(&bufflv_) -
    reinterpret_cast<char*>(&objid_)) + sizeof(bufflv_));
  // @@protoc_insertion_point(copy_constructor:FightBuffAction)
}

void FightBuffAction::SharedCtor() {
  _cached_size_ = 0;
  objid_ = -1;
  attackerid_ = -1;
  optype_ = -1;
  buffid_ = -1;
  remaintime_ = -1;
  bufflv_ = -1;
}

FightBuffAction::~FightBuffAction() {
  // @@protoc_insertion_point(destructor:FightBuffAction)
  SharedDtor();
}

void FightBuffAction::SharedDtor() {
}

void FightBuffAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightBuffAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightBuffAction& FightBuffAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightBuffAction* FightBuffAction::New(::google::protobuf::Arena* arena) const {
  FightBuffAction* n = new FightBuffAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightBuffAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightBuffAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    objid_ = -1;
    attackerid_ = -1;
    optype_ = -1;
    buffid_ = -1;
    remaintime_ = -1;
    bufflv_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightBuffAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightBuffAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ObjId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 AttackerId = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_attackerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &attackerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 OpType = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_optype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &optype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 BuffId = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_buffid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &buffid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 RemainTime = 7 [default = -1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_remaintime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &remaintime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 BuffLv = 8 [default = -1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_bufflv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bufflv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightBuffAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightBuffAction)
  return false;
#undef DO_
}

void FightBuffAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightBuffAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 2 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->objid(), output);
  }

  // optional sint32 AttackerId = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->attackerid(), output);
  }

  // optional sint32 OpType = 4 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->optype(), output);
  }

  // optional sint32 BuffId = 5 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->buffid(), output);
  }

  // optional sint32 RemainTime = 7 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->remaintime(), output);
  }

  // optional sint32 BuffLv = 8 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->bufflv(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightBuffAction)
}

::google::protobuf::uint8* FightBuffAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightBuffAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 2 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->objid(), target);
  }

  // optional sint32 AttackerId = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->attackerid(), target);
  }

  // optional sint32 OpType = 4 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->optype(), target);
  }

  // optional sint32 BuffId = 5 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->buffid(), target);
  }

  // optional sint32 RemainTime = 7 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->remaintime(), target);
  }

  // optional sint32 BuffLv = 8 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->bufflv(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightBuffAction)
  return target;
}

size_t FightBuffAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightBuffAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional sint32 ObjId = 2 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

    // optional sint32 AttackerId = 3 [default = -1];
    if (has_attackerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->attackerid());
    }

    // optional sint32 OpType = 4 [default = -1];
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->optype());
    }

    // optional sint32 BuffId = 5 [default = -1];
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->buffid());
    }

    // optional sint32 RemainTime = 7 [default = -1];
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->remaintime());
    }

    // optional sint32 BuffLv = 8 [default = -1];
    if (has_bufflv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bufflv());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightBuffAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightBuffAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightBuffAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightBuffAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightBuffAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightBuffAction)
    MergeFrom(*source);
  }
}

void FightBuffAction::MergeFrom(const FightBuffAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightBuffAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      objid_ = from.objid_;
    }
    if (cached_has_bits & 0x00000002u) {
      attackerid_ = from.attackerid_;
    }
    if (cached_has_bits & 0x00000004u) {
      optype_ = from.optype_;
    }
    if (cached_has_bits & 0x00000008u) {
      buffid_ = from.buffid_;
    }
    if (cached_has_bits & 0x00000010u) {
      remaintime_ = from.remaintime_;
    }
    if (cached_has_bits & 0x00000020u) {
      bufflv_ = from.bufflv_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightBuffAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightBuffAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightBuffAction::CopyFrom(const FightBuffAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightBuffAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightBuffAction::IsInitialized() const {
  return true;
}

void FightBuffAction::Swap(FightBuffAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightBuffAction::InternalSwap(FightBuffAction* other) {
  using std::swap;
  swap(objid_, other->objid_);
  swap(attackerid_, other->attackerid_);
  swap(optype_, other->optype_);
  swap(buffid_, other->buffid_);
  swap(remaintime_, other->remaintime_);
  swap(bufflv_, other->bufflv_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightBuffAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightBuffAction

// optional sint32 ObjId = 2 [default = -1];
bool FightBuffAction::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightBuffAction::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
void FightBuffAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightBuffAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightBuffAction::objid() const {
  // @@protoc_insertion_point(field_get:FightBuffAction.ObjId)
  return objid_;
}
void FightBuffAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightBuffAction.ObjId)
}

// optional sint32 AttackerId = 3 [default = -1];
bool FightBuffAction::has_attackerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightBuffAction::set_has_attackerid() {
  _has_bits_[0] |= 0x00000002u;
}
void FightBuffAction::clear_has_attackerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightBuffAction::clear_attackerid() {
  attackerid_ = -1;
  clear_has_attackerid();
}
::google::protobuf::int32 FightBuffAction::attackerid() const {
  // @@protoc_insertion_point(field_get:FightBuffAction.AttackerId)
  return attackerid_;
}
void FightBuffAction::set_attackerid(::google::protobuf::int32 value) {
  set_has_attackerid();
  attackerid_ = value;
  // @@protoc_insertion_point(field_set:FightBuffAction.AttackerId)
}

// optional sint32 OpType = 4 [default = -1];
bool FightBuffAction::has_optype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightBuffAction::set_has_optype() {
  _has_bits_[0] |= 0x00000004u;
}
void FightBuffAction::clear_has_optype() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightBuffAction::clear_optype() {
  optype_ = -1;
  clear_has_optype();
}
::google::protobuf::int32 FightBuffAction::optype() const {
  // @@protoc_insertion_point(field_get:FightBuffAction.OpType)
  return optype_;
}
void FightBuffAction::set_optype(::google::protobuf::int32 value) {
  set_has_optype();
  optype_ = value;
  // @@protoc_insertion_point(field_set:FightBuffAction.OpType)
}

// optional sint32 BuffId = 5 [default = -1];
bool FightBuffAction::has_buffid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightBuffAction::set_has_buffid() {
  _has_bits_[0] |= 0x00000008u;
}
void FightBuffAction::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightBuffAction::clear_buffid() {
  buffid_ = -1;
  clear_has_buffid();
}
::google::protobuf::int32 FightBuffAction::buffid() const {
  // @@protoc_insertion_point(field_get:FightBuffAction.BuffId)
  return buffid_;
}
void FightBuffAction::set_buffid(::google::protobuf::int32 value) {
  set_has_buffid();
  buffid_ = value;
  // @@protoc_insertion_point(field_set:FightBuffAction.BuffId)
}

// optional sint32 RemainTime = 7 [default = -1];
bool FightBuffAction::has_remaintime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FightBuffAction::set_has_remaintime() {
  _has_bits_[0] |= 0x00000010u;
}
void FightBuffAction::clear_has_remaintime() {
  _has_bits_[0] &= ~0x00000010u;
}
void FightBuffAction::clear_remaintime() {
  remaintime_ = -1;
  clear_has_remaintime();
}
::google::protobuf::int32 FightBuffAction::remaintime() const {
  // @@protoc_insertion_point(field_get:FightBuffAction.RemainTime)
  return remaintime_;
}
void FightBuffAction::set_remaintime(::google::protobuf::int32 value) {
  set_has_remaintime();
  remaintime_ = value;
  // @@protoc_insertion_point(field_set:FightBuffAction.RemainTime)
}

// optional sint32 BuffLv = 8 [default = -1];
bool FightBuffAction::has_bufflv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FightBuffAction::set_has_bufflv() {
  _has_bits_[0] |= 0x00000020u;
}
void FightBuffAction::clear_has_bufflv() {
  _has_bits_[0] &= ~0x00000020u;
}
void FightBuffAction::clear_bufflv() {
  bufflv_ = -1;
  clear_has_bufflv();
}
::google::protobuf::int32 FightBuffAction::bufflv() const {
  // @@protoc_insertion_point(field_get:FightBuffAction.BuffLv)
  return bufflv_;
}
void FightBuffAction::set_bufflv(::google::protobuf::int32 value) {
  set_has_bufflv();
  bufflv_ = value;
  // @@protoc_insertion_point(field_set:FightBuffAction.BuffLv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightCharHitAction::kObjIdFieldNumber;
const int FightCharHitAction::kSkillIdFieldNumber;
const int FightCharHitAction::kTargetListFieldNumber;
const int FightCharHitAction::kSeqFieldNumber;
const int FightCharHitAction::kPosInfoFieldNumber;
const int FightCharHitAction::kBackDirFieldNumber;
const int FightCharHitAction::kSegmentIndexFieldNumber;
const int FightCharHitAction::kAttackSegmentFieldNumber;
const int FightCharHitAction::kIsHitGroundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightCharHitAction::FightCharHitAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightCharHitAction)
}
FightCharHitAction::FightCharHitAction(const FightCharHitAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      targetlist_(from.targetlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  posinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_posinfo()) {
    posinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo_);
  }
  ::memcpy(&backdir_, &from.backdir_,
    static_cast<size_t>(reinterpret_cast<char*>(&segmentindex_) -
    reinterpret_cast<char*>(&backdir_)) + sizeof(segmentindex_));
  // @@protoc_insertion_point(copy_constructor:FightCharHitAction)
}

void FightCharHitAction::SharedCtor() {
  _cached_size_ = 0;
  posinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&backdir_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ishitground_) -
      reinterpret_cast<char*>(&backdir_)) + sizeof(ishitground_));
  attacksegment_ = -1;
  objid_ = -1;
  skillid_ = -1;
  seq_ = -1;
  segmentindex_ = -1;
}

FightCharHitAction::~FightCharHitAction() {
  // @@protoc_insertion_point(destructor:FightCharHitAction)
  SharedDtor();
}

void FightCharHitAction::SharedDtor() {
  posinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FightCharHitAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightCharHitAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightCharHitAction& FightCharHitAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightCharHitAction* FightCharHitAction::New(::google::protobuf::Arena* arena) const {
  FightCharHitAction* n = new FightCharHitAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightCharHitAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightCharHitAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targetlist_.Clear();
  if (has_posinfo()) {
    GOOGLE_DCHECK(!posinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*posinfo_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&backdir_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ishitground_) -
        reinterpret_cast<char*>(&backdir_)) + sizeof(ishitground_));
    attacksegment_ = -1;
    objid_ = -1;
    skillid_ = -1;
    seq_ = -1;
    segmentindex_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightCharHitAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightCharHitAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ObjId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 SkillId = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_skillid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skillid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .FightHitTargetInfo TargetList = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targetlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Seq = 8 [default = -1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes PosInfo = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_posinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 BackDir = 25 [default = 0];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_backdir();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &backdir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 SegmentIndex = 30 [default = -1];
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_segmentindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &segmentindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 AttackSegment = 31 [default = -1];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_attacksegment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &attacksegment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool IsHitGround = 32 [default = false];
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_ishitground();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishitground_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightCharHitAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightCharHitAction)
  return false;
#undef DO_
}

void FightCharHitAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightCharHitAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 2 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->objid(), output);
  }

  // optional sint32 SkillId = 3 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->skillid(), output);
  }

  // repeated .FightHitTargetInfo TargetList = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->targetlist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->targetlist(static_cast<int>(i)), output);
  }

  // optional sint32 Seq = 8 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->seq(), output);
  }

  // optional bytes PosInfo = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->posinfo(), output);
  }

  // optional sint32 BackDir = 25 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(25, this->backdir(), output);
  }

  // optional sint32 SegmentIndex = 30 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(30, this->segmentindex(), output);
  }

  // optional sint32 AttackSegment = 31 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(31, this->attacksegment(), output);
  }

  // optional bool IsHitGround = 32 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->ishitground(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightCharHitAction)
}

::google::protobuf::uint8* FightCharHitAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightCharHitAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 2 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->objid(), target);
  }

  // optional sint32 SkillId = 3 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->skillid(), target);
  }

  // repeated .FightHitTargetInfo TargetList = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->targetlist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->targetlist(static_cast<int>(i)), deterministic, target);
  }

  // optional sint32 Seq = 8 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->seq(), target);
  }

  // optional bytes PosInfo = 11;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->posinfo(), target);
  }

  // optional sint32 BackDir = 25 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(25, this->backdir(), target);
  }

  // optional sint32 SegmentIndex = 30 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(30, this->segmentindex(), target);
  }

  // optional sint32 AttackSegment = 31 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(31, this->attacksegment(), target);
  }

  // optional bool IsHitGround = 32 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->ishitground(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightCharHitAction)
  return target;
}

size_t FightCharHitAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightCharHitAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .FightHitTargetInfo TargetList = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->targetlist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetlist(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes PosInfo = 11;
    if (has_posinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->posinfo());
    }

    // optional sint32 BackDir = 25 [default = 0];
    if (has_backdir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->backdir());
    }

    // optional bool IsHitGround = 32 [default = false];
    if (has_ishitground()) {
      total_size += 2 + 1;
    }

    // optional sint32 AttackSegment = 31 [default = -1];
    if (has_attacksegment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->attacksegment());
    }

    // optional sint32 ObjId = 2 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

    // optional sint32 SkillId = 3 [default = -1];
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skillid());
    }

    // optional sint32 Seq = 8 [default = -1];
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->seq());
    }

    // optional sint32 SegmentIndex = 30 [default = -1];
    if (has_segmentindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->segmentindex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightCharHitAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightCharHitAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightCharHitAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightCharHitAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightCharHitAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightCharHitAction)
    MergeFrom(*source);
  }
}

void FightCharHitAction::MergeFrom(const FightCharHitAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightCharHitAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targetlist_.MergeFrom(from.targetlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_posinfo();
      posinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo_);
    }
    if (cached_has_bits & 0x00000002u) {
      backdir_ = from.backdir_;
    }
    if (cached_has_bits & 0x00000004u) {
      ishitground_ = from.ishitground_;
    }
    if (cached_has_bits & 0x00000008u) {
      attacksegment_ = from.attacksegment_;
    }
    if (cached_has_bits & 0x00000010u) {
      objid_ = from.objid_;
    }
    if (cached_has_bits & 0x00000020u) {
      skillid_ = from.skillid_;
    }
    if (cached_has_bits & 0x00000040u) {
      seq_ = from.seq_;
    }
    if (cached_has_bits & 0x00000080u) {
      segmentindex_ = from.segmentindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightCharHitAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightCharHitAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightCharHitAction::CopyFrom(const FightCharHitAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightCharHitAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightCharHitAction::IsInitialized() const {
  return true;
}

void FightCharHitAction::Swap(FightCharHitAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightCharHitAction::InternalSwap(FightCharHitAction* other) {
  using std::swap;
  targetlist_.InternalSwap(&other->targetlist_);
  posinfo_.Swap(&other->posinfo_);
  swap(backdir_, other->backdir_);
  swap(ishitground_, other->ishitground_);
  swap(attacksegment_, other->attacksegment_);
  swap(objid_, other->objid_);
  swap(skillid_, other->skillid_);
  swap(seq_, other->seq_);
  swap(segmentindex_, other->segmentindex_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightCharHitAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightCharHitAction

// optional sint32 ObjId = 2 [default = -1];
bool FightCharHitAction::has_objid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FightCharHitAction::set_has_objid() {
  _has_bits_[0] |= 0x00000010u;
}
void FightCharHitAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000010u;
}
void FightCharHitAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightCharHitAction::objid() const {
  // @@protoc_insertion_point(field_get:FightCharHitAction.ObjId)
  return objid_;
}
void FightCharHitAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightCharHitAction.ObjId)
}

// optional sint32 SkillId = 3 [default = -1];
bool FightCharHitAction::has_skillid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FightCharHitAction::set_has_skillid() {
  _has_bits_[0] |= 0x00000020u;
}
void FightCharHitAction::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000020u;
}
void FightCharHitAction::clear_skillid() {
  skillid_ = -1;
  clear_has_skillid();
}
::google::protobuf::int32 FightCharHitAction::skillid() const {
  // @@protoc_insertion_point(field_get:FightCharHitAction.SkillId)
  return skillid_;
}
void FightCharHitAction::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:FightCharHitAction.SkillId)
}

// repeated .FightHitTargetInfo TargetList = 7;
int FightCharHitAction::targetlist_size() const {
  return targetlist_.size();
}
void FightCharHitAction::clear_targetlist() {
  targetlist_.Clear();
}
const ::FightHitTargetInfo& FightCharHitAction::targetlist(int index) const {
  // @@protoc_insertion_point(field_get:FightCharHitAction.TargetList)
  return targetlist_.Get(index);
}
::FightHitTargetInfo* FightCharHitAction::mutable_targetlist(int index) {
  // @@protoc_insertion_point(field_mutable:FightCharHitAction.TargetList)
  return targetlist_.Mutable(index);
}
::FightHitTargetInfo* FightCharHitAction::add_targetlist() {
  // @@protoc_insertion_point(field_add:FightCharHitAction.TargetList)
  return targetlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::FightHitTargetInfo >*
FightCharHitAction::mutable_targetlist() {
  // @@protoc_insertion_point(field_mutable_list:FightCharHitAction.TargetList)
  return &targetlist_;
}
const ::google::protobuf::RepeatedPtrField< ::FightHitTargetInfo >&
FightCharHitAction::targetlist() const {
  // @@protoc_insertion_point(field_list:FightCharHitAction.TargetList)
  return targetlist_;
}

// optional sint32 Seq = 8 [default = -1];
bool FightCharHitAction::has_seq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FightCharHitAction::set_has_seq() {
  _has_bits_[0] |= 0x00000040u;
}
void FightCharHitAction::clear_has_seq() {
  _has_bits_[0] &= ~0x00000040u;
}
void FightCharHitAction::clear_seq() {
  seq_ = -1;
  clear_has_seq();
}
::google::protobuf::int32 FightCharHitAction::seq() const {
  // @@protoc_insertion_point(field_get:FightCharHitAction.Seq)
  return seq_;
}
void FightCharHitAction::set_seq(::google::protobuf::int32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:FightCharHitAction.Seq)
}

// optional bytes PosInfo = 11;
bool FightCharHitAction::has_posinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightCharHitAction::set_has_posinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void FightCharHitAction::clear_has_posinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightCharHitAction::clear_posinfo() {
  posinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo();
}
const ::std::string& FightCharHitAction::posinfo() const {
  // @@protoc_insertion_point(field_get:FightCharHitAction.PosInfo)
  return posinfo_.GetNoArena();
}
void FightCharHitAction::set_posinfo(const ::std::string& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightCharHitAction.PosInfo)
}
#if LANG_CXX11
void FightCharHitAction::set_posinfo(::std::string&& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightCharHitAction.PosInfo)
}
#endif
void FightCharHitAction::set_posinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightCharHitAction.PosInfo)
}
void FightCharHitAction::set_posinfo(const void* value, size_t size) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightCharHitAction.PosInfo)
}
::std::string* FightCharHitAction::mutable_posinfo() {
  set_has_posinfo();
  // @@protoc_insertion_point(field_mutable:FightCharHitAction.PosInfo)
  return posinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightCharHitAction::release_posinfo() {
  // @@protoc_insertion_point(field_release:FightCharHitAction.PosInfo)
  clear_has_posinfo();
  return posinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightCharHitAction::set_allocated_posinfo(::std::string* posinfo) {
  if (posinfo != NULL) {
    set_has_posinfo();
  } else {
    clear_has_posinfo();
  }
  posinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo);
  // @@protoc_insertion_point(field_set_allocated:FightCharHitAction.PosInfo)
}

// optional sint32 BackDir = 25 [default = 0];
bool FightCharHitAction::has_backdir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightCharHitAction::set_has_backdir() {
  _has_bits_[0] |= 0x00000002u;
}
void FightCharHitAction::clear_has_backdir() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightCharHitAction::clear_backdir() {
  backdir_ = 0;
  clear_has_backdir();
}
::google::protobuf::int32 FightCharHitAction::backdir() const {
  // @@protoc_insertion_point(field_get:FightCharHitAction.BackDir)
  return backdir_;
}
void FightCharHitAction::set_backdir(::google::protobuf::int32 value) {
  set_has_backdir();
  backdir_ = value;
  // @@protoc_insertion_point(field_set:FightCharHitAction.BackDir)
}

// optional sint32 SegmentIndex = 30 [default = -1];
bool FightCharHitAction::has_segmentindex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FightCharHitAction::set_has_segmentindex() {
  _has_bits_[0] |= 0x00000080u;
}
void FightCharHitAction::clear_has_segmentindex() {
  _has_bits_[0] &= ~0x00000080u;
}
void FightCharHitAction::clear_segmentindex() {
  segmentindex_ = -1;
  clear_has_segmentindex();
}
::google::protobuf::int32 FightCharHitAction::segmentindex() const {
  // @@protoc_insertion_point(field_get:FightCharHitAction.SegmentIndex)
  return segmentindex_;
}
void FightCharHitAction::set_segmentindex(::google::protobuf::int32 value) {
  set_has_segmentindex();
  segmentindex_ = value;
  // @@protoc_insertion_point(field_set:FightCharHitAction.SegmentIndex)
}

// optional sint32 AttackSegment = 31 [default = -1];
bool FightCharHitAction::has_attacksegment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightCharHitAction::set_has_attacksegment() {
  _has_bits_[0] |= 0x00000008u;
}
void FightCharHitAction::clear_has_attacksegment() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightCharHitAction::clear_attacksegment() {
  attacksegment_ = -1;
  clear_has_attacksegment();
}
::google::protobuf::int32 FightCharHitAction::attacksegment() const {
  // @@protoc_insertion_point(field_get:FightCharHitAction.AttackSegment)
  return attacksegment_;
}
void FightCharHitAction::set_attacksegment(::google::protobuf::int32 value) {
  set_has_attacksegment();
  attacksegment_ = value;
  // @@protoc_insertion_point(field_set:FightCharHitAction.AttackSegment)
}

// optional bool IsHitGround = 32 [default = false];
bool FightCharHitAction::has_ishitground() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightCharHitAction::set_has_ishitground() {
  _has_bits_[0] |= 0x00000004u;
}
void FightCharHitAction::clear_has_ishitground() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightCharHitAction::clear_ishitground() {
  ishitground_ = false;
  clear_has_ishitground();
}
bool FightCharHitAction::ishitground() const {
  // @@protoc_insertion_point(field_get:FightCharHitAction.IsHitGround)
  return ishitground_;
}
void FightCharHitAction::set_ishitground(bool value) {
  set_has_ishitground();
  ishitground_ = value;
  // @@protoc_insertion_point(field_set:FightCharHitAction.IsHitGround)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightOfflineAction::kObjIdFieldNumber;
const int FightOfflineAction::kIsOfflineFieldNumber;
const int FightOfflineAction::kIsAIDelegateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightOfflineAction::FightOfflineAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightOfflineAction)
}
FightOfflineAction::FightOfflineAction(const FightOfflineAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&isoffline_, &from.isoffline_,
    static_cast<size_t>(reinterpret_cast<char*>(&objid_) -
    reinterpret_cast<char*>(&isoffline_)) + sizeof(objid_));
  // @@protoc_insertion_point(copy_constructor:FightOfflineAction)
}

void FightOfflineAction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&isoffline_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isaidelegate_) -
      reinterpret_cast<char*>(&isoffline_)) + sizeof(isaidelegate_));
  objid_ = -1;
}

FightOfflineAction::~FightOfflineAction() {
  // @@protoc_insertion_point(destructor:FightOfflineAction)
  SharedDtor();
}

void FightOfflineAction::SharedDtor() {
}

void FightOfflineAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightOfflineAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightOfflineAction& FightOfflineAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightOfflineAction* FightOfflineAction::New(::google::protobuf::Arena* arena) const {
  FightOfflineAction* n = new FightOfflineAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightOfflineAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightOfflineAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&isoffline_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isaidelegate_) -
        reinterpret_cast<char*>(&isoffline_)) + sizeof(isaidelegate_));
    objid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightOfflineAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightOfflineAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ObjId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool IsOffline = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_isoffline();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isoffline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool IsAIDelegate = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_isaidelegate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isaidelegate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightOfflineAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightOfflineAction)
  return false;
#undef DO_
}

void FightOfflineAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightOfflineAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->objid(), output);
  }

  // optional bool IsOffline = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isoffline(), output);
  }

  // optional bool IsAIDelegate = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isaidelegate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightOfflineAction)
}

::google::protobuf::uint8* FightOfflineAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightOfflineAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->objid(), target);
  }

  // optional bool IsOffline = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isoffline(), target);
  }

  // optional bool IsAIDelegate = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isaidelegate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightOfflineAction)
  return target;
}

size_t FightOfflineAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightOfflineAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool IsOffline = 2 [default = false];
    if (has_isoffline()) {
      total_size += 1 + 1;
    }

    // optional bool IsAIDelegate = 3 [default = false];
    if (has_isaidelegate()) {
      total_size += 1 + 1;
    }

    // optional sint32 ObjId = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightOfflineAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightOfflineAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightOfflineAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightOfflineAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightOfflineAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightOfflineAction)
    MergeFrom(*source);
  }
}

void FightOfflineAction::MergeFrom(const FightOfflineAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightOfflineAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      isoffline_ = from.isoffline_;
    }
    if (cached_has_bits & 0x00000002u) {
      isaidelegate_ = from.isaidelegate_;
    }
    if (cached_has_bits & 0x00000004u) {
      objid_ = from.objid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightOfflineAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightOfflineAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightOfflineAction::CopyFrom(const FightOfflineAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightOfflineAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightOfflineAction::IsInitialized() const {
  return true;
}

void FightOfflineAction::Swap(FightOfflineAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightOfflineAction::InternalSwap(FightOfflineAction* other) {
  using std::swap;
  swap(isoffline_, other->isoffline_);
  swap(isaidelegate_, other->isaidelegate_);
  swap(objid_, other->objid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightOfflineAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightOfflineAction

// optional sint32 ObjId = 1 [default = -1];
bool FightOfflineAction::has_objid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightOfflineAction::set_has_objid() {
  _has_bits_[0] |= 0x00000004u;
}
void FightOfflineAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightOfflineAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightOfflineAction::objid() const {
  // @@protoc_insertion_point(field_get:FightOfflineAction.ObjId)
  return objid_;
}
void FightOfflineAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightOfflineAction.ObjId)
}

// optional bool IsOffline = 2 [default = false];
bool FightOfflineAction::has_isoffline() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightOfflineAction::set_has_isoffline() {
  _has_bits_[0] |= 0x00000001u;
}
void FightOfflineAction::clear_has_isoffline() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightOfflineAction::clear_isoffline() {
  isoffline_ = false;
  clear_has_isoffline();
}
bool FightOfflineAction::isoffline() const {
  // @@protoc_insertion_point(field_get:FightOfflineAction.IsOffline)
  return isoffline_;
}
void FightOfflineAction::set_isoffline(bool value) {
  set_has_isoffline();
  isoffline_ = value;
  // @@protoc_insertion_point(field_set:FightOfflineAction.IsOffline)
}

// optional bool IsAIDelegate = 3 [default = false];
bool FightOfflineAction::has_isaidelegate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightOfflineAction::set_has_isaidelegate() {
  _has_bits_[0] |= 0x00000002u;
}
void FightOfflineAction::clear_has_isaidelegate() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightOfflineAction::clear_isaidelegate() {
  isaidelegate_ = false;
  clear_has_isaidelegate();
}
bool FightOfflineAction::isaidelegate() const {
  // @@protoc_insertion_point(field_get:FightOfflineAction.IsAIDelegate)
  return isaidelegate_;
}
void FightOfflineAction::set_isaidelegate(bool value) {
  set_has_isaidelegate();
  isaidelegate_ = value;
  // @@protoc_insertion_point(field_set:FightOfflineAction.IsAIDelegate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightStateAction::kTypeFieldNumber;
const int FightStateAction::kObjIdFieldNumber;
const int FightStateAction::kPosInfoFieldNumber;
const int FightStateAction::kTargetPosFieldNumber;
const int FightStateAction::kIntParaFieldNumber;
const int FightStateAction::kLadderObjIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightStateAction::FightStateAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightStateAction)
}
FightStateAction::FightStateAction(const FightStateAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  posinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_posinfo()) {
    posinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo_);
  }
  targetpos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_targetpos()) {
    targetpos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetpos_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&ladderobjid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(ladderobjid_));
  // @@protoc_insertion_point(copy_constructor:FightStateAction)
}

void FightStateAction::SharedCtor() {
  _cached_size_ = 0;
  posinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetpos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = -1;
  objid_ = -1;
  intpara_ = -1;
  ladderobjid_ = -1;
}

FightStateAction::~FightStateAction() {
  // @@protoc_insertion_point(destructor:FightStateAction)
  SharedDtor();
}

void FightStateAction::SharedDtor() {
  posinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetpos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FightStateAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightStateAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightStateAction& FightStateAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightStateAction* FightStateAction::New(::google::protobuf::Arena* arena) const {
  FightStateAction* n = new FightStateAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightStateAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightStateAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!posinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*posinfo_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!targetpos_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*targetpos_.UnsafeRawStringPointer())->clear();
    }
    type_ = -1;
    objid_ = -1;
    intpara_ = -1;
    ladderobjid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightStateAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightStateAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Type = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ObjId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes PosInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_posinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes TargetPos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_targetpos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 IntPara = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_intpara();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &intpara_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 LadderObjId = 6 [default = -1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ladderobjid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ladderobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightStateAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightStateAction)
  return false;
#undef DO_
}

void FightStateAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightStateAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->type(), output);
  }

  // optional sint32 ObjId = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->objid(), output);
  }

  // optional bytes PosInfo = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->posinfo(), output);
  }

  // optional bytes TargetPos = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->targetpos(), output);
  }

  // optional sint32 IntPara = 5 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->intpara(), output);
  }

  // optional sint32 LadderObjId = 6 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->ladderobjid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightStateAction)
}

::google::protobuf::uint8* FightStateAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightStateAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->type(), target);
  }

  // optional sint32 ObjId = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->objid(), target);
  }

  // optional bytes PosInfo = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->posinfo(), target);
  }

  // optional bytes TargetPos = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->targetpos(), target);
  }

  // optional sint32 IntPara = 5 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->intpara(), target);
  }

  // optional sint32 LadderObjId = 6 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->ladderobjid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightStateAction)
  return target;
}

size_t FightStateAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightStateAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes PosInfo = 3;
    if (has_posinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->posinfo());
    }

    // optional bytes TargetPos = 4;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->targetpos());
    }

    // optional sint32 Type = 1 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 ObjId = 2 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

    // optional sint32 IntPara = 5 [default = -1];
    if (has_intpara()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->intpara());
    }

    // optional sint32 LadderObjId = 6 [default = -1];
    if (has_ladderobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ladderobjid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightStateAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightStateAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightStateAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightStateAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightStateAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightStateAction)
    MergeFrom(*source);
  }
}

void FightStateAction::MergeFrom(const FightStateAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightStateAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_posinfo();
      posinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_targetpos();
      targetpos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetpos_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      objid_ = from.objid_;
    }
    if (cached_has_bits & 0x00000010u) {
      intpara_ = from.intpara_;
    }
    if (cached_has_bits & 0x00000020u) {
      ladderobjid_ = from.ladderobjid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightStateAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightStateAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightStateAction::CopyFrom(const FightStateAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightStateAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightStateAction::IsInitialized() const {
  return true;
}

void FightStateAction::Swap(FightStateAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightStateAction::InternalSwap(FightStateAction* other) {
  using std::swap;
  posinfo_.Swap(&other->posinfo_);
  targetpos_.Swap(&other->targetpos_);
  swap(type_, other->type_);
  swap(objid_, other->objid_);
  swap(intpara_, other->intpara_);
  swap(ladderobjid_, other->ladderobjid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightStateAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightStateAction

// optional sint32 Type = 1 [default = -1];
bool FightStateAction::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightStateAction::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void FightStateAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightStateAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
::google::protobuf::int32 FightStateAction::type() const {
  // @@protoc_insertion_point(field_get:FightStateAction.Type)
  return type_;
}
void FightStateAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightStateAction.Type)
}

// optional sint32 ObjId = 2 [default = -1];
bool FightStateAction::has_objid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightStateAction::set_has_objid() {
  _has_bits_[0] |= 0x00000008u;
}
void FightStateAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightStateAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightStateAction::objid() const {
  // @@protoc_insertion_point(field_get:FightStateAction.ObjId)
  return objid_;
}
void FightStateAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightStateAction.ObjId)
}

// optional bytes PosInfo = 3;
bool FightStateAction::has_posinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightStateAction::set_has_posinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void FightStateAction::clear_has_posinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightStateAction::clear_posinfo() {
  posinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo();
}
const ::std::string& FightStateAction::posinfo() const {
  // @@protoc_insertion_point(field_get:FightStateAction.PosInfo)
  return posinfo_.GetNoArena();
}
void FightStateAction::set_posinfo(const ::std::string& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightStateAction.PosInfo)
}
#if LANG_CXX11
void FightStateAction::set_posinfo(::std::string&& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightStateAction.PosInfo)
}
#endif
void FightStateAction::set_posinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightStateAction.PosInfo)
}
void FightStateAction::set_posinfo(const void* value, size_t size) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightStateAction.PosInfo)
}
::std::string* FightStateAction::mutable_posinfo() {
  set_has_posinfo();
  // @@protoc_insertion_point(field_mutable:FightStateAction.PosInfo)
  return posinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightStateAction::release_posinfo() {
  // @@protoc_insertion_point(field_release:FightStateAction.PosInfo)
  clear_has_posinfo();
  return posinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightStateAction::set_allocated_posinfo(::std::string* posinfo) {
  if (posinfo != NULL) {
    set_has_posinfo();
  } else {
    clear_has_posinfo();
  }
  posinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo);
  // @@protoc_insertion_point(field_set_allocated:FightStateAction.PosInfo)
}

// optional bytes TargetPos = 4;
bool FightStateAction::has_targetpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightStateAction::set_has_targetpos() {
  _has_bits_[0] |= 0x00000002u;
}
void FightStateAction::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightStateAction::clear_targetpos() {
  targetpos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetpos();
}
const ::std::string& FightStateAction::targetpos() const {
  // @@protoc_insertion_point(field_get:FightStateAction.TargetPos)
  return targetpos_.GetNoArena();
}
void FightStateAction::set_targetpos(const ::std::string& value) {
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightStateAction.TargetPos)
}
#if LANG_CXX11
void FightStateAction::set_targetpos(::std::string&& value) {
  set_has_targetpos();
  targetpos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightStateAction.TargetPos)
}
#endif
void FightStateAction::set_targetpos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightStateAction.TargetPos)
}
void FightStateAction::set_targetpos(const void* value, size_t size) {
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightStateAction.TargetPos)
}
::std::string* FightStateAction::mutable_targetpos() {
  set_has_targetpos();
  // @@protoc_insertion_point(field_mutable:FightStateAction.TargetPos)
  return targetpos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightStateAction::release_targetpos() {
  // @@protoc_insertion_point(field_release:FightStateAction.TargetPos)
  clear_has_targetpos();
  return targetpos_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightStateAction::set_allocated_targetpos(::std::string* targetpos) {
  if (targetpos != NULL) {
    set_has_targetpos();
  } else {
    clear_has_targetpos();
  }
  targetpos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetpos);
  // @@protoc_insertion_point(field_set_allocated:FightStateAction.TargetPos)
}

// optional sint32 IntPara = 5 [default = -1];
bool FightStateAction::has_intpara() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FightStateAction::set_has_intpara() {
  _has_bits_[0] |= 0x00000010u;
}
void FightStateAction::clear_has_intpara() {
  _has_bits_[0] &= ~0x00000010u;
}
void FightStateAction::clear_intpara() {
  intpara_ = -1;
  clear_has_intpara();
}
::google::protobuf::int32 FightStateAction::intpara() const {
  // @@protoc_insertion_point(field_get:FightStateAction.IntPara)
  return intpara_;
}
void FightStateAction::set_intpara(::google::protobuf::int32 value) {
  set_has_intpara();
  intpara_ = value;
  // @@protoc_insertion_point(field_set:FightStateAction.IntPara)
}

// optional sint32 LadderObjId = 6 [default = -1];
bool FightStateAction::has_ladderobjid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FightStateAction::set_has_ladderobjid() {
  _has_bits_[0] |= 0x00000020u;
}
void FightStateAction::clear_has_ladderobjid() {
  _has_bits_[0] &= ~0x00000020u;
}
void FightStateAction::clear_ladderobjid() {
  ladderobjid_ = -1;
  clear_has_ladderobjid();
}
::google::protobuf::int32 FightStateAction::ladderobjid() const {
  // @@protoc_insertion_point(field_get:FightStateAction.LadderObjId)
  return ladderobjid_;
}
void FightStateAction::set_ladderobjid(::google::protobuf::int32 value) {
  set_has_ladderobjid();
  ladderobjid_ = value;
  // @@protoc_insertion_point(field_set:FightStateAction.LadderObjId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightCharDeadAction::kObjIdFieldNumber;
const int FightCharDeadAction::kPosInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightCharDeadAction::FightCharDeadAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightCharDeadAction)
}
FightCharDeadAction::FightCharDeadAction(const FightCharDeadAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  posinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_posinfo()) {
    posinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo_);
  }
  objid_ = from.objid_;
  // @@protoc_insertion_point(copy_constructor:FightCharDeadAction)
}

void FightCharDeadAction::SharedCtor() {
  _cached_size_ = 0;
  posinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objid_ = -1;
}

FightCharDeadAction::~FightCharDeadAction() {
  // @@protoc_insertion_point(destructor:FightCharDeadAction)
  SharedDtor();
}

void FightCharDeadAction::SharedDtor() {
  posinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FightCharDeadAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightCharDeadAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightCharDeadAction& FightCharDeadAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightCharDeadAction* FightCharDeadAction::New(::google::protobuf::Arena* arena) const {
  FightCharDeadAction* n = new FightCharDeadAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightCharDeadAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightCharDeadAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!posinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*posinfo_.UnsafeRawStringPointer())->clear();
    }
    objid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightCharDeadAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightCharDeadAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ObjId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes PosInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_posinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightCharDeadAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightCharDeadAction)
  return false;
#undef DO_
}

void FightCharDeadAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightCharDeadAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->objid(), output);
  }

  // optional bytes PosInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->posinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightCharDeadAction)
}

::google::protobuf::uint8* FightCharDeadAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightCharDeadAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->objid(), target);
  }

  // optional bytes PosInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->posinfo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightCharDeadAction)
  return target;
}

size_t FightCharDeadAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightCharDeadAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes PosInfo = 2;
    if (has_posinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->posinfo());
    }

    // optional sint32 ObjId = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightCharDeadAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightCharDeadAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightCharDeadAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightCharDeadAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightCharDeadAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightCharDeadAction)
    MergeFrom(*source);
  }
}

void FightCharDeadAction::MergeFrom(const FightCharDeadAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightCharDeadAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_posinfo();
      posinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo_);
    }
    if (cached_has_bits & 0x00000002u) {
      objid_ = from.objid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightCharDeadAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightCharDeadAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightCharDeadAction::CopyFrom(const FightCharDeadAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightCharDeadAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightCharDeadAction::IsInitialized() const {
  return true;
}

void FightCharDeadAction::Swap(FightCharDeadAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightCharDeadAction::InternalSwap(FightCharDeadAction* other) {
  using std::swap;
  posinfo_.Swap(&other->posinfo_);
  swap(objid_, other->objid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightCharDeadAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightCharDeadAction

// optional sint32 ObjId = 1 [default = -1];
bool FightCharDeadAction::has_objid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightCharDeadAction::set_has_objid() {
  _has_bits_[0] |= 0x00000002u;
}
void FightCharDeadAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightCharDeadAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightCharDeadAction::objid() const {
  // @@protoc_insertion_point(field_get:FightCharDeadAction.ObjId)
  return objid_;
}
void FightCharDeadAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightCharDeadAction.ObjId)
}

// optional bytes PosInfo = 2;
bool FightCharDeadAction::has_posinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightCharDeadAction::set_has_posinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void FightCharDeadAction::clear_has_posinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightCharDeadAction::clear_posinfo() {
  posinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo();
}
const ::std::string& FightCharDeadAction::posinfo() const {
  // @@protoc_insertion_point(field_get:FightCharDeadAction.PosInfo)
  return posinfo_.GetNoArena();
}
void FightCharDeadAction::set_posinfo(const ::std::string& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightCharDeadAction.PosInfo)
}
#if LANG_CXX11
void FightCharDeadAction::set_posinfo(::std::string&& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightCharDeadAction.PosInfo)
}
#endif
void FightCharDeadAction::set_posinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightCharDeadAction.PosInfo)
}
void FightCharDeadAction::set_posinfo(const void* value, size_t size) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightCharDeadAction.PosInfo)
}
::std::string* FightCharDeadAction::mutable_posinfo() {
  set_has_posinfo();
  // @@protoc_insertion_point(field_mutable:FightCharDeadAction.PosInfo)
  return posinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightCharDeadAction::release_posinfo() {
  // @@protoc_insertion_point(field_release:FightCharDeadAction.PosInfo)
  clear_has_posinfo();
  return posinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightCharDeadAction::set_allocated_posinfo(::std::string* posinfo) {
  if (posinfo != NULL) {
    set_has_posinfo();
  } else {
    clear_has_posinfo();
  }
  posinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo);
  // @@protoc_insertion_point(field_set_allocated:FightCharDeadAction.PosInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightCharReviveAction::kObjIdFieldNumber;
const int FightCharReviveAction::kPosInfoFieldNumber;
const int FightCharReviveAction::kCurHpFieldNumber;
const int FightCharReviveAction::kTypeFieldNumber;
const int FightCharReviveAction::kTimeFieldNumber;
const int FightCharReviveAction::kManualReviveFieldNumber;
const int FightCharReviveAction::kRemainTimesFieldNumber;
const int FightCharReviveAction::kNeedMoneyFieldNumber;
const int FightCharReviveAction::kMaxHPFieldNumber;
const int FightCharReviveAction::kTotalTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightCharReviveAction::FightCharReviveAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightCharReviveAction)
}
FightCharReviveAction::FightCharReviveAction(const FightCharReviveAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  posinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_posinfo()) {
    posinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo_);
  }
  ::memcpy(&curhp_, &from.curhp_,
    static_cast<size_t>(reinterpret_cast<char*>(&totaltimes_) -
    reinterpret_cast<char*>(&curhp_)) + sizeof(totaltimes_));
  // @@protoc_insertion_point(copy_constructor:FightCharReviveAction)
}

void FightCharReviveAction::SharedCtor() {
  _cached_size_ = 0;
  posinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&curhp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxhp_) -
      reinterpret_cast<char*>(&curhp_)) + sizeof(maxhp_));
  objid_ = -1;
  type_ = -1;
  time_ = -1;
  remaintimes_ = -1;
  needmoney_ = -1;
  totaltimes_ = -1;
}

FightCharReviveAction::~FightCharReviveAction() {
  // @@protoc_insertion_point(destructor:FightCharReviveAction)
  SharedDtor();
}

void FightCharReviveAction::SharedDtor() {
  posinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FightCharReviveAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightCharReviveAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightCharReviveAction& FightCharReviveAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightCharReviveAction* FightCharReviveAction::New(::google::protobuf::Arena* arena) const {
  FightCharReviveAction* n = new FightCharReviveAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightCharReviveAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightCharReviveAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_posinfo()) {
    GOOGLE_DCHECK(!posinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*posinfo_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&curhp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxhp_) -
        reinterpret_cast<char*>(&curhp_)) + sizeof(maxhp_));
    objid_ = -1;
    type_ = -1;
    time_ = -1;
    remaintimes_ = -1;
  }
  if (cached_has_bits & 768u) {
    needmoney_ = -1;
    totaltimes_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightCharReviveAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightCharReviveAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ObjId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes PosInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_posinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 CurHp = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_curhp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &curhp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Type = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Time = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ManualRevive = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_manualrevive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &manualrevive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 RemainTimes = 7 [default = -1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_remaintimes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &remaintimes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 NeedMoney = 8 [default = -1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_needmoney();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &needmoney_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 MaxHP = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_maxhp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &maxhp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TotalTimes = 11 [default = -1];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_totaltimes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &totaltimes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightCharReviveAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightCharReviveAction)
  return false;
#undef DO_
}

void FightCharReviveAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightCharReviveAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->objid(), output);
  }

  // optional bytes PosInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->posinfo(), output);
  }

  // optional sint32 CurHp = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->curhp(), output);
  }

  // optional sint32 Type = 4 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->type(), output);
  }

  // optional sint32 Time = 5 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->time(), output);
  }

  // optional sint32 ManualRevive = 6 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->manualrevive(), output);
  }

  // optional sint32 RemainTimes = 7 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->remaintimes(), output);
  }

  // optional sint32 NeedMoney = 8 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->needmoney(), output);
  }

  // optional sint32 MaxHP = 10 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->maxhp(), output);
  }

  // optional sint32 TotalTimes = 11 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->totaltimes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightCharReviveAction)
}

::google::protobuf::uint8* FightCharReviveAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightCharReviveAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->objid(), target);
  }

  // optional bytes PosInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->posinfo(), target);
  }

  // optional sint32 CurHp = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->curhp(), target);
  }

  // optional sint32 Type = 4 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->type(), target);
  }

  // optional sint32 Time = 5 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->time(), target);
  }

  // optional sint32 ManualRevive = 6 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->manualrevive(), target);
  }

  // optional sint32 RemainTimes = 7 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->remaintimes(), target);
  }

  // optional sint32 NeedMoney = 8 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->needmoney(), target);
  }

  // optional sint32 MaxHP = 10 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->maxhp(), target);
  }

  // optional sint32 TotalTimes = 11 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->totaltimes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightCharReviveAction)
  return target;
}

size_t FightCharReviveAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightCharReviveAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes PosInfo = 2;
    if (has_posinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->posinfo());
    }

    // optional sint32 CurHp = 3 [default = 0];
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->curhp());
    }

    // optional sint32 ManualRevive = 6 [default = 0];
    if (has_manualrevive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->manualrevive());
    }

    // optional sint32 MaxHP = 10 [default = 0];
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->maxhp());
    }

    // optional sint32 ObjId = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

    // optional sint32 Type = 4 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 Time = 5 [default = -1];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->time());
    }

    // optional sint32 RemainTimes = 7 [default = -1];
    if (has_remaintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->remaintimes());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional sint32 NeedMoney = 8 [default = -1];
    if (has_needmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->needmoney());
    }

    // optional sint32 TotalTimes = 11 [default = -1];
    if (has_totaltimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->totaltimes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightCharReviveAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightCharReviveAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightCharReviveAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightCharReviveAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightCharReviveAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightCharReviveAction)
    MergeFrom(*source);
  }
}

void FightCharReviveAction::MergeFrom(const FightCharReviveAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightCharReviveAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_posinfo();
      posinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo_);
    }
    if (cached_has_bits & 0x00000002u) {
      curhp_ = from.curhp_;
    }
    if (cached_has_bits & 0x00000004u) {
      manualrevive_ = from.manualrevive_;
    }
    if (cached_has_bits & 0x00000008u) {
      maxhp_ = from.maxhp_;
    }
    if (cached_has_bits & 0x00000010u) {
      objid_ = from.objid_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000080u) {
      remaintimes_ = from.remaintimes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      needmoney_ = from.needmoney_;
    }
    if (cached_has_bits & 0x00000200u) {
      totaltimes_ = from.totaltimes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightCharReviveAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightCharReviveAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightCharReviveAction::CopyFrom(const FightCharReviveAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightCharReviveAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightCharReviveAction::IsInitialized() const {
  return true;
}

void FightCharReviveAction::Swap(FightCharReviveAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightCharReviveAction::InternalSwap(FightCharReviveAction* other) {
  using std::swap;
  posinfo_.Swap(&other->posinfo_);
  swap(curhp_, other->curhp_);
  swap(manualrevive_, other->manualrevive_);
  swap(maxhp_, other->maxhp_);
  swap(objid_, other->objid_);
  swap(type_, other->type_);
  swap(time_, other->time_);
  swap(remaintimes_, other->remaintimes_);
  swap(needmoney_, other->needmoney_);
  swap(totaltimes_, other->totaltimes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightCharReviveAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightCharReviveAction

// optional sint32 ObjId = 1 [default = -1];
bool FightCharReviveAction::has_objid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FightCharReviveAction::set_has_objid() {
  _has_bits_[0] |= 0x00000010u;
}
void FightCharReviveAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000010u;
}
void FightCharReviveAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightCharReviveAction::objid() const {
  // @@protoc_insertion_point(field_get:FightCharReviveAction.ObjId)
  return objid_;
}
void FightCharReviveAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightCharReviveAction.ObjId)
}

// optional bytes PosInfo = 2;
bool FightCharReviveAction::has_posinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightCharReviveAction::set_has_posinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void FightCharReviveAction::clear_has_posinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightCharReviveAction::clear_posinfo() {
  posinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo();
}
const ::std::string& FightCharReviveAction::posinfo() const {
  // @@protoc_insertion_point(field_get:FightCharReviveAction.PosInfo)
  return posinfo_.GetNoArena();
}
void FightCharReviveAction::set_posinfo(const ::std::string& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightCharReviveAction.PosInfo)
}
#if LANG_CXX11
void FightCharReviveAction::set_posinfo(::std::string&& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightCharReviveAction.PosInfo)
}
#endif
void FightCharReviveAction::set_posinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightCharReviveAction.PosInfo)
}
void FightCharReviveAction::set_posinfo(const void* value, size_t size) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightCharReviveAction.PosInfo)
}
::std::string* FightCharReviveAction::mutable_posinfo() {
  set_has_posinfo();
  // @@protoc_insertion_point(field_mutable:FightCharReviveAction.PosInfo)
  return posinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightCharReviveAction::release_posinfo() {
  // @@protoc_insertion_point(field_release:FightCharReviveAction.PosInfo)
  clear_has_posinfo();
  return posinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightCharReviveAction::set_allocated_posinfo(::std::string* posinfo) {
  if (posinfo != NULL) {
    set_has_posinfo();
  } else {
    clear_has_posinfo();
  }
  posinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo);
  // @@protoc_insertion_point(field_set_allocated:FightCharReviveAction.PosInfo)
}

// optional sint32 CurHp = 3 [default = 0];
bool FightCharReviveAction::has_curhp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightCharReviveAction::set_has_curhp() {
  _has_bits_[0] |= 0x00000002u;
}
void FightCharReviveAction::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightCharReviveAction::clear_curhp() {
  curhp_ = 0;
  clear_has_curhp();
}
::google::protobuf::int32 FightCharReviveAction::curhp() const {
  // @@protoc_insertion_point(field_get:FightCharReviveAction.CurHp)
  return curhp_;
}
void FightCharReviveAction::set_curhp(::google::protobuf::int32 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:FightCharReviveAction.CurHp)
}

// optional sint32 Type = 4 [default = -1];
bool FightCharReviveAction::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FightCharReviveAction::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void FightCharReviveAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void FightCharReviveAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
::google::protobuf::int32 FightCharReviveAction::type() const {
  // @@protoc_insertion_point(field_get:FightCharReviveAction.Type)
  return type_;
}
void FightCharReviveAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightCharReviveAction.Type)
}

// optional sint32 Time = 5 [default = -1];
bool FightCharReviveAction::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FightCharReviveAction::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
void FightCharReviveAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void FightCharReviveAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
::google::protobuf::int32 FightCharReviveAction::time() const {
  // @@protoc_insertion_point(field_get:FightCharReviveAction.Time)
  return time_;
}
void FightCharReviveAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightCharReviveAction.Time)
}

// optional sint32 ManualRevive = 6 [default = 0];
bool FightCharReviveAction::has_manualrevive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightCharReviveAction::set_has_manualrevive() {
  _has_bits_[0] |= 0x00000004u;
}
void FightCharReviveAction::clear_has_manualrevive() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightCharReviveAction::clear_manualrevive() {
  manualrevive_ = 0;
  clear_has_manualrevive();
}
::google::protobuf::int32 FightCharReviveAction::manualrevive() const {
  // @@protoc_insertion_point(field_get:FightCharReviveAction.ManualRevive)
  return manualrevive_;
}
void FightCharReviveAction::set_manualrevive(::google::protobuf::int32 value) {
  set_has_manualrevive();
  manualrevive_ = value;
  // @@protoc_insertion_point(field_set:FightCharReviveAction.ManualRevive)
}

// optional sint32 RemainTimes = 7 [default = -1];
bool FightCharReviveAction::has_remaintimes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FightCharReviveAction::set_has_remaintimes() {
  _has_bits_[0] |= 0x00000080u;
}
void FightCharReviveAction::clear_has_remaintimes() {
  _has_bits_[0] &= ~0x00000080u;
}
void FightCharReviveAction::clear_remaintimes() {
  remaintimes_ = -1;
  clear_has_remaintimes();
}
::google::protobuf::int32 FightCharReviveAction::remaintimes() const {
  // @@protoc_insertion_point(field_get:FightCharReviveAction.RemainTimes)
  return remaintimes_;
}
void FightCharReviveAction::set_remaintimes(::google::protobuf::int32 value) {
  set_has_remaintimes();
  remaintimes_ = value;
  // @@protoc_insertion_point(field_set:FightCharReviveAction.RemainTimes)
}

// optional sint32 NeedMoney = 8 [default = -1];
bool FightCharReviveAction::has_needmoney() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FightCharReviveAction::set_has_needmoney() {
  _has_bits_[0] |= 0x00000100u;
}
void FightCharReviveAction::clear_has_needmoney() {
  _has_bits_[0] &= ~0x00000100u;
}
void FightCharReviveAction::clear_needmoney() {
  needmoney_ = -1;
  clear_has_needmoney();
}
::google::protobuf::int32 FightCharReviveAction::needmoney() const {
  // @@protoc_insertion_point(field_get:FightCharReviveAction.NeedMoney)
  return needmoney_;
}
void FightCharReviveAction::set_needmoney(::google::protobuf::int32 value) {
  set_has_needmoney();
  needmoney_ = value;
  // @@protoc_insertion_point(field_set:FightCharReviveAction.NeedMoney)
}

// optional sint32 MaxHP = 10 [default = 0];
bool FightCharReviveAction::has_maxhp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightCharReviveAction::set_has_maxhp() {
  _has_bits_[0] |= 0x00000008u;
}
void FightCharReviveAction::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightCharReviveAction::clear_maxhp() {
  maxhp_ = 0;
  clear_has_maxhp();
}
::google::protobuf::int32 FightCharReviveAction::maxhp() const {
  // @@protoc_insertion_point(field_get:FightCharReviveAction.MaxHP)
  return maxhp_;
}
void FightCharReviveAction::set_maxhp(::google::protobuf::int32 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:FightCharReviveAction.MaxHP)
}

// optional sint32 TotalTimes = 11 [default = -1];
bool FightCharReviveAction::has_totaltimes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FightCharReviveAction::set_has_totaltimes() {
  _has_bits_[0] |= 0x00000200u;
}
void FightCharReviveAction::clear_has_totaltimes() {
  _has_bits_[0] &= ~0x00000200u;
}
void FightCharReviveAction::clear_totaltimes() {
  totaltimes_ = -1;
  clear_has_totaltimes();
}
::google::protobuf::int32 FightCharReviveAction::totaltimes() const {
  // @@protoc_insertion_point(field_get:FightCharReviveAction.TotalTimes)
  return totaltimes_;
}
void FightCharReviveAction::set_totaltimes(::google::protobuf::int32 value) {
  set_has_totaltimes();
  totaltimes_ = value;
  // @@protoc_insertion_point(field_set:FightCharReviveAction.TotalTimes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightHitTargetInfo::kObjIdFieldNumber;
const int FightHitTargetInfo::kPosInfoFieldNumber;
const int FightHitTargetInfo::kFlagFieldNumber;
const int FightHitTargetInfo::kEnemyIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightHitTargetInfo::FightHitTargetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightHitTargetInfo)
}
FightHitTargetInfo::FightHitTargetInfo(const FightHitTargetInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  posinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_posinfo()) {
    posinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo_);
  }
  ::memcpy(&flag_, &from.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&enemyindex_) -
    reinterpret_cast<char*>(&flag_)) + sizeof(enemyindex_));
  // @@protoc_insertion_point(copy_constructor:FightHitTargetInfo)
}

void FightHitTargetInfo::SharedCtor() {
  _cached_size_ = 0;
  posinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
  objid_ = -1;
  enemyindex_ = -1;
}

FightHitTargetInfo::~FightHitTargetInfo() {
  // @@protoc_insertion_point(destructor:FightHitTargetInfo)
  SharedDtor();
}

void FightHitTargetInfo::SharedDtor() {
  posinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FightHitTargetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightHitTargetInfo::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightHitTargetInfo& FightHitTargetInfo::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightHitTargetInfo* FightHitTargetInfo::New(::google::protobuf::Arena* arena) const {
  FightHitTargetInfo* n = new FightHitTargetInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightHitTargetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:FightHitTargetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_posinfo()) {
    GOOGLE_DCHECK(!posinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*posinfo_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    flag_ = 0;
    objid_ = -1;
    enemyindex_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightHitTargetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightHitTargetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ObjId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes PosInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_posinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Flag = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 EnemyIndex = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_enemyindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &enemyindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightHitTargetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightHitTargetInfo)
  return false;
#undef DO_
}

void FightHitTargetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightHitTargetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->objid(), output);
  }

  // optional bytes PosInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->posinfo(), output);
  }

  // optional sint32 Flag = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->flag(), output);
  }

  // optional sint32 EnemyIndex = 5 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->enemyindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightHitTargetInfo)
}

::google::protobuf::uint8* FightHitTargetInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightHitTargetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->objid(), target);
  }

  // optional bytes PosInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->posinfo(), target);
  }

  // optional sint32 Flag = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->flag(), target);
  }

  // optional sint32 EnemyIndex = 5 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->enemyindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightHitTargetInfo)
  return target;
}

size_t FightHitTargetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightHitTargetInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes PosInfo = 2;
    if (has_posinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->posinfo());
    }

    // optional sint32 Flag = 3 [default = 0];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->flag());
    }

    // optional sint32 ObjId = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

    // optional sint32 EnemyIndex = 5 [default = -1];
    if (has_enemyindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->enemyindex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightHitTargetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightHitTargetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FightHitTargetInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightHitTargetInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightHitTargetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightHitTargetInfo)
    MergeFrom(*source);
  }
}

void FightHitTargetInfo::MergeFrom(const FightHitTargetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightHitTargetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_posinfo();
      posinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo_);
    }
    if (cached_has_bits & 0x00000002u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000004u) {
      objid_ = from.objid_;
    }
    if (cached_has_bits & 0x00000008u) {
      enemyindex_ = from.enemyindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightHitTargetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightHitTargetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightHitTargetInfo::CopyFrom(const FightHitTargetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightHitTargetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightHitTargetInfo::IsInitialized() const {
  return true;
}

void FightHitTargetInfo::Swap(FightHitTargetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightHitTargetInfo::InternalSwap(FightHitTargetInfo* other) {
  using std::swap;
  posinfo_.Swap(&other->posinfo_);
  swap(flag_, other->flag_);
  swap(objid_, other->objid_);
  swap(enemyindex_, other->enemyindex_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightHitTargetInfo::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightHitTargetInfo

// optional sint32 ObjId = 1 [default = -1];
bool FightHitTargetInfo::has_objid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightHitTargetInfo::set_has_objid() {
  _has_bits_[0] |= 0x00000004u;
}
void FightHitTargetInfo::clear_has_objid() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightHitTargetInfo::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightHitTargetInfo::objid() const {
  // @@protoc_insertion_point(field_get:FightHitTargetInfo.ObjId)
  return objid_;
}
void FightHitTargetInfo::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightHitTargetInfo.ObjId)
}

// optional bytes PosInfo = 2;
bool FightHitTargetInfo::has_posinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightHitTargetInfo::set_has_posinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void FightHitTargetInfo::clear_has_posinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightHitTargetInfo::clear_posinfo() {
  posinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo();
}
const ::std::string& FightHitTargetInfo::posinfo() const {
  // @@protoc_insertion_point(field_get:FightHitTargetInfo.PosInfo)
  return posinfo_.GetNoArena();
}
void FightHitTargetInfo::set_posinfo(const ::std::string& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightHitTargetInfo.PosInfo)
}
#if LANG_CXX11
void FightHitTargetInfo::set_posinfo(::std::string&& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightHitTargetInfo.PosInfo)
}
#endif
void FightHitTargetInfo::set_posinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightHitTargetInfo.PosInfo)
}
void FightHitTargetInfo::set_posinfo(const void* value, size_t size) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightHitTargetInfo.PosInfo)
}
::std::string* FightHitTargetInfo::mutable_posinfo() {
  set_has_posinfo();
  // @@protoc_insertion_point(field_mutable:FightHitTargetInfo.PosInfo)
  return posinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightHitTargetInfo::release_posinfo() {
  // @@protoc_insertion_point(field_release:FightHitTargetInfo.PosInfo)
  clear_has_posinfo();
  return posinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightHitTargetInfo::set_allocated_posinfo(::std::string* posinfo) {
  if (posinfo != NULL) {
    set_has_posinfo();
  } else {
    clear_has_posinfo();
  }
  posinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo);
  // @@protoc_insertion_point(field_set_allocated:FightHitTargetInfo.PosInfo)
}

// optional sint32 Flag = 3 [default = 0];
bool FightHitTargetInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightHitTargetInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
void FightHitTargetInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightHitTargetInfo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
::google::protobuf::int32 FightHitTargetInfo::flag() const {
  // @@protoc_insertion_point(field_get:FightHitTargetInfo.Flag)
  return flag_;
}
void FightHitTargetInfo::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:FightHitTargetInfo.Flag)
}

// optional sint32 EnemyIndex = 5 [default = -1];
bool FightHitTargetInfo::has_enemyindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightHitTargetInfo::set_has_enemyindex() {
  _has_bits_[0] |= 0x00000008u;
}
void FightHitTargetInfo::clear_has_enemyindex() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightHitTargetInfo::clear_enemyindex() {
  enemyindex_ = -1;
  clear_has_enemyindex();
}
::google::protobuf::int32 FightHitTargetInfo::enemyindex() const {
  // @@protoc_insertion_point(field_get:FightHitTargetInfo.EnemyIndex)
  return enemyindex_;
}
void FightHitTargetInfo::set_enemyindex(::google::protobuf::int32 value) {
  set_has_enemyindex();
  enemyindex_ = value;
  // @@protoc_insertion_point(field_set:FightHitTargetInfo.EnemyIndex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightComboSkillAction::kObjIdFieldNumber;
const int FightComboSkillAction::kSkillIdFieldNumber;
const int FightComboSkillAction::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightComboSkillAction::FightComboSkillAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightComboSkillAction)
}
FightComboSkillAction::FightComboSkillAction(const FightComboSkillAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&flag_, &from.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&skillid_) -
    reinterpret_cast<char*>(&flag_)) + sizeof(skillid_));
  // @@protoc_insertion_point(copy_constructor:FightComboSkillAction)
}

void FightComboSkillAction::SharedCtor() {
  _cached_size_ = 0;
  flag_ = -1;
  objid_ = -1;
  skillid_ = -1;
}

FightComboSkillAction::~FightComboSkillAction() {
  // @@protoc_insertion_point(destructor:FightComboSkillAction)
  SharedDtor();
}

void FightComboSkillAction::SharedDtor() {
}

void FightComboSkillAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightComboSkillAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightComboSkillAction& FightComboSkillAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightComboSkillAction* FightComboSkillAction::New(::google::protobuf::Arena* arena) const {
  FightComboSkillAction* n = new FightComboSkillAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightComboSkillAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightComboSkillAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    flag_ = -1;
    objid_ = -1;
    skillid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightComboSkillAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightComboSkillAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ObjId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 SkillId = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_skillid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skillid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Flag = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightComboSkillAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightComboSkillAction)
  return false;
#undef DO_
}

void FightComboSkillAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightComboSkillAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->objid(), output);
  }

  // optional sint32 SkillId = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->skillid(), output);
  }

  // optional sint32 Flag = 4 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightComboSkillAction)
}

::google::protobuf::uint8* FightComboSkillAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightComboSkillAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->objid(), target);
  }

  // optional sint32 SkillId = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->skillid(), target);
  }

  // optional sint32 Flag = 4 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightComboSkillAction)
  return target;
}

size_t FightComboSkillAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightComboSkillAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional sint32 Flag = 4 [default = -1];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->flag());
    }

    // optional sint32 ObjId = 2 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

    // optional sint32 SkillId = 3 [default = -1];
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skillid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightComboSkillAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightComboSkillAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightComboSkillAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightComboSkillAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightComboSkillAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightComboSkillAction)
    MergeFrom(*source);
  }
}

void FightComboSkillAction::MergeFrom(const FightComboSkillAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightComboSkillAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000002u) {
      objid_ = from.objid_;
    }
    if (cached_has_bits & 0x00000004u) {
      skillid_ = from.skillid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightComboSkillAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightComboSkillAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightComboSkillAction::CopyFrom(const FightComboSkillAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightComboSkillAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightComboSkillAction::IsInitialized() const {
  return true;
}

void FightComboSkillAction::Swap(FightComboSkillAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightComboSkillAction::InternalSwap(FightComboSkillAction* other) {
  using std::swap;
  swap(flag_, other->flag_);
  swap(objid_, other->objid_);
  swap(skillid_, other->skillid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightComboSkillAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightComboSkillAction

// optional sint32 ObjId = 2 [default = -1];
bool FightComboSkillAction::has_objid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightComboSkillAction::set_has_objid() {
  _has_bits_[0] |= 0x00000002u;
}
void FightComboSkillAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightComboSkillAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightComboSkillAction::objid() const {
  // @@protoc_insertion_point(field_get:FightComboSkillAction.ObjId)
  return objid_;
}
void FightComboSkillAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightComboSkillAction.ObjId)
}

// optional sint32 SkillId = 3 [default = -1];
bool FightComboSkillAction::has_skillid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightComboSkillAction::set_has_skillid() {
  _has_bits_[0] |= 0x00000004u;
}
void FightComboSkillAction::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightComboSkillAction::clear_skillid() {
  skillid_ = -1;
  clear_has_skillid();
}
::google::protobuf::int32 FightComboSkillAction::skillid() const {
  // @@protoc_insertion_point(field_get:FightComboSkillAction.SkillId)
  return skillid_;
}
void FightComboSkillAction::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:FightComboSkillAction.SkillId)
}

// optional sint32 Flag = 4 [default = -1];
bool FightComboSkillAction::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightComboSkillAction::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
void FightComboSkillAction::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightComboSkillAction::clear_flag() {
  flag_ = -1;
  clear_has_flag();
}
::google::protobuf::int32 FightComboSkillAction::flag() const {
  // @@protoc_insertion_point(field_get:FightComboSkillAction.Flag)
  return flag_;
}
void FightComboSkillAction::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:FightComboSkillAction.Flag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightEndSkillAction::kObjIdFieldNumber;
const int FightEndSkillAction::kSkillIdFieldNumber;
const int FightEndSkillAction::kPosInfoFieldNumber;
const int FightEndSkillAction::kComboSkillIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightEndSkillAction::FightEndSkillAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightEndSkillAction)
}
FightEndSkillAction::FightEndSkillAction(const FightEndSkillAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  posinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_posinfo()) {
    posinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo_);
  }
  ::memcpy(&comboskillid_, &from.comboskillid_,
    static_cast<size_t>(reinterpret_cast<char*>(&skillid_) -
    reinterpret_cast<char*>(&comboskillid_)) + sizeof(skillid_));
  // @@protoc_insertion_point(copy_constructor:FightEndSkillAction)
}

void FightEndSkillAction::SharedCtor() {
  _cached_size_ = 0;
  posinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comboskillid_ = -1;
  objid_ = -1;
  skillid_ = -1;
}

FightEndSkillAction::~FightEndSkillAction() {
  // @@protoc_insertion_point(destructor:FightEndSkillAction)
  SharedDtor();
}

void FightEndSkillAction::SharedDtor() {
  posinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FightEndSkillAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightEndSkillAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightEndSkillAction& FightEndSkillAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightEndSkillAction* FightEndSkillAction::New(::google::protobuf::Arena* arena) const {
  FightEndSkillAction* n = new FightEndSkillAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightEndSkillAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightEndSkillAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!posinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*posinfo_.UnsafeRawStringPointer())->clear();
    }
    comboskillid_ = -1;
    objid_ = -1;
    skillid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightEndSkillAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightEndSkillAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ObjId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 SkillId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_skillid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skillid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes PosInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_posinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ComboSkillId = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_comboskillid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &comboskillid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightEndSkillAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightEndSkillAction)
  return false;
#undef DO_
}

void FightEndSkillAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightEndSkillAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->objid(), output);
  }

  // optional sint32 SkillId = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->skillid(), output);
  }

  // optional bytes PosInfo = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->posinfo(), output);
  }

  // optional sint32 ComboSkillId = 4 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->comboskillid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightEndSkillAction)
}

::google::protobuf::uint8* FightEndSkillAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightEndSkillAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->objid(), target);
  }

  // optional sint32 SkillId = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->skillid(), target);
  }

  // optional bytes PosInfo = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->posinfo(), target);
  }

  // optional sint32 ComboSkillId = 4 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->comboskillid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightEndSkillAction)
  return target;
}

size_t FightEndSkillAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightEndSkillAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes PosInfo = 3;
    if (has_posinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->posinfo());
    }

    // optional sint32 ComboSkillId = 4 [default = -1];
    if (has_comboskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->comboskillid());
    }

    // optional sint32 ObjId = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

    // optional sint32 SkillId = 2 [default = -1];
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skillid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightEndSkillAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightEndSkillAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightEndSkillAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightEndSkillAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightEndSkillAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightEndSkillAction)
    MergeFrom(*source);
  }
}

void FightEndSkillAction::MergeFrom(const FightEndSkillAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightEndSkillAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_posinfo();
      posinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo_);
    }
    if (cached_has_bits & 0x00000002u) {
      comboskillid_ = from.comboskillid_;
    }
    if (cached_has_bits & 0x00000004u) {
      objid_ = from.objid_;
    }
    if (cached_has_bits & 0x00000008u) {
      skillid_ = from.skillid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightEndSkillAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightEndSkillAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightEndSkillAction::CopyFrom(const FightEndSkillAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightEndSkillAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightEndSkillAction::IsInitialized() const {
  return true;
}

void FightEndSkillAction::Swap(FightEndSkillAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightEndSkillAction::InternalSwap(FightEndSkillAction* other) {
  using std::swap;
  posinfo_.Swap(&other->posinfo_);
  swap(comboskillid_, other->comboskillid_);
  swap(objid_, other->objid_);
  swap(skillid_, other->skillid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightEndSkillAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightEndSkillAction

// optional sint32 ObjId = 1 [default = -1];
bool FightEndSkillAction::has_objid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightEndSkillAction::set_has_objid() {
  _has_bits_[0] |= 0x00000004u;
}
void FightEndSkillAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightEndSkillAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightEndSkillAction::objid() const {
  // @@protoc_insertion_point(field_get:FightEndSkillAction.ObjId)
  return objid_;
}
void FightEndSkillAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightEndSkillAction.ObjId)
}

// optional sint32 SkillId = 2 [default = -1];
bool FightEndSkillAction::has_skillid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightEndSkillAction::set_has_skillid() {
  _has_bits_[0] |= 0x00000008u;
}
void FightEndSkillAction::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightEndSkillAction::clear_skillid() {
  skillid_ = -1;
  clear_has_skillid();
}
::google::protobuf::int32 FightEndSkillAction::skillid() const {
  // @@protoc_insertion_point(field_get:FightEndSkillAction.SkillId)
  return skillid_;
}
void FightEndSkillAction::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:FightEndSkillAction.SkillId)
}

// optional bytes PosInfo = 3;
bool FightEndSkillAction::has_posinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightEndSkillAction::set_has_posinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void FightEndSkillAction::clear_has_posinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightEndSkillAction::clear_posinfo() {
  posinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo();
}
const ::std::string& FightEndSkillAction::posinfo() const {
  // @@protoc_insertion_point(field_get:FightEndSkillAction.PosInfo)
  return posinfo_.GetNoArena();
}
void FightEndSkillAction::set_posinfo(const ::std::string& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightEndSkillAction.PosInfo)
}
#if LANG_CXX11
void FightEndSkillAction::set_posinfo(::std::string&& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightEndSkillAction.PosInfo)
}
#endif
void FightEndSkillAction::set_posinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightEndSkillAction.PosInfo)
}
void FightEndSkillAction::set_posinfo(const void* value, size_t size) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightEndSkillAction.PosInfo)
}
::std::string* FightEndSkillAction::mutable_posinfo() {
  set_has_posinfo();
  // @@protoc_insertion_point(field_mutable:FightEndSkillAction.PosInfo)
  return posinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightEndSkillAction::release_posinfo() {
  // @@protoc_insertion_point(field_release:FightEndSkillAction.PosInfo)
  clear_has_posinfo();
  return posinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightEndSkillAction::set_allocated_posinfo(::std::string* posinfo) {
  if (posinfo != NULL) {
    set_has_posinfo();
  } else {
    clear_has_posinfo();
  }
  posinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo);
  // @@protoc_insertion_point(field_set_allocated:FightEndSkillAction.PosInfo)
}

// optional sint32 ComboSkillId = 4 [default = -1];
bool FightEndSkillAction::has_comboskillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightEndSkillAction::set_has_comboskillid() {
  _has_bits_[0] |= 0x00000002u;
}
void FightEndSkillAction::clear_has_comboskillid() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightEndSkillAction::clear_comboskillid() {
  comboskillid_ = -1;
  clear_has_comboskillid();
}
::google::protobuf::int32 FightEndSkillAction::comboskillid() const {
  // @@protoc_insertion_point(field_get:FightEndSkillAction.ComboSkillId)
  return comboskillid_;
}
void FightEndSkillAction::set_comboskillid(::google::protobuf::int32 value) {
  set_has_comboskillid();
  comboskillid_ = value;
  // @@protoc_insertion_point(field_set:FightEndSkillAction.ComboSkillId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightCityAction::kTypeFieldNumber;
const int FightCityAction::kObjIdFieldNumber;
const int FightCityAction::kPosInfoFieldNumber;
const int FightCityAction::kTargetPosFieldNumber;
const int FightCityAction::kIntParaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightCityAction::FightCityAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightCityAction)
}
FightCityAction::FightCityAction(const FightCityAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  posinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_posinfo()) {
    posinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo_);
  }
  targetpos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_targetpos()) {
    targetpos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetpos_);
  }
  ::memcpy(&intpara_, &from.intpara_,
    static_cast<size_t>(reinterpret_cast<char*>(&objid_) -
    reinterpret_cast<char*>(&intpara_)) + sizeof(objid_));
  // @@protoc_insertion_point(copy_constructor:FightCityAction)
}

void FightCityAction::SharedCtor() {
  _cached_size_ = 0;
  posinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetpos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  intpara_ = -1;
  type_ = -1;
  objid_ = -1;
}

FightCityAction::~FightCityAction() {
  // @@protoc_insertion_point(destructor:FightCityAction)
  SharedDtor();
}

void FightCityAction::SharedDtor() {
  posinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetpos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FightCityAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightCityAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightCityAction& FightCityAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightCityAction* FightCityAction::New(::google::protobuf::Arena* arena) const {
  FightCityAction* n = new FightCityAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightCityAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightCityAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!posinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*posinfo_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!targetpos_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*targetpos_.UnsafeRawStringPointer())->clear();
    }
    intpara_ = -1;
    type_ = -1;
    objid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightCityAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightCityAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Type = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ObjId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes PosInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_posinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes TargetPos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_targetpos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 IntPara = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_intpara();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &intpara_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightCityAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightCityAction)
  return false;
#undef DO_
}

void FightCityAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightCityAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->type(), output);
  }

  // optional sint32 ObjId = 2 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->objid(), output);
  }

  // optional bytes PosInfo = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->posinfo(), output);
  }

  // optional bytes TargetPos = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->targetpos(), output);
  }

  // optional sint32 IntPara = 5 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->intpara(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightCityAction)
}

::google::protobuf::uint8* FightCityAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightCityAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->type(), target);
  }

  // optional sint32 ObjId = 2 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->objid(), target);
  }

  // optional bytes PosInfo = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->posinfo(), target);
  }

  // optional bytes TargetPos = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->targetpos(), target);
  }

  // optional sint32 IntPara = 5 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->intpara(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightCityAction)
  return target;
}

size_t FightCityAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightCityAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes PosInfo = 3;
    if (has_posinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->posinfo());
    }

    // optional bytes TargetPos = 4;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->targetpos());
    }

    // optional sint32 IntPara = 5 [default = -1];
    if (has_intpara()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->intpara());
    }

    // optional sint32 Type = 1 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 ObjId = 2 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightCityAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightCityAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightCityAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightCityAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightCityAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightCityAction)
    MergeFrom(*source);
  }
}

void FightCityAction::MergeFrom(const FightCityAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightCityAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_posinfo();
      posinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_targetpos();
      targetpos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetpos_);
    }
    if (cached_has_bits & 0x00000004u) {
      intpara_ = from.intpara_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      objid_ = from.objid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightCityAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightCityAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightCityAction::CopyFrom(const FightCityAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightCityAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightCityAction::IsInitialized() const {
  return true;
}

void FightCityAction::Swap(FightCityAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightCityAction::InternalSwap(FightCityAction* other) {
  using std::swap;
  posinfo_.Swap(&other->posinfo_);
  targetpos_.Swap(&other->targetpos_);
  swap(intpara_, other->intpara_);
  swap(type_, other->type_);
  swap(objid_, other->objid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightCityAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightCityAction

// optional sint32 Type = 1 [default = -1];
bool FightCityAction::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightCityAction::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void FightCityAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightCityAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
::google::protobuf::int32 FightCityAction::type() const {
  // @@protoc_insertion_point(field_get:FightCityAction.Type)
  return type_;
}
void FightCityAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightCityAction.Type)
}

// optional sint32 ObjId = 2 [default = -1];
bool FightCityAction::has_objid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FightCityAction::set_has_objid() {
  _has_bits_[0] |= 0x00000010u;
}
void FightCityAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000010u;
}
void FightCityAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightCityAction::objid() const {
  // @@protoc_insertion_point(field_get:FightCityAction.ObjId)
  return objid_;
}
void FightCityAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightCityAction.ObjId)
}

// optional bytes PosInfo = 3;
bool FightCityAction::has_posinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightCityAction::set_has_posinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void FightCityAction::clear_has_posinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightCityAction::clear_posinfo() {
  posinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo();
}
const ::std::string& FightCityAction::posinfo() const {
  // @@protoc_insertion_point(field_get:FightCityAction.PosInfo)
  return posinfo_.GetNoArena();
}
void FightCityAction::set_posinfo(const ::std::string& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightCityAction.PosInfo)
}
#if LANG_CXX11
void FightCityAction::set_posinfo(::std::string&& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightCityAction.PosInfo)
}
#endif
void FightCityAction::set_posinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightCityAction.PosInfo)
}
void FightCityAction::set_posinfo(const void* value, size_t size) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightCityAction.PosInfo)
}
::std::string* FightCityAction::mutable_posinfo() {
  set_has_posinfo();
  // @@protoc_insertion_point(field_mutable:FightCityAction.PosInfo)
  return posinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightCityAction::release_posinfo() {
  // @@protoc_insertion_point(field_release:FightCityAction.PosInfo)
  clear_has_posinfo();
  return posinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightCityAction::set_allocated_posinfo(::std::string* posinfo) {
  if (posinfo != NULL) {
    set_has_posinfo();
  } else {
    clear_has_posinfo();
  }
  posinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo);
  // @@protoc_insertion_point(field_set_allocated:FightCityAction.PosInfo)
}

// optional bytes TargetPos = 4;
bool FightCityAction::has_targetpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightCityAction::set_has_targetpos() {
  _has_bits_[0] |= 0x00000002u;
}
void FightCityAction::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightCityAction::clear_targetpos() {
  targetpos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetpos();
}
const ::std::string& FightCityAction::targetpos() const {
  // @@protoc_insertion_point(field_get:FightCityAction.TargetPos)
  return targetpos_.GetNoArena();
}
void FightCityAction::set_targetpos(const ::std::string& value) {
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightCityAction.TargetPos)
}
#if LANG_CXX11
void FightCityAction::set_targetpos(::std::string&& value) {
  set_has_targetpos();
  targetpos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightCityAction.TargetPos)
}
#endif
void FightCityAction::set_targetpos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightCityAction.TargetPos)
}
void FightCityAction::set_targetpos(const void* value, size_t size) {
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightCityAction.TargetPos)
}
::std::string* FightCityAction::mutable_targetpos() {
  set_has_targetpos();
  // @@protoc_insertion_point(field_mutable:FightCityAction.TargetPos)
  return targetpos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightCityAction::release_targetpos() {
  // @@protoc_insertion_point(field_release:FightCityAction.TargetPos)
  clear_has_targetpos();
  return targetpos_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightCityAction::set_allocated_targetpos(::std::string* targetpos) {
  if (targetpos != NULL) {
    set_has_targetpos();
  } else {
    clear_has_targetpos();
  }
  targetpos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetpos);
  // @@protoc_insertion_point(field_set_allocated:FightCityAction.TargetPos)
}

// optional sint32 IntPara = 5 [default = -1];
bool FightCityAction::has_intpara() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightCityAction::set_has_intpara() {
  _has_bits_[0] |= 0x00000004u;
}
void FightCityAction::clear_has_intpara() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightCityAction::clear_intpara() {
  intpara_ = -1;
  clear_has_intpara();
}
::google::protobuf::int32 FightCityAction::intpara() const {
  // @@protoc_insertion_point(field_get:FightCityAction.IntPara)
  return intpara_;
}
void FightCityAction::set_intpara(::google::protobuf::int32 value) {
  set_has_intpara();
  intpara_ = value;
  // @@protoc_insertion_point(field_set:FightCityAction.IntPara)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightSnipeAction::kTypeFieldNumber;
const int FightSnipeAction::kObjIdFieldNumber;
const int FightSnipeAction::kTargetPosFieldNumber;
const int FightSnipeAction::kCampIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightSnipeAction::FightSnipeAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightSnipeAction)
}
FightSnipeAction::FightSnipeAction(const FightSnipeAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  targetpos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_targetpos()) {
    targetpos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetpos_);
  }
  ::memcpy(&campid_, &from.campid_,
    static_cast<size_t>(reinterpret_cast<char*>(&objid_) -
    reinterpret_cast<char*>(&campid_)) + sizeof(objid_));
  // @@protoc_insertion_point(copy_constructor:FightSnipeAction)
}

void FightSnipeAction::SharedCtor() {
  _cached_size_ = 0;
  targetpos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  campid_ = -1;
  type_ = -1;
  objid_ = -1;
}

FightSnipeAction::~FightSnipeAction() {
  // @@protoc_insertion_point(destructor:FightSnipeAction)
  SharedDtor();
}

void FightSnipeAction::SharedDtor() {
  targetpos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FightSnipeAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightSnipeAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightSnipeAction& FightSnipeAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightSnipeAction* FightSnipeAction::New(::google::protobuf::Arena* arena) const {
  FightSnipeAction* n = new FightSnipeAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightSnipeAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightSnipeAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!targetpos_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*targetpos_.UnsafeRawStringPointer())->clear();
    }
    campid_ = -1;
    type_ = -1;
    objid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightSnipeAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightSnipeAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Type = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ObjId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes TargetPos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_targetpos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 CampId = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_campid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &campid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightSnipeAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightSnipeAction)
  return false;
#undef DO_
}

void FightSnipeAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightSnipeAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->type(), output);
  }

  // optional sint32 ObjId = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->objid(), output);
  }

  // optional bytes TargetPos = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->targetpos(), output);
  }

  // optional sint32 CampId = 4 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->campid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightSnipeAction)
}

::google::protobuf::uint8* FightSnipeAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightSnipeAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->type(), target);
  }

  // optional sint32 ObjId = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->objid(), target);
  }

  // optional bytes TargetPos = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->targetpos(), target);
  }

  // optional sint32 CampId = 4 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->campid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightSnipeAction)
  return target;
}

size_t FightSnipeAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightSnipeAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes TargetPos = 3;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->targetpos());
    }

    // optional sint32 CampId = 4 [default = -1];
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->campid());
    }

    // optional sint32 Type = 1 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 ObjId = 2 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightSnipeAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightSnipeAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightSnipeAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightSnipeAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightSnipeAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightSnipeAction)
    MergeFrom(*source);
  }
}

void FightSnipeAction::MergeFrom(const FightSnipeAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightSnipeAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_targetpos();
      targetpos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetpos_);
    }
    if (cached_has_bits & 0x00000002u) {
      campid_ = from.campid_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      objid_ = from.objid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightSnipeAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightSnipeAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightSnipeAction::CopyFrom(const FightSnipeAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightSnipeAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightSnipeAction::IsInitialized() const {
  return true;
}

void FightSnipeAction::Swap(FightSnipeAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightSnipeAction::InternalSwap(FightSnipeAction* other) {
  using std::swap;
  targetpos_.Swap(&other->targetpos_);
  swap(campid_, other->campid_);
  swap(type_, other->type_);
  swap(objid_, other->objid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightSnipeAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightSnipeAction

// optional sint32 Type = 1 [default = -1];
bool FightSnipeAction::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightSnipeAction::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void FightSnipeAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightSnipeAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
::google::protobuf::int32 FightSnipeAction::type() const {
  // @@protoc_insertion_point(field_get:FightSnipeAction.Type)
  return type_;
}
void FightSnipeAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightSnipeAction.Type)
}

// optional sint32 ObjId = 2 [default = -1];
bool FightSnipeAction::has_objid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightSnipeAction::set_has_objid() {
  _has_bits_[0] |= 0x00000008u;
}
void FightSnipeAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightSnipeAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightSnipeAction::objid() const {
  // @@protoc_insertion_point(field_get:FightSnipeAction.ObjId)
  return objid_;
}
void FightSnipeAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightSnipeAction.ObjId)
}

// optional bytes TargetPos = 3;
bool FightSnipeAction::has_targetpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightSnipeAction::set_has_targetpos() {
  _has_bits_[0] |= 0x00000001u;
}
void FightSnipeAction::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightSnipeAction::clear_targetpos() {
  targetpos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetpos();
}
const ::std::string& FightSnipeAction::targetpos() const {
  // @@protoc_insertion_point(field_get:FightSnipeAction.TargetPos)
  return targetpos_.GetNoArena();
}
void FightSnipeAction::set_targetpos(const ::std::string& value) {
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightSnipeAction.TargetPos)
}
#if LANG_CXX11
void FightSnipeAction::set_targetpos(::std::string&& value) {
  set_has_targetpos();
  targetpos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightSnipeAction.TargetPos)
}
#endif
void FightSnipeAction::set_targetpos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightSnipeAction.TargetPos)
}
void FightSnipeAction::set_targetpos(const void* value, size_t size) {
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightSnipeAction.TargetPos)
}
::std::string* FightSnipeAction::mutable_targetpos() {
  set_has_targetpos();
  // @@protoc_insertion_point(field_mutable:FightSnipeAction.TargetPos)
  return targetpos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightSnipeAction::release_targetpos() {
  // @@protoc_insertion_point(field_release:FightSnipeAction.TargetPos)
  clear_has_targetpos();
  return targetpos_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightSnipeAction::set_allocated_targetpos(::std::string* targetpos) {
  if (targetpos != NULL) {
    set_has_targetpos();
  } else {
    clear_has_targetpos();
  }
  targetpos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetpos);
  // @@protoc_insertion_point(field_set_allocated:FightSnipeAction.TargetPos)
}

// optional sint32 CampId = 4 [default = -1];
bool FightSnipeAction::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightSnipeAction::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
void FightSnipeAction::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightSnipeAction::clear_campid() {
  campid_ = -1;
  clear_has_campid();
}
::google::protobuf::int32 FightSnipeAction::campid() const {
  // @@protoc_insertion_point(field_get:FightSnipeAction.CampId)
  return campid_;
}
void FightSnipeAction::set_campid(::google::protobuf::int32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:FightSnipeAction.CampId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightHurtAction::kObjIdFieldNumber;
const int FightHurtAction::kSkillIdFieldNumber;
const int FightHurtAction::kAttackBackFieldNumber;
const int FightHurtAction::kAttackAirFieldNumber;
const int FightHurtAction::kBackDirFieldNumber;
const int FightHurtAction::kTargetObjIdFieldNumber;
const int FightHurtAction::kOwnHPFieldNumber;
const int FightHurtAction::kTargetHPFieldNumber;
const int FightHurtAction::kOwnHPChangeFieldNumber;
const int FightHurtAction::kTargetHPChangeFieldNumber;
const int FightHurtAction::kIsCritFieldNumber;
const int FightHurtAction::kTotalDamageFieldNumber;
const int FightHurtAction::kSegmentIndexFieldNumber;
const int FightHurtAction::kHurtTypeFieldNumber;
const int FightHurtAction::kAttackSegmentFieldNumber;
const int FightHurtAction::kIsHitGroundFieldNumber;
const int FightHurtAction::kTargetMaxHPFieldNumber;
const int FightHurtAction::kEnemyIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightHurtAction::FightHurtAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightHurtAction)
}
FightHurtAction::FightHurtAction(const FightHurtAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&backdir_, &from.backdir_,
    static_cast<size_t>(reinterpret_cast<char*>(&targetmaxhp_) -
    reinterpret_cast<char*>(&backdir_)) + sizeof(targetmaxhp_));
  // @@protoc_insertion_point(copy_constructor:FightHurtAction)
}

void FightHurtAction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&backdir_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ishitground_) -
      reinterpret_cast<char*>(&backdir_)) + sizeof(ishitground_));
  enemyindex_ = -1;
  objid_ = -1;
  skillid_ = -1;
  targetobjid_ = -1;
  ownhp_ = -1;
  targethp_ = -1;
  ownhpchange_ = -1;
  targethpchange_ = -1;
  totaldamage_ = -1;
  segmentindex_ = -1;
  hurttype_ = -1;
  attacksegment_ = -1;
  targetmaxhp_ = -1;
}

FightHurtAction::~FightHurtAction() {
  // @@protoc_insertion_point(destructor:FightHurtAction)
  SharedDtor();
}

void FightHurtAction::SharedDtor() {
}

void FightHurtAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightHurtAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightHurtAction& FightHurtAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightHurtAction* FightHurtAction::New(::google::protobuf::Arena* arena) const {
  FightHurtAction* n = new FightHurtAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightHurtAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightHurtAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&backdir_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ishitground_) -
        reinterpret_cast<char*>(&backdir_)) + sizeof(ishitground_));
    enemyindex_ = -1;
    objid_ = -1;
    skillid_ = -1;
  }
  if (cached_has_bits & 65280u) {
    targetobjid_ = -1;
    ownhp_ = -1;
    targethp_ = -1;
    ownhpchange_ = -1;
    targethpchange_ = -1;
    totaldamage_ = -1;
    segmentindex_ = -1;
    hurttype_ = -1;
  }
  if (cached_has_bits & 196608u) {
    attacksegment_ = -1;
    targetmaxhp_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightHurtAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightHurtAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ObjId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 SkillId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_skillid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skillid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool AttackBack = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_attackback();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attackback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool AttackAir = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_attackair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attackair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 BackDir = 15 [default = 0];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_backdir();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &backdir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TargetObjId = 16 [default = -1];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_targetobjid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &targetobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 OwnHP = 17 [default = -1];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_ownhp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ownhp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TargetHP = 18 [default = -1];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_targethp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &targethp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 OwnHPChange = 19 [default = -1];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_ownhpchange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ownhpchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TargetHPChange = 20 [default = -1];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_targethpchange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &targethpchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool IsCrit = 23 [default = false];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_iscrit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscrit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TotalDamage = 24 [default = -1];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_totaldamage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &totaldamage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 SegmentIndex = 30 [default = -1];
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_segmentindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &segmentindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 HurtType = 31 [default = -1];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_hurttype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &hurttype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 AttackSegment = 32 [default = -1];
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_attacksegment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &attacksegment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool IsHitGround = 33 [default = false];
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_ishitground();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishitground_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TargetMaxHP = 34 [default = -1];
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_targetmaxhp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &targetmaxhp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 EnemyIndex = 35 [default = -1];
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_enemyindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &enemyindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightHurtAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightHurtAction)
  return false;
#undef DO_
}

void FightHurtAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightHurtAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->objid(), output);
  }

  // optional sint32 SkillId = 2 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->skillid(), output);
  }

  // optional bool AttackBack = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->attackback(), output);
  }

  // optional bool AttackAir = 6 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->attackair(), output);
  }

  // optional sint32 BackDir = 15 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(15, this->backdir(), output);
  }

  // optional sint32 TargetObjId = 16 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(16, this->targetobjid(), output);
  }

  // optional sint32 OwnHP = 17 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(17, this->ownhp(), output);
  }

  // optional sint32 TargetHP = 18 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(18, this->targethp(), output);
  }

  // optional sint32 OwnHPChange = 19 [default = -1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(19, this->ownhpchange(), output);
  }

  // optional sint32 TargetHPChange = 20 [default = -1];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(20, this->targethpchange(), output);
  }

  // optional bool IsCrit = 23 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->iscrit(), output);
  }

  // optional sint32 TotalDamage = 24 [default = -1];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(24, this->totaldamage(), output);
  }

  // optional sint32 SegmentIndex = 30 [default = -1];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(30, this->segmentindex(), output);
  }

  // optional sint32 HurtType = 31 [default = -1];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(31, this->hurttype(), output);
  }

  // optional sint32 AttackSegment = 32 [default = -1];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(32, this->attacksegment(), output);
  }

  // optional bool IsHitGround = 33 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->ishitground(), output);
  }

  // optional sint32 TargetMaxHP = 34 [default = -1];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(34, this->targetmaxhp(), output);
  }

  // optional sint32 EnemyIndex = 35 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(35, this->enemyindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightHurtAction)
}

::google::protobuf::uint8* FightHurtAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightHurtAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->objid(), target);
  }

  // optional sint32 SkillId = 2 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->skillid(), target);
  }

  // optional bool AttackBack = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->attackback(), target);
  }

  // optional bool AttackAir = 6 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->attackair(), target);
  }

  // optional sint32 BackDir = 15 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(15, this->backdir(), target);
  }

  // optional sint32 TargetObjId = 16 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(16, this->targetobjid(), target);
  }

  // optional sint32 OwnHP = 17 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(17, this->ownhp(), target);
  }

  // optional sint32 TargetHP = 18 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(18, this->targethp(), target);
  }

  // optional sint32 OwnHPChange = 19 [default = -1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(19, this->ownhpchange(), target);
  }

  // optional sint32 TargetHPChange = 20 [default = -1];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(20, this->targethpchange(), target);
  }

  // optional bool IsCrit = 23 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->iscrit(), target);
  }

  // optional sint32 TotalDamage = 24 [default = -1];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(24, this->totaldamage(), target);
  }

  // optional sint32 SegmentIndex = 30 [default = -1];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(30, this->segmentindex(), target);
  }

  // optional sint32 HurtType = 31 [default = -1];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(31, this->hurttype(), target);
  }

  // optional sint32 AttackSegment = 32 [default = -1];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(32, this->attacksegment(), target);
  }

  // optional bool IsHitGround = 33 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->ishitground(), target);
  }

  // optional sint32 TargetMaxHP = 34 [default = -1];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(34, this->targetmaxhp(), target);
  }

  // optional sint32 EnemyIndex = 35 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(35, this->enemyindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightHurtAction)
  return target;
}

size_t FightHurtAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightHurtAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional sint32 BackDir = 15 [default = 0];
    if (has_backdir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->backdir());
    }

    // optional bool AttackBack = 3 [default = false];
    if (has_attackback()) {
      total_size += 1 + 1;
    }

    // optional bool AttackAir = 6 [default = false];
    if (has_attackair()) {
      total_size += 1 + 1;
    }

    // optional bool IsCrit = 23 [default = false];
    if (has_iscrit()) {
      total_size += 2 + 1;
    }

    // optional bool IsHitGround = 33 [default = false];
    if (has_ishitground()) {
      total_size += 2 + 1;
    }

    // optional sint32 EnemyIndex = 35 [default = -1];
    if (has_enemyindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->enemyindex());
    }

    // optional sint32 ObjId = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

    // optional sint32 SkillId = 2 [default = -1];
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skillid());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional sint32 TargetObjId = 16 [default = -1];
    if (has_targetobjid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->targetobjid());
    }

    // optional sint32 OwnHP = 17 [default = -1];
    if (has_ownhp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ownhp());
    }

    // optional sint32 TargetHP = 18 [default = -1];
    if (has_targethp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->targethp());
    }

    // optional sint32 OwnHPChange = 19 [default = -1];
    if (has_ownhpchange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ownhpchange());
    }

    // optional sint32 TargetHPChange = 20 [default = -1];
    if (has_targethpchange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->targethpchange());
    }

    // optional sint32 TotalDamage = 24 [default = -1];
    if (has_totaldamage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->totaldamage());
    }

    // optional sint32 SegmentIndex = 30 [default = -1];
    if (has_segmentindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->segmentindex());
    }

    // optional sint32 HurtType = 31 [default = -1];
    if (has_hurttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->hurttype());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional sint32 AttackSegment = 32 [default = -1];
    if (has_attacksegment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->attacksegment());
    }

    // optional sint32 TargetMaxHP = 34 [default = -1];
    if (has_targetmaxhp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->targetmaxhp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightHurtAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightHurtAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightHurtAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightHurtAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightHurtAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightHurtAction)
    MergeFrom(*source);
  }
}

void FightHurtAction::MergeFrom(const FightHurtAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightHurtAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      backdir_ = from.backdir_;
    }
    if (cached_has_bits & 0x00000002u) {
      attackback_ = from.attackback_;
    }
    if (cached_has_bits & 0x00000004u) {
      attackair_ = from.attackair_;
    }
    if (cached_has_bits & 0x00000008u) {
      iscrit_ = from.iscrit_;
    }
    if (cached_has_bits & 0x00000010u) {
      ishitground_ = from.ishitground_;
    }
    if (cached_has_bits & 0x00000020u) {
      enemyindex_ = from.enemyindex_;
    }
    if (cached_has_bits & 0x00000040u) {
      objid_ = from.objid_;
    }
    if (cached_has_bits & 0x00000080u) {
      skillid_ = from.skillid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      targetobjid_ = from.targetobjid_;
    }
    if (cached_has_bits & 0x00000200u) {
      ownhp_ = from.ownhp_;
    }
    if (cached_has_bits & 0x00000400u) {
      targethp_ = from.targethp_;
    }
    if (cached_has_bits & 0x00000800u) {
      ownhpchange_ = from.ownhpchange_;
    }
    if (cached_has_bits & 0x00001000u) {
      targethpchange_ = from.targethpchange_;
    }
    if (cached_has_bits & 0x00002000u) {
      totaldamage_ = from.totaldamage_;
    }
    if (cached_has_bits & 0x00004000u) {
      segmentindex_ = from.segmentindex_;
    }
    if (cached_has_bits & 0x00008000u) {
      hurttype_ = from.hurttype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      attacksegment_ = from.attacksegment_;
    }
    if (cached_has_bits & 0x00020000u) {
      targetmaxhp_ = from.targetmaxhp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightHurtAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightHurtAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightHurtAction::CopyFrom(const FightHurtAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightHurtAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightHurtAction::IsInitialized() const {
  return true;
}

void FightHurtAction::Swap(FightHurtAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightHurtAction::InternalSwap(FightHurtAction* other) {
  using std::swap;
  swap(backdir_, other->backdir_);
  swap(attackback_, other->attackback_);
  swap(attackair_, other->attackair_);
  swap(iscrit_, other->iscrit_);
  swap(ishitground_, other->ishitground_);
  swap(enemyindex_, other->enemyindex_);
  swap(objid_, other->objid_);
  swap(skillid_, other->skillid_);
  swap(targetobjid_, other->targetobjid_);
  swap(ownhp_, other->ownhp_);
  swap(targethp_, other->targethp_);
  swap(ownhpchange_, other->ownhpchange_);
  swap(targethpchange_, other->targethpchange_);
  swap(totaldamage_, other->totaldamage_);
  swap(segmentindex_, other->segmentindex_);
  swap(hurttype_, other->hurttype_);
  swap(attacksegment_, other->attacksegment_);
  swap(targetmaxhp_, other->targetmaxhp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightHurtAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightHurtAction

// optional sint32 ObjId = 1 [default = -1];
bool FightHurtAction::has_objid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FightHurtAction::set_has_objid() {
  _has_bits_[0] |= 0x00000040u;
}
void FightHurtAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000040u;
}
void FightHurtAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightHurtAction::objid() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.ObjId)
  return objid_;
}
void FightHurtAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.ObjId)
}

// optional sint32 SkillId = 2 [default = -1];
bool FightHurtAction::has_skillid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FightHurtAction::set_has_skillid() {
  _has_bits_[0] |= 0x00000080u;
}
void FightHurtAction::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000080u;
}
void FightHurtAction::clear_skillid() {
  skillid_ = -1;
  clear_has_skillid();
}
::google::protobuf::int32 FightHurtAction::skillid() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.SkillId)
  return skillid_;
}
void FightHurtAction::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.SkillId)
}

// optional bool AttackBack = 3 [default = false];
bool FightHurtAction::has_attackback() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightHurtAction::set_has_attackback() {
  _has_bits_[0] |= 0x00000002u;
}
void FightHurtAction::clear_has_attackback() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightHurtAction::clear_attackback() {
  attackback_ = false;
  clear_has_attackback();
}
bool FightHurtAction::attackback() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.AttackBack)
  return attackback_;
}
void FightHurtAction::set_attackback(bool value) {
  set_has_attackback();
  attackback_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.AttackBack)
}

// optional bool AttackAir = 6 [default = false];
bool FightHurtAction::has_attackair() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightHurtAction::set_has_attackair() {
  _has_bits_[0] |= 0x00000004u;
}
void FightHurtAction::clear_has_attackair() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightHurtAction::clear_attackair() {
  attackair_ = false;
  clear_has_attackair();
}
bool FightHurtAction::attackair() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.AttackAir)
  return attackair_;
}
void FightHurtAction::set_attackair(bool value) {
  set_has_attackair();
  attackair_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.AttackAir)
}

// optional sint32 BackDir = 15 [default = 0];
bool FightHurtAction::has_backdir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightHurtAction::set_has_backdir() {
  _has_bits_[0] |= 0x00000001u;
}
void FightHurtAction::clear_has_backdir() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightHurtAction::clear_backdir() {
  backdir_ = 0;
  clear_has_backdir();
}
::google::protobuf::int32 FightHurtAction::backdir() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.BackDir)
  return backdir_;
}
void FightHurtAction::set_backdir(::google::protobuf::int32 value) {
  set_has_backdir();
  backdir_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.BackDir)
}

// optional sint32 TargetObjId = 16 [default = -1];
bool FightHurtAction::has_targetobjid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FightHurtAction::set_has_targetobjid() {
  _has_bits_[0] |= 0x00000100u;
}
void FightHurtAction::clear_has_targetobjid() {
  _has_bits_[0] &= ~0x00000100u;
}
void FightHurtAction::clear_targetobjid() {
  targetobjid_ = -1;
  clear_has_targetobjid();
}
::google::protobuf::int32 FightHurtAction::targetobjid() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.TargetObjId)
  return targetobjid_;
}
void FightHurtAction::set_targetobjid(::google::protobuf::int32 value) {
  set_has_targetobjid();
  targetobjid_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.TargetObjId)
}

// optional sint32 OwnHP = 17 [default = -1];
bool FightHurtAction::has_ownhp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FightHurtAction::set_has_ownhp() {
  _has_bits_[0] |= 0x00000200u;
}
void FightHurtAction::clear_has_ownhp() {
  _has_bits_[0] &= ~0x00000200u;
}
void FightHurtAction::clear_ownhp() {
  ownhp_ = -1;
  clear_has_ownhp();
}
::google::protobuf::int32 FightHurtAction::ownhp() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.OwnHP)
  return ownhp_;
}
void FightHurtAction::set_ownhp(::google::protobuf::int32 value) {
  set_has_ownhp();
  ownhp_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.OwnHP)
}

// optional sint32 TargetHP = 18 [default = -1];
bool FightHurtAction::has_targethp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FightHurtAction::set_has_targethp() {
  _has_bits_[0] |= 0x00000400u;
}
void FightHurtAction::clear_has_targethp() {
  _has_bits_[0] &= ~0x00000400u;
}
void FightHurtAction::clear_targethp() {
  targethp_ = -1;
  clear_has_targethp();
}
::google::protobuf::int32 FightHurtAction::targethp() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.TargetHP)
  return targethp_;
}
void FightHurtAction::set_targethp(::google::protobuf::int32 value) {
  set_has_targethp();
  targethp_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.TargetHP)
}

// optional sint32 OwnHPChange = 19 [default = -1];
bool FightHurtAction::has_ownhpchange() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void FightHurtAction::set_has_ownhpchange() {
  _has_bits_[0] |= 0x00000800u;
}
void FightHurtAction::clear_has_ownhpchange() {
  _has_bits_[0] &= ~0x00000800u;
}
void FightHurtAction::clear_ownhpchange() {
  ownhpchange_ = -1;
  clear_has_ownhpchange();
}
::google::protobuf::int32 FightHurtAction::ownhpchange() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.OwnHPChange)
  return ownhpchange_;
}
void FightHurtAction::set_ownhpchange(::google::protobuf::int32 value) {
  set_has_ownhpchange();
  ownhpchange_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.OwnHPChange)
}

// optional sint32 TargetHPChange = 20 [default = -1];
bool FightHurtAction::has_targethpchange() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void FightHurtAction::set_has_targethpchange() {
  _has_bits_[0] |= 0x00001000u;
}
void FightHurtAction::clear_has_targethpchange() {
  _has_bits_[0] &= ~0x00001000u;
}
void FightHurtAction::clear_targethpchange() {
  targethpchange_ = -1;
  clear_has_targethpchange();
}
::google::protobuf::int32 FightHurtAction::targethpchange() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.TargetHPChange)
  return targethpchange_;
}
void FightHurtAction::set_targethpchange(::google::protobuf::int32 value) {
  set_has_targethpchange();
  targethpchange_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.TargetHPChange)
}

// optional bool IsCrit = 23 [default = false];
bool FightHurtAction::has_iscrit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightHurtAction::set_has_iscrit() {
  _has_bits_[0] |= 0x00000008u;
}
void FightHurtAction::clear_has_iscrit() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightHurtAction::clear_iscrit() {
  iscrit_ = false;
  clear_has_iscrit();
}
bool FightHurtAction::iscrit() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.IsCrit)
  return iscrit_;
}
void FightHurtAction::set_iscrit(bool value) {
  set_has_iscrit();
  iscrit_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.IsCrit)
}

// optional sint32 TotalDamage = 24 [default = -1];
bool FightHurtAction::has_totaldamage() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void FightHurtAction::set_has_totaldamage() {
  _has_bits_[0] |= 0x00002000u;
}
void FightHurtAction::clear_has_totaldamage() {
  _has_bits_[0] &= ~0x00002000u;
}
void FightHurtAction::clear_totaldamage() {
  totaldamage_ = -1;
  clear_has_totaldamage();
}
::google::protobuf::int32 FightHurtAction::totaldamage() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.TotalDamage)
  return totaldamage_;
}
void FightHurtAction::set_totaldamage(::google::protobuf::int32 value) {
  set_has_totaldamage();
  totaldamage_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.TotalDamage)
}

// optional sint32 SegmentIndex = 30 [default = -1];
bool FightHurtAction::has_segmentindex() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void FightHurtAction::set_has_segmentindex() {
  _has_bits_[0] |= 0x00004000u;
}
void FightHurtAction::clear_has_segmentindex() {
  _has_bits_[0] &= ~0x00004000u;
}
void FightHurtAction::clear_segmentindex() {
  segmentindex_ = -1;
  clear_has_segmentindex();
}
::google::protobuf::int32 FightHurtAction::segmentindex() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.SegmentIndex)
  return segmentindex_;
}
void FightHurtAction::set_segmentindex(::google::protobuf::int32 value) {
  set_has_segmentindex();
  segmentindex_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.SegmentIndex)
}

// optional sint32 HurtType = 31 [default = -1];
bool FightHurtAction::has_hurttype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void FightHurtAction::set_has_hurttype() {
  _has_bits_[0] |= 0x00008000u;
}
void FightHurtAction::clear_has_hurttype() {
  _has_bits_[0] &= ~0x00008000u;
}
void FightHurtAction::clear_hurttype() {
  hurttype_ = -1;
  clear_has_hurttype();
}
::google::protobuf::int32 FightHurtAction::hurttype() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.HurtType)
  return hurttype_;
}
void FightHurtAction::set_hurttype(::google::protobuf::int32 value) {
  set_has_hurttype();
  hurttype_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.HurtType)
}

// optional sint32 AttackSegment = 32 [default = -1];
bool FightHurtAction::has_attacksegment() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void FightHurtAction::set_has_attacksegment() {
  _has_bits_[0] |= 0x00010000u;
}
void FightHurtAction::clear_has_attacksegment() {
  _has_bits_[0] &= ~0x00010000u;
}
void FightHurtAction::clear_attacksegment() {
  attacksegment_ = -1;
  clear_has_attacksegment();
}
::google::protobuf::int32 FightHurtAction::attacksegment() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.AttackSegment)
  return attacksegment_;
}
void FightHurtAction::set_attacksegment(::google::protobuf::int32 value) {
  set_has_attacksegment();
  attacksegment_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.AttackSegment)
}

// optional bool IsHitGround = 33 [default = false];
bool FightHurtAction::has_ishitground() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FightHurtAction::set_has_ishitground() {
  _has_bits_[0] |= 0x00000010u;
}
void FightHurtAction::clear_has_ishitground() {
  _has_bits_[0] &= ~0x00000010u;
}
void FightHurtAction::clear_ishitground() {
  ishitground_ = false;
  clear_has_ishitground();
}
bool FightHurtAction::ishitground() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.IsHitGround)
  return ishitground_;
}
void FightHurtAction::set_ishitground(bool value) {
  set_has_ishitground();
  ishitground_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.IsHitGround)
}

// optional sint32 TargetMaxHP = 34 [default = -1];
bool FightHurtAction::has_targetmaxhp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void FightHurtAction::set_has_targetmaxhp() {
  _has_bits_[0] |= 0x00020000u;
}
void FightHurtAction::clear_has_targetmaxhp() {
  _has_bits_[0] &= ~0x00020000u;
}
void FightHurtAction::clear_targetmaxhp() {
  targetmaxhp_ = -1;
  clear_has_targetmaxhp();
}
::google::protobuf::int32 FightHurtAction::targetmaxhp() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.TargetMaxHP)
  return targetmaxhp_;
}
void FightHurtAction::set_targetmaxhp(::google::protobuf::int32 value) {
  set_has_targetmaxhp();
  targetmaxhp_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.TargetMaxHP)
}

// optional sint32 EnemyIndex = 35 [default = -1];
bool FightHurtAction::has_enemyindex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FightHurtAction::set_has_enemyindex() {
  _has_bits_[0] |= 0x00000020u;
}
void FightHurtAction::clear_has_enemyindex() {
  _has_bits_[0] &= ~0x00000020u;
}
void FightHurtAction::clear_enemyindex() {
  enemyindex_ = -1;
  clear_has_enemyindex();
}
::google::protobuf::int32 FightHurtAction::enemyindex() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.EnemyIndex)
  return enemyindex_;
}
void FightHurtAction::set_enemyindex(::google::protobuf::int32 value) {
  set_has_enemyindex();
  enemyindex_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.EnemyIndex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightDodgeAction::kObjIdFieldNumber;
const int FightDodgeAction::kSkillIdFieldNumber;
const int FightDodgeAction::kAttackerObjIdFieldNumber;
const int FightDodgeAction::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightDodgeAction::FightDodgeAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightDodgeAction)
}
FightDodgeAction::FightDodgeAction(const FightDodgeAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&objid_, &from.objid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&objid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:FightDodgeAction)
}

void FightDodgeAction::SharedCtor() {
  _cached_size_ = 0;
  objid_ = -1;
  skillid_ = -1;
  attackerobjid_ = -1;
  type_ = 1;
}

FightDodgeAction::~FightDodgeAction() {
  // @@protoc_insertion_point(destructor:FightDodgeAction)
  SharedDtor();
}

void FightDodgeAction::SharedDtor() {
}

void FightDodgeAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightDodgeAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightDodgeAction& FightDodgeAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightDodgeAction* FightDodgeAction::New(::google::protobuf::Arena* arena) const {
  FightDodgeAction* n = new FightDodgeAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightDodgeAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightDodgeAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    objid_ = -1;
    skillid_ = -1;
    attackerobjid_ = -1;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightDodgeAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightDodgeAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ObjId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 SkillId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_skillid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skillid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 AttackerObjId = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_attackerobjid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &attackerobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Type = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightDodgeAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightDodgeAction)
  return false;
#undef DO_
}

void FightDodgeAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightDodgeAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->objid(), output);
  }

  // optional sint32 SkillId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->skillid(), output);
  }

  // optional sint32 AttackerObjId = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->attackerobjid(), output);
  }

  // optional sint32 Type = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightDodgeAction)
}

::google::protobuf::uint8* FightDodgeAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightDodgeAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->objid(), target);
  }

  // optional sint32 SkillId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->skillid(), target);
  }

  // optional sint32 AttackerObjId = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->attackerobjid(), target);
  }

  // optional sint32 Type = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightDodgeAction)
  return target;
}

size_t FightDodgeAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightDodgeAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional sint32 ObjId = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

    // optional sint32 SkillId = 2 [default = -1];
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skillid());
    }

    // optional sint32 AttackerObjId = 3 [default = -1];
    if (has_attackerobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->attackerobjid());
    }

    // optional sint32 Type = 4 [default = 1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightDodgeAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightDodgeAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightDodgeAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightDodgeAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightDodgeAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightDodgeAction)
    MergeFrom(*source);
  }
}

void FightDodgeAction::MergeFrom(const FightDodgeAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightDodgeAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      objid_ = from.objid_;
    }
    if (cached_has_bits & 0x00000002u) {
      skillid_ = from.skillid_;
    }
    if (cached_has_bits & 0x00000004u) {
      attackerobjid_ = from.attackerobjid_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightDodgeAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightDodgeAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightDodgeAction::CopyFrom(const FightDodgeAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightDodgeAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightDodgeAction::IsInitialized() const {
  return true;
}

void FightDodgeAction::Swap(FightDodgeAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightDodgeAction::InternalSwap(FightDodgeAction* other) {
  using std::swap;
  swap(objid_, other->objid_);
  swap(skillid_, other->skillid_);
  swap(attackerobjid_, other->attackerobjid_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightDodgeAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightDodgeAction

// optional sint32 ObjId = 1 [default = -1];
bool FightDodgeAction::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightDodgeAction::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
void FightDodgeAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightDodgeAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightDodgeAction::objid() const {
  // @@protoc_insertion_point(field_get:FightDodgeAction.ObjId)
  return objid_;
}
void FightDodgeAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightDodgeAction.ObjId)
}

// optional sint32 SkillId = 2 [default = -1];
bool FightDodgeAction::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightDodgeAction::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
void FightDodgeAction::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightDodgeAction::clear_skillid() {
  skillid_ = -1;
  clear_has_skillid();
}
::google::protobuf::int32 FightDodgeAction::skillid() const {
  // @@protoc_insertion_point(field_get:FightDodgeAction.SkillId)
  return skillid_;
}
void FightDodgeAction::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:FightDodgeAction.SkillId)
}

// optional sint32 AttackerObjId = 3 [default = -1];
bool FightDodgeAction::has_attackerobjid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightDodgeAction::set_has_attackerobjid() {
  _has_bits_[0] |= 0x00000004u;
}
void FightDodgeAction::clear_has_attackerobjid() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightDodgeAction::clear_attackerobjid() {
  attackerobjid_ = -1;
  clear_has_attackerobjid();
}
::google::protobuf::int32 FightDodgeAction::attackerobjid() const {
  // @@protoc_insertion_point(field_get:FightDodgeAction.AttackerObjId)
  return attackerobjid_;
}
void FightDodgeAction::set_attackerobjid(::google::protobuf::int32 value) {
  set_has_attackerobjid();
  attackerobjid_ = value;
  // @@protoc_insertion_point(field_set:FightDodgeAction.AttackerObjId)
}

// optional sint32 Type = 4 [default = 1];
bool FightDodgeAction::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightDodgeAction::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void FightDodgeAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightDodgeAction::clear_type() {
  type_ = 1;
  clear_has_type();
}
::google::protobuf::int32 FightDodgeAction::type() const {
  // @@protoc_insertion_point(field_get:FightDodgeAction.Type)
  return type_;
}
void FightDodgeAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightDodgeAction.Type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightRemoveObjAction::kObjIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightRemoveObjAction::FightRemoveObjAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightRemoveObjAction)
}
FightRemoveObjAction::FightRemoveObjAction(const FightRemoveObjAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  objid_ = from.objid_;
  // @@protoc_insertion_point(copy_constructor:FightRemoveObjAction)
}

void FightRemoveObjAction::SharedCtor() {
  _cached_size_ = 0;
  objid_ = -1;
}

FightRemoveObjAction::~FightRemoveObjAction() {
  // @@protoc_insertion_point(destructor:FightRemoveObjAction)
  SharedDtor();
}

void FightRemoveObjAction::SharedDtor() {
}

void FightRemoveObjAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightRemoveObjAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightRemoveObjAction& FightRemoveObjAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightRemoveObjAction* FightRemoveObjAction::New(::google::protobuf::Arena* arena) const {
  FightRemoveObjAction* n = new FightRemoveObjAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightRemoveObjAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightRemoveObjAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objid_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightRemoveObjAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightRemoveObjAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ObjId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightRemoveObjAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightRemoveObjAction)
  return false;
#undef DO_
}

void FightRemoveObjAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightRemoveObjAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->objid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightRemoveObjAction)
}

::google::protobuf::uint8* FightRemoveObjAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightRemoveObjAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->objid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightRemoveObjAction)
  return target;
}

size_t FightRemoveObjAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightRemoveObjAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 ObjId = 1 [default = -1];
  if (has_objid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->objid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRemoveObjAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightRemoveObjAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightRemoveObjAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightRemoveObjAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightRemoveObjAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightRemoveObjAction)
    MergeFrom(*source);
  }
}

void FightRemoveObjAction::MergeFrom(const FightRemoveObjAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightRemoveObjAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_objid()) {
    set_objid(from.objid());
  }
}

void FightRemoveObjAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightRemoveObjAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightRemoveObjAction::CopyFrom(const FightRemoveObjAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightRemoveObjAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRemoveObjAction::IsInitialized() const {
  return true;
}

void FightRemoveObjAction::Swap(FightRemoveObjAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightRemoveObjAction::InternalSwap(FightRemoveObjAction* other) {
  using std::swap;
  swap(objid_, other->objid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightRemoveObjAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightRemoveObjAction

// optional sint32 ObjId = 1 [default = -1];
bool FightRemoveObjAction::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightRemoveObjAction::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
void FightRemoveObjAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightRemoveObjAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightRemoveObjAction::objid() const {
  // @@protoc_insertion_point(field_get:FightRemoveObjAction.ObjId)
  return objid_;
}
void FightRemoveObjAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightRemoveObjAction.ObjId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightStormBaseAction::kTypeFieldNumber;
const int FightStormBaseAction::kMarkFieldNumber;
const int FightStormBaseAction::kCampIdFieldNumber;
const int FightStormBaseAction::kObjIdFieldNumber;
const int FightStormBaseAction::kIDFieldNumber;
const int FightStormBaseAction::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightStormBaseAction::FightStormBaseAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightStormBaseAction)
}
FightStormBaseAction::FightStormBaseAction(const FightStormBaseAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&objid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(objid_));
  // @@protoc_insertion_point(copy_constructor:FightStormBaseAction)
}

void FightStormBaseAction::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = -1;
  type_ = -1;
  mark_ = -1;
  campid_ = -1;
  objid_ = -1;
}

FightStormBaseAction::~FightStormBaseAction() {
  // @@protoc_insertion_point(destructor:FightStormBaseAction)
  SharedDtor();
}

void FightStormBaseAction::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FightStormBaseAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightStormBaseAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightStormBaseAction& FightStormBaseAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightStormBaseAction* FightStormBaseAction::New(::google::protobuf::Arena* arena) const {
  FightStormBaseAction* n = new FightStormBaseAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightStormBaseAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightStormBaseAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    id_ = -1;
    type_ = -1;
    mark_ = -1;
    campid_ = -1;
    objid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightStormBaseAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightStormBaseAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Type = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Mark = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &mark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 CampId = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_campid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &campid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ObjId = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ID = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FightStormBaseAction.Name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightStormBaseAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightStormBaseAction)
  return false;
#undef DO_
}

void FightStormBaseAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightStormBaseAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->type(), output);
  }

  // optional sint32 Mark = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->mark(), output);
  }

  // optional sint32 CampId = 3 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->campid(), output);
  }

  // optional sint32 ObjId = 4 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->objid(), output);
  }

  // optional sint32 ID = 5 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->id(), output);
  }

  // optional string Name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FightStormBaseAction.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightStormBaseAction)
}

::google::protobuf::uint8* FightStormBaseAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightStormBaseAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->type(), target);
  }

  // optional sint32 Mark = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->mark(), target);
  }

  // optional sint32 CampId = 3 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->campid(), target);
  }

  // optional sint32 ObjId = 4 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->objid(), target);
  }

  // optional sint32 ID = 5 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->id(), target);
  }

  // optional string Name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FightStormBaseAction.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightStormBaseAction)
  return target;
}

size_t FightStormBaseAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightStormBaseAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string Name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional sint32 ID = 5 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // optional sint32 Type = 1 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 Mark = 2 [default = -1];
    if (has_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->mark());
    }

    // optional sint32 CampId = 3 [default = -1];
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->campid());
    }

    // optional sint32 ObjId = 4 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightStormBaseAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightStormBaseAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightStormBaseAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightStormBaseAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightStormBaseAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightStormBaseAction)
    MergeFrom(*source);
  }
}

void FightStormBaseAction::MergeFrom(const FightStormBaseAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightStormBaseAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      mark_ = from.mark_;
    }
    if (cached_has_bits & 0x00000010u) {
      campid_ = from.campid_;
    }
    if (cached_has_bits & 0x00000020u) {
      objid_ = from.objid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightStormBaseAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightStormBaseAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightStormBaseAction::CopyFrom(const FightStormBaseAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightStormBaseAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightStormBaseAction::IsInitialized() const {
  return true;
}

void FightStormBaseAction::Swap(FightStormBaseAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightStormBaseAction::InternalSwap(FightStormBaseAction* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(mark_, other->mark_);
  swap(campid_, other->campid_);
  swap(objid_, other->objid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightStormBaseAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightStormBaseAction

// optional sint32 Type = 1 [default = -1];
bool FightStormBaseAction::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightStormBaseAction::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void FightStormBaseAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightStormBaseAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
::google::protobuf::int32 FightStormBaseAction::type() const {
  // @@protoc_insertion_point(field_get:FightStormBaseAction.Type)
  return type_;
}
void FightStormBaseAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightStormBaseAction.Type)
}

// optional sint32 Mark = 2 [default = -1];
bool FightStormBaseAction::has_mark() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightStormBaseAction::set_has_mark() {
  _has_bits_[0] |= 0x00000008u;
}
void FightStormBaseAction::clear_has_mark() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightStormBaseAction::clear_mark() {
  mark_ = -1;
  clear_has_mark();
}
::google::protobuf::int32 FightStormBaseAction::mark() const {
  // @@protoc_insertion_point(field_get:FightStormBaseAction.Mark)
  return mark_;
}
void FightStormBaseAction::set_mark(::google::protobuf::int32 value) {
  set_has_mark();
  mark_ = value;
  // @@protoc_insertion_point(field_set:FightStormBaseAction.Mark)
}

// optional sint32 CampId = 3 [default = -1];
bool FightStormBaseAction::has_campid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FightStormBaseAction::set_has_campid() {
  _has_bits_[0] |= 0x00000010u;
}
void FightStormBaseAction::clear_has_campid() {
  _has_bits_[0] &= ~0x00000010u;
}
void FightStormBaseAction::clear_campid() {
  campid_ = -1;
  clear_has_campid();
}
::google::protobuf::int32 FightStormBaseAction::campid() const {
  // @@protoc_insertion_point(field_get:FightStormBaseAction.CampId)
  return campid_;
}
void FightStormBaseAction::set_campid(::google::protobuf::int32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:FightStormBaseAction.CampId)
}

// optional sint32 ObjId = 4 [default = -1];
bool FightStormBaseAction::has_objid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FightStormBaseAction::set_has_objid() {
  _has_bits_[0] |= 0x00000020u;
}
void FightStormBaseAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000020u;
}
void FightStormBaseAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightStormBaseAction::objid() const {
  // @@protoc_insertion_point(field_get:FightStormBaseAction.ObjId)
  return objid_;
}
void FightStormBaseAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightStormBaseAction.ObjId)
}

// optional sint32 ID = 5 [default = -1];
bool FightStormBaseAction::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightStormBaseAction::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void FightStormBaseAction::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightStormBaseAction::clear_id() {
  id_ = -1;
  clear_has_id();
}
::google::protobuf::int32 FightStormBaseAction::id() const {
  // @@protoc_insertion_point(field_get:FightStormBaseAction.ID)
  return id_;
}
void FightStormBaseAction::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:FightStormBaseAction.ID)
}

// optional string Name = 6;
bool FightStormBaseAction::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightStormBaseAction::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void FightStormBaseAction::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightStormBaseAction::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& FightStormBaseAction::name() const {
  // @@protoc_insertion_point(field_get:FightStormBaseAction.Name)
  return name_.GetNoArena();
}
void FightStormBaseAction::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightStormBaseAction.Name)
}
#if LANG_CXX11
void FightStormBaseAction::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightStormBaseAction.Name)
}
#endif
void FightStormBaseAction::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightStormBaseAction.Name)
}
void FightStormBaseAction::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightStormBaseAction.Name)
}
::std::string* FightStormBaseAction::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:FightStormBaseAction.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightStormBaseAction::release_name() {
  // @@protoc_insertion_point(field_release:FightStormBaseAction.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightStormBaseAction::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:FightStormBaseAction.Name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightStormResAction::kBaseIdFieldNumber;
const int FightStormResAction::kCampIdFieldNumber;
const int FightStormResAction::kUpdateNumFieldNumber;
const int FightStormResAction::kTotalNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightStormResAction::FightStormResAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightStormResAction)
}
FightStormResAction::FightStormResAction(const FightStormResAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&baseid_, &from.baseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalnum_) -
    reinterpret_cast<char*>(&baseid_)) + sizeof(totalnum_));
  // @@protoc_insertion_point(copy_constructor:FightStormResAction)
}

void FightStormResAction::SharedCtor() {
  _cached_size_ = 0;
  baseid_ = -1;
  campid_ = -1;
  updatenum_ = -1;
  totalnum_ = -1;
}

FightStormResAction::~FightStormResAction() {
  // @@protoc_insertion_point(destructor:FightStormResAction)
  SharedDtor();
}

void FightStormResAction::SharedDtor() {
}

void FightStormResAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightStormResAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightStormResAction& FightStormResAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightStormResAction* FightStormResAction::New(::google::protobuf::Arena* arena) const {
  FightStormResAction* n = new FightStormResAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightStormResAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightStormResAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    baseid_ = -1;
    campid_ = -1;
    updatenum_ = -1;
    totalnum_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightStormResAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightStormResAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 BaseId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_baseid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &baseid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 CampId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_campid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &campid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 UpdateNum = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_updatenum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &updatenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TotalNum = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_totalnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &totalnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightStormResAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightStormResAction)
  return false;
#undef DO_
}

void FightStormResAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightStormResAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 BaseId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->baseid(), output);
  }

  // optional sint32 CampId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->campid(), output);
  }

  // optional sint32 UpdateNum = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->updatenum(), output);
  }

  // optional sint32 TotalNum = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->totalnum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightStormResAction)
}

::google::protobuf::uint8* FightStormResAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightStormResAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 BaseId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->baseid(), target);
  }

  // optional sint32 CampId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->campid(), target);
  }

  // optional sint32 UpdateNum = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->updatenum(), target);
  }

  // optional sint32 TotalNum = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->totalnum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightStormResAction)
  return target;
}

size_t FightStormResAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightStormResAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional sint32 BaseId = 1 [default = -1];
    if (has_baseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->baseid());
    }

    // optional sint32 CampId = 2 [default = -1];
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->campid());
    }

    // optional sint32 UpdateNum = 3 [default = -1];
    if (has_updatenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->updatenum());
    }

    // optional sint32 TotalNum = 4 [default = -1];
    if (has_totalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->totalnum());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightStormResAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightStormResAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightStormResAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightStormResAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightStormResAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightStormResAction)
    MergeFrom(*source);
  }
}

void FightStormResAction::MergeFrom(const FightStormResAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightStormResAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      baseid_ = from.baseid_;
    }
    if (cached_has_bits & 0x00000002u) {
      campid_ = from.campid_;
    }
    if (cached_has_bits & 0x00000004u) {
      updatenum_ = from.updatenum_;
    }
    if (cached_has_bits & 0x00000008u) {
      totalnum_ = from.totalnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightStormResAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightStormResAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightStormResAction::CopyFrom(const FightStormResAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightStormResAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightStormResAction::IsInitialized() const {
  return true;
}

void FightStormResAction::Swap(FightStormResAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightStormResAction::InternalSwap(FightStormResAction* other) {
  using std::swap;
  swap(baseid_, other->baseid_);
  swap(campid_, other->campid_);
  swap(updatenum_, other->updatenum_);
  swap(totalnum_, other->totalnum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightStormResAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightStormResAction

// optional sint32 BaseId = 1 [default = -1];
bool FightStormResAction::has_baseid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightStormResAction::set_has_baseid() {
  _has_bits_[0] |= 0x00000001u;
}
void FightStormResAction::clear_has_baseid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightStormResAction::clear_baseid() {
  baseid_ = -1;
  clear_has_baseid();
}
::google::protobuf::int32 FightStormResAction::baseid() const {
  // @@protoc_insertion_point(field_get:FightStormResAction.BaseId)
  return baseid_;
}
void FightStormResAction::set_baseid(::google::protobuf::int32 value) {
  set_has_baseid();
  baseid_ = value;
  // @@protoc_insertion_point(field_set:FightStormResAction.BaseId)
}

// optional sint32 CampId = 2 [default = -1];
bool FightStormResAction::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightStormResAction::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
void FightStormResAction::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightStormResAction::clear_campid() {
  campid_ = -1;
  clear_has_campid();
}
::google::protobuf::int32 FightStormResAction::campid() const {
  // @@protoc_insertion_point(field_get:FightStormResAction.CampId)
  return campid_;
}
void FightStormResAction::set_campid(::google::protobuf::int32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:FightStormResAction.CampId)
}

// optional sint32 UpdateNum = 3 [default = -1];
bool FightStormResAction::has_updatenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightStormResAction::set_has_updatenum() {
  _has_bits_[0] |= 0x00000004u;
}
void FightStormResAction::clear_has_updatenum() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightStormResAction::clear_updatenum() {
  updatenum_ = -1;
  clear_has_updatenum();
}
::google::protobuf::int32 FightStormResAction::updatenum() const {
  // @@protoc_insertion_point(field_get:FightStormResAction.UpdateNum)
  return updatenum_;
}
void FightStormResAction::set_updatenum(::google::protobuf::int32 value) {
  set_has_updatenum();
  updatenum_ = value;
  // @@protoc_insertion_point(field_set:FightStormResAction.UpdateNum)
}

// optional sint32 TotalNum = 4 [default = -1];
bool FightStormResAction::has_totalnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightStormResAction::set_has_totalnum() {
  _has_bits_[0] |= 0x00000008u;
}
void FightStormResAction::clear_has_totalnum() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightStormResAction::clear_totalnum() {
  totalnum_ = -1;
  clear_has_totalnum();
}
::google::protobuf::int32 FightStormResAction::totalnum() const {
  // @@protoc_insertion_point(field_get:FightStormResAction.TotalNum)
  return totalnum_;
}
void FightStormResAction::set_totalnum(::google::protobuf::int32 value) {
  set_has_totalnum();
  totalnum_ = value;
  // @@protoc_insertion_point(field_set:FightStormResAction.TotalNum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightStormFlagAction::kTypeFieldNumber;
const int FightStormFlagAction::kTimeFieldNumber;
const int FightStormFlagAction::kFlagObjIdFieldNumber;
const int FightStormFlagAction::kObjId1FieldNumber;
const int FightStormFlagAction::kObjId2FieldNumber;
const int FightStormFlagAction::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightStormFlagAction::FightStormFlagAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightStormFlagAction)
}
FightStormFlagAction::FightStormFlagAction(const FightStormFlagAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&type_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:FightStormFlagAction)
}

void FightStormFlagAction::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  time_ = -1;
  flagobjid_ = -1;
  objid1_ = -1;
  objid2_ = -1;
  result_ = -1;
}

FightStormFlagAction::~FightStormFlagAction() {
  // @@protoc_insertion_point(destructor:FightStormFlagAction)
  SharedDtor();
}

void FightStormFlagAction::SharedDtor() {
}

void FightStormFlagAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightStormFlagAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightStormFlagAction& FightStormFlagAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightStormFlagAction* FightStormFlagAction::New(::google::protobuf::Arena* arena) const {
  FightStormFlagAction* n = new FightStormFlagAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightStormFlagAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightStormFlagAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    type_ = 1;
    time_ = -1;
    flagobjid_ = -1;
    objid1_ = -1;
    objid2_ = -1;
    result_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightStormFlagAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightStormFlagAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Type = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Time = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 FlagObjId = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_flagobjid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &flagobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ObjId1 = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_objid1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ObjId2 = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_objid2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Result = 6 [default = -1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightStormFlagAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightStormFlagAction)
  return false;
#undef DO_
}

void FightStormFlagAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightStormFlagAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->type(), output);
  }

  // optional sint32 Time = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->time(), output);
  }

  // optional sint32 FlagObjId = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->flagobjid(), output);
  }

  // optional sint32 ObjId1 = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->objid1(), output);
  }

  // optional sint32 ObjId2 = 5 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->objid2(), output);
  }

  // optional sint32 Result = 6 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightStormFlagAction)
}

::google::protobuf::uint8* FightStormFlagAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightStormFlagAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->type(), target);
  }

  // optional sint32 Time = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->time(), target);
  }

  // optional sint32 FlagObjId = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->flagobjid(), target);
  }

  // optional sint32 ObjId1 = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->objid1(), target);
  }

  // optional sint32 ObjId2 = 5 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->objid2(), target);
  }

  // optional sint32 Result = 6 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightStormFlagAction)
  return target;
}

size_t FightStormFlagAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightStormFlagAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional sint32 Type = 1 [default = 1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 Time = 2 [default = -1];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->time());
    }

    // optional sint32 FlagObjId = 3 [default = -1];
    if (has_flagobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->flagobjid());
    }

    // optional sint32 ObjId1 = 4 [default = -1];
    if (has_objid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid1());
    }

    // optional sint32 ObjId2 = 5 [default = -1];
    if (has_objid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid2());
    }

    // optional sint32 Result = 6 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightStormFlagAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightStormFlagAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightStormFlagAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightStormFlagAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightStormFlagAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightStormFlagAction)
    MergeFrom(*source);
  }
}

void FightStormFlagAction::MergeFrom(const FightStormFlagAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightStormFlagAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000004u) {
      flagobjid_ = from.flagobjid_;
    }
    if (cached_has_bits & 0x00000008u) {
      objid1_ = from.objid1_;
    }
    if (cached_has_bits & 0x00000010u) {
      objid2_ = from.objid2_;
    }
    if (cached_has_bits & 0x00000020u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightStormFlagAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightStormFlagAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightStormFlagAction::CopyFrom(const FightStormFlagAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightStormFlagAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightStormFlagAction::IsInitialized() const {
  return true;
}

void FightStormFlagAction::Swap(FightStormFlagAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightStormFlagAction::InternalSwap(FightStormFlagAction* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(time_, other->time_);
  swap(flagobjid_, other->flagobjid_);
  swap(objid1_, other->objid1_);
  swap(objid2_, other->objid2_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightStormFlagAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightStormFlagAction

// optional sint32 Type = 1 [default = 1];
bool FightStormFlagAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightStormFlagAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FightStormFlagAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightStormFlagAction::clear_type() {
  type_ = 1;
  clear_has_type();
}
::google::protobuf::int32 FightStormFlagAction::type() const {
  // @@protoc_insertion_point(field_get:FightStormFlagAction.Type)
  return type_;
}
void FightStormFlagAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightStormFlagAction.Type)
}

// optional sint32 Time = 2 [default = -1];
bool FightStormFlagAction::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightStormFlagAction::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void FightStormFlagAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightStormFlagAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
::google::protobuf::int32 FightStormFlagAction::time() const {
  // @@protoc_insertion_point(field_get:FightStormFlagAction.Time)
  return time_;
}
void FightStormFlagAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightStormFlagAction.Time)
}

// optional sint32 FlagObjId = 3 [default = -1];
bool FightStormFlagAction::has_flagobjid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightStormFlagAction::set_has_flagobjid() {
  _has_bits_[0] |= 0x00000004u;
}
void FightStormFlagAction::clear_has_flagobjid() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightStormFlagAction::clear_flagobjid() {
  flagobjid_ = -1;
  clear_has_flagobjid();
}
::google::protobuf::int32 FightStormFlagAction::flagobjid() const {
  // @@protoc_insertion_point(field_get:FightStormFlagAction.FlagObjId)
  return flagobjid_;
}
void FightStormFlagAction::set_flagobjid(::google::protobuf::int32 value) {
  set_has_flagobjid();
  flagobjid_ = value;
  // @@protoc_insertion_point(field_set:FightStormFlagAction.FlagObjId)
}

// optional sint32 ObjId1 = 4 [default = -1];
bool FightStormFlagAction::has_objid1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightStormFlagAction::set_has_objid1() {
  _has_bits_[0] |= 0x00000008u;
}
void FightStormFlagAction::clear_has_objid1() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightStormFlagAction::clear_objid1() {
  objid1_ = -1;
  clear_has_objid1();
}
::google::protobuf::int32 FightStormFlagAction::objid1() const {
  // @@protoc_insertion_point(field_get:FightStormFlagAction.ObjId1)
  return objid1_;
}
void FightStormFlagAction::set_objid1(::google::protobuf::int32 value) {
  set_has_objid1();
  objid1_ = value;
  // @@protoc_insertion_point(field_set:FightStormFlagAction.ObjId1)
}

// optional sint32 ObjId2 = 5 [default = -1];
bool FightStormFlagAction::has_objid2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FightStormFlagAction::set_has_objid2() {
  _has_bits_[0] |= 0x00000010u;
}
void FightStormFlagAction::clear_has_objid2() {
  _has_bits_[0] &= ~0x00000010u;
}
void FightStormFlagAction::clear_objid2() {
  objid2_ = -1;
  clear_has_objid2();
}
::google::protobuf::int32 FightStormFlagAction::objid2() const {
  // @@protoc_insertion_point(field_get:FightStormFlagAction.ObjId2)
  return objid2_;
}
void FightStormFlagAction::set_objid2(::google::protobuf::int32 value) {
  set_has_objid2();
  objid2_ = value;
  // @@protoc_insertion_point(field_set:FightStormFlagAction.ObjId2)
}

// optional sint32 Result = 6 [default = -1];
bool FightStormFlagAction::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FightStormFlagAction::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
void FightStormFlagAction::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
void FightStormFlagAction::clear_result() {
  result_ = -1;
  clear_has_result();
}
::google::protobuf::int32 FightStormFlagAction::result() const {
  // @@protoc_insertion_point(field_get:FightStormFlagAction.Result)
  return result_;
}
void FightStormFlagAction::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FightStormFlagAction.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightStormCampAction::kObjArrFieldNumber;
const int FightStormCampAction::kCampIdFieldNumber;
const int FightStormCampAction::kTotalNumFieldNumber;
const int FightStormCampAction::kColorFieldNumber;
const int FightStormCampAction::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightStormCampAction::FightStormCampAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightStormCampAction)
}
FightStormCampAction::FightStormCampAction(const FightStormCampAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      objarr_(from.objarr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&totalnum_, &from.totalnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&totalnum_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:FightStormCampAction)
}

void FightStormCampAction::SharedCtor() {
  _cached_size_ = 0;
  totalnum_ = 0;
  type_ = -1;
  campid_ = -1;
  color_ = -1;
}

FightStormCampAction::~FightStormCampAction() {
  // @@protoc_insertion_point(destructor:FightStormCampAction)
  SharedDtor();
}

void FightStormCampAction::SharedDtor() {
}

void FightStormCampAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightStormCampAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightStormCampAction& FightStormCampAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightStormCampAction* FightStormCampAction::New(::google::protobuf::Arena* arena) const {
  FightStormCampAction* n = new FightStormCampAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightStormCampAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightStormCampAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objarr_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    totalnum_ = 0;
    type_ = -1;
    campid_ = -1;
    color_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightStormCampAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightStormCampAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint32 ObjArr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 8u, input, this->mutable_objarr())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_objarr())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 CampId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_campid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &campid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TotalNum = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_totalnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &totalnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Color = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Type = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightStormCampAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightStormCampAction)
  return false;
#undef DO_
}

void FightStormCampAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightStormCampAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint32 ObjArr = 1;
  for (int i = 0, n = this->objarr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      1, this->objarr(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional sint32 CampId = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->campid(), output);
  }

  // optional sint32 TotalNum = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->totalnum(), output);
  }

  // optional sint32 Color = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->color(), output);
  }

  // optional sint32 Type = 5 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightStormCampAction)
}

::google::protobuf::uint8* FightStormCampAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightStormCampAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint32 ObjArr = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(1, this->objarr_, target);

  cached_has_bits = _has_bits_[0];
  // optional sint32 CampId = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->campid(), target);
  }

  // optional sint32 TotalNum = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->totalnum(), target);
  }

  // optional sint32 Color = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->color(), target);
  }

  // optional sint32 Type = 5 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightStormCampAction)
  return target;
}

size_t FightStormCampAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightStormCampAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated sint32 ObjArr = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->objarr_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->objarr_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional sint32 TotalNum = 3 [default = 0];
    if (has_totalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->totalnum());
    }

    // optional sint32 Type = 5 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 CampId = 2 [default = -1];
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->campid());
    }

    // optional sint32 Color = 4 [default = -1];
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->color());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightStormCampAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightStormCampAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightStormCampAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightStormCampAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightStormCampAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightStormCampAction)
    MergeFrom(*source);
  }
}

void FightStormCampAction::MergeFrom(const FightStormCampAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightStormCampAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objarr_.MergeFrom(from.objarr_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      totalnum_ = from.totalnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      campid_ = from.campid_;
    }
    if (cached_has_bits & 0x00000008u) {
      color_ = from.color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightStormCampAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightStormCampAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightStormCampAction::CopyFrom(const FightStormCampAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightStormCampAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightStormCampAction::IsInitialized() const {
  return true;
}

void FightStormCampAction::Swap(FightStormCampAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightStormCampAction::InternalSwap(FightStormCampAction* other) {
  using std::swap;
  objarr_.InternalSwap(&other->objarr_);
  swap(totalnum_, other->totalnum_);
  swap(type_, other->type_);
  swap(campid_, other->campid_);
  swap(color_, other->color_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightStormCampAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightStormCampAction

// repeated sint32 ObjArr = 1;
int FightStormCampAction::objarr_size() const {
  return objarr_.size();
}
void FightStormCampAction::clear_objarr() {
  objarr_.Clear();
}
::google::protobuf::int32 FightStormCampAction::objarr(int index) const {
  // @@protoc_insertion_point(field_get:FightStormCampAction.ObjArr)
  return objarr_.Get(index);
}
void FightStormCampAction::set_objarr(int index, ::google::protobuf::int32 value) {
  objarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:FightStormCampAction.ObjArr)
}
void FightStormCampAction::add_objarr(::google::protobuf::int32 value) {
  objarr_.Add(value);
  // @@protoc_insertion_point(field_add:FightStormCampAction.ObjArr)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FightStormCampAction::objarr() const {
  // @@protoc_insertion_point(field_list:FightStormCampAction.ObjArr)
  return objarr_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FightStormCampAction::mutable_objarr() {
  // @@protoc_insertion_point(field_mutable_list:FightStormCampAction.ObjArr)
  return &objarr_;
}

// optional sint32 CampId = 2 [default = -1];
bool FightStormCampAction::has_campid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightStormCampAction::set_has_campid() {
  _has_bits_[0] |= 0x00000004u;
}
void FightStormCampAction::clear_has_campid() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightStormCampAction::clear_campid() {
  campid_ = -1;
  clear_has_campid();
}
::google::protobuf::int32 FightStormCampAction::campid() const {
  // @@protoc_insertion_point(field_get:FightStormCampAction.CampId)
  return campid_;
}
void FightStormCampAction::set_campid(::google::protobuf::int32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:FightStormCampAction.CampId)
}

// optional sint32 TotalNum = 3 [default = 0];
bool FightStormCampAction::has_totalnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightStormCampAction::set_has_totalnum() {
  _has_bits_[0] |= 0x00000001u;
}
void FightStormCampAction::clear_has_totalnum() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightStormCampAction::clear_totalnum() {
  totalnum_ = 0;
  clear_has_totalnum();
}
::google::protobuf::int32 FightStormCampAction::totalnum() const {
  // @@protoc_insertion_point(field_get:FightStormCampAction.TotalNum)
  return totalnum_;
}
void FightStormCampAction::set_totalnum(::google::protobuf::int32 value) {
  set_has_totalnum();
  totalnum_ = value;
  // @@protoc_insertion_point(field_set:FightStormCampAction.TotalNum)
}

// optional sint32 Color = 4 [default = -1];
bool FightStormCampAction::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightStormCampAction::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
void FightStormCampAction::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightStormCampAction::clear_color() {
  color_ = -1;
  clear_has_color();
}
::google::protobuf::int32 FightStormCampAction::color() const {
  // @@protoc_insertion_point(field_get:FightStormCampAction.Color)
  return color_;
}
void FightStormCampAction::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:FightStormCampAction.Color)
}

// optional sint32 Type = 5 [default = -1];
bool FightStormCampAction::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightStormCampAction::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void FightStormCampAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightStormCampAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
::google::protobuf::int32 FightStormCampAction::type() const {
  // @@protoc_insertion_point(field_get:FightStormCampAction.Type)
  return type_;
}
void FightStormCampAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightStormCampAction.Type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightStormResultAction::kCampArrFieldNumber;
const int FightStormResultAction::kIsSvrSendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightStormResultAction::FightStormResultAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightStormResultAction)
}
FightStormResultAction::FightStormResultAction(const FightStormResultAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      camparr_(from.camparr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  issvrsend_ = from.issvrsend_;
  // @@protoc_insertion_point(copy_constructor:FightStormResultAction)
}

void FightStormResultAction::SharedCtor() {
  _cached_size_ = 0;
  issvrsend_ = false;
}

FightStormResultAction::~FightStormResultAction() {
  // @@protoc_insertion_point(destructor:FightStormResultAction)
  SharedDtor();
}

void FightStormResultAction::SharedDtor() {
}

void FightStormResultAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightStormResultAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightStormResultAction& FightStormResultAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightStormResultAction* FightStormResultAction::New(::google::protobuf::Arena* arena) const {
  FightStormResultAction* n = new FightStormResultAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightStormResultAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightStormResultAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camparr_.Clear();
  issvrsend_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightStormResultAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightStormResultAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FightStormCampInfo CampArr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camparr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool IsSvrSend = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_issvrsend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issvrsend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightStormResultAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightStormResultAction)
  return false;
#undef DO_
}

void FightStormResultAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightStormResultAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .FightStormCampInfo CampArr = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->camparr_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->camparr(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool IsSvrSend = 3 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->issvrsend(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightStormResultAction)
}

::google::protobuf::uint8* FightStormResultAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightStormResultAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .FightStormCampInfo CampArr = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->camparr_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->camparr(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool IsSvrSend = 3 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->issvrsend(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightStormResultAction)
  return target;
}

size_t FightStormResultAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightStormResultAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .FightStormCampInfo CampArr = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->camparr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camparr(static_cast<int>(i)));
    }
  }

  // optional bool IsSvrSend = 3 [default = false];
  if (has_issvrsend()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightStormResultAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightStormResultAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightStormResultAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightStormResultAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightStormResultAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightStormResultAction)
    MergeFrom(*source);
  }
}

void FightStormResultAction::MergeFrom(const FightStormResultAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightStormResultAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  camparr_.MergeFrom(from.camparr_);
  if (from.has_issvrsend()) {
    set_issvrsend(from.issvrsend());
  }
}

void FightStormResultAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightStormResultAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightStormResultAction::CopyFrom(const FightStormResultAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightStormResultAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightStormResultAction::IsInitialized() const {
  return true;
}

void FightStormResultAction::Swap(FightStormResultAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightStormResultAction::InternalSwap(FightStormResultAction* other) {
  using std::swap;
  camparr_.InternalSwap(&other->camparr_);
  swap(issvrsend_, other->issvrsend_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightStormResultAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightStormResultAction

// repeated .FightStormCampInfo CampArr = 1;
int FightStormResultAction::camparr_size() const {
  return camparr_.size();
}
void FightStormResultAction::clear_camparr() {
  camparr_.Clear();
}
const ::FightStormCampInfo& FightStormResultAction::camparr(int index) const {
  // @@protoc_insertion_point(field_get:FightStormResultAction.CampArr)
  return camparr_.Get(index);
}
::FightStormCampInfo* FightStormResultAction::mutable_camparr(int index) {
  // @@protoc_insertion_point(field_mutable:FightStormResultAction.CampArr)
  return camparr_.Mutable(index);
}
::FightStormCampInfo* FightStormResultAction::add_camparr() {
  // @@protoc_insertion_point(field_add:FightStormResultAction.CampArr)
  return camparr_.Add();
}
::google::protobuf::RepeatedPtrField< ::FightStormCampInfo >*
FightStormResultAction::mutable_camparr() {
  // @@protoc_insertion_point(field_mutable_list:FightStormResultAction.CampArr)
  return &camparr_;
}
const ::google::protobuf::RepeatedPtrField< ::FightStormCampInfo >&
FightStormResultAction::camparr() const {
  // @@protoc_insertion_point(field_list:FightStormResultAction.CampArr)
  return camparr_;
}

// optional bool IsSvrSend = 3 [default = false];
bool FightStormResultAction::has_issvrsend() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightStormResultAction::set_has_issvrsend() {
  _has_bits_[0] |= 0x00000001u;
}
void FightStormResultAction::clear_has_issvrsend() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightStormResultAction::clear_issvrsend() {
  issvrsend_ = false;
  clear_has_issvrsend();
}
bool FightStormResultAction::issvrsend() const {
  // @@protoc_insertion_point(field_get:FightStormResultAction.IsSvrSend)
  return issvrsend_;
}
void FightStormResultAction::set_issvrsend(bool value) {
  set_has_issvrsend();
  issvrsend_ = value;
  // @@protoc_insertion_point(field_set:FightStormResultAction.IsSvrSend)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightStormCampInfo::kPlayerArrFieldNumber;
const int FightStormCampInfo::kCampIdFieldNumber;
const int FightStormCampInfo::kTotalNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightStormCampInfo::FightStormCampInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightStormCampInfo)
}
FightStormCampInfo::FightStormCampInfo(const FightStormCampInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      playerarr_(from.playerarr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&campid_, &from.campid_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalnum_) -
    reinterpret_cast<char*>(&campid_)) + sizeof(totalnum_));
  // @@protoc_insertion_point(copy_constructor:FightStormCampInfo)
}

void FightStormCampInfo::SharedCtor() {
  _cached_size_ = 0;
  campid_ = -1;
  totalnum_ = -1;
}

FightStormCampInfo::~FightStormCampInfo() {
  // @@protoc_insertion_point(destructor:FightStormCampInfo)
  SharedDtor();
}

void FightStormCampInfo::SharedDtor() {
}

void FightStormCampInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightStormCampInfo::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightStormCampInfo& FightStormCampInfo::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightStormCampInfo* FightStormCampInfo::New(::google::protobuf::Arena* arena) const {
  FightStormCampInfo* n = new FightStormCampInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightStormCampInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:FightStormCampInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerarr_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    campid_ = -1;
    totalnum_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightStormCampInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightStormCampInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FightStormPlayerInfo PlayerArr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerarr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 CampId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_campid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &campid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TotalNum = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_totalnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &totalnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightStormCampInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightStormCampInfo)
  return false;
#undef DO_
}

void FightStormCampInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightStormCampInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .FightStormPlayerInfo PlayerArr = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->playerarr_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerarr(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional sint32 CampId = 2 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->campid(), output);
  }

  // optional sint32 TotalNum = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->totalnum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightStormCampInfo)
}

::google::protobuf::uint8* FightStormCampInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightStormCampInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .FightStormPlayerInfo PlayerArr = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->playerarr_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->playerarr(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional sint32 CampId = 2 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->campid(), target);
  }

  // optional sint32 TotalNum = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->totalnum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightStormCampInfo)
  return target;
}

size_t FightStormCampInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightStormCampInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .FightStormPlayerInfo PlayerArr = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->playerarr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerarr(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 CampId = 2 [default = -1];
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->campid());
    }

    // optional sint32 TotalNum = 3 [default = -1];
    if (has_totalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->totalnum());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightStormCampInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightStormCampInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FightStormCampInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightStormCampInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightStormCampInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightStormCampInfo)
    MergeFrom(*source);
  }
}

void FightStormCampInfo::MergeFrom(const FightStormCampInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightStormCampInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerarr_.MergeFrom(from.playerarr_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      campid_ = from.campid_;
    }
    if (cached_has_bits & 0x00000002u) {
      totalnum_ = from.totalnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightStormCampInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightStormCampInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightStormCampInfo::CopyFrom(const FightStormCampInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightStormCampInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightStormCampInfo::IsInitialized() const {
  return true;
}

void FightStormCampInfo::Swap(FightStormCampInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightStormCampInfo::InternalSwap(FightStormCampInfo* other) {
  using std::swap;
  playerarr_.InternalSwap(&other->playerarr_);
  swap(campid_, other->campid_);
  swap(totalnum_, other->totalnum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightStormCampInfo::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightStormCampInfo

// repeated .FightStormPlayerInfo PlayerArr = 1;
int FightStormCampInfo::playerarr_size() const {
  return playerarr_.size();
}
void FightStormCampInfo::clear_playerarr() {
  playerarr_.Clear();
}
const ::FightStormPlayerInfo& FightStormCampInfo::playerarr(int index) const {
  // @@protoc_insertion_point(field_get:FightStormCampInfo.PlayerArr)
  return playerarr_.Get(index);
}
::FightStormPlayerInfo* FightStormCampInfo::mutable_playerarr(int index) {
  // @@protoc_insertion_point(field_mutable:FightStormCampInfo.PlayerArr)
  return playerarr_.Mutable(index);
}
::FightStormPlayerInfo* FightStormCampInfo::add_playerarr() {
  // @@protoc_insertion_point(field_add:FightStormCampInfo.PlayerArr)
  return playerarr_.Add();
}
::google::protobuf::RepeatedPtrField< ::FightStormPlayerInfo >*
FightStormCampInfo::mutable_playerarr() {
  // @@protoc_insertion_point(field_mutable_list:FightStormCampInfo.PlayerArr)
  return &playerarr_;
}
const ::google::protobuf::RepeatedPtrField< ::FightStormPlayerInfo >&
FightStormCampInfo::playerarr() const {
  // @@protoc_insertion_point(field_list:FightStormCampInfo.PlayerArr)
  return playerarr_;
}

// optional sint32 CampId = 2 [default = -1];
bool FightStormCampInfo::has_campid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightStormCampInfo::set_has_campid() {
  _has_bits_[0] |= 0x00000001u;
}
void FightStormCampInfo::clear_has_campid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightStormCampInfo::clear_campid() {
  campid_ = -1;
  clear_has_campid();
}
::google::protobuf::int32 FightStormCampInfo::campid() const {
  // @@protoc_insertion_point(field_get:FightStormCampInfo.CampId)
  return campid_;
}
void FightStormCampInfo::set_campid(::google::protobuf::int32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:FightStormCampInfo.CampId)
}

// optional sint32 TotalNum = 3 [default = -1];
bool FightStormCampInfo::has_totalnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightStormCampInfo::set_has_totalnum() {
  _has_bits_[0] |= 0x00000002u;
}
void FightStormCampInfo::clear_has_totalnum() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightStormCampInfo::clear_totalnum() {
  totalnum_ = -1;
  clear_has_totalnum();
}
::google::protobuf::int32 FightStormCampInfo::totalnum() const {
  // @@protoc_insertion_point(field_get:FightStormCampInfo.TotalNum)
  return totalnum_;
}
void FightStormCampInfo::set_totalnum(::google::protobuf::int32 value) {
  set_has_totalnum();
  totalnum_ = value;
  // @@protoc_insertion_point(field_set:FightStormCampInfo.TotalNum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightStormPlayerInfo::kKilledNumFieldNumber;
const int FightStormPlayerInfo::kDeadTimesFieldNumber;
const int FightStormPlayerInfo::kNameFieldNumber;
const int FightStormPlayerInfo::kFlagTimesFieldNumber;
const int FightStormPlayerInfo::kProfFieldNumber;
const int FightStormPlayerInfo::kOutputDamageFieldNumber;
const int FightStormPlayerInfo::kEndureDamageFieldNumber;
const int FightStormPlayerInfo::kTreatDamageFieldNumber;
const int FightStormPlayerInfo::kObjIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightStormPlayerInfo::FightStormPlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightStormPlayerInfo)
}
FightStormPlayerInfo::FightStormPlayerInfo(const FightStormPlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&killednum_, &from.killednum_,
    static_cast<size_t>(reinterpret_cast<char*>(&treatdamage_) -
    reinterpret_cast<char*>(&killednum_)) + sizeof(treatdamage_));
  // @@protoc_insertion_point(copy_constructor:FightStormPlayerInfo)
}

void FightStormPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&killednum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flagtimes_) -
      reinterpret_cast<char*>(&killednum_)) + sizeof(flagtimes_));
  outputdamage_ = GOOGLE_LONGLONG(-1);
  enduredamage_ = GOOGLE_LONGLONG(-1);
  prof_ = -1;
  objid_ = -1;
  treatdamage_ = GOOGLE_LONGLONG(-1);
}

FightStormPlayerInfo::~FightStormPlayerInfo() {
  // @@protoc_insertion_point(destructor:FightStormPlayerInfo)
  SharedDtor();
}

void FightStormPlayerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FightStormPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightStormPlayerInfo::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightStormPlayerInfo& FightStormPlayerInfo::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightStormPlayerInfo* FightStormPlayerInfo::New(::google::protobuf::Arena* arena) const {
  FightStormPlayerInfo* n = new FightStormPlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightStormPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:FightStormPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&killednum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flagtimes_) -
        reinterpret_cast<char*>(&killednum_)) + sizeof(flagtimes_));
    outputdamage_ = GOOGLE_LONGLONG(-1);
    enduredamage_ = GOOGLE_LONGLONG(-1);
    prof_ = -1;
    objid_ = -1;
  }
  treatdamage_ = GOOGLE_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightStormPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightStormPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 KilledNum = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_killednum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &killednum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 DeadTimes = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_deadtimes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &deadtimes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FightStormPlayerInfo.Name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 FlagTimes = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_flagtimes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &flagtimes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Prof = 6 [default = -1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_prof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &prof_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 OutputDamage = 7 [default = -1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_outputdamage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &outputdamage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 EndureDamage = 8 [default = -1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_enduredamage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &enduredamage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 TreatDamage = 9 [default = -1];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_treatdamage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &treatdamage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ObjId = 10 [default = -1];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightStormPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightStormPlayerInfo)
  return false;
#undef DO_
}

void FightStormPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightStormPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 KilledNum = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->killednum(), output);
  }

  // optional sint32 DeadTimes = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->deadtimes(), output);
  }

  // optional string Name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FightStormPlayerInfo.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional sint32 FlagTimes = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->flagtimes(), output);
  }

  // optional sint32 Prof = 6 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->prof(), output);
  }

  // optional sint64 OutputDamage = 7 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(7, this->outputdamage(), output);
  }

  // optional sint64 EndureDamage = 8 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(8, this->enduredamage(), output);
  }

  // optional sint64 TreatDamage = 9 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(9, this->treatdamage(), output);
  }

  // optional sint32 ObjId = 10 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->objid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightStormPlayerInfo)
}

::google::protobuf::uint8* FightStormPlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightStormPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 KilledNum = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->killednum(), target);
  }

  // optional sint32 DeadTimes = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->deadtimes(), target);
  }

  // optional string Name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FightStormPlayerInfo.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional sint32 FlagTimes = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->flagtimes(), target);
  }

  // optional sint32 Prof = 6 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->prof(), target);
  }

  // optional sint64 OutputDamage = 7 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(7, this->outputdamage(), target);
  }

  // optional sint64 EndureDamage = 8 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(8, this->enduredamage(), target);
  }

  // optional sint64 TreatDamage = 9 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(9, this->treatdamage(), target);
  }

  // optional sint32 ObjId = 10 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->objid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightStormPlayerInfo)
  return target;
}

size_t FightStormPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightStormPlayerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string Name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional sint32 KilledNum = 1 [default = 0];
    if (has_killednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->killednum());
    }

    // optional sint32 DeadTimes = 2 [default = 0];
    if (has_deadtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->deadtimes());
    }

    // optional sint32 FlagTimes = 5 [default = 0];
    if (has_flagtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->flagtimes());
    }

    // optional sint64 OutputDamage = 7 [default = -1];
    if (has_outputdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->outputdamage());
    }

    // optional sint64 EndureDamage = 8 [default = -1];
    if (has_enduredamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->enduredamage());
    }

    // optional sint32 Prof = 6 [default = -1];
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->prof());
    }

    // optional sint32 ObjId = 10 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

  }
  // optional sint64 TreatDamage = 9 [default = -1];
  if (has_treatdamage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->treatdamage());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightStormPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightStormPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FightStormPlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightStormPlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightStormPlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightStormPlayerInfo)
    MergeFrom(*source);
  }
}

void FightStormPlayerInfo::MergeFrom(const FightStormPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightStormPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      killednum_ = from.killednum_;
    }
    if (cached_has_bits & 0x00000004u) {
      deadtimes_ = from.deadtimes_;
    }
    if (cached_has_bits & 0x00000008u) {
      flagtimes_ = from.flagtimes_;
    }
    if (cached_has_bits & 0x00000010u) {
      outputdamage_ = from.outputdamage_;
    }
    if (cached_has_bits & 0x00000020u) {
      enduredamage_ = from.enduredamage_;
    }
    if (cached_has_bits & 0x00000040u) {
      prof_ = from.prof_;
    }
    if (cached_has_bits & 0x00000080u) {
      objid_ = from.objid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_treatdamage(from.treatdamage());
  }
}

void FightStormPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightStormPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightStormPlayerInfo::CopyFrom(const FightStormPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightStormPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightStormPlayerInfo::IsInitialized() const {
  return true;
}

void FightStormPlayerInfo::Swap(FightStormPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightStormPlayerInfo::InternalSwap(FightStormPlayerInfo* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(killednum_, other->killednum_);
  swap(deadtimes_, other->deadtimes_);
  swap(flagtimes_, other->flagtimes_);
  swap(outputdamage_, other->outputdamage_);
  swap(enduredamage_, other->enduredamage_);
  swap(prof_, other->prof_);
  swap(objid_, other->objid_);
  swap(treatdamage_, other->treatdamage_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightStormPlayerInfo::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightStormPlayerInfo

// optional sint32 KilledNum = 1 [default = 0];
bool FightStormPlayerInfo::has_killednum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightStormPlayerInfo::set_has_killednum() {
  _has_bits_[0] |= 0x00000002u;
}
void FightStormPlayerInfo::clear_has_killednum() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightStormPlayerInfo::clear_killednum() {
  killednum_ = 0;
  clear_has_killednum();
}
::google::protobuf::int32 FightStormPlayerInfo::killednum() const {
  // @@protoc_insertion_point(field_get:FightStormPlayerInfo.KilledNum)
  return killednum_;
}
void FightStormPlayerInfo::set_killednum(::google::protobuf::int32 value) {
  set_has_killednum();
  killednum_ = value;
  // @@protoc_insertion_point(field_set:FightStormPlayerInfo.KilledNum)
}

// optional sint32 DeadTimes = 2 [default = 0];
bool FightStormPlayerInfo::has_deadtimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightStormPlayerInfo::set_has_deadtimes() {
  _has_bits_[0] |= 0x00000004u;
}
void FightStormPlayerInfo::clear_has_deadtimes() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightStormPlayerInfo::clear_deadtimes() {
  deadtimes_ = 0;
  clear_has_deadtimes();
}
::google::protobuf::int32 FightStormPlayerInfo::deadtimes() const {
  // @@protoc_insertion_point(field_get:FightStormPlayerInfo.DeadTimes)
  return deadtimes_;
}
void FightStormPlayerInfo::set_deadtimes(::google::protobuf::int32 value) {
  set_has_deadtimes();
  deadtimes_ = value;
  // @@protoc_insertion_point(field_set:FightStormPlayerInfo.DeadTimes)
}

// optional string Name = 4;
bool FightStormPlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightStormPlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void FightStormPlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightStormPlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& FightStormPlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:FightStormPlayerInfo.Name)
  return name_.GetNoArena();
}
void FightStormPlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightStormPlayerInfo.Name)
}
#if LANG_CXX11
void FightStormPlayerInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightStormPlayerInfo.Name)
}
#endif
void FightStormPlayerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightStormPlayerInfo.Name)
}
void FightStormPlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightStormPlayerInfo.Name)
}
::std::string* FightStormPlayerInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:FightStormPlayerInfo.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightStormPlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:FightStormPlayerInfo.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightStormPlayerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:FightStormPlayerInfo.Name)
}

// optional sint32 FlagTimes = 5 [default = 0];
bool FightStormPlayerInfo::has_flagtimes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightStormPlayerInfo::set_has_flagtimes() {
  _has_bits_[0] |= 0x00000008u;
}
void FightStormPlayerInfo::clear_has_flagtimes() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightStormPlayerInfo::clear_flagtimes() {
  flagtimes_ = 0;
  clear_has_flagtimes();
}
::google::protobuf::int32 FightStormPlayerInfo::flagtimes() const {
  // @@protoc_insertion_point(field_get:FightStormPlayerInfo.FlagTimes)
  return flagtimes_;
}
void FightStormPlayerInfo::set_flagtimes(::google::protobuf::int32 value) {
  set_has_flagtimes();
  flagtimes_ = value;
  // @@protoc_insertion_point(field_set:FightStormPlayerInfo.FlagTimes)
}

// optional sint32 Prof = 6 [default = -1];
bool FightStormPlayerInfo::has_prof() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FightStormPlayerInfo::set_has_prof() {
  _has_bits_[0] |= 0x00000040u;
}
void FightStormPlayerInfo::clear_has_prof() {
  _has_bits_[0] &= ~0x00000040u;
}
void FightStormPlayerInfo::clear_prof() {
  prof_ = -1;
  clear_has_prof();
}
::google::protobuf::int32 FightStormPlayerInfo::prof() const {
  // @@protoc_insertion_point(field_get:FightStormPlayerInfo.Prof)
  return prof_;
}
void FightStormPlayerInfo::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
  // @@protoc_insertion_point(field_set:FightStormPlayerInfo.Prof)
}

// optional sint64 OutputDamage = 7 [default = -1];
bool FightStormPlayerInfo::has_outputdamage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FightStormPlayerInfo::set_has_outputdamage() {
  _has_bits_[0] |= 0x00000010u;
}
void FightStormPlayerInfo::clear_has_outputdamage() {
  _has_bits_[0] &= ~0x00000010u;
}
void FightStormPlayerInfo::clear_outputdamage() {
  outputdamage_ = GOOGLE_LONGLONG(-1);
  clear_has_outputdamage();
}
::google::protobuf::int64 FightStormPlayerInfo::outputdamage() const {
  // @@protoc_insertion_point(field_get:FightStormPlayerInfo.OutputDamage)
  return outputdamage_;
}
void FightStormPlayerInfo::set_outputdamage(::google::protobuf::int64 value) {
  set_has_outputdamage();
  outputdamage_ = value;
  // @@protoc_insertion_point(field_set:FightStormPlayerInfo.OutputDamage)
}

// optional sint64 EndureDamage = 8 [default = -1];
bool FightStormPlayerInfo::has_enduredamage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FightStormPlayerInfo::set_has_enduredamage() {
  _has_bits_[0] |= 0x00000020u;
}
void FightStormPlayerInfo::clear_has_enduredamage() {
  _has_bits_[0] &= ~0x00000020u;
}
void FightStormPlayerInfo::clear_enduredamage() {
  enduredamage_ = GOOGLE_LONGLONG(-1);
  clear_has_enduredamage();
}
::google::protobuf::int64 FightStormPlayerInfo::enduredamage() const {
  // @@protoc_insertion_point(field_get:FightStormPlayerInfo.EndureDamage)
  return enduredamage_;
}
void FightStormPlayerInfo::set_enduredamage(::google::protobuf::int64 value) {
  set_has_enduredamage();
  enduredamage_ = value;
  // @@protoc_insertion_point(field_set:FightStormPlayerInfo.EndureDamage)
}

// optional sint64 TreatDamage = 9 [default = -1];
bool FightStormPlayerInfo::has_treatdamage() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FightStormPlayerInfo::set_has_treatdamage() {
  _has_bits_[0] |= 0x00000100u;
}
void FightStormPlayerInfo::clear_has_treatdamage() {
  _has_bits_[0] &= ~0x00000100u;
}
void FightStormPlayerInfo::clear_treatdamage() {
  treatdamage_ = GOOGLE_LONGLONG(-1);
  clear_has_treatdamage();
}
::google::protobuf::int64 FightStormPlayerInfo::treatdamage() const {
  // @@protoc_insertion_point(field_get:FightStormPlayerInfo.TreatDamage)
  return treatdamage_;
}
void FightStormPlayerInfo::set_treatdamage(::google::protobuf::int64 value) {
  set_has_treatdamage();
  treatdamage_ = value;
  // @@protoc_insertion_point(field_set:FightStormPlayerInfo.TreatDamage)
}

// optional sint32 ObjId = 10 [default = -1];
bool FightStormPlayerInfo::has_objid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FightStormPlayerInfo::set_has_objid() {
  _has_bits_[0] |= 0x00000080u;
}
void FightStormPlayerInfo::clear_has_objid() {
  _has_bits_[0] &= ~0x00000080u;
}
void FightStormPlayerInfo::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightStormPlayerInfo::objid() const {
  // @@protoc_insertion_point(field_get:FightStormPlayerInfo.ObjId)
  return objid_;
}
void FightStormPlayerInfo::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightStormPlayerInfo.ObjId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightCreateAction::kUserIdFieldNumber;
const int FightCreateAction::kConfigIdFieldNumber;
const int FightCreateAction::kObjIdFieldNumber;
const int FightCreateAction::kPosInfoFieldNumber;
const int FightCreateAction::kObjTypeFieldNumber;
const int FightCreateAction::kCampIdFieldNumber;
const int FightCreateAction::kPosInfo2FieldNumber;
const int FightCreateAction::kIntParaListFieldNumber;
const int FightCreateAction::kFloatParaListFieldNumber;
const int FightCreateAction::kCurStateFieldNumber;
const int FightCreateAction::kCurHpFieldNumber;
const int FightCreateAction::kNameFieldNumber;
const int FightCreateAction::kEquipBuffArrFieldNumber;
const int FightCreateAction::kEquipSkillArrFieldNumber;
const int FightCreateAction::kAttrArrFieldNumber;
const int FightCreateAction::kLevelFieldNumber;
const int FightCreateAction::kTableTypeFieldNumber;
const int FightCreateAction::kIsShowEffectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightCreateAction::FightCreateAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightCreateAction)
}
FightCreateAction::FightCreateAction(const FightCreateAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      intparalist_(from.intparalist_),
      floatparalist_(from.floatparalist_),
      equipbuffarr_(from.equipbuffarr_),
      equipskillarr_(from.equipskillarr_),
      attrarr_(from.attrarr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  posinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_posinfo()) {
    posinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo_);
  }
  posinfo2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_posinfo2()) {
    posinfo2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo2_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&isshoweffect_, &from.isshoweffect_,
    static_cast<size_t>(reinterpret_cast<char*>(&tabletype_) -
    reinterpret_cast<char*>(&isshoweffect_)) + sizeof(tabletype_));
  // @@protoc_insertion_point(copy_constructor:FightCreateAction)
}

void FightCreateAction::SharedCtor() {
  _cached_size_ = 0;
  posinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  posinfo2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isshoweffect_ = false;
  userid_ = GOOGLE_LONGLONG(-1);
  configid_ = -1;
  objid_ = -1;
  objtype_ = -1;
  campid_ = -1;
  curstate_ = -1;
  curhp_ = -1;
  level_ = -1;
  tabletype_ = -1;
}

FightCreateAction::~FightCreateAction() {
  // @@protoc_insertion_point(destructor:FightCreateAction)
  SharedDtor();
}

void FightCreateAction::SharedDtor() {
  posinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  posinfo2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FightCreateAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightCreateAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightCreateAction& FightCreateAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightCreateAction* FightCreateAction::New(::google::protobuf::Arena* arena) const {
  FightCreateAction* n = new FightCreateAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightCreateAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightCreateAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intparalist_.Clear();
  floatparalist_.Clear();
  equipbuffarr_.Clear();
  equipskillarr_.Clear();
  attrarr_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!posinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*posinfo_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!posinfo2_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*posinfo2_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 248u) {
    isshoweffect_ = false;
    userid_ = GOOGLE_LONGLONG(-1);
    configid_ = -1;
    objid_ = -1;
    objtype_ = -1;
  }
  if (cached_has_bits & 7936u) {
    campid_ = -1;
    curstate_ = -1;
    curhp_ = -1;
    level_ = -1;
    tabletype_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightCreateAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightCreateAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ConfigId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_configid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &configid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ObjId = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes PosInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_posinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ObjType = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_objtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 CampId = 6 [default = -1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_campid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &campid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes PosInfo2 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_posinfo2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 IntParaList = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 64u, input, this->mutable_intparalist())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_intparalist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float FloatParaList = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 77u, input, this->mutable_floatparalist())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_floatparalist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 CurState = 10 [default = -1];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_curstate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &curstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 CurHp = 11 [default = -1];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_curhp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &curhp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Name = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FightCreateAction.Name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .EquipSkillBuff2 EquipBuffArr = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipbuffarr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .EquipSkillBuff2 EquipSkillArr = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipskillarr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .KeyValue2 AttrArr = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrarr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Level = 16 [default = -1];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TableType = 17 [default = -1];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_tabletype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tabletype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool IsShowEffect = 18 [default = false];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_isshoweffect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshoweffect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightCreateAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightCreateAction)
  return false;
#undef DO_
}

void FightCreateAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightCreateAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->userid(), output);
  }

  // optional sint32 ConfigId = 2 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->configid(), output);
  }

  // optional sint32 ObjId = 3 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->objid(), output);
  }

  // optional bytes PosInfo = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->posinfo(), output);
  }

  // optional sint32 ObjType = 5 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->objtype(), output);
  }

  // optional sint32 CampId = 6 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->campid(), output);
  }

  // optional bytes PosInfo2 = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->posinfo2(), output);
  }

  // repeated sint32 IntParaList = 8;
  for (int i = 0, n = this->intparalist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      8, this->intparalist(i), output);
  }

  // repeated float FloatParaList = 9;
  for (int i = 0, n = this->floatparalist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      9, this->floatparalist(i), output);
  }

  // optional sint32 CurState = 10 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->curstate(), output);
  }

  // optional sint32 CurHp = 11 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->curhp(), output);
  }

  // optional string Name = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FightCreateAction.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->name(), output);
  }

  // repeated .EquipSkillBuff2 EquipBuffArr = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equipbuffarr_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->equipbuffarr(static_cast<int>(i)), output);
  }

  // repeated .EquipSkillBuff2 EquipSkillArr = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equipskillarr_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->equipskillarr(static_cast<int>(i)), output);
  }

  // repeated .KeyValue2 AttrArr = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attrarr_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->attrarr(static_cast<int>(i)), output);
  }

  // optional sint32 Level = 16 [default = -1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(16, this->level(), output);
  }

  // optional sint32 TableType = 17 [default = -1];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(17, this->tabletype(), output);
  }

  // optional bool IsShowEffect = 18 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->isshoweffect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightCreateAction)
}

::google::protobuf::uint8* FightCreateAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightCreateAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->userid(), target);
  }

  // optional sint32 ConfigId = 2 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->configid(), target);
  }

  // optional sint32 ObjId = 3 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->objid(), target);
  }

  // optional bytes PosInfo = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->posinfo(), target);
  }

  // optional sint32 ObjType = 5 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->objtype(), target);
  }

  // optional sint32 CampId = 6 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->campid(), target);
  }

  // optional bytes PosInfo2 = 7;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->posinfo2(), target);
  }

  // repeated sint32 IntParaList = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(8, this->intparalist_, target);

  // repeated float FloatParaList = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(9, this->floatparalist_, target);

  // optional sint32 CurState = 10 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->curstate(), target);
  }

  // optional sint32 CurHp = 11 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->curhp(), target);
  }

  // optional string Name = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FightCreateAction.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->name(), target);
  }

  // repeated .EquipSkillBuff2 EquipBuffArr = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equipbuffarr_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->equipbuffarr(static_cast<int>(i)), deterministic, target);
  }

  // repeated .EquipSkillBuff2 EquipSkillArr = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equipskillarr_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->equipskillarr(static_cast<int>(i)), deterministic, target);
  }

  // repeated .KeyValue2 AttrArr = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attrarr_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->attrarr(static_cast<int>(i)), deterministic, target);
  }

  // optional sint32 Level = 16 [default = -1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(16, this->level(), target);
  }

  // optional sint32 TableType = 17 [default = -1];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(17, this->tabletype(), target);
  }

  // optional bool IsShowEffect = 18 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->isshoweffect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightCreateAction)
  return target;
}

size_t FightCreateAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightCreateAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated sint32 IntParaList = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->intparalist_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->intparalist_size());
    total_size += data_size;
  }

  // repeated float FloatParaList = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->floatparalist_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->floatparalist_size());
    total_size += data_size;
  }

  // repeated .EquipSkillBuff2 EquipBuffArr = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->equipbuffarr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipbuffarr(static_cast<int>(i)));
    }
  }

  // repeated .EquipSkillBuff2 EquipSkillArr = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->equipskillarr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipskillarr(static_cast<int>(i)));
    }
  }

  // repeated .KeyValue2 AttrArr = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->attrarr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attrarr(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes PosInfo = 4;
    if (has_posinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->posinfo());
    }

    // optional bytes PosInfo2 = 7;
    if (has_posinfo2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->posinfo2());
    }

    // optional string Name = 12;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool IsShowEffect = 18 [default = false];
    if (has_isshoweffect()) {
      total_size += 2 + 1;
    }

    // optional sint64 UserId = 1 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

    // optional sint32 ConfigId = 2 [default = -1];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->configid());
    }

    // optional sint32 ObjId = 3 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

    // optional sint32 ObjType = 5 [default = -1];
    if (has_objtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objtype());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional sint32 CampId = 6 [default = -1];
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->campid());
    }

    // optional sint32 CurState = 10 [default = -1];
    if (has_curstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->curstate());
    }

    // optional sint32 CurHp = 11 [default = -1];
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->curhp());
    }

    // optional sint32 Level = 16 [default = -1];
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->level());
    }

    // optional sint32 TableType = 17 [default = -1];
    if (has_tabletype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->tabletype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightCreateAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightCreateAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightCreateAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightCreateAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightCreateAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightCreateAction)
    MergeFrom(*source);
  }
}

void FightCreateAction::MergeFrom(const FightCreateAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightCreateAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intparalist_.MergeFrom(from.intparalist_);
  floatparalist_.MergeFrom(from.floatparalist_);
  equipbuffarr_.MergeFrom(from.equipbuffarr_);
  equipskillarr_.MergeFrom(from.equipskillarr_);
  attrarr_.MergeFrom(from.attrarr_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_posinfo();
      posinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_posinfo2();
      posinfo2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo2_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000008u) {
      isshoweffect_ = from.isshoweffect_;
    }
    if (cached_has_bits & 0x00000010u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000020u) {
      configid_ = from.configid_;
    }
    if (cached_has_bits & 0x00000040u) {
      objid_ = from.objid_;
    }
    if (cached_has_bits & 0x00000080u) {
      objtype_ = from.objtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      campid_ = from.campid_;
    }
    if (cached_has_bits & 0x00000200u) {
      curstate_ = from.curstate_;
    }
    if (cached_has_bits & 0x00000400u) {
      curhp_ = from.curhp_;
    }
    if (cached_has_bits & 0x00000800u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00001000u) {
      tabletype_ = from.tabletype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightCreateAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightCreateAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightCreateAction::CopyFrom(const FightCreateAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightCreateAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightCreateAction::IsInitialized() const {
  return true;
}

void FightCreateAction::Swap(FightCreateAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightCreateAction::InternalSwap(FightCreateAction* other) {
  using std::swap;
  intparalist_.InternalSwap(&other->intparalist_);
  floatparalist_.InternalSwap(&other->floatparalist_);
  equipbuffarr_.InternalSwap(&other->equipbuffarr_);
  equipskillarr_.InternalSwap(&other->equipskillarr_);
  attrarr_.InternalSwap(&other->attrarr_);
  posinfo_.Swap(&other->posinfo_);
  posinfo2_.Swap(&other->posinfo2_);
  name_.Swap(&other->name_);
  swap(isshoweffect_, other->isshoweffect_);
  swap(userid_, other->userid_);
  swap(configid_, other->configid_);
  swap(objid_, other->objid_);
  swap(objtype_, other->objtype_);
  swap(campid_, other->campid_);
  swap(curstate_, other->curstate_);
  swap(curhp_, other->curhp_);
  swap(level_, other->level_);
  swap(tabletype_, other->tabletype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightCreateAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightCreateAction

// optional sint64 UserId = 1 [default = -1];
bool FightCreateAction::has_userid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FightCreateAction::set_has_userid() {
  _has_bits_[0] |= 0x00000010u;
}
void FightCreateAction::clear_has_userid() {
  _has_bits_[0] &= ~0x00000010u;
}
void FightCreateAction::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 FightCreateAction::userid() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.UserId)
  return userid_;
}
void FightCreateAction::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FightCreateAction.UserId)
}

// optional sint32 ConfigId = 2 [default = -1];
bool FightCreateAction::has_configid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FightCreateAction::set_has_configid() {
  _has_bits_[0] |= 0x00000020u;
}
void FightCreateAction::clear_has_configid() {
  _has_bits_[0] &= ~0x00000020u;
}
void FightCreateAction::clear_configid() {
  configid_ = -1;
  clear_has_configid();
}
::google::protobuf::int32 FightCreateAction::configid() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.ConfigId)
  return configid_;
}
void FightCreateAction::set_configid(::google::protobuf::int32 value) {
  set_has_configid();
  configid_ = value;
  // @@protoc_insertion_point(field_set:FightCreateAction.ConfigId)
}

// optional sint32 ObjId = 3 [default = -1];
bool FightCreateAction::has_objid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FightCreateAction::set_has_objid() {
  _has_bits_[0] |= 0x00000040u;
}
void FightCreateAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000040u;
}
void FightCreateAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightCreateAction::objid() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.ObjId)
  return objid_;
}
void FightCreateAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightCreateAction.ObjId)
}

// optional bytes PosInfo = 4;
bool FightCreateAction::has_posinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightCreateAction::set_has_posinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void FightCreateAction::clear_has_posinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightCreateAction::clear_posinfo() {
  posinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo();
}
const ::std::string& FightCreateAction::posinfo() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.PosInfo)
  return posinfo_.GetNoArena();
}
void FightCreateAction::set_posinfo(const ::std::string& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightCreateAction.PosInfo)
}
#if LANG_CXX11
void FightCreateAction::set_posinfo(::std::string&& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightCreateAction.PosInfo)
}
#endif
void FightCreateAction::set_posinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightCreateAction.PosInfo)
}
void FightCreateAction::set_posinfo(const void* value, size_t size) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightCreateAction.PosInfo)
}
::std::string* FightCreateAction::mutable_posinfo() {
  set_has_posinfo();
  // @@protoc_insertion_point(field_mutable:FightCreateAction.PosInfo)
  return posinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightCreateAction::release_posinfo() {
  // @@protoc_insertion_point(field_release:FightCreateAction.PosInfo)
  clear_has_posinfo();
  return posinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightCreateAction::set_allocated_posinfo(::std::string* posinfo) {
  if (posinfo != NULL) {
    set_has_posinfo();
  } else {
    clear_has_posinfo();
  }
  posinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo);
  // @@protoc_insertion_point(field_set_allocated:FightCreateAction.PosInfo)
}

// optional sint32 ObjType = 5 [default = -1];
bool FightCreateAction::has_objtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FightCreateAction::set_has_objtype() {
  _has_bits_[0] |= 0x00000080u;
}
void FightCreateAction::clear_has_objtype() {
  _has_bits_[0] &= ~0x00000080u;
}
void FightCreateAction::clear_objtype() {
  objtype_ = -1;
  clear_has_objtype();
}
::google::protobuf::int32 FightCreateAction::objtype() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.ObjType)
  return objtype_;
}
void FightCreateAction::set_objtype(::google::protobuf::int32 value) {
  set_has_objtype();
  objtype_ = value;
  // @@protoc_insertion_point(field_set:FightCreateAction.ObjType)
}

// optional sint32 CampId = 6 [default = -1];
bool FightCreateAction::has_campid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FightCreateAction::set_has_campid() {
  _has_bits_[0] |= 0x00000100u;
}
void FightCreateAction::clear_has_campid() {
  _has_bits_[0] &= ~0x00000100u;
}
void FightCreateAction::clear_campid() {
  campid_ = -1;
  clear_has_campid();
}
::google::protobuf::int32 FightCreateAction::campid() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.CampId)
  return campid_;
}
void FightCreateAction::set_campid(::google::protobuf::int32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:FightCreateAction.CampId)
}

// optional bytes PosInfo2 = 7;
bool FightCreateAction::has_posinfo2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightCreateAction::set_has_posinfo2() {
  _has_bits_[0] |= 0x00000002u;
}
void FightCreateAction::clear_has_posinfo2() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightCreateAction::clear_posinfo2() {
  posinfo2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo2();
}
const ::std::string& FightCreateAction::posinfo2() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.PosInfo2)
  return posinfo2_.GetNoArena();
}
void FightCreateAction::set_posinfo2(const ::std::string& value) {
  set_has_posinfo2();
  posinfo2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightCreateAction.PosInfo2)
}
#if LANG_CXX11
void FightCreateAction::set_posinfo2(::std::string&& value) {
  set_has_posinfo2();
  posinfo2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightCreateAction.PosInfo2)
}
#endif
void FightCreateAction::set_posinfo2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo2();
  posinfo2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightCreateAction.PosInfo2)
}
void FightCreateAction::set_posinfo2(const void* value, size_t size) {
  set_has_posinfo2();
  posinfo2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightCreateAction.PosInfo2)
}
::std::string* FightCreateAction::mutable_posinfo2() {
  set_has_posinfo2();
  // @@protoc_insertion_point(field_mutable:FightCreateAction.PosInfo2)
  return posinfo2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightCreateAction::release_posinfo2() {
  // @@protoc_insertion_point(field_release:FightCreateAction.PosInfo2)
  clear_has_posinfo2();
  return posinfo2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightCreateAction::set_allocated_posinfo2(::std::string* posinfo2) {
  if (posinfo2 != NULL) {
    set_has_posinfo2();
  } else {
    clear_has_posinfo2();
  }
  posinfo2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo2);
  // @@protoc_insertion_point(field_set_allocated:FightCreateAction.PosInfo2)
}

// repeated sint32 IntParaList = 8;
int FightCreateAction::intparalist_size() const {
  return intparalist_.size();
}
void FightCreateAction::clear_intparalist() {
  intparalist_.Clear();
}
::google::protobuf::int32 FightCreateAction::intparalist(int index) const {
  // @@protoc_insertion_point(field_get:FightCreateAction.IntParaList)
  return intparalist_.Get(index);
}
void FightCreateAction::set_intparalist(int index, ::google::protobuf::int32 value) {
  intparalist_.Set(index, value);
  // @@protoc_insertion_point(field_set:FightCreateAction.IntParaList)
}
void FightCreateAction::add_intparalist(::google::protobuf::int32 value) {
  intparalist_.Add(value);
  // @@protoc_insertion_point(field_add:FightCreateAction.IntParaList)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FightCreateAction::intparalist() const {
  // @@protoc_insertion_point(field_list:FightCreateAction.IntParaList)
  return intparalist_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FightCreateAction::mutable_intparalist() {
  // @@protoc_insertion_point(field_mutable_list:FightCreateAction.IntParaList)
  return &intparalist_;
}

// repeated float FloatParaList = 9;
int FightCreateAction::floatparalist_size() const {
  return floatparalist_.size();
}
void FightCreateAction::clear_floatparalist() {
  floatparalist_.Clear();
}
float FightCreateAction::floatparalist(int index) const {
  // @@protoc_insertion_point(field_get:FightCreateAction.FloatParaList)
  return floatparalist_.Get(index);
}
void FightCreateAction::set_floatparalist(int index, float value) {
  floatparalist_.Set(index, value);
  // @@protoc_insertion_point(field_set:FightCreateAction.FloatParaList)
}
void FightCreateAction::add_floatparalist(float value) {
  floatparalist_.Add(value);
  // @@protoc_insertion_point(field_add:FightCreateAction.FloatParaList)
}
const ::google::protobuf::RepeatedField< float >&
FightCreateAction::floatparalist() const {
  // @@protoc_insertion_point(field_list:FightCreateAction.FloatParaList)
  return floatparalist_;
}
::google::protobuf::RepeatedField< float >*
FightCreateAction::mutable_floatparalist() {
  // @@protoc_insertion_point(field_mutable_list:FightCreateAction.FloatParaList)
  return &floatparalist_;
}

// optional sint32 CurState = 10 [default = -1];
bool FightCreateAction::has_curstate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FightCreateAction::set_has_curstate() {
  _has_bits_[0] |= 0x00000200u;
}
void FightCreateAction::clear_has_curstate() {
  _has_bits_[0] &= ~0x00000200u;
}
void FightCreateAction::clear_curstate() {
  curstate_ = -1;
  clear_has_curstate();
}
::google::protobuf::int32 FightCreateAction::curstate() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.CurState)
  return curstate_;
}
void FightCreateAction::set_curstate(::google::protobuf::int32 value) {
  set_has_curstate();
  curstate_ = value;
  // @@protoc_insertion_point(field_set:FightCreateAction.CurState)
}

// optional sint32 CurHp = 11 [default = -1];
bool FightCreateAction::has_curhp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FightCreateAction::set_has_curhp() {
  _has_bits_[0] |= 0x00000400u;
}
void FightCreateAction::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000400u;
}
void FightCreateAction::clear_curhp() {
  curhp_ = -1;
  clear_has_curhp();
}
::google::protobuf::int32 FightCreateAction::curhp() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.CurHp)
  return curhp_;
}
void FightCreateAction::set_curhp(::google::protobuf::int32 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:FightCreateAction.CurHp)
}

// optional string Name = 12;
bool FightCreateAction::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightCreateAction::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void FightCreateAction::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightCreateAction::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& FightCreateAction::name() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.Name)
  return name_.GetNoArena();
}
void FightCreateAction::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightCreateAction.Name)
}
#if LANG_CXX11
void FightCreateAction::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightCreateAction.Name)
}
#endif
void FightCreateAction::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightCreateAction.Name)
}
void FightCreateAction::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightCreateAction.Name)
}
::std::string* FightCreateAction::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:FightCreateAction.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightCreateAction::release_name() {
  // @@protoc_insertion_point(field_release:FightCreateAction.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightCreateAction::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:FightCreateAction.Name)
}

// repeated .EquipSkillBuff2 EquipBuffArr = 13;
int FightCreateAction::equipbuffarr_size() const {
  return equipbuffarr_.size();
}
void FightCreateAction::clear_equipbuffarr() {
  equipbuffarr_.Clear();
}
const ::EquipSkillBuff2& FightCreateAction::equipbuffarr(int index) const {
  // @@protoc_insertion_point(field_get:FightCreateAction.EquipBuffArr)
  return equipbuffarr_.Get(index);
}
::EquipSkillBuff2* FightCreateAction::mutable_equipbuffarr(int index) {
  // @@protoc_insertion_point(field_mutable:FightCreateAction.EquipBuffArr)
  return equipbuffarr_.Mutable(index);
}
::EquipSkillBuff2* FightCreateAction::add_equipbuffarr() {
  // @@protoc_insertion_point(field_add:FightCreateAction.EquipBuffArr)
  return equipbuffarr_.Add();
}
::google::protobuf::RepeatedPtrField< ::EquipSkillBuff2 >*
FightCreateAction::mutable_equipbuffarr() {
  // @@protoc_insertion_point(field_mutable_list:FightCreateAction.EquipBuffArr)
  return &equipbuffarr_;
}
const ::google::protobuf::RepeatedPtrField< ::EquipSkillBuff2 >&
FightCreateAction::equipbuffarr() const {
  // @@protoc_insertion_point(field_list:FightCreateAction.EquipBuffArr)
  return equipbuffarr_;
}

// repeated .EquipSkillBuff2 EquipSkillArr = 14;
int FightCreateAction::equipskillarr_size() const {
  return equipskillarr_.size();
}
void FightCreateAction::clear_equipskillarr() {
  equipskillarr_.Clear();
}
const ::EquipSkillBuff2& FightCreateAction::equipskillarr(int index) const {
  // @@protoc_insertion_point(field_get:FightCreateAction.EquipSkillArr)
  return equipskillarr_.Get(index);
}
::EquipSkillBuff2* FightCreateAction::mutable_equipskillarr(int index) {
  // @@protoc_insertion_point(field_mutable:FightCreateAction.EquipSkillArr)
  return equipskillarr_.Mutable(index);
}
::EquipSkillBuff2* FightCreateAction::add_equipskillarr() {
  // @@protoc_insertion_point(field_add:FightCreateAction.EquipSkillArr)
  return equipskillarr_.Add();
}
::google::protobuf::RepeatedPtrField< ::EquipSkillBuff2 >*
FightCreateAction::mutable_equipskillarr() {
  // @@protoc_insertion_point(field_mutable_list:FightCreateAction.EquipSkillArr)
  return &equipskillarr_;
}
const ::google::protobuf::RepeatedPtrField< ::EquipSkillBuff2 >&
FightCreateAction::equipskillarr() const {
  // @@protoc_insertion_point(field_list:FightCreateAction.EquipSkillArr)
  return equipskillarr_;
}

// repeated .KeyValue2 AttrArr = 15;
int FightCreateAction::attrarr_size() const {
  return attrarr_.size();
}
void FightCreateAction::clear_attrarr() {
  attrarr_.Clear();
}
const ::KeyValue2& FightCreateAction::attrarr(int index) const {
  // @@protoc_insertion_point(field_get:FightCreateAction.AttrArr)
  return attrarr_.Get(index);
}
::KeyValue2* FightCreateAction::mutable_attrarr(int index) {
  // @@protoc_insertion_point(field_mutable:FightCreateAction.AttrArr)
  return attrarr_.Mutable(index);
}
::KeyValue2* FightCreateAction::add_attrarr() {
  // @@protoc_insertion_point(field_add:FightCreateAction.AttrArr)
  return attrarr_.Add();
}
::google::protobuf::RepeatedPtrField< ::KeyValue2 >*
FightCreateAction::mutable_attrarr() {
  // @@protoc_insertion_point(field_mutable_list:FightCreateAction.AttrArr)
  return &attrarr_;
}
const ::google::protobuf::RepeatedPtrField< ::KeyValue2 >&
FightCreateAction::attrarr() const {
  // @@protoc_insertion_point(field_list:FightCreateAction.AttrArr)
  return attrarr_;
}

// optional sint32 Level = 16 [default = -1];
bool FightCreateAction::has_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void FightCreateAction::set_has_level() {
  _has_bits_[0] |= 0x00000800u;
}
void FightCreateAction::clear_has_level() {
  _has_bits_[0] &= ~0x00000800u;
}
void FightCreateAction::clear_level() {
  level_ = -1;
  clear_has_level();
}
::google::protobuf::int32 FightCreateAction::level() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.Level)
  return level_;
}
void FightCreateAction::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:FightCreateAction.Level)
}

// optional sint32 TableType = 17 [default = -1];
bool FightCreateAction::has_tabletype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void FightCreateAction::set_has_tabletype() {
  _has_bits_[0] |= 0x00001000u;
}
void FightCreateAction::clear_has_tabletype() {
  _has_bits_[0] &= ~0x00001000u;
}
void FightCreateAction::clear_tabletype() {
  tabletype_ = -1;
  clear_has_tabletype();
}
::google::protobuf::int32 FightCreateAction::tabletype() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.TableType)
  return tabletype_;
}
void FightCreateAction::set_tabletype(::google::protobuf::int32 value) {
  set_has_tabletype();
  tabletype_ = value;
  // @@protoc_insertion_point(field_set:FightCreateAction.TableType)
}

// optional bool IsShowEffect = 18 [default = false];
bool FightCreateAction::has_isshoweffect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightCreateAction::set_has_isshoweffect() {
  _has_bits_[0] |= 0x00000008u;
}
void FightCreateAction::clear_has_isshoweffect() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightCreateAction::clear_isshoweffect() {
  isshoweffect_ = false;
  clear_has_isshoweffect();
}
bool FightCreateAction::isshoweffect() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.IsShowEffect)
  return isshoweffect_;
}
void FightCreateAction::set_isshoweffect(bool value) {
  set_has_isshoweffect();
  isshoweffect_ = value;
  // @@protoc_insertion_point(field_set:FightCreateAction.IsShowEffect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightQuickFinishAction::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightQuickFinishAction::FightQuickFinishAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightQuickFinishAction)
}
FightQuickFinishAction::FightQuickFinishAction(const FightQuickFinishAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:FightQuickFinishAction)
}

void FightQuickFinishAction::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
}

FightQuickFinishAction::~FightQuickFinishAction() {
  // @@protoc_insertion_point(destructor:FightQuickFinishAction)
  SharedDtor();
}

void FightQuickFinishAction::SharedDtor() {
}

void FightQuickFinishAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightQuickFinishAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightQuickFinishAction& FightQuickFinishAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightQuickFinishAction* FightQuickFinishAction::New(::google::protobuf::Arena* arena) const {
  FightQuickFinishAction* n = new FightQuickFinishAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightQuickFinishAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightQuickFinishAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightQuickFinishAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightQuickFinishAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Type = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightQuickFinishAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightQuickFinishAction)
  return false;
#undef DO_
}

void FightQuickFinishAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightQuickFinishAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightQuickFinishAction)
}

::google::protobuf::uint8* FightQuickFinishAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightQuickFinishAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightQuickFinishAction)
  return target;
}

size_t FightQuickFinishAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightQuickFinishAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Type = 1 [default = 0];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightQuickFinishAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightQuickFinishAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightQuickFinishAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightQuickFinishAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightQuickFinishAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightQuickFinishAction)
    MergeFrom(*source);
  }
}

void FightQuickFinishAction::MergeFrom(const FightQuickFinishAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightQuickFinishAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    set_type(from.type());
  }
}

void FightQuickFinishAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightQuickFinishAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightQuickFinishAction::CopyFrom(const FightQuickFinishAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightQuickFinishAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightQuickFinishAction::IsInitialized() const {
  return true;
}

void FightQuickFinishAction::Swap(FightQuickFinishAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightQuickFinishAction::InternalSwap(FightQuickFinishAction* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightQuickFinishAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightQuickFinishAction

// optional sint32 Type = 1 [default = 0];
bool FightQuickFinishAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightQuickFinishAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FightQuickFinishAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightQuickFinishAction::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 FightQuickFinishAction::type() const {
  // @@protoc_insertion_point(field_get:FightQuickFinishAction.Type)
  return type_;
}
void FightQuickFinishAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightQuickFinishAction.Type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightFinishLevelAction::kResultFieldNumber;
const int FightFinishLevelAction::kTypeFieldNumber;
const int FightFinishLevelAction::kWallObjIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightFinishLevelAction::FightFinishLevelAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightFinishLevelAction)
}
FightFinishLevelAction::FightFinishLevelAction(const FightFinishLevelAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wallobjid_, &from.wallobjid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&wallobjid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:FightFinishLevelAction)
}

void FightFinishLevelAction::SharedCtor() {
  _cached_size_ = 0;
  wallobjid_ = -1;
  result_ = -1;
  type_ = 2;
}

FightFinishLevelAction::~FightFinishLevelAction() {
  // @@protoc_insertion_point(destructor:FightFinishLevelAction)
  SharedDtor();
}

void FightFinishLevelAction::SharedDtor() {
}

void FightFinishLevelAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightFinishLevelAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightFinishLevelAction& FightFinishLevelAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightFinishLevelAction* FightFinishLevelAction::New(::google::protobuf::Arena* arena) const {
  FightFinishLevelAction* n = new FightFinishLevelAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightFinishLevelAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightFinishLevelAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    wallobjid_ = -1;
    result_ = -1;
    type_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightFinishLevelAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightFinishLevelAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Type = 2 [default = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 WallObjId = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_wallobjid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &wallobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightFinishLevelAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightFinishLevelAction)
  return false;
#undef DO_
}

void FightFinishLevelAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightFinishLevelAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 Type = 2 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->type(), output);
  }

  // optional sint32 WallObjId = 3 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->wallobjid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightFinishLevelAction)
}

::google::protobuf::uint8* FightFinishLevelAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightFinishLevelAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 Type = 2 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->type(), target);
  }

  // optional sint32 WallObjId = 3 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->wallobjid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightFinishLevelAction)
  return target;
}

size_t FightFinishLevelAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightFinishLevelAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional sint32 WallObjId = 3 [default = -1];
    if (has_wallobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->wallobjid());
    }

    // optional sint32 Result = 1 [default = -1];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 Type = 2 [default = 2];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightFinishLevelAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightFinishLevelAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightFinishLevelAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightFinishLevelAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightFinishLevelAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightFinishLevelAction)
    MergeFrom(*source);
  }
}

void FightFinishLevelAction::MergeFrom(const FightFinishLevelAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightFinishLevelAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      wallobjid_ = from.wallobjid_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightFinishLevelAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightFinishLevelAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightFinishLevelAction::CopyFrom(const FightFinishLevelAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightFinishLevelAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightFinishLevelAction::IsInitialized() const {
  return true;
}

void FightFinishLevelAction::Swap(FightFinishLevelAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightFinishLevelAction::InternalSwap(FightFinishLevelAction* other) {
  using std::swap;
  swap(wallobjid_, other->wallobjid_);
  swap(result_, other->result_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightFinishLevelAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightFinishLevelAction

// optional sint32 Result = 1 [default = -1];
bool FightFinishLevelAction::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightFinishLevelAction::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void FightFinishLevelAction::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightFinishLevelAction::clear_result() {
  result_ = -1;
  clear_has_result();
}
::google::protobuf::int32 FightFinishLevelAction::result() const {
  // @@protoc_insertion_point(field_get:FightFinishLevelAction.Result)
  return result_;
}
void FightFinishLevelAction::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FightFinishLevelAction.Result)
}

// optional sint32 Type = 2 [default = 2];
bool FightFinishLevelAction::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightFinishLevelAction::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void FightFinishLevelAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightFinishLevelAction::clear_type() {
  type_ = 2;
  clear_has_type();
}
::google::protobuf::int32 FightFinishLevelAction::type() const {
  // @@protoc_insertion_point(field_get:FightFinishLevelAction.Type)
  return type_;
}
void FightFinishLevelAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightFinishLevelAction.Type)
}

// optional sint32 WallObjId = 3 [default = -1];
bool FightFinishLevelAction::has_wallobjid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightFinishLevelAction::set_has_wallobjid() {
  _has_bits_[0] |= 0x00000001u;
}
void FightFinishLevelAction::clear_has_wallobjid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightFinishLevelAction::clear_wallobjid() {
  wallobjid_ = -1;
  clear_has_wallobjid();
}
::google::protobuf::int32 FightFinishLevelAction::wallobjid() const {
  // @@protoc_insertion_point(field_get:FightFinishLevelAction.WallObjId)
  return wallobjid_;
}
void FightFinishLevelAction::set_wallobjid(::google::protobuf::int32 value) {
  set_has_wallobjid();
  wallobjid_ = value;
  // @@protoc_insertion_point(field_set:FightFinishLevelAction.WallObjId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightTowerLockAction::kTargetObjIdFieldNumber;
const int FightTowerLockAction::kObjIdFieldNumber;
const int FightTowerLockAction::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightTowerLockAction::FightTowerLockAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightTowerLockAction)
}
FightTowerLockAction::FightTowerLockAction(const FightTowerLockAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&objid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(objid_));
  // @@protoc_insertion_point(copy_constructor:FightTowerLockAction)
}

void FightTowerLockAction::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  targetobjid_ = -1;
  objid_ = -1;
}

FightTowerLockAction::~FightTowerLockAction() {
  // @@protoc_insertion_point(destructor:FightTowerLockAction)
  SharedDtor();
}

void FightTowerLockAction::SharedDtor() {
}

void FightTowerLockAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightTowerLockAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightTowerLockAction& FightTowerLockAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightTowerLockAction* FightTowerLockAction::New(::google::protobuf::Arena* arena) const {
  FightTowerLockAction* n = new FightTowerLockAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightTowerLockAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightTowerLockAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    type_ = 0;
    targetobjid_ = -1;
    objid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightTowerLockAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightTowerLockAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TargetObjId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_targetobjid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &targetobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ObjId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Type = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightTowerLockAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightTowerLockAction)
  return false;
#undef DO_
}

void FightTowerLockAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightTowerLockAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TargetObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->targetobjid(), output);
  }

  // optional sint32 ObjId = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->objid(), output);
  }

  // optional sint32 Type = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightTowerLockAction)
}

::google::protobuf::uint8* FightTowerLockAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightTowerLockAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TargetObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->targetobjid(), target);
  }

  // optional sint32 ObjId = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->objid(), target);
  }

  // optional sint32 Type = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightTowerLockAction)
  return target;
}

size_t FightTowerLockAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightTowerLockAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional sint32 Type = 3 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 TargetObjId = 1 [default = -1];
    if (has_targetobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->targetobjid());
    }

    // optional sint32 ObjId = 2 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightTowerLockAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightTowerLockAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightTowerLockAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightTowerLockAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightTowerLockAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightTowerLockAction)
    MergeFrom(*source);
  }
}

void FightTowerLockAction::MergeFrom(const FightTowerLockAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightTowerLockAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      targetobjid_ = from.targetobjid_;
    }
    if (cached_has_bits & 0x00000004u) {
      objid_ = from.objid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightTowerLockAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightTowerLockAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightTowerLockAction::CopyFrom(const FightTowerLockAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightTowerLockAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightTowerLockAction::IsInitialized() const {
  return true;
}

void FightTowerLockAction::Swap(FightTowerLockAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightTowerLockAction::InternalSwap(FightTowerLockAction* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(targetobjid_, other->targetobjid_);
  swap(objid_, other->objid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightTowerLockAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightTowerLockAction

// optional sint32 TargetObjId = 1 [default = -1];
bool FightTowerLockAction::has_targetobjid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightTowerLockAction::set_has_targetobjid() {
  _has_bits_[0] |= 0x00000002u;
}
void FightTowerLockAction::clear_has_targetobjid() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightTowerLockAction::clear_targetobjid() {
  targetobjid_ = -1;
  clear_has_targetobjid();
}
::google::protobuf::int32 FightTowerLockAction::targetobjid() const {
  // @@protoc_insertion_point(field_get:FightTowerLockAction.TargetObjId)
  return targetobjid_;
}
void FightTowerLockAction::set_targetobjid(::google::protobuf::int32 value) {
  set_has_targetobjid();
  targetobjid_ = value;
  // @@protoc_insertion_point(field_set:FightTowerLockAction.TargetObjId)
}

// optional sint32 ObjId = 2 [default = -1];
bool FightTowerLockAction::has_objid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightTowerLockAction::set_has_objid() {
  _has_bits_[0] |= 0x00000004u;
}
void FightTowerLockAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightTowerLockAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightTowerLockAction::objid() const {
  // @@protoc_insertion_point(field_get:FightTowerLockAction.ObjId)
  return objid_;
}
void FightTowerLockAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightTowerLockAction.ObjId)
}

// optional sint32 Type = 3 [default = 0];
bool FightTowerLockAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightTowerLockAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FightTowerLockAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightTowerLockAction::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 FightTowerLockAction::type() const {
  // @@protoc_insertion_point(field_get:FightTowerLockAction.Type)
  return type_;
}
void FightTowerLockAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightTowerLockAction.Type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightStormStartAction::kTypeFieldNumber;
const int FightStormStartAction::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightStormStartAction::FightStormStartAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightStormStartAction)
}
FightStormStartAction::FightStormStartAction(const FightStormStartAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&type_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:FightStormStartAction)
}

void FightStormStartAction::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  time_ = -1;
}

FightStormStartAction::~FightStormStartAction() {
  // @@protoc_insertion_point(destructor:FightStormStartAction)
  SharedDtor();
}

void FightStormStartAction::SharedDtor() {
}

void FightStormStartAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightStormStartAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightStormStartAction& FightStormStartAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightStormStartAction* FightStormStartAction::New(::google::protobuf::Arena* arena) const {
  FightStormStartAction* n = new FightStormStartAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightStormStartAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightStormStartAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    type_ = -1;
    time_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightStormStartAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightStormStartAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Type = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Time = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightStormStartAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightStormStartAction)
  return false;
#undef DO_
}

void FightStormStartAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightStormStartAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->type(), output);
  }

  // optional sint32 Time = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightStormStartAction)
}

::google::protobuf::uint8* FightStormStartAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightStormStartAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->type(), target);
  }

  // optional sint32 Time = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightStormStartAction)
  return target;
}

size_t FightStormStartAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightStormStartAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Type = 1 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 Time = 2 [default = -1];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightStormStartAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightStormStartAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightStormStartAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightStormStartAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightStormStartAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightStormStartAction)
    MergeFrom(*source);
  }
}

void FightStormStartAction::MergeFrom(const FightStormStartAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightStormStartAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightStormStartAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightStormStartAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightStormStartAction::CopyFrom(const FightStormStartAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightStormStartAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightStormStartAction::IsInitialized() const {
  return true;
}

void FightStormStartAction::Swap(FightStormStartAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightStormStartAction::InternalSwap(FightStormStartAction* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightStormStartAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightStormStartAction

// optional sint32 Type = 1 [default = -1];
bool FightStormStartAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightStormStartAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FightStormStartAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightStormStartAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
::google::protobuf::int32 FightStormStartAction::type() const {
  // @@protoc_insertion_point(field_get:FightStormStartAction.Type)
  return type_;
}
void FightStormStartAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightStormStartAction.Type)
}

// optional sint32 Time = 2 [default = -1];
bool FightStormStartAction::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightStormStartAction::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void FightStormStartAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightStormStartAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
::google::protobuf::int32 FightStormStartAction::time() const {
  // @@protoc_insertion_point(field_get:FightStormStartAction.Time)
  return time_;
}
void FightStormStartAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightStormStartAction.Time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightEscapeStartAction::kTypeFieldNumber;
const int FightEscapeStartAction::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightEscapeStartAction::FightEscapeStartAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightEscapeStartAction)
}
FightEscapeStartAction::FightEscapeStartAction(const FightEscapeStartAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&type_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:FightEscapeStartAction)
}

void FightEscapeStartAction::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  time_ = -1;
}

FightEscapeStartAction::~FightEscapeStartAction() {
  // @@protoc_insertion_point(destructor:FightEscapeStartAction)
  SharedDtor();
}

void FightEscapeStartAction::SharedDtor() {
}

void FightEscapeStartAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightEscapeStartAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightEscapeStartAction& FightEscapeStartAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightEscapeStartAction* FightEscapeStartAction::New(::google::protobuf::Arena* arena) const {
  FightEscapeStartAction* n = new FightEscapeStartAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightEscapeStartAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightEscapeStartAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    type_ = -1;
    time_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightEscapeStartAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightEscapeStartAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Type = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Time = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightEscapeStartAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightEscapeStartAction)
  return false;
#undef DO_
}

void FightEscapeStartAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightEscapeStartAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->type(), output);
  }

  // optional sint32 Time = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightEscapeStartAction)
}

::google::protobuf::uint8* FightEscapeStartAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightEscapeStartAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->type(), target);
  }

  // optional sint32 Time = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightEscapeStartAction)
  return target;
}

size_t FightEscapeStartAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightEscapeStartAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Type = 1 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 Time = 2 [default = -1];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightEscapeStartAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightEscapeStartAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightEscapeStartAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightEscapeStartAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightEscapeStartAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightEscapeStartAction)
    MergeFrom(*source);
  }
}

void FightEscapeStartAction::MergeFrom(const FightEscapeStartAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightEscapeStartAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightEscapeStartAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightEscapeStartAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightEscapeStartAction::CopyFrom(const FightEscapeStartAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightEscapeStartAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightEscapeStartAction::IsInitialized() const {
  return true;
}

void FightEscapeStartAction::Swap(FightEscapeStartAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightEscapeStartAction::InternalSwap(FightEscapeStartAction* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightEscapeStartAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightEscapeStartAction

// optional sint32 Type = 1 [default = -1];
bool FightEscapeStartAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightEscapeStartAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FightEscapeStartAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightEscapeStartAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
::google::protobuf::int32 FightEscapeStartAction::type() const {
  // @@protoc_insertion_point(field_get:FightEscapeStartAction.Type)
  return type_;
}
void FightEscapeStartAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightEscapeStartAction.Type)
}

// optional sint32 Time = 2 [default = -1];
bool FightEscapeStartAction::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightEscapeStartAction::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void FightEscapeStartAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightEscapeStartAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
::google::protobuf::int32 FightEscapeStartAction::time() const {
  // @@protoc_insertion_point(field_get:FightEscapeStartAction.Time)
  return time_;
}
void FightEscapeStartAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightEscapeStartAction.Time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightEscapeResultAction::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightEscapeResultAction::FightEscapeResultAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightEscapeResultAction)
}
FightEscapeResultAction::FightEscapeResultAction(const FightEscapeResultAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:FightEscapeResultAction)
}

void FightEscapeResultAction::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
}

FightEscapeResultAction::~FightEscapeResultAction() {
  // @@protoc_insertion_point(destructor:FightEscapeResultAction)
  SharedDtor();
}

void FightEscapeResultAction::SharedDtor() {
}

void FightEscapeResultAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightEscapeResultAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightEscapeResultAction& FightEscapeResultAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightEscapeResultAction* FightEscapeResultAction::New(::google::protobuf::Arena* arena) const {
  FightEscapeResultAction* n = new FightEscapeResultAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightEscapeResultAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightEscapeResultAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightEscapeResultAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightEscapeResultAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightEscapeResultAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightEscapeResultAction)
  return false;
#undef DO_
}

void FightEscapeResultAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightEscapeResultAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightEscapeResultAction)
}

::google::protobuf::uint8* FightEscapeResultAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightEscapeResultAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightEscapeResultAction)
  return target;
}

size_t FightEscapeResultAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightEscapeResultAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 1 [default = -1];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightEscapeResultAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightEscapeResultAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightEscapeResultAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightEscapeResultAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightEscapeResultAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightEscapeResultAction)
    MergeFrom(*source);
  }
}

void FightEscapeResultAction::MergeFrom(const FightEscapeResultAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightEscapeResultAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void FightEscapeResultAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightEscapeResultAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightEscapeResultAction::CopyFrom(const FightEscapeResultAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightEscapeResultAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightEscapeResultAction::IsInitialized() const {
  return true;
}

void FightEscapeResultAction::Swap(FightEscapeResultAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightEscapeResultAction::InternalSwap(FightEscapeResultAction* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightEscapeResultAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightEscapeResultAction

// optional sint32 Result = 1 [default = -1];
bool FightEscapeResultAction::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightEscapeResultAction::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void FightEscapeResultAction::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightEscapeResultAction::clear_result() {
  result_ = -1;
  clear_has_result();
}
::google::protobuf::int32 FightEscapeResultAction::result() const {
  // @@protoc_insertion_point(field_get:FightEscapeResultAction.Result)
  return result_;
}
void FightEscapeResultAction::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FightEscapeResultAction.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightGMAddHpAction::kObjIdFieldNumber;
const int FightGMAddHpAction::kAddNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightGMAddHpAction::FightGMAddHpAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightGMAddHpAction)
}
FightGMAddHpAction::FightGMAddHpAction(const FightGMAddHpAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&objid_, &from.objid_,
    static_cast<size_t>(reinterpret_cast<char*>(&addnum_) -
    reinterpret_cast<char*>(&objid_)) + sizeof(addnum_));
  // @@protoc_insertion_point(copy_constructor:FightGMAddHpAction)
}

void FightGMAddHpAction::SharedCtor() {
  _cached_size_ = 0;
  objid_ = -1;
  addnum_ = -1;
}

FightGMAddHpAction::~FightGMAddHpAction() {
  // @@protoc_insertion_point(destructor:FightGMAddHpAction)
  SharedDtor();
}

void FightGMAddHpAction::SharedDtor() {
}

void FightGMAddHpAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightGMAddHpAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightGMAddHpAction& FightGMAddHpAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightGMAddHpAction* FightGMAddHpAction::New(::google::protobuf::Arena* arena) const {
  FightGMAddHpAction* n = new FightGMAddHpAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightGMAddHpAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightGMAddHpAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    objid_ = -1;
    addnum_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightGMAddHpAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightGMAddHpAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ObjId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 AddNum = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_addnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &addnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightGMAddHpAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightGMAddHpAction)
  return false;
#undef DO_
}

void FightGMAddHpAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightGMAddHpAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->objid(), output);
  }

  // optional sint32 AddNum = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->addnum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightGMAddHpAction)
}

::google::protobuf::uint8* FightGMAddHpAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightGMAddHpAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->objid(), target);
  }

  // optional sint32 AddNum = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->addnum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightGMAddHpAction)
  return target;
}

size_t FightGMAddHpAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightGMAddHpAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 ObjId = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

    // optional sint32 AddNum = 2 [default = -1];
    if (has_addnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->addnum());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightGMAddHpAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightGMAddHpAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightGMAddHpAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightGMAddHpAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightGMAddHpAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightGMAddHpAction)
    MergeFrom(*source);
  }
}

void FightGMAddHpAction::MergeFrom(const FightGMAddHpAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightGMAddHpAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      objid_ = from.objid_;
    }
    if (cached_has_bits & 0x00000002u) {
      addnum_ = from.addnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightGMAddHpAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightGMAddHpAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightGMAddHpAction::CopyFrom(const FightGMAddHpAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightGMAddHpAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightGMAddHpAction::IsInitialized() const {
  return true;
}

void FightGMAddHpAction::Swap(FightGMAddHpAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightGMAddHpAction::InternalSwap(FightGMAddHpAction* other) {
  using std::swap;
  swap(objid_, other->objid_);
  swap(addnum_, other->addnum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightGMAddHpAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightGMAddHpAction

// optional sint32 ObjId = 1 [default = -1];
bool FightGMAddHpAction::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightGMAddHpAction::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
void FightGMAddHpAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightGMAddHpAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightGMAddHpAction::objid() const {
  // @@protoc_insertion_point(field_get:FightGMAddHpAction.ObjId)
  return objid_;
}
void FightGMAddHpAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightGMAddHpAction.ObjId)
}

// optional sint32 AddNum = 2 [default = -1];
bool FightGMAddHpAction::has_addnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightGMAddHpAction::set_has_addnum() {
  _has_bits_[0] |= 0x00000002u;
}
void FightGMAddHpAction::clear_has_addnum() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightGMAddHpAction::clear_addnum() {
  addnum_ = -1;
  clear_has_addnum();
}
::google::protobuf::int32 FightGMAddHpAction::addnum() const {
  // @@protoc_insertion_point(field_get:FightGMAddHpAction.AddNum)
  return addnum_;
}
void FightGMAddHpAction::set_addnum(::google::protobuf::int32 value) {
  set_has_addnum();
  addnum_ = value;
  // @@protoc_insertion_point(field_set:FightGMAddHpAction.AddNum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightTRandSkillAction::FightTRandSkillAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightTRandSkillAction)
}
FightTRandSkillAction::FightTRandSkillAction(const FightTRandSkillAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FightTRandSkillAction)
}

void FightTRandSkillAction::SharedCtor() {
  _cached_size_ = 0;
}

FightTRandSkillAction::~FightTRandSkillAction() {
  // @@protoc_insertion_point(destructor:FightTRandSkillAction)
  SharedDtor();
}

void FightTRandSkillAction::SharedDtor() {
}

void FightTRandSkillAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightTRandSkillAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightTRandSkillAction& FightTRandSkillAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightTRandSkillAction* FightTRandSkillAction::New(::google::protobuf::Arena* arena) const {
  FightTRandSkillAction* n = new FightTRandSkillAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightTRandSkillAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightTRandSkillAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightTRandSkillAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightTRandSkillAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:FightTRandSkillAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightTRandSkillAction)
  return false;
#undef DO_
}

void FightTRandSkillAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightTRandSkillAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightTRandSkillAction)
}

::google::protobuf::uint8* FightTRandSkillAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightTRandSkillAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightTRandSkillAction)
  return target;
}

size_t FightTRandSkillAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightTRandSkillAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightTRandSkillAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightTRandSkillAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightTRandSkillAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightTRandSkillAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightTRandSkillAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightTRandSkillAction)
    MergeFrom(*source);
  }
}

void FightTRandSkillAction::MergeFrom(const FightTRandSkillAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightTRandSkillAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FightTRandSkillAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightTRandSkillAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightTRandSkillAction::CopyFrom(const FightTRandSkillAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightTRandSkillAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightTRandSkillAction::IsInitialized() const {
  return true;
}

void FightTRandSkillAction::Swap(FightTRandSkillAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightTRandSkillAction::InternalSwap(FightTRandSkillAction* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightTRandSkillAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightTRandSkillAction

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightGuildDBeginAction::kTypeFieldNumber;
const int FightGuildDBeginAction::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightGuildDBeginAction::FightGuildDBeginAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightGuildDBeginAction)
}
FightGuildDBeginAction::FightGuildDBeginAction(const FightGuildDBeginAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&type_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:FightGuildDBeginAction)
}

void FightGuildDBeginAction::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  time_ = -1;
}

FightGuildDBeginAction::~FightGuildDBeginAction() {
  // @@protoc_insertion_point(destructor:FightGuildDBeginAction)
  SharedDtor();
}

void FightGuildDBeginAction::SharedDtor() {
}

void FightGuildDBeginAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightGuildDBeginAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightGuildDBeginAction& FightGuildDBeginAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightGuildDBeginAction* FightGuildDBeginAction::New(::google::protobuf::Arena* arena) const {
  FightGuildDBeginAction* n = new FightGuildDBeginAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightGuildDBeginAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightGuildDBeginAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    type_ = -1;
    time_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightGuildDBeginAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightGuildDBeginAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Type = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Time = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightGuildDBeginAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightGuildDBeginAction)
  return false;
#undef DO_
}

void FightGuildDBeginAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightGuildDBeginAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->type(), output);
  }

  // optional sint32 Time = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightGuildDBeginAction)
}

::google::protobuf::uint8* FightGuildDBeginAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightGuildDBeginAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->type(), target);
  }

  // optional sint32 Time = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightGuildDBeginAction)
  return target;
}

size_t FightGuildDBeginAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightGuildDBeginAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Type = 1 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 Time = 2 [default = -1];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightGuildDBeginAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightGuildDBeginAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightGuildDBeginAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightGuildDBeginAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightGuildDBeginAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightGuildDBeginAction)
    MergeFrom(*source);
  }
}

void FightGuildDBeginAction::MergeFrom(const FightGuildDBeginAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightGuildDBeginAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightGuildDBeginAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightGuildDBeginAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightGuildDBeginAction::CopyFrom(const FightGuildDBeginAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightGuildDBeginAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightGuildDBeginAction::IsInitialized() const {
  return true;
}

void FightGuildDBeginAction::Swap(FightGuildDBeginAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightGuildDBeginAction::InternalSwap(FightGuildDBeginAction* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightGuildDBeginAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightGuildDBeginAction

// optional sint32 Type = 1 [default = -1];
bool FightGuildDBeginAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightGuildDBeginAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FightGuildDBeginAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightGuildDBeginAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
::google::protobuf::int32 FightGuildDBeginAction::type() const {
  // @@protoc_insertion_point(field_get:FightGuildDBeginAction.Type)
  return type_;
}
void FightGuildDBeginAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightGuildDBeginAction.Type)
}

// optional sint32 Time = 2 [default = -1];
bool FightGuildDBeginAction::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightGuildDBeginAction::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void FightGuildDBeginAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightGuildDBeginAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
::google::protobuf::int32 FightGuildDBeginAction::time() const {
  // @@protoc_insertion_point(field_get:FightGuildDBeginAction.Time)
  return time_;
}
void FightGuildDBeginAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightGuildDBeginAction.Time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightGuildDEndAction::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightGuildDEndAction::FightGuildDEndAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightGuildDEndAction)
}
FightGuildDEndAction::FightGuildDEndAction(const FightGuildDEndAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:FightGuildDEndAction)
}

void FightGuildDEndAction::SharedCtor() {
  _cached_size_ = 0;
  time_ = -1;
}

FightGuildDEndAction::~FightGuildDEndAction() {
  // @@protoc_insertion_point(destructor:FightGuildDEndAction)
  SharedDtor();
}

void FightGuildDEndAction::SharedDtor() {
}

void FightGuildDEndAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightGuildDEndAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightGuildDEndAction& FightGuildDEndAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightGuildDEndAction* FightGuildDEndAction::New(::google::protobuf::Arena* arena) const {
  FightGuildDEndAction* n = new FightGuildDEndAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightGuildDEndAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightGuildDEndAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightGuildDEndAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightGuildDEndAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Time = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightGuildDEndAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightGuildDEndAction)
  return false;
#undef DO_
}

void FightGuildDEndAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightGuildDEndAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Time = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightGuildDEndAction)
}

::google::protobuf::uint8* FightGuildDEndAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightGuildDEndAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Time = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightGuildDEndAction)
  return target;
}

size_t FightGuildDEndAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightGuildDEndAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Time = 1 [default = -1];
  if (has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightGuildDEndAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightGuildDEndAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightGuildDEndAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightGuildDEndAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightGuildDEndAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightGuildDEndAction)
    MergeFrom(*source);
  }
}

void FightGuildDEndAction::MergeFrom(const FightGuildDEndAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightGuildDEndAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time()) {
    set_time(from.time());
  }
}

void FightGuildDEndAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightGuildDEndAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightGuildDEndAction::CopyFrom(const FightGuildDEndAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightGuildDEndAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightGuildDEndAction::IsInitialized() const {
  return true;
}

void FightGuildDEndAction::Swap(FightGuildDEndAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightGuildDEndAction::InternalSwap(FightGuildDEndAction* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightGuildDEndAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightGuildDEndAction

// optional sint32 Time = 1 [default = -1];
bool FightGuildDEndAction::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightGuildDEndAction::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
void FightGuildDEndAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightGuildDEndAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
::google::protobuf::int32 FightGuildDEndAction::time() const {
  // @@protoc_insertion_point(field_get:FightGuildDEndAction.Time)
  return time_;
}
void FightGuildDEndAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightGuildDEndAction.Time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightTransferAction::kDungeonIdFieldNumber;
const int FightTransferAction::kDungeonTypeFieldNumber;
const int FightTransferAction::kBirthPointFieldNumber;
const int FightTransferAction::kFaceDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightTransferAction::FightTransferAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightTransferAction)
}
FightTransferAction::FightTransferAction(const FightTransferAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&facedir_, &from.facedir_,
    static_cast<size_t>(reinterpret_cast<char*>(&dungeontype_) -
    reinterpret_cast<char*>(&facedir_)) + sizeof(dungeontype_));
  // @@protoc_insertion_point(copy_constructor:FightTransferAction)
}

void FightTransferAction::SharedCtor() {
  _cached_size_ = 0;
  facedir_ = 0;
  birthpoint_ = -1;
  dungeonid_ = -1;
  dungeontype_ = -1;
}

FightTransferAction::~FightTransferAction() {
  // @@protoc_insertion_point(destructor:FightTransferAction)
  SharedDtor();
}

void FightTransferAction::SharedDtor() {
}

void FightTransferAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightTransferAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightTransferAction& FightTransferAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightTransferAction* FightTransferAction::New(::google::protobuf::Arena* arena) const {
  FightTransferAction* n = new FightTransferAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightTransferAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightTransferAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    facedir_ = 0;
    birthpoint_ = -1;
    dungeonid_ = -1;
    dungeontype_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightTransferAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightTransferAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 DungeonId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_dungeonid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dungeonid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 DungeonType = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_dungeontype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dungeontype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 BirthPoint = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_birthpoint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &birthpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 FaceDir = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_facedir();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &facedir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightTransferAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightTransferAction)
  return false;
#undef DO_
}

void FightTransferAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightTransferAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 DungeonId = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->dungeonid(), output);
  }

  // optional sint32 DungeonType = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->dungeontype(), output);
  }

  // optional sint32 BirthPoint = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->birthpoint(), output);
  }

  // optional sint32 FaceDir = 4 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->facedir(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightTransferAction)
}

::google::protobuf::uint8* FightTransferAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightTransferAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 DungeonId = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->dungeonid(), target);
  }

  // optional sint32 DungeonType = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->dungeontype(), target);
  }

  // optional sint32 BirthPoint = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->birthpoint(), target);
  }

  // optional sint32 FaceDir = 4 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->facedir(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightTransferAction)
  return target;
}

size_t FightTransferAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightTransferAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional sint32 FaceDir = 4 [default = 0];
    if (has_facedir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->facedir());
    }

    // optional sint32 BirthPoint = 3 [default = -1];
    if (has_birthpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->birthpoint());
    }

    // optional sint32 DungeonId = 1 [default = -1];
    if (has_dungeonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dungeonid());
    }

    // optional sint32 DungeonType = 2 [default = -1];
    if (has_dungeontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dungeontype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightTransferAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightTransferAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightTransferAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightTransferAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightTransferAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightTransferAction)
    MergeFrom(*source);
  }
}

void FightTransferAction::MergeFrom(const FightTransferAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightTransferAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      facedir_ = from.facedir_;
    }
    if (cached_has_bits & 0x00000002u) {
      birthpoint_ = from.birthpoint_;
    }
    if (cached_has_bits & 0x00000004u) {
      dungeonid_ = from.dungeonid_;
    }
    if (cached_has_bits & 0x00000008u) {
      dungeontype_ = from.dungeontype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightTransferAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightTransferAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightTransferAction::CopyFrom(const FightTransferAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightTransferAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightTransferAction::IsInitialized() const {
  return true;
}

void FightTransferAction::Swap(FightTransferAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightTransferAction::InternalSwap(FightTransferAction* other) {
  using std::swap;
  swap(facedir_, other->facedir_);
  swap(birthpoint_, other->birthpoint_);
  swap(dungeonid_, other->dungeonid_);
  swap(dungeontype_, other->dungeontype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightTransferAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightTransferAction

// optional sint32 DungeonId = 1 [default = -1];
bool FightTransferAction::has_dungeonid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightTransferAction::set_has_dungeonid() {
  _has_bits_[0] |= 0x00000004u;
}
void FightTransferAction::clear_has_dungeonid() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightTransferAction::clear_dungeonid() {
  dungeonid_ = -1;
  clear_has_dungeonid();
}
::google::protobuf::int32 FightTransferAction::dungeonid() const {
  // @@protoc_insertion_point(field_get:FightTransferAction.DungeonId)
  return dungeonid_;
}
void FightTransferAction::set_dungeonid(::google::protobuf::int32 value) {
  set_has_dungeonid();
  dungeonid_ = value;
  // @@protoc_insertion_point(field_set:FightTransferAction.DungeonId)
}

// optional sint32 DungeonType = 2 [default = -1];
bool FightTransferAction::has_dungeontype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightTransferAction::set_has_dungeontype() {
  _has_bits_[0] |= 0x00000008u;
}
void FightTransferAction::clear_has_dungeontype() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightTransferAction::clear_dungeontype() {
  dungeontype_ = -1;
  clear_has_dungeontype();
}
::google::protobuf::int32 FightTransferAction::dungeontype() const {
  // @@protoc_insertion_point(field_get:FightTransferAction.DungeonType)
  return dungeontype_;
}
void FightTransferAction::set_dungeontype(::google::protobuf::int32 value) {
  set_has_dungeontype();
  dungeontype_ = value;
  // @@protoc_insertion_point(field_set:FightTransferAction.DungeonType)
}

// optional sint32 BirthPoint = 3 [default = -1];
bool FightTransferAction::has_birthpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightTransferAction::set_has_birthpoint() {
  _has_bits_[0] |= 0x00000002u;
}
void FightTransferAction::clear_has_birthpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightTransferAction::clear_birthpoint() {
  birthpoint_ = -1;
  clear_has_birthpoint();
}
::google::protobuf::int32 FightTransferAction::birthpoint() const {
  // @@protoc_insertion_point(field_get:FightTransferAction.BirthPoint)
  return birthpoint_;
}
void FightTransferAction::set_birthpoint(::google::protobuf::int32 value) {
  set_has_birthpoint();
  birthpoint_ = value;
  // @@protoc_insertion_point(field_set:FightTransferAction.BirthPoint)
}

// optional sint32 FaceDir = 4 [default = 0];
bool FightTransferAction::has_facedir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightTransferAction::set_has_facedir() {
  _has_bits_[0] |= 0x00000001u;
}
void FightTransferAction::clear_has_facedir() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightTransferAction::clear_facedir() {
  facedir_ = 0;
  clear_has_facedir();
}
::google::protobuf::int32 FightTransferAction::facedir() const {
  // @@protoc_insertion_point(field_get:FightTransferAction.FaceDir)
  return facedir_;
}
void FightTransferAction::set_facedir(::google::protobuf::int32 value) {
  set_has_facedir();
  facedir_ = value;
  // @@protoc_insertion_point(field_set:FightTransferAction.FaceDir)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightHeroFightInfoAction::kHeroInfoArrFieldNumber;
const int FightHeroFightInfoAction::kFunctionIdFieldNumber;
const int FightHeroFightInfoAction::kMyCampIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightHeroFightInfoAction::FightHeroFightInfoAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightHeroFightInfoAction)
}
FightHeroFightInfoAction::FightHeroFightInfoAction(const FightHeroFightInfoAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      heroinfoarr_(from.heroinfoarr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&functionid_, &from.functionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mycampid_) -
    reinterpret_cast<char*>(&functionid_)) + sizeof(mycampid_));
  // @@protoc_insertion_point(copy_constructor:FightHeroFightInfoAction)
}

void FightHeroFightInfoAction::SharedCtor() {
  _cached_size_ = 0;
  functionid_ = -1;
  mycampid_ = -1;
}

FightHeroFightInfoAction::~FightHeroFightInfoAction() {
  // @@protoc_insertion_point(destructor:FightHeroFightInfoAction)
  SharedDtor();
}

void FightHeroFightInfoAction::SharedDtor() {
}

void FightHeroFightInfoAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightHeroFightInfoAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightHeroFightInfoAction& FightHeroFightInfoAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightHeroFightInfoAction* FightHeroFightInfoAction::New(::google::protobuf::Arena* arena) const {
  FightHeroFightInfoAction* n = new FightHeroFightInfoAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightHeroFightInfoAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightHeroFightInfoAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heroinfoarr_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    functionid_ = -1;
    mycampid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightHeroFightInfoAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightHeroFightInfoAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HeroFightInfo HeroInfoArr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heroinfoarr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 FunctionId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_functionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &functionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 MyCampId = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_mycampid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &mycampid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightHeroFightInfoAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightHeroFightInfoAction)
  return false;
#undef DO_
}

void FightHeroFightInfoAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightHeroFightInfoAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .HeroFightInfo HeroInfoArr = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->heroinfoarr_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->heroinfoarr(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional sint32 FunctionId = 2 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->functionid(), output);
  }

  // optional sint32 MyCampId = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->mycampid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightHeroFightInfoAction)
}

::google::protobuf::uint8* FightHeroFightInfoAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightHeroFightInfoAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .HeroFightInfo HeroInfoArr = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->heroinfoarr_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->heroinfoarr(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional sint32 FunctionId = 2 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->functionid(), target);
  }

  // optional sint32 MyCampId = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->mycampid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightHeroFightInfoAction)
  return target;
}

size_t FightHeroFightInfoAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightHeroFightInfoAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .HeroFightInfo HeroInfoArr = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->heroinfoarr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heroinfoarr(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 FunctionId = 2 [default = -1];
    if (has_functionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->functionid());
    }

    // optional sint32 MyCampId = 3 [default = -1];
    if (has_mycampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->mycampid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightHeroFightInfoAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightHeroFightInfoAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightHeroFightInfoAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightHeroFightInfoAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightHeroFightInfoAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightHeroFightInfoAction)
    MergeFrom(*source);
  }
}

void FightHeroFightInfoAction::MergeFrom(const FightHeroFightInfoAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightHeroFightInfoAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  heroinfoarr_.MergeFrom(from.heroinfoarr_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      functionid_ = from.functionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mycampid_ = from.mycampid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightHeroFightInfoAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightHeroFightInfoAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightHeroFightInfoAction::CopyFrom(const FightHeroFightInfoAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightHeroFightInfoAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightHeroFightInfoAction::IsInitialized() const {
  return true;
}

void FightHeroFightInfoAction::Swap(FightHeroFightInfoAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightHeroFightInfoAction::InternalSwap(FightHeroFightInfoAction* other) {
  using std::swap;
  heroinfoarr_.InternalSwap(&other->heroinfoarr_);
  swap(functionid_, other->functionid_);
  swap(mycampid_, other->mycampid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightHeroFightInfoAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightHeroFightInfoAction

// repeated .HeroFightInfo HeroInfoArr = 1;
int FightHeroFightInfoAction::heroinfoarr_size() const {
  return heroinfoarr_.size();
}
void FightHeroFightInfoAction::clear_heroinfoarr() {
  heroinfoarr_.Clear();
}
const ::HeroFightInfo& FightHeroFightInfoAction::heroinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:FightHeroFightInfoAction.HeroInfoArr)
  return heroinfoarr_.Get(index);
}
::HeroFightInfo* FightHeroFightInfoAction::mutable_heroinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:FightHeroFightInfoAction.HeroInfoArr)
  return heroinfoarr_.Mutable(index);
}
::HeroFightInfo* FightHeroFightInfoAction::add_heroinfoarr() {
  // @@protoc_insertion_point(field_add:FightHeroFightInfoAction.HeroInfoArr)
  return heroinfoarr_.Add();
}
::google::protobuf::RepeatedPtrField< ::HeroFightInfo >*
FightHeroFightInfoAction::mutable_heroinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:FightHeroFightInfoAction.HeroInfoArr)
  return &heroinfoarr_;
}
const ::google::protobuf::RepeatedPtrField< ::HeroFightInfo >&
FightHeroFightInfoAction::heroinfoarr() const {
  // @@protoc_insertion_point(field_list:FightHeroFightInfoAction.HeroInfoArr)
  return heroinfoarr_;
}

// optional sint32 FunctionId = 2 [default = -1];
bool FightHeroFightInfoAction::has_functionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightHeroFightInfoAction::set_has_functionid() {
  _has_bits_[0] |= 0x00000001u;
}
void FightHeroFightInfoAction::clear_has_functionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightHeroFightInfoAction::clear_functionid() {
  functionid_ = -1;
  clear_has_functionid();
}
::google::protobuf::int32 FightHeroFightInfoAction::functionid() const {
  // @@protoc_insertion_point(field_get:FightHeroFightInfoAction.FunctionId)
  return functionid_;
}
void FightHeroFightInfoAction::set_functionid(::google::protobuf::int32 value) {
  set_has_functionid();
  functionid_ = value;
  // @@protoc_insertion_point(field_set:FightHeroFightInfoAction.FunctionId)
}

// optional sint32 MyCampId = 3 [default = -1];
bool FightHeroFightInfoAction::has_mycampid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightHeroFightInfoAction::set_has_mycampid() {
  _has_bits_[0] |= 0x00000002u;
}
void FightHeroFightInfoAction::clear_has_mycampid() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightHeroFightInfoAction::clear_mycampid() {
  mycampid_ = -1;
  clear_has_mycampid();
}
::google::protobuf::int32 FightHeroFightInfoAction::mycampid() const {
  // @@protoc_insertion_point(field_get:FightHeroFightInfoAction.MyCampId)
  return mycampid_;
}
void FightHeroFightInfoAction::set_mycampid(::google::protobuf::int32 value) {
  set_has_mycampid();
  mycampid_ = value;
  // @@protoc_insertion_point(field_set:FightHeroFightInfoAction.MyCampId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightGuildFightBeginAction::kTypeFieldNumber;
const int FightGuildFightBeginAction::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightGuildFightBeginAction::FightGuildFightBeginAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightGuildFightBeginAction)
}
FightGuildFightBeginAction::FightGuildFightBeginAction(const FightGuildFightBeginAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&type_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:FightGuildFightBeginAction)
}

void FightGuildFightBeginAction::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  time_ = -1;
}

FightGuildFightBeginAction::~FightGuildFightBeginAction() {
  // @@protoc_insertion_point(destructor:FightGuildFightBeginAction)
  SharedDtor();
}

void FightGuildFightBeginAction::SharedDtor() {
}

void FightGuildFightBeginAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightGuildFightBeginAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightGuildFightBeginAction& FightGuildFightBeginAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightGuildFightBeginAction* FightGuildFightBeginAction::New(::google::protobuf::Arena* arena) const {
  FightGuildFightBeginAction* n = new FightGuildFightBeginAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightGuildFightBeginAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightGuildFightBeginAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    type_ = -1;
    time_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightGuildFightBeginAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightGuildFightBeginAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Type = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Time = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightGuildFightBeginAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightGuildFightBeginAction)
  return false;
#undef DO_
}

void FightGuildFightBeginAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightGuildFightBeginAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->type(), output);
  }

  // optional sint32 Time = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightGuildFightBeginAction)
}

::google::protobuf::uint8* FightGuildFightBeginAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightGuildFightBeginAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->type(), target);
  }

  // optional sint32 Time = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightGuildFightBeginAction)
  return target;
}

size_t FightGuildFightBeginAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightGuildFightBeginAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Type = 1 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 Time = 2 [default = -1];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightGuildFightBeginAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightGuildFightBeginAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightGuildFightBeginAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightGuildFightBeginAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightGuildFightBeginAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightGuildFightBeginAction)
    MergeFrom(*source);
  }
}

void FightGuildFightBeginAction::MergeFrom(const FightGuildFightBeginAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightGuildFightBeginAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightGuildFightBeginAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightGuildFightBeginAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightGuildFightBeginAction::CopyFrom(const FightGuildFightBeginAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightGuildFightBeginAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightGuildFightBeginAction::IsInitialized() const {
  return true;
}

void FightGuildFightBeginAction::Swap(FightGuildFightBeginAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightGuildFightBeginAction::InternalSwap(FightGuildFightBeginAction* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightGuildFightBeginAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightGuildFightBeginAction

// optional sint32 Type = 1 [default = -1];
bool FightGuildFightBeginAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightGuildFightBeginAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FightGuildFightBeginAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightGuildFightBeginAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
::google::protobuf::int32 FightGuildFightBeginAction::type() const {
  // @@protoc_insertion_point(field_get:FightGuildFightBeginAction.Type)
  return type_;
}
void FightGuildFightBeginAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightGuildFightBeginAction.Type)
}

// optional sint32 Time = 2 [default = -1];
bool FightGuildFightBeginAction::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightGuildFightBeginAction::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void FightGuildFightBeginAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightGuildFightBeginAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
::google::protobuf::int32 FightGuildFightBeginAction::time() const {
  // @@protoc_insertion_point(field_get:FightGuildFightBeginAction.Time)
  return time_;
}
void FightGuildFightBeginAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightGuildFightBeginAction.Time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightGuildFightEndAction::kTimeFieldNumber;
const int FightGuildFightEndAction::kVictoryCampIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightGuildFightEndAction::FightGuildFightEndAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightGuildFightEndAction)
}
FightGuildFightEndAction::FightGuildFightEndAction(const FightGuildFightEndAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&victorycampid_) -
    reinterpret_cast<char*>(&time_)) + sizeof(victorycampid_));
  // @@protoc_insertion_point(copy_constructor:FightGuildFightEndAction)
}

void FightGuildFightEndAction::SharedCtor() {
  _cached_size_ = 0;
  time_ = -1;
  victorycampid_ = -1;
}

FightGuildFightEndAction::~FightGuildFightEndAction() {
  // @@protoc_insertion_point(destructor:FightGuildFightEndAction)
  SharedDtor();
}

void FightGuildFightEndAction::SharedDtor() {
}

void FightGuildFightEndAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightGuildFightEndAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightGuildFightEndAction& FightGuildFightEndAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightGuildFightEndAction* FightGuildFightEndAction::New(::google::protobuf::Arena* arena) const {
  FightGuildFightEndAction* n = new FightGuildFightEndAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightGuildFightEndAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightGuildFightEndAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    time_ = -1;
    victorycampid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightGuildFightEndAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightGuildFightEndAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Time = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 VictoryCampId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_victorycampid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &victorycampid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightGuildFightEndAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightGuildFightEndAction)
  return false;
#undef DO_
}

void FightGuildFightEndAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightGuildFightEndAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Time = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->time(), output);
  }

  // optional sint32 VictoryCampId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->victorycampid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightGuildFightEndAction)
}

::google::protobuf::uint8* FightGuildFightEndAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightGuildFightEndAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Time = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->time(), target);
  }

  // optional sint32 VictoryCampId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->victorycampid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightGuildFightEndAction)
  return target;
}

size_t FightGuildFightEndAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightGuildFightEndAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Time = 1 [default = -1];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->time());
    }

    // optional sint32 VictoryCampId = 2 [default = -1];
    if (has_victorycampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->victorycampid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightGuildFightEndAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightGuildFightEndAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightGuildFightEndAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightGuildFightEndAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightGuildFightEndAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightGuildFightEndAction)
    MergeFrom(*source);
  }
}

void FightGuildFightEndAction::MergeFrom(const FightGuildFightEndAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightGuildFightEndAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      victorycampid_ = from.victorycampid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightGuildFightEndAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightGuildFightEndAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightGuildFightEndAction::CopyFrom(const FightGuildFightEndAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightGuildFightEndAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightGuildFightEndAction::IsInitialized() const {
  return true;
}

void FightGuildFightEndAction::Swap(FightGuildFightEndAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightGuildFightEndAction::InternalSwap(FightGuildFightEndAction* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(victorycampid_, other->victorycampid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightGuildFightEndAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightGuildFightEndAction

// optional sint32 Time = 1 [default = -1];
bool FightGuildFightEndAction::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightGuildFightEndAction::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
void FightGuildFightEndAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightGuildFightEndAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
::google::protobuf::int32 FightGuildFightEndAction::time() const {
  // @@protoc_insertion_point(field_get:FightGuildFightEndAction.Time)
  return time_;
}
void FightGuildFightEndAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightGuildFightEndAction.Time)
}

// optional sint32 VictoryCampId = 2 [default = -1];
bool FightGuildFightEndAction::has_victorycampid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightGuildFightEndAction::set_has_victorycampid() {
  _has_bits_[0] |= 0x00000002u;
}
void FightGuildFightEndAction::clear_has_victorycampid() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightGuildFightEndAction::clear_victorycampid() {
  victorycampid_ = -1;
  clear_has_victorycampid();
}
::google::protobuf::int32 FightGuildFightEndAction::victorycampid() const {
  // @@protoc_insertion_point(field_get:FightGuildFightEndAction.VictoryCampId)
  return victorycampid_;
}
void FightGuildFightEndAction::set_victorycampid(::google::protobuf::int32 value) {
  set_has_victorycampid();
  victorycampid_ = value;
  // @@protoc_insertion_point(field_set:FightGuildFightEndAction.VictoryCampId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightGuildFightHpAction::kCampIdFieldNumber;
const int FightGuildFightHpAction::kMaxHpFieldNumber;
const int FightGuildFightHpAction::kCurHpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightGuildFightHpAction::FightGuildFightHpAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightGuildFightHpAction)
}
FightGuildFightHpAction::FightGuildFightHpAction(const FightGuildFightHpAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&maxhp_, &from.maxhp_,
    static_cast<size_t>(reinterpret_cast<char*>(&campid_) -
    reinterpret_cast<char*>(&maxhp_)) + sizeof(campid_));
  // @@protoc_insertion_point(copy_constructor:FightGuildFightHpAction)
}

void FightGuildFightHpAction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&maxhp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curhp_) -
      reinterpret_cast<char*>(&maxhp_)) + sizeof(curhp_));
  campid_ = -1;
}

FightGuildFightHpAction::~FightGuildFightHpAction() {
  // @@protoc_insertion_point(destructor:FightGuildFightHpAction)
  SharedDtor();
}

void FightGuildFightHpAction::SharedDtor() {
}

void FightGuildFightHpAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightGuildFightHpAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightGuildFightHpAction& FightGuildFightHpAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightGuildFightHpAction* FightGuildFightHpAction::New(::google::protobuf::Arena* arena) const {
  FightGuildFightHpAction* n = new FightGuildFightHpAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightGuildFightHpAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightGuildFightHpAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&maxhp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&curhp_) -
        reinterpret_cast<char*>(&maxhp_)) + sizeof(curhp_));
    campid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightGuildFightHpAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightGuildFightHpAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 CampId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_campid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &campid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 MaxHp = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_maxhp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &maxhp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 CurHp = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_curhp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &curhp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightGuildFightHpAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightGuildFightHpAction)
  return false;
#undef DO_
}

void FightGuildFightHpAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightGuildFightHpAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 CampId = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->campid(), output);
  }

  // optional sint32 MaxHp = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->maxhp(), output);
  }

  // optional sint32 CurHp = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->curhp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightGuildFightHpAction)
}

::google::protobuf::uint8* FightGuildFightHpAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightGuildFightHpAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 CampId = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->campid(), target);
  }

  // optional sint32 MaxHp = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->maxhp(), target);
  }

  // optional sint32 CurHp = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->curhp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightGuildFightHpAction)
  return target;
}

size_t FightGuildFightHpAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightGuildFightHpAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional sint32 MaxHp = 2 [default = 0];
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->maxhp());
    }

    // optional sint32 CurHp = 3 [default = 0];
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->curhp());
    }

    // optional sint32 CampId = 1 [default = -1];
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->campid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightGuildFightHpAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightGuildFightHpAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightGuildFightHpAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightGuildFightHpAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightGuildFightHpAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightGuildFightHpAction)
    MergeFrom(*source);
  }
}

void FightGuildFightHpAction::MergeFrom(const FightGuildFightHpAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightGuildFightHpAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      maxhp_ = from.maxhp_;
    }
    if (cached_has_bits & 0x00000002u) {
      curhp_ = from.curhp_;
    }
    if (cached_has_bits & 0x00000004u) {
      campid_ = from.campid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightGuildFightHpAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightGuildFightHpAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightGuildFightHpAction::CopyFrom(const FightGuildFightHpAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightGuildFightHpAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightGuildFightHpAction::IsInitialized() const {
  return true;
}

void FightGuildFightHpAction::Swap(FightGuildFightHpAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightGuildFightHpAction::InternalSwap(FightGuildFightHpAction* other) {
  using std::swap;
  swap(maxhp_, other->maxhp_);
  swap(curhp_, other->curhp_);
  swap(campid_, other->campid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightGuildFightHpAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightGuildFightHpAction

// optional sint32 CampId = 1 [default = -1];
bool FightGuildFightHpAction::has_campid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightGuildFightHpAction::set_has_campid() {
  _has_bits_[0] |= 0x00000004u;
}
void FightGuildFightHpAction::clear_has_campid() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightGuildFightHpAction::clear_campid() {
  campid_ = -1;
  clear_has_campid();
}
::google::protobuf::int32 FightGuildFightHpAction::campid() const {
  // @@protoc_insertion_point(field_get:FightGuildFightHpAction.CampId)
  return campid_;
}
void FightGuildFightHpAction::set_campid(::google::protobuf::int32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:FightGuildFightHpAction.CampId)
}

// optional sint32 MaxHp = 2 [default = 0];
bool FightGuildFightHpAction::has_maxhp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightGuildFightHpAction::set_has_maxhp() {
  _has_bits_[0] |= 0x00000001u;
}
void FightGuildFightHpAction::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightGuildFightHpAction::clear_maxhp() {
  maxhp_ = 0;
  clear_has_maxhp();
}
::google::protobuf::int32 FightGuildFightHpAction::maxhp() const {
  // @@protoc_insertion_point(field_get:FightGuildFightHpAction.MaxHp)
  return maxhp_;
}
void FightGuildFightHpAction::set_maxhp(::google::protobuf::int32 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:FightGuildFightHpAction.MaxHp)
}

// optional sint32 CurHp = 3 [default = 0];
bool FightGuildFightHpAction::has_curhp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightGuildFightHpAction::set_has_curhp() {
  _has_bits_[0] |= 0x00000002u;
}
void FightGuildFightHpAction::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightGuildFightHpAction::clear_curhp() {
  curhp_ = 0;
  clear_has_curhp();
}
::google::protobuf::int32 FightGuildFightHpAction::curhp() const {
  // @@protoc_insertion_point(field_get:FightGuildFightHpAction.CurHp)
  return curhp_;
}
void FightGuildFightHpAction::set_curhp(::google::protobuf::int32 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:FightGuildFightHpAction.CurHp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightEffectTranslateAction::kObjIdFieldNumber;
const int FightEffectTranslateAction::kObjTypeFieldNumber;
const int FightEffectTranslateAction::kTargetObjIdFieldNumber;
const int FightEffectTranslateAction::kTargetPosFieldNumber;
const int FightEffectTranslateAction::kAngleFieldNumber;
const int FightEffectTranslateAction::kSpeedFieldNumber;
const int FightEffectTranslateAction::kDistanceFieldNumber;
const int FightEffectTranslateAction::kPosInfoFieldNumber;
const int FightEffectTranslateAction::kStatusFieldNumber;
const int FightEffectTranslateAction::kSkillIdFieldNumber;
const int FightEffectTranslateAction::kSegementIndexFieldNumber;
const int FightEffectTranslateAction::kSpriteNameFieldNumber;
const int FightEffectTranslateAction::kBulletTypeFieldNumber;
const int FightEffectTranslateAction::kIsIrregularityEffectFieldNumber;
const int FightEffectTranslateAction::kTranslateTypeFieldNumber;
const int FightEffectTranslateAction::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightEffectTranslateAction::FightEffectTranslateAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightEffectTranslateAction)
}
FightEffectTranslateAction::FightEffectTranslateAction(const FightEffectTranslateAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  targetpos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_targetpos()) {
    targetpos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetpos_);
  }
  posinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_posinfo()) {
    posinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo_);
  }
  spritename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_spritename()) {
    spritename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spritename_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&status_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:FightEffectTranslateAction)
}

void FightEffectTranslateAction::SharedCtor() {
  _cached_size_ = 0;
  targetpos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  posinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spritename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&translatetype_) -
      reinterpret_cast<char*>(&status_)) + sizeof(translatetype_));
  objid_ = -1;
  objtype_ = -1;
  targetobjid_ = -1;
  angle_ = -1;
  speed_ = -1;
  distance_ = -1;
  skillid_ = -1;
  segementindex_ = -1;
  bullettype_ = -1;
  time_ = -1;
}

FightEffectTranslateAction::~FightEffectTranslateAction() {
  // @@protoc_insertion_point(destructor:FightEffectTranslateAction)
  SharedDtor();
}

void FightEffectTranslateAction::SharedDtor() {
  targetpos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  posinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spritename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FightEffectTranslateAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightEffectTranslateAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightEffectTranslateAction& FightEffectTranslateAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightEffectTranslateAction* FightEffectTranslateAction::New(::google::protobuf::Arena* arena) const {
  FightEffectTranslateAction* n = new FightEffectTranslateAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightEffectTranslateAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightEffectTranslateAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!targetpos_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*targetpos_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!posinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*posinfo_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!spritename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*spritename_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&translatetype_) -
        reinterpret_cast<char*>(&status_)) + sizeof(translatetype_));
    objid_ = -1;
    objtype_ = -1;
  }
  if (cached_has_bits & 65280u) {
    targetobjid_ = -1;
    angle_ = -1;
    speed_ = -1;
    distance_ = -1;
    skillid_ = -1;
    segementindex_ = -1;
    bullettype_ = -1;
    time_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightEffectTranslateAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightEffectTranslateAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ObjId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ObjType = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_objtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TargetObjId = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_targetobjid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &targetobjid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes TargetPos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_targetpos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Angle = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Speed = 6 [default = -1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Distance = 8 [default = -1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes PosInfo = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_posinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Status = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 SkillId = 11 [default = -1];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_skillid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skillid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 SegementIndex = 12 [default = -1];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_segementindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &segementindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SpriteName = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spritename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->spritename().data(), static_cast<int>(this->spritename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "FightEffectTranslateAction.SpriteName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 BulletType = 14 [default = -1];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_bullettype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bullettype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool IsIrregularityEffect = 15 [default = false];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_isirregularityeffect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isirregularityeffect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TranslateType = 17 [default = 0];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_translatetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &translatetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float Time = 18 [default = -1];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightEffectTranslateAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightEffectTranslateAction)
  return false;
#undef DO_
}

void FightEffectTranslateAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightEffectTranslateAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->objid(), output);
  }

  // optional sint32 ObjType = 2 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->objtype(), output);
  }

  // optional sint32 TargetObjId = 3 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->targetobjid(), output);
  }

  // optional bytes TargetPos = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->targetpos(), output);
  }

  // optional sint32 Angle = 5 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->angle(), output);
  }

  // optional sint32 Speed = 6 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->speed(), output);
  }

  // optional sint32 Distance = 8 [default = -1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->distance(), output);
  }

  // optional bytes PosInfo = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->posinfo(), output);
  }

  // optional sint32 Status = 10 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->status(), output);
  }

  // optional sint32 SkillId = 11 [default = -1];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->skillid(), output);
  }

  // optional sint32 SegementIndex = 12 [default = -1];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->segementindex(), output);
  }

  // optional string SpriteName = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->spritename().data(), static_cast<int>(this->spritename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FightEffectTranslateAction.SpriteName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->spritename(), output);
  }

  // optional sint32 BulletType = 14 [default = -1];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(14, this->bullettype(), output);
  }

  // optional bool IsIrregularityEffect = 15 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isirregularityeffect(), output);
  }

  // optional sint32 TranslateType = 17 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(17, this->translatetype(), output);
  }

  // optional float Time = 18 [default = -1];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightEffectTranslateAction)
}

::google::protobuf::uint8* FightEffectTranslateAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightEffectTranslateAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->objid(), target);
  }

  // optional sint32 ObjType = 2 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->objtype(), target);
  }

  // optional sint32 TargetObjId = 3 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->targetobjid(), target);
  }

  // optional bytes TargetPos = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->targetpos(), target);
  }

  // optional sint32 Angle = 5 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->angle(), target);
  }

  // optional sint32 Speed = 6 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->speed(), target);
  }

  // optional sint32 Distance = 8 [default = -1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->distance(), target);
  }

  // optional bytes PosInfo = 9;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->posinfo(), target);
  }

  // optional sint32 Status = 10 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->status(), target);
  }

  // optional sint32 SkillId = 11 [default = -1];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->skillid(), target);
  }

  // optional sint32 SegementIndex = 12 [default = -1];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->segementindex(), target);
  }

  // optional string SpriteName = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->spritename().data(), static_cast<int>(this->spritename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "FightEffectTranslateAction.SpriteName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->spritename(), target);
  }

  // optional sint32 BulletType = 14 [default = -1];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(14, this->bullettype(), target);
  }

  // optional bool IsIrregularityEffect = 15 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isirregularityeffect(), target);
  }

  // optional sint32 TranslateType = 17 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(17, this->translatetype(), target);
  }

  // optional float Time = 18 [default = -1];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightEffectTranslateAction)
  return target;
}

size_t FightEffectTranslateAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightEffectTranslateAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes TargetPos = 4;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->targetpos());
    }

    // optional bytes PosInfo = 9;
    if (has_posinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->posinfo());
    }

    // optional string SpriteName = 13;
    if (has_spritename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spritename());
    }

    // optional sint32 Status = 10 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // optional bool IsIrregularityEffect = 15 [default = false];
    if (has_isirregularityeffect()) {
      total_size += 1 + 1;
    }

    // optional sint32 TranslateType = 17 [default = 0];
    if (has_translatetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->translatetype());
    }

    // optional sint32 ObjId = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

    // optional sint32 ObjType = 2 [default = -1];
    if (has_objtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objtype());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional sint32 TargetObjId = 3 [default = -1];
    if (has_targetobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->targetobjid());
    }

    // optional sint32 Angle = 5 [default = -1];
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->angle());
    }

    // optional sint32 Speed = 6 [default = -1];
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->speed());
    }

    // optional sint32 Distance = 8 [default = -1];
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->distance());
    }

    // optional sint32 SkillId = 11 [default = -1];
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skillid());
    }

    // optional sint32 SegementIndex = 12 [default = -1];
    if (has_segementindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->segementindex());
    }

    // optional sint32 BulletType = 14 [default = -1];
    if (has_bullettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bullettype());
    }

    // optional float Time = 18 [default = -1];
    if (has_time()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightEffectTranslateAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightEffectTranslateAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightEffectTranslateAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightEffectTranslateAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightEffectTranslateAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightEffectTranslateAction)
    MergeFrom(*source);
  }
}

void FightEffectTranslateAction::MergeFrom(const FightEffectTranslateAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightEffectTranslateAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_targetpos();
      targetpos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetpos_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_posinfo();
      posinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.posinfo_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_spritename();
      spritename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spritename_);
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      isirregularityeffect_ = from.isirregularityeffect_;
    }
    if (cached_has_bits & 0x00000020u) {
      translatetype_ = from.translatetype_;
    }
    if (cached_has_bits & 0x00000040u) {
      objid_ = from.objid_;
    }
    if (cached_has_bits & 0x00000080u) {
      objtype_ = from.objtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      targetobjid_ = from.targetobjid_;
    }
    if (cached_has_bits & 0x00000200u) {
      angle_ = from.angle_;
    }
    if (cached_has_bits & 0x00000400u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000800u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00001000u) {
      skillid_ = from.skillid_;
    }
    if (cached_has_bits & 0x00002000u) {
      segementindex_ = from.segementindex_;
    }
    if (cached_has_bits & 0x00004000u) {
      bullettype_ = from.bullettype_;
    }
    if (cached_has_bits & 0x00008000u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightEffectTranslateAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightEffectTranslateAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightEffectTranslateAction::CopyFrom(const FightEffectTranslateAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightEffectTranslateAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightEffectTranslateAction::IsInitialized() const {
  return true;
}

void FightEffectTranslateAction::Swap(FightEffectTranslateAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightEffectTranslateAction::InternalSwap(FightEffectTranslateAction* other) {
  using std::swap;
  targetpos_.Swap(&other->targetpos_);
  posinfo_.Swap(&other->posinfo_);
  spritename_.Swap(&other->spritename_);
  swap(status_, other->status_);
  swap(isirregularityeffect_, other->isirregularityeffect_);
  swap(translatetype_, other->translatetype_);
  swap(objid_, other->objid_);
  swap(objtype_, other->objtype_);
  swap(targetobjid_, other->targetobjid_);
  swap(angle_, other->angle_);
  swap(speed_, other->speed_);
  swap(distance_, other->distance_);
  swap(skillid_, other->skillid_);
  swap(segementindex_, other->segementindex_);
  swap(bullettype_, other->bullettype_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightEffectTranslateAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightEffectTranslateAction

// optional sint32 ObjId = 1 [default = -1];
bool FightEffectTranslateAction::has_objid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FightEffectTranslateAction::set_has_objid() {
  _has_bits_[0] |= 0x00000040u;
}
void FightEffectTranslateAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000040u;
}
void FightEffectTranslateAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightEffectTranslateAction::objid() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.ObjId)
  return objid_;
}
void FightEffectTranslateAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.ObjId)
}

// optional sint32 ObjType = 2 [default = -1];
bool FightEffectTranslateAction::has_objtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FightEffectTranslateAction::set_has_objtype() {
  _has_bits_[0] |= 0x00000080u;
}
void FightEffectTranslateAction::clear_has_objtype() {
  _has_bits_[0] &= ~0x00000080u;
}
void FightEffectTranslateAction::clear_objtype() {
  objtype_ = -1;
  clear_has_objtype();
}
::google::protobuf::int32 FightEffectTranslateAction::objtype() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.ObjType)
  return objtype_;
}
void FightEffectTranslateAction::set_objtype(::google::protobuf::int32 value) {
  set_has_objtype();
  objtype_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.ObjType)
}

// optional sint32 TargetObjId = 3 [default = -1];
bool FightEffectTranslateAction::has_targetobjid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FightEffectTranslateAction::set_has_targetobjid() {
  _has_bits_[0] |= 0x00000100u;
}
void FightEffectTranslateAction::clear_has_targetobjid() {
  _has_bits_[0] &= ~0x00000100u;
}
void FightEffectTranslateAction::clear_targetobjid() {
  targetobjid_ = -1;
  clear_has_targetobjid();
}
::google::protobuf::int32 FightEffectTranslateAction::targetobjid() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.TargetObjId)
  return targetobjid_;
}
void FightEffectTranslateAction::set_targetobjid(::google::protobuf::int32 value) {
  set_has_targetobjid();
  targetobjid_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.TargetObjId)
}

// optional bytes TargetPos = 4;
bool FightEffectTranslateAction::has_targetpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightEffectTranslateAction::set_has_targetpos() {
  _has_bits_[0] |= 0x00000001u;
}
void FightEffectTranslateAction::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightEffectTranslateAction::clear_targetpos() {
  targetpos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetpos();
}
const ::std::string& FightEffectTranslateAction::targetpos() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.TargetPos)
  return targetpos_.GetNoArena();
}
void FightEffectTranslateAction::set_targetpos(const ::std::string& value) {
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.TargetPos)
}
#if LANG_CXX11
void FightEffectTranslateAction::set_targetpos(::std::string&& value) {
  set_has_targetpos();
  targetpos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightEffectTranslateAction.TargetPos)
}
#endif
void FightEffectTranslateAction::set_targetpos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightEffectTranslateAction.TargetPos)
}
void FightEffectTranslateAction::set_targetpos(const void* value, size_t size) {
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightEffectTranslateAction.TargetPos)
}
::std::string* FightEffectTranslateAction::mutable_targetpos() {
  set_has_targetpos();
  // @@protoc_insertion_point(field_mutable:FightEffectTranslateAction.TargetPos)
  return targetpos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightEffectTranslateAction::release_targetpos() {
  // @@protoc_insertion_point(field_release:FightEffectTranslateAction.TargetPos)
  clear_has_targetpos();
  return targetpos_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightEffectTranslateAction::set_allocated_targetpos(::std::string* targetpos) {
  if (targetpos != NULL) {
    set_has_targetpos();
  } else {
    clear_has_targetpos();
  }
  targetpos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetpos);
  // @@protoc_insertion_point(field_set_allocated:FightEffectTranslateAction.TargetPos)
}

// optional sint32 Angle = 5 [default = -1];
bool FightEffectTranslateAction::has_angle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FightEffectTranslateAction::set_has_angle() {
  _has_bits_[0] |= 0x00000200u;
}
void FightEffectTranslateAction::clear_has_angle() {
  _has_bits_[0] &= ~0x00000200u;
}
void FightEffectTranslateAction::clear_angle() {
  angle_ = -1;
  clear_has_angle();
}
::google::protobuf::int32 FightEffectTranslateAction::angle() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.Angle)
  return angle_;
}
void FightEffectTranslateAction::set_angle(::google::protobuf::int32 value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.Angle)
}

// optional sint32 Speed = 6 [default = -1];
bool FightEffectTranslateAction::has_speed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FightEffectTranslateAction::set_has_speed() {
  _has_bits_[0] |= 0x00000400u;
}
void FightEffectTranslateAction::clear_has_speed() {
  _has_bits_[0] &= ~0x00000400u;
}
void FightEffectTranslateAction::clear_speed() {
  speed_ = -1;
  clear_has_speed();
}
::google::protobuf::int32 FightEffectTranslateAction::speed() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.Speed)
  return speed_;
}
void FightEffectTranslateAction::set_speed(::google::protobuf::int32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.Speed)
}

// optional sint32 Distance = 8 [default = -1];
bool FightEffectTranslateAction::has_distance() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void FightEffectTranslateAction::set_has_distance() {
  _has_bits_[0] |= 0x00000800u;
}
void FightEffectTranslateAction::clear_has_distance() {
  _has_bits_[0] &= ~0x00000800u;
}
void FightEffectTranslateAction::clear_distance() {
  distance_ = -1;
  clear_has_distance();
}
::google::protobuf::int32 FightEffectTranslateAction::distance() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.Distance)
  return distance_;
}
void FightEffectTranslateAction::set_distance(::google::protobuf::int32 value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.Distance)
}

// optional bytes PosInfo = 9;
bool FightEffectTranslateAction::has_posinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightEffectTranslateAction::set_has_posinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void FightEffectTranslateAction::clear_has_posinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightEffectTranslateAction::clear_posinfo() {
  posinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo();
}
const ::std::string& FightEffectTranslateAction::posinfo() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.PosInfo)
  return posinfo_.GetNoArena();
}
void FightEffectTranslateAction::set_posinfo(const ::std::string& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.PosInfo)
}
#if LANG_CXX11
void FightEffectTranslateAction::set_posinfo(::std::string&& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightEffectTranslateAction.PosInfo)
}
#endif
void FightEffectTranslateAction::set_posinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightEffectTranslateAction.PosInfo)
}
void FightEffectTranslateAction::set_posinfo(const void* value, size_t size) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightEffectTranslateAction.PosInfo)
}
::std::string* FightEffectTranslateAction::mutable_posinfo() {
  set_has_posinfo();
  // @@protoc_insertion_point(field_mutable:FightEffectTranslateAction.PosInfo)
  return posinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightEffectTranslateAction::release_posinfo() {
  // @@protoc_insertion_point(field_release:FightEffectTranslateAction.PosInfo)
  clear_has_posinfo();
  return posinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightEffectTranslateAction::set_allocated_posinfo(::std::string* posinfo) {
  if (posinfo != NULL) {
    set_has_posinfo();
  } else {
    clear_has_posinfo();
  }
  posinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo);
  // @@protoc_insertion_point(field_set_allocated:FightEffectTranslateAction.PosInfo)
}

// optional sint32 Status = 10 [default = 0];
bool FightEffectTranslateAction::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightEffectTranslateAction::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
void FightEffectTranslateAction::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightEffectTranslateAction::clear_status() {
  status_ = 0;
  clear_has_status();
}
::google::protobuf::int32 FightEffectTranslateAction::status() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.Status)
  return status_;
}
void FightEffectTranslateAction::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.Status)
}

// optional sint32 SkillId = 11 [default = -1];
bool FightEffectTranslateAction::has_skillid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void FightEffectTranslateAction::set_has_skillid() {
  _has_bits_[0] |= 0x00001000u;
}
void FightEffectTranslateAction::clear_has_skillid() {
  _has_bits_[0] &= ~0x00001000u;
}
void FightEffectTranslateAction::clear_skillid() {
  skillid_ = -1;
  clear_has_skillid();
}
::google::protobuf::int32 FightEffectTranslateAction::skillid() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.SkillId)
  return skillid_;
}
void FightEffectTranslateAction::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.SkillId)
}

// optional sint32 SegementIndex = 12 [default = -1];
bool FightEffectTranslateAction::has_segementindex() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void FightEffectTranslateAction::set_has_segementindex() {
  _has_bits_[0] |= 0x00002000u;
}
void FightEffectTranslateAction::clear_has_segementindex() {
  _has_bits_[0] &= ~0x00002000u;
}
void FightEffectTranslateAction::clear_segementindex() {
  segementindex_ = -1;
  clear_has_segementindex();
}
::google::protobuf::int32 FightEffectTranslateAction::segementindex() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.SegementIndex)
  return segementindex_;
}
void FightEffectTranslateAction::set_segementindex(::google::protobuf::int32 value) {
  set_has_segementindex();
  segementindex_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.SegementIndex)
}

// optional string SpriteName = 13;
bool FightEffectTranslateAction::has_spritename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightEffectTranslateAction::set_has_spritename() {
  _has_bits_[0] |= 0x00000004u;
}
void FightEffectTranslateAction::clear_has_spritename() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightEffectTranslateAction::clear_spritename() {
  spritename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_spritename();
}
const ::std::string& FightEffectTranslateAction::spritename() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.SpriteName)
  return spritename_.GetNoArena();
}
void FightEffectTranslateAction::set_spritename(const ::std::string& value) {
  set_has_spritename();
  spritename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.SpriteName)
}
#if LANG_CXX11
void FightEffectTranslateAction::set_spritename(::std::string&& value) {
  set_has_spritename();
  spritename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightEffectTranslateAction.SpriteName)
}
#endif
void FightEffectTranslateAction::set_spritename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_spritename();
  spritename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightEffectTranslateAction.SpriteName)
}
void FightEffectTranslateAction::set_spritename(const char* value, size_t size) {
  set_has_spritename();
  spritename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightEffectTranslateAction.SpriteName)
}
::std::string* FightEffectTranslateAction::mutable_spritename() {
  set_has_spritename();
  // @@protoc_insertion_point(field_mutable:FightEffectTranslateAction.SpriteName)
  return spritename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FightEffectTranslateAction::release_spritename() {
  // @@protoc_insertion_point(field_release:FightEffectTranslateAction.SpriteName)
  clear_has_spritename();
  return spritename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FightEffectTranslateAction::set_allocated_spritename(::std::string* spritename) {
  if (spritename != NULL) {
    set_has_spritename();
  } else {
    clear_has_spritename();
  }
  spritename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spritename);
  // @@protoc_insertion_point(field_set_allocated:FightEffectTranslateAction.SpriteName)
}

// optional sint32 BulletType = 14 [default = -1];
bool FightEffectTranslateAction::has_bullettype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void FightEffectTranslateAction::set_has_bullettype() {
  _has_bits_[0] |= 0x00004000u;
}
void FightEffectTranslateAction::clear_has_bullettype() {
  _has_bits_[0] &= ~0x00004000u;
}
void FightEffectTranslateAction::clear_bullettype() {
  bullettype_ = -1;
  clear_has_bullettype();
}
::google::protobuf::int32 FightEffectTranslateAction::bullettype() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.BulletType)
  return bullettype_;
}
void FightEffectTranslateAction::set_bullettype(::google::protobuf::int32 value) {
  set_has_bullettype();
  bullettype_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.BulletType)
}

// optional bool IsIrregularityEffect = 15 [default = false];
bool FightEffectTranslateAction::has_isirregularityeffect() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FightEffectTranslateAction::set_has_isirregularityeffect() {
  _has_bits_[0] |= 0x00000010u;
}
void FightEffectTranslateAction::clear_has_isirregularityeffect() {
  _has_bits_[0] &= ~0x00000010u;
}
void FightEffectTranslateAction::clear_isirregularityeffect() {
  isirregularityeffect_ = false;
  clear_has_isirregularityeffect();
}
bool FightEffectTranslateAction::isirregularityeffect() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.IsIrregularityEffect)
  return isirregularityeffect_;
}
void FightEffectTranslateAction::set_isirregularityeffect(bool value) {
  set_has_isirregularityeffect();
  isirregularityeffect_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.IsIrregularityEffect)
}

// optional sint32 TranslateType = 17 [default = 0];
bool FightEffectTranslateAction::has_translatetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FightEffectTranslateAction::set_has_translatetype() {
  _has_bits_[0] |= 0x00000020u;
}
void FightEffectTranslateAction::clear_has_translatetype() {
  _has_bits_[0] &= ~0x00000020u;
}
void FightEffectTranslateAction::clear_translatetype() {
  translatetype_ = 0;
  clear_has_translatetype();
}
::google::protobuf::int32 FightEffectTranslateAction::translatetype() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.TranslateType)
  return translatetype_;
}
void FightEffectTranslateAction::set_translatetype(::google::protobuf::int32 value) {
  set_has_translatetype();
  translatetype_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.TranslateType)
}

// optional float Time = 18 [default = -1];
bool FightEffectTranslateAction::has_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void FightEffectTranslateAction::set_has_time() {
  _has_bits_[0] |= 0x00008000u;
}
void FightEffectTranslateAction::clear_has_time() {
  _has_bits_[0] &= ~0x00008000u;
}
void FightEffectTranslateAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
float FightEffectTranslateAction::time() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.Time)
  return time_;
}
void FightEffectTranslateAction::set_time(float value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.Time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightCollectAction::kStatusFieldNumber;
const int FightCollectAction::kPlayerObjIdFieldNumber;
const int FightCollectAction::kCollectionObjIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightCollectAction::FightCollectAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightCollectAction)
}
FightCollectAction::FightCollectAction(const FightCollectAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&collection_objid_, &from.collection_objid_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_objid_) -
    reinterpret_cast<char*>(&collection_objid_)) + sizeof(player_objid_));
  // @@protoc_insertion_point(copy_constructor:FightCollectAction)
}

void FightCollectAction::SharedCtor() {
  _cached_size_ = 0;
  collection_objid_ = -1;
  status_ = 1;
  player_objid_ = -1;
}

FightCollectAction::~FightCollectAction() {
  // @@protoc_insertion_point(destructor:FightCollectAction)
  SharedDtor();
}

void FightCollectAction::SharedDtor() {
}

void FightCollectAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightCollectAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightCollectAction& FightCollectAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightCollectAction* FightCollectAction::New(::google::protobuf::Arena* arena) const {
  FightCollectAction* n = new FightCollectAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightCollectAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightCollectAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    collection_objid_ = -1;
    status_ = 1;
    player_objid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightCollectAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightCollectAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Status = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Player_ObjId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_player_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &player_objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Collection_ObjId = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_collection_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &collection_objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightCollectAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightCollectAction)
  return false;
#undef DO_
}

void FightCollectAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightCollectAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Status = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  // optional sint32 Player_ObjId = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->player_objid(), output);
  }

  // optional sint32 Collection_ObjId = 3 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->collection_objid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightCollectAction)
}

::google::protobuf::uint8* FightCollectAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightCollectAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Status = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->status(), target);
  }

  // optional sint32 Player_ObjId = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->player_objid(), target);
  }

  // optional sint32 Collection_ObjId = 3 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->collection_objid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightCollectAction)
  return target;
}

size_t FightCollectAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightCollectAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional sint32 Collection_ObjId = 3 [default = -1];
    if (has_collection_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->collection_objid());
    }

    // optional sint32 Status = 1 [default = 1];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // optional sint32 Player_ObjId = 2 [default = -1];
    if (has_player_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->player_objid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightCollectAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightCollectAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightCollectAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightCollectAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightCollectAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightCollectAction)
    MergeFrom(*source);
  }
}

void FightCollectAction::MergeFrom(const FightCollectAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightCollectAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      collection_objid_ = from.collection_objid_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_objid_ = from.player_objid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightCollectAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightCollectAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightCollectAction::CopyFrom(const FightCollectAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightCollectAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightCollectAction::IsInitialized() const {
  return true;
}

void FightCollectAction::Swap(FightCollectAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightCollectAction::InternalSwap(FightCollectAction* other) {
  using std::swap;
  swap(collection_objid_, other->collection_objid_);
  swap(status_, other->status_);
  swap(player_objid_, other->player_objid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightCollectAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightCollectAction

// optional sint32 Status = 1 [default = 1];
bool FightCollectAction::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightCollectAction::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void FightCollectAction::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightCollectAction::clear_status() {
  status_ = 1;
  clear_has_status();
}
::google::protobuf::int32 FightCollectAction::status() const {
  // @@protoc_insertion_point(field_get:FightCollectAction.Status)
  return status_;
}
void FightCollectAction::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:FightCollectAction.Status)
}

// optional sint32 Player_ObjId = 2 [default = -1];
bool FightCollectAction::has_player_objid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightCollectAction::set_has_player_objid() {
  _has_bits_[0] |= 0x00000004u;
}
void FightCollectAction::clear_has_player_objid() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightCollectAction::clear_player_objid() {
  player_objid_ = -1;
  clear_has_player_objid();
}
::google::protobuf::int32 FightCollectAction::player_objid() const {
  // @@protoc_insertion_point(field_get:FightCollectAction.Player_ObjId)
  return player_objid_;
}
void FightCollectAction::set_player_objid(::google::protobuf::int32 value) {
  set_has_player_objid();
  player_objid_ = value;
  // @@protoc_insertion_point(field_set:FightCollectAction.Player_ObjId)
}

// optional sint32 Collection_ObjId = 3 [default = -1];
bool FightCollectAction::has_collection_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightCollectAction::set_has_collection_objid() {
  _has_bits_[0] |= 0x00000001u;
}
void FightCollectAction::clear_has_collection_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightCollectAction::clear_collection_objid() {
  collection_objid_ = -1;
  clear_has_collection_objid();
}
::google::protobuf::int32 FightCollectAction::collection_objid() const {
  // @@protoc_insertion_point(field_get:FightCollectAction.Collection_ObjId)
  return collection_objid_;
}
void FightCollectAction::set_collection_objid(::google::protobuf::int32 value) {
  set_has_collection_objid();
  collection_objid_ = value;
  // @@protoc_insertion_point(field_set:FightCollectAction.Collection_ObjId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightCollectionShowEffectAction::kObjIdFieldNumber;
const int FightCollectionShowEffectAction::kIsShowEffectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightCollectionShowEffectAction::FightCollectionShowEffectAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightCollectionShowEffectAction)
}
FightCollectionShowEffectAction::FightCollectionShowEffectAction(const FightCollectionShowEffectAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&isshoweffect_, &from.isshoweffect_,
    static_cast<size_t>(reinterpret_cast<char*>(&objid_) -
    reinterpret_cast<char*>(&isshoweffect_)) + sizeof(objid_));
  // @@protoc_insertion_point(copy_constructor:FightCollectionShowEffectAction)
}

void FightCollectionShowEffectAction::SharedCtor() {
  _cached_size_ = 0;
  isshoweffect_ = false;
  objid_ = -1;
}

FightCollectionShowEffectAction::~FightCollectionShowEffectAction() {
  // @@protoc_insertion_point(destructor:FightCollectionShowEffectAction)
  SharedDtor();
}

void FightCollectionShowEffectAction::SharedDtor() {
}

void FightCollectionShowEffectAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightCollectionShowEffectAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightCollectionShowEffectAction& FightCollectionShowEffectAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightCollectionShowEffectAction* FightCollectionShowEffectAction::New(::google::protobuf::Arena* arena) const {
  FightCollectionShowEffectAction* n = new FightCollectionShowEffectAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightCollectionShowEffectAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightCollectionShowEffectAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    isshoweffect_ = false;
    objid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightCollectionShowEffectAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightCollectionShowEffectAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ObjId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool IsShowEffect = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_isshoweffect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshoweffect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightCollectionShowEffectAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightCollectionShowEffectAction)
  return false;
#undef DO_
}

void FightCollectionShowEffectAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightCollectionShowEffectAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->objid(), output);
  }

  // optional bool IsShowEffect = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isshoweffect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightCollectionShowEffectAction)
}

::google::protobuf::uint8* FightCollectionShowEffectAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightCollectionShowEffectAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->objid(), target);
  }

  // optional bool IsShowEffect = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isshoweffect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightCollectionShowEffectAction)
  return target;
}

size_t FightCollectionShowEffectAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightCollectionShowEffectAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool IsShowEffect = 2 [default = false];
    if (has_isshoweffect()) {
      total_size += 1 + 1;
    }

    // optional sint32 ObjId = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightCollectionShowEffectAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightCollectionShowEffectAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightCollectionShowEffectAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightCollectionShowEffectAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightCollectionShowEffectAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightCollectionShowEffectAction)
    MergeFrom(*source);
  }
}

void FightCollectionShowEffectAction::MergeFrom(const FightCollectionShowEffectAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightCollectionShowEffectAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      isshoweffect_ = from.isshoweffect_;
    }
    if (cached_has_bits & 0x00000002u) {
      objid_ = from.objid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightCollectionShowEffectAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightCollectionShowEffectAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightCollectionShowEffectAction::CopyFrom(const FightCollectionShowEffectAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightCollectionShowEffectAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightCollectionShowEffectAction::IsInitialized() const {
  return true;
}

void FightCollectionShowEffectAction::Swap(FightCollectionShowEffectAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightCollectionShowEffectAction::InternalSwap(FightCollectionShowEffectAction* other) {
  using std::swap;
  swap(isshoweffect_, other->isshoweffect_);
  swap(objid_, other->objid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightCollectionShowEffectAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightCollectionShowEffectAction

// optional sint32 ObjId = 1 [default = -1];
bool FightCollectionShowEffectAction::has_objid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightCollectionShowEffectAction::set_has_objid() {
  _has_bits_[0] |= 0x00000002u;
}
void FightCollectionShowEffectAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightCollectionShowEffectAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightCollectionShowEffectAction::objid() const {
  // @@protoc_insertion_point(field_get:FightCollectionShowEffectAction.ObjId)
  return objid_;
}
void FightCollectionShowEffectAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightCollectionShowEffectAction.ObjId)
}

// optional bool IsShowEffect = 2 [default = false];
bool FightCollectionShowEffectAction::has_isshoweffect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightCollectionShowEffectAction::set_has_isshoweffect() {
  _has_bits_[0] |= 0x00000001u;
}
void FightCollectionShowEffectAction::clear_has_isshoweffect() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightCollectionShowEffectAction::clear_isshoweffect() {
  isshoweffect_ = false;
  clear_has_isshoweffect();
}
bool FightCollectionShowEffectAction::isshoweffect() const {
  // @@protoc_insertion_point(field_get:FightCollectionShowEffectAction.IsShowEffect)
  return isshoweffect_;
}
void FightCollectionShowEffectAction::set_isshoweffect(bool value) {
  set_has_isshoweffect();
  isshoweffect_ = value;
  // @@protoc_insertion_point(field_set:FightCollectionShowEffectAction.IsShowEffect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightAutoFightAction::kTypeFieldNumber;
const int FightAutoFightAction::kObjIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightAutoFightAction::FightAutoFightAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightAutoFightAction)
}
FightAutoFightAction::FightAutoFightAction(const FightAutoFightAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&objid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(objid_));
  // @@protoc_insertion_point(copy_constructor:FightAutoFightAction)
}

void FightAutoFightAction::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  objid_ = -1;
}

FightAutoFightAction::~FightAutoFightAction() {
  // @@protoc_insertion_point(destructor:FightAutoFightAction)
  SharedDtor();
}

void FightAutoFightAction::SharedDtor() {
}

void FightAutoFightAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightAutoFightAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightAutoFightAction& FightAutoFightAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightAutoFightAction* FightAutoFightAction::New(::google::protobuf::Arena* arena) const {
  FightAutoFightAction* n = new FightAutoFightAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightAutoFightAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightAutoFightAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    type_ = 0;
    objid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightAutoFightAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightAutoFightAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Type = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ObjId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightAutoFightAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightAutoFightAction)
  return false;
#undef DO_
}

void FightAutoFightAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightAutoFightAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->type(), output);
  }

  // optional sint32 ObjId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->objid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightAutoFightAction)
}

::google::protobuf::uint8* FightAutoFightAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightAutoFightAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->type(), target);
  }

  // optional sint32 ObjId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->objid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightAutoFightAction)
  return target;
}

size_t FightAutoFightAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightAutoFightAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 ObjId = 2 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightAutoFightAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightAutoFightAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightAutoFightAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightAutoFightAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightAutoFightAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightAutoFightAction)
    MergeFrom(*source);
  }
}

void FightAutoFightAction::MergeFrom(const FightAutoFightAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightAutoFightAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      objid_ = from.objid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightAutoFightAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightAutoFightAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightAutoFightAction::CopyFrom(const FightAutoFightAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightAutoFightAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightAutoFightAction::IsInitialized() const {
  return true;
}

void FightAutoFightAction::Swap(FightAutoFightAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightAutoFightAction::InternalSwap(FightAutoFightAction* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(objid_, other->objid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightAutoFightAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightAutoFightAction

// optional sint32 Type = 1 [default = 0];
bool FightAutoFightAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightAutoFightAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FightAutoFightAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightAutoFightAction::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 FightAutoFightAction::type() const {
  // @@protoc_insertion_point(field_get:FightAutoFightAction.Type)
  return type_;
}
void FightAutoFightAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightAutoFightAction.Type)
}

// optional sint32 ObjId = 2 [default = -1];
bool FightAutoFightAction::has_objid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightAutoFightAction::set_has_objid() {
  _has_bits_[0] |= 0x00000002u;
}
void FightAutoFightAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightAutoFightAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightAutoFightAction::objid() const {
  // @@protoc_insertion_point(field_get:FightAutoFightAction.ObjId)
  return objid_;
}
void FightAutoFightAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightAutoFightAction.ObjId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightUseItemAction::kTemplateIdFieldNumber;
const int FightUseItemAction::kStatusFieldNumber;
const int FightUseItemAction::kPlayerObjIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightUseItemAction::FightUseItemAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightUseItemAction)
}
FightUseItemAction::FightUseItemAction(const FightUseItemAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_objid_, &from.player_objid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&player_objid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:FightUseItemAction)
}

void FightUseItemAction::SharedCtor() {
  _cached_size_ = 0;
  player_objid_ = -1;
  templateid_ = -1;
  status_ = 1;
}

FightUseItemAction::~FightUseItemAction() {
  // @@protoc_insertion_point(destructor:FightUseItemAction)
  SharedDtor();
}

void FightUseItemAction::SharedDtor() {
}

void FightUseItemAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightUseItemAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightUseItemAction& FightUseItemAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightUseItemAction* FightUseItemAction::New(::google::protobuf::Arena* arena) const {
  FightUseItemAction* n = new FightUseItemAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightUseItemAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightUseItemAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    player_objid_ = -1;
    templateid_ = -1;
    status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightUseItemAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightUseItemAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TemplateId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_templateid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &templateid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Status = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Player_ObjId = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_player_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &player_objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightUseItemAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightUseItemAction)
  return false;
#undef DO_
}

void FightUseItemAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightUseItemAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TemplateId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->templateid(), output);
  }

  // optional sint32 Status = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->status(), output);
  }

  // optional sint32 Player_ObjId = 3 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->player_objid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightUseItemAction)
}

::google::protobuf::uint8* FightUseItemAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightUseItemAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TemplateId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->templateid(), target);
  }

  // optional sint32 Status = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->status(), target);
  }

  // optional sint32 Player_ObjId = 3 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->player_objid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightUseItemAction)
  return target;
}

size_t FightUseItemAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightUseItemAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional sint32 Player_ObjId = 3 [default = -1];
    if (has_player_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->player_objid());
    }

    // optional sint32 TemplateId = 1 [default = -1];
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->templateid());
    }

    // optional sint32 Status = 2 [default = 1];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightUseItemAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightUseItemAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightUseItemAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightUseItemAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightUseItemAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightUseItemAction)
    MergeFrom(*source);
  }
}

void FightUseItemAction::MergeFrom(const FightUseItemAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightUseItemAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      player_objid_ = from.player_objid_;
    }
    if (cached_has_bits & 0x00000002u) {
      templateid_ = from.templateid_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightUseItemAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightUseItemAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightUseItemAction::CopyFrom(const FightUseItemAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightUseItemAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightUseItemAction::IsInitialized() const {
  return true;
}

void FightUseItemAction::Swap(FightUseItemAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightUseItemAction::InternalSwap(FightUseItemAction* other) {
  using std::swap;
  swap(player_objid_, other->player_objid_);
  swap(templateid_, other->templateid_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightUseItemAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightUseItemAction

// optional sint32 TemplateId = 1 [default = -1];
bool FightUseItemAction::has_templateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightUseItemAction::set_has_templateid() {
  _has_bits_[0] |= 0x00000002u;
}
void FightUseItemAction::clear_has_templateid() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightUseItemAction::clear_templateid() {
  templateid_ = -1;
  clear_has_templateid();
}
::google::protobuf::int32 FightUseItemAction::templateid() const {
  // @@protoc_insertion_point(field_get:FightUseItemAction.TemplateId)
  return templateid_;
}
void FightUseItemAction::set_templateid(::google::protobuf::int32 value) {
  set_has_templateid();
  templateid_ = value;
  // @@protoc_insertion_point(field_set:FightUseItemAction.TemplateId)
}

// optional sint32 Status = 2 [default = 1];
bool FightUseItemAction::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightUseItemAction::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void FightUseItemAction::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightUseItemAction::clear_status() {
  status_ = 1;
  clear_has_status();
}
::google::protobuf::int32 FightUseItemAction::status() const {
  // @@protoc_insertion_point(field_get:FightUseItemAction.Status)
  return status_;
}
void FightUseItemAction::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:FightUseItemAction.Status)
}

// optional sint32 Player_ObjId = 3 [default = -1];
bool FightUseItemAction::has_player_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightUseItemAction::set_has_player_objid() {
  _has_bits_[0] |= 0x00000001u;
}
void FightUseItemAction::clear_has_player_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightUseItemAction::clear_player_objid() {
  player_objid_ = -1;
  clear_has_player_objid();
}
::google::protobuf::int32 FightUseItemAction::player_objid() const {
  // @@protoc_insertion_point(field_get:FightUseItemAction.Player_ObjId)
  return player_objid_;
}
void FightUseItemAction::set_player_objid(::google::protobuf::int32 value) {
  set_has_player_objid();
  player_objid_ = value;
  // @@protoc_insertion_point(field_set:FightUseItemAction.Player_ObjId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightStormKillEffectAction::kObjIdFieldNumber;
const int FightStormKillEffectAction::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightStormKillEffectAction::FightStormKillEffectAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightStormKillEffectAction)
}
FightStormKillEffectAction::FightStormKillEffectAction(const FightStormKillEffectAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&objid_, &from.objid_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&objid_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:FightStormKillEffectAction)
}

void FightStormKillEffectAction::SharedCtor() {
  _cached_size_ = 0;
  objid_ = -1;
  num_ = -1;
}

FightStormKillEffectAction::~FightStormKillEffectAction() {
  // @@protoc_insertion_point(destructor:FightStormKillEffectAction)
  SharedDtor();
}

void FightStormKillEffectAction::SharedDtor() {
}

void FightStormKillEffectAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightStormKillEffectAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightStormKillEffectAction& FightStormKillEffectAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightStormKillEffectAction* FightStormKillEffectAction::New(::google::protobuf::Arena* arena) const {
  FightStormKillEffectAction* n = new FightStormKillEffectAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightStormKillEffectAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightStormKillEffectAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    objid_ = -1;
    num_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightStormKillEffectAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightStormKillEffectAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ObjId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Num = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightStormKillEffectAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightStormKillEffectAction)
  return false;
#undef DO_
}

void FightStormKillEffectAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightStormKillEffectAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->objid(), output);
  }

  // optional sint32 Num = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightStormKillEffectAction)
}

::google::protobuf::uint8* FightStormKillEffectAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightStormKillEffectAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ObjId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->objid(), target);
  }

  // optional sint32 Num = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightStormKillEffectAction)
  return target;
}

size_t FightStormKillEffectAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightStormKillEffectAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 ObjId = 1 [default = -1];
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->objid());
    }

    // optional sint32 Num = 2 [default = -1];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightStormKillEffectAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightStormKillEffectAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightStormKillEffectAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightStormKillEffectAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightStormKillEffectAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightStormKillEffectAction)
    MergeFrom(*source);
  }
}

void FightStormKillEffectAction::MergeFrom(const FightStormKillEffectAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightStormKillEffectAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      objid_ = from.objid_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightStormKillEffectAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightStormKillEffectAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightStormKillEffectAction::CopyFrom(const FightStormKillEffectAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightStormKillEffectAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightStormKillEffectAction::IsInitialized() const {
  return true;
}

void FightStormKillEffectAction::Swap(FightStormKillEffectAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightStormKillEffectAction::InternalSwap(FightStormKillEffectAction* other) {
  using std::swap;
  swap(objid_, other->objid_);
  swap(num_, other->num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightStormKillEffectAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightStormKillEffectAction

// optional sint32 ObjId = 1 [default = -1];
bool FightStormKillEffectAction::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightStormKillEffectAction::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
void FightStormKillEffectAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightStormKillEffectAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
::google::protobuf::int32 FightStormKillEffectAction::objid() const {
  // @@protoc_insertion_point(field_get:FightStormKillEffectAction.ObjId)
  return objid_;
}
void FightStormKillEffectAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightStormKillEffectAction.ObjId)
}

// optional sint32 Num = 2 [default = -1];
bool FightStormKillEffectAction::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightStormKillEffectAction::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
void FightStormKillEffectAction::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightStormKillEffectAction::clear_num() {
  num_ = -1;
  clear_has_num();
}
::google::protobuf::int32 FightStormKillEffectAction::num() const {
  // @@protoc_insertion_point(field_get:FightStormKillEffectAction.Num)
  return num_;
}
void FightStormKillEffectAction::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:FightStormKillEffectAction.Num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightOneVSOneStartAction::kTypeFieldNumber;
const int FightOneVSOneStartAction::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightOneVSOneStartAction::FightOneVSOneStartAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightOneVSOneStartAction)
}
FightOneVSOneStartAction::FightOneVSOneStartAction(const FightOneVSOneStartAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&type_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:FightOneVSOneStartAction)
}

void FightOneVSOneStartAction::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  time_ = -1;
}

FightOneVSOneStartAction::~FightOneVSOneStartAction() {
  // @@protoc_insertion_point(destructor:FightOneVSOneStartAction)
  SharedDtor();
}

void FightOneVSOneStartAction::SharedDtor() {
}

void FightOneVSOneStartAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightOneVSOneStartAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightOneVSOneStartAction& FightOneVSOneStartAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightOneVSOneStartAction* FightOneVSOneStartAction::New(::google::protobuf::Arena* arena) const {
  FightOneVSOneStartAction* n = new FightOneVSOneStartAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightOneVSOneStartAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightOneVSOneStartAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    type_ = -1;
    time_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightOneVSOneStartAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightOneVSOneStartAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Type = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Time = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightOneVSOneStartAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightOneVSOneStartAction)
  return false;
#undef DO_
}

void FightOneVSOneStartAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightOneVSOneStartAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->type(), output);
  }

  // optional sint32 Time = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightOneVSOneStartAction)
}

::google::protobuf::uint8* FightOneVSOneStartAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightOneVSOneStartAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->type(), target);
  }

  // optional sint32 Time = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightOneVSOneStartAction)
  return target;
}

size_t FightOneVSOneStartAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightOneVSOneStartAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Type = 1 [default = -1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 Time = 2 [default = -1];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightOneVSOneStartAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightOneVSOneStartAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightOneVSOneStartAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightOneVSOneStartAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightOneVSOneStartAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightOneVSOneStartAction)
    MergeFrom(*source);
  }
}

void FightOneVSOneStartAction::MergeFrom(const FightOneVSOneStartAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightOneVSOneStartAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightOneVSOneStartAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightOneVSOneStartAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightOneVSOneStartAction::CopyFrom(const FightOneVSOneStartAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightOneVSOneStartAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightOneVSOneStartAction::IsInitialized() const {
  return true;
}

void FightOneVSOneStartAction::Swap(FightOneVSOneStartAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightOneVSOneStartAction::InternalSwap(FightOneVSOneStartAction* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightOneVSOneStartAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightOneVSOneStartAction

// optional sint32 Type = 1 [default = -1];
bool FightOneVSOneStartAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightOneVSOneStartAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FightOneVSOneStartAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightOneVSOneStartAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
::google::protobuf::int32 FightOneVSOneStartAction::type() const {
  // @@protoc_insertion_point(field_get:FightOneVSOneStartAction.Type)
  return type_;
}
void FightOneVSOneStartAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightOneVSOneStartAction.Type)
}

// optional sint32 Time = 2 [default = -1];
bool FightOneVSOneStartAction::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightOneVSOneStartAction::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void FightOneVSOneStartAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightOneVSOneStartAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
::google::protobuf::int32 FightOneVSOneStartAction::time() const {
  // @@protoc_insertion_point(field_get:FightOneVSOneStartAction.Time)
  return time_;
}
void FightOneVSOneStartAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightOneVSOneStartAction.Time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightOneVSOneResultAction::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightOneVSOneResultAction::FightOneVSOneResultAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightOneVSOneResultAction)
}
FightOneVSOneResultAction::FightOneVSOneResultAction(const FightOneVSOneResultAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:FightOneVSOneResultAction)
}

void FightOneVSOneResultAction::SharedCtor() {
  _cached_size_ = 0;
  result_ = -1;
}

FightOneVSOneResultAction::~FightOneVSOneResultAction() {
  // @@protoc_insertion_point(destructor:FightOneVSOneResultAction)
  SharedDtor();
}

void FightOneVSOneResultAction::SharedDtor() {
}

void FightOneVSOneResultAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightOneVSOneResultAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightOneVSOneResultAction& FightOneVSOneResultAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightOneVSOneResultAction* FightOneVSOneResultAction::New(::google::protobuf::Arena* arena) const {
  FightOneVSOneResultAction* n = new FightOneVSOneResultAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightOneVSOneResultAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightOneVSOneResultAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightOneVSOneResultAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightOneVSOneResultAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightOneVSOneResultAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightOneVSOneResultAction)
  return false;
#undef DO_
}

void FightOneVSOneResultAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightOneVSOneResultAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightOneVSOneResultAction)
}

::google::protobuf::uint8* FightOneVSOneResultAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightOneVSOneResultAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightOneVSOneResultAction)
  return target;
}

size_t FightOneVSOneResultAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightOneVSOneResultAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 1 [default = -1];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightOneVSOneResultAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightOneVSOneResultAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightOneVSOneResultAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightOneVSOneResultAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightOneVSOneResultAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightOneVSOneResultAction)
    MergeFrom(*source);
  }
}

void FightOneVSOneResultAction::MergeFrom(const FightOneVSOneResultAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightOneVSOneResultAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void FightOneVSOneResultAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightOneVSOneResultAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightOneVSOneResultAction::CopyFrom(const FightOneVSOneResultAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightOneVSOneResultAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightOneVSOneResultAction::IsInitialized() const {
  return true;
}

void FightOneVSOneResultAction::Swap(FightOneVSOneResultAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightOneVSOneResultAction::InternalSwap(FightOneVSOneResultAction* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightOneVSOneResultAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightOneVSOneResultAction

// optional sint32 Result = 1 [default = -1];
bool FightOneVSOneResultAction::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightOneVSOneResultAction::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void FightOneVSOneResultAction::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightOneVSOneResultAction::clear_result() {
  result_ = -1;
  clear_has_result();
}
::google::protobuf::int32 FightOneVSOneResultAction::result() const {
  // @@protoc_insertion_point(field_get:FightOneVSOneResultAction.Result)
  return result_;
}
void FightOneVSOneResultAction::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FightOneVSOneResultAction.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightSightAction::kActionArrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightSightAction::FightSightAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightSightAction)
}
FightSightAction::FightSightAction(const FightSightAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      actionarr_(from.actionarr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FightSightAction)
}

void FightSightAction::SharedCtor() {
  _cached_size_ = 0;
}

FightSightAction::~FightSightAction() {
  // @@protoc_insertion_point(destructor:FightSightAction)
  SharedDtor();
}

void FightSightAction::SharedDtor() {
}

void FightSightAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightSightAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightSightAction& FightSightAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightSightAction* FightSightAction::New(::google::protobuf::Arena* arena) const {
  FightSightAction* n = new FightSightAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightSightAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightSightAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actionarr_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightSightAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightSightAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes ActionArr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_actionarr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightSightAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightSightAction)
  return false;
#undef DO_
}

void FightSightAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightSightAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes ActionArr = 2;
  for (int i = 0, n = this->actionarr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->actionarr(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightSightAction)
}

::google::protobuf::uint8* FightSightAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightSightAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes ActionArr = 2;
  for (int i = 0, n = this->actionarr_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->actionarr(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightSightAction)
  return target;
}

size_t FightSightAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightSightAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated bytes ActionArr = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->actionarr_size());
  for (int i = 0, n = this->actionarr_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->actionarr(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightSightAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightSightAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightSightAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightSightAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightSightAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightSightAction)
    MergeFrom(*source);
  }
}

void FightSightAction::MergeFrom(const FightSightAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightSightAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actionarr_.MergeFrom(from.actionarr_);
}

void FightSightAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightSightAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightSightAction::CopyFrom(const FightSightAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightSightAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightSightAction::IsInitialized() const {
  return true;
}

void FightSightAction::Swap(FightSightAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightSightAction::InternalSwap(FightSightAction* other) {
  using std::swap;
  actionarr_.InternalSwap(&other->actionarr_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightSightAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightSightAction

// repeated bytes ActionArr = 2;
int FightSightAction::actionarr_size() const {
  return actionarr_.size();
}
void FightSightAction::clear_actionarr() {
  actionarr_.Clear();
}
const ::std::string& FightSightAction::actionarr(int index) const {
  // @@protoc_insertion_point(field_get:FightSightAction.ActionArr)
  return actionarr_.Get(index);
}
::std::string* FightSightAction::mutable_actionarr(int index) {
  // @@protoc_insertion_point(field_mutable:FightSightAction.ActionArr)
  return actionarr_.Mutable(index);
}
void FightSightAction::set_actionarr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:FightSightAction.ActionArr)
  actionarr_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void FightSightAction::set_actionarr(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:FightSightAction.ActionArr)
  actionarr_.Mutable(index)->assign(std::move(value));
}
#endif
void FightSightAction::set_actionarr(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actionarr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FightSightAction.ActionArr)
}
void FightSightAction::set_actionarr(int index, const void* value, size_t size) {
  actionarr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FightSightAction.ActionArr)
}
::std::string* FightSightAction::add_actionarr() {
  // @@protoc_insertion_point(field_add_mutable:FightSightAction.ActionArr)
  return actionarr_.Add();
}
void FightSightAction::add_actionarr(const ::std::string& value) {
  actionarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FightSightAction.ActionArr)
}
#if LANG_CXX11
void FightSightAction::add_actionarr(::std::string&& value) {
  actionarr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FightSightAction.ActionArr)
}
#endif
void FightSightAction::add_actionarr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actionarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FightSightAction.ActionArr)
}
void FightSightAction::add_actionarr(const void* value, size_t size) {
  actionarr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FightSightAction.ActionArr)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
FightSightAction::actionarr() const {
  // @@protoc_insertion_point(field_list:FightSightAction.ActionArr)
  return actionarr_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
FightSightAction::mutable_actionarr() {
  // @@protoc_insertion_point(field_mutable_list:FightSightAction.ActionArr)
  return &actionarr_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightEventTriggerAction::kEventIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightEventTriggerAction::FightEventTriggerAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightEventTriggerAction)
}
FightEventTriggerAction::FightEventTriggerAction(const FightEventTriggerAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eventid_ = from.eventid_;
  // @@protoc_insertion_point(copy_constructor:FightEventTriggerAction)
}

void FightEventTriggerAction::SharedCtor() {
  _cached_size_ = 0;
  eventid_ = -1;
}

FightEventTriggerAction::~FightEventTriggerAction() {
  // @@protoc_insertion_point(destructor:FightEventTriggerAction)
  SharedDtor();
}

void FightEventTriggerAction::SharedDtor() {
}

void FightEventTriggerAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightEventTriggerAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightEventTriggerAction& FightEventTriggerAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightEventTriggerAction* FightEventTriggerAction::New(::google::protobuf::Arena* arena) const {
  FightEventTriggerAction* n = new FightEventTriggerAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightEventTriggerAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightEventTriggerAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eventid_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightEventTriggerAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightEventTriggerAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 EventId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_eventid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &eventid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightEventTriggerAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightEventTriggerAction)
  return false;
#undef DO_
}

void FightEventTriggerAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightEventTriggerAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 EventId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->eventid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightEventTriggerAction)
}

::google::protobuf::uint8* FightEventTriggerAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightEventTriggerAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 EventId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->eventid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightEventTriggerAction)
  return target;
}

size_t FightEventTriggerAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightEventTriggerAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 EventId = 1 [default = -1];
  if (has_eventid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->eventid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightEventTriggerAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightEventTriggerAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightEventTriggerAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightEventTriggerAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightEventTriggerAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightEventTriggerAction)
    MergeFrom(*source);
  }
}

void FightEventTriggerAction::MergeFrom(const FightEventTriggerAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightEventTriggerAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eventid()) {
    set_eventid(from.eventid());
  }
}

void FightEventTriggerAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightEventTriggerAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightEventTriggerAction::CopyFrom(const FightEventTriggerAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightEventTriggerAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightEventTriggerAction::IsInitialized() const {
  return true;
}

void FightEventTriggerAction::Swap(FightEventTriggerAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightEventTriggerAction::InternalSwap(FightEventTriggerAction* other) {
  using std::swap;
  swap(eventid_, other->eventid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightEventTriggerAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightEventTriggerAction

// optional sint32 EventId = 1 [default = -1];
bool FightEventTriggerAction::has_eventid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightEventTriggerAction::set_has_eventid() {
  _has_bits_[0] |= 0x00000001u;
}
void FightEventTriggerAction::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightEventTriggerAction::clear_eventid() {
  eventid_ = -1;
  clear_has_eventid();
}
::google::protobuf::int32 FightEventTriggerAction::eventid() const {
  // @@protoc_insertion_point(field_get:FightEventTriggerAction.EventId)
  return eventid_;
}
void FightEventTriggerAction::set_eventid(::google::protobuf::int32 value) {
  set_has_eventid();
  eventid_ = value;
  // @@protoc_insertion_point(field_set:FightEventTriggerAction.EventId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightQuitAction::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightQuitAction::FightQuitAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightQuitAction)
}
FightQuitAction::FightQuitAction(const FightQuitAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:FightQuitAction)
}

void FightQuitAction::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
}

FightQuitAction::~FightQuitAction() {
  // @@protoc_insertion_point(destructor:FightQuitAction)
  SharedDtor();
}

void FightQuitAction::SharedDtor() {
}

void FightQuitAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightQuitAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightQuitAction& FightQuitAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightQuitAction* FightQuitAction::New(::google::protobuf::Arena* arena) const {
  FightQuitAction* n = new FightQuitAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightQuitAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightQuitAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightQuitAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightQuitAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Type = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightQuitAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightQuitAction)
  return false;
#undef DO_
}

void FightQuitAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightQuitAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightQuitAction)
}

::google::protobuf::uint8* FightQuitAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightQuitAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightQuitAction)
  return target;
}

size_t FightQuitAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightQuitAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Type = 1 [default = 0];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightQuitAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightQuitAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightQuitAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightQuitAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightQuitAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightQuitAction)
    MergeFrom(*source);
  }
}

void FightQuitAction::MergeFrom(const FightQuitAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightQuitAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    set_type(from.type());
  }
}

void FightQuitAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightQuitAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightQuitAction::CopyFrom(const FightQuitAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightQuitAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightQuitAction::IsInitialized() const {
  return true;
}

void FightQuitAction::Swap(FightQuitAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightQuitAction::InternalSwap(FightQuitAction* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightQuitAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightQuitAction

// optional sint32 Type = 1 [default = 0];
bool FightQuitAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightQuitAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FightQuitAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightQuitAction::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 FightQuitAction::type() const {
  // @@protoc_insertion_point(field_get:FightQuitAction.Type)
  return type_;
}
void FightQuitAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightQuitAction.Type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightProductAction::kStatusFieldNumber;
const int FightProductAction::kLifeSkillIdFieldNumber;
const int FightProductAction::kPlayerObjIdFieldNumber;
const int FightProductAction::kProductionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightProductAction::FightProductAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightProductAction)
}
FightProductAction::FightProductAction(const FightProductAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&productionid_) -
    reinterpret_cast<char*>(&status_)) + sizeof(productionid_));
  // @@protoc_insertion_point(copy_constructor:FightProductAction)
}

void FightProductAction::SharedCtor() {
  _cached_size_ = 0;
  status_ = -1;
  lifeskillid_ = -1;
  player_objid_ = -1;
  productionid_ = -1;
}

FightProductAction::~FightProductAction() {
  // @@protoc_insertion_point(destructor:FightProductAction)
  SharedDtor();
}

void FightProductAction::SharedDtor() {
}

void FightProductAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightProductAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightProductAction& FightProductAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightProductAction* FightProductAction::New(::google::protobuf::Arena* arena) const {
  FightProductAction* n = new FightProductAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightProductAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightProductAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    status_ = -1;
    lifeskillid_ = -1;
    player_objid_ = -1;
    productionid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightProductAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightProductAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Status = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 LifeSkillId = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_lifeskillid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &lifeskillid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Player_ObjId = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_player_objid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &player_objid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ProductionId = 9 [default = -1];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_productionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &productionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightProductAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightProductAction)
  return false;
#undef DO_
}

void FightProductAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightProductAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Status = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->status(), output);
  }

  // optional sint32 LifeSkillId = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->lifeskillid(), output);
  }

  // optional sint32 Player_ObjId = 5 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->player_objid(), output);
  }

  // optional sint32 ProductionId = 9 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->productionid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightProductAction)
}

::google::protobuf::uint8* FightProductAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightProductAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Status = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->status(), target);
  }

  // optional sint32 LifeSkillId = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->lifeskillid(), target);
  }

  // optional sint32 Player_ObjId = 5 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->player_objid(), target);
  }

  // optional sint32 ProductionId = 9 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->productionid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightProductAction)
  return target;
}

size_t FightProductAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightProductAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional sint32 Status = 1 [default = -1];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // optional sint32 LifeSkillId = 3 [default = -1];
    if (has_lifeskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->lifeskillid());
    }

    // optional sint32 Player_ObjId = 5 [default = -1];
    if (has_player_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->player_objid());
    }

    // optional sint32 ProductionId = 9 [default = -1];
    if (has_productionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->productionid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightProductAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightProductAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightProductAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightProductAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightProductAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightProductAction)
    MergeFrom(*source);
  }
}

void FightProductAction::MergeFrom(const FightProductAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightProductAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000002u) {
      lifeskillid_ = from.lifeskillid_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_objid_ = from.player_objid_;
    }
    if (cached_has_bits & 0x00000008u) {
      productionid_ = from.productionid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightProductAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightProductAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightProductAction::CopyFrom(const FightProductAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightProductAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightProductAction::IsInitialized() const {
  return true;
}

void FightProductAction::Swap(FightProductAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightProductAction::InternalSwap(FightProductAction* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(lifeskillid_, other->lifeskillid_);
  swap(player_objid_, other->player_objid_);
  swap(productionid_, other->productionid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightProductAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightProductAction

// optional sint32 Status = 1 [default = -1];
bool FightProductAction::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightProductAction::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void FightProductAction::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightProductAction::clear_status() {
  status_ = -1;
  clear_has_status();
}
::google::protobuf::int32 FightProductAction::status() const {
  // @@protoc_insertion_point(field_get:FightProductAction.Status)
  return status_;
}
void FightProductAction::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:FightProductAction.Status)
}

// optional sint32 LifeSkillId = 3 [default = -1];
bool FightProductAction::has_lifeskillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightProductAction::set_has_lifeskillid() {
  _has_bits_[0] |= 0x00000002u;
}
void FightProductAction::clear_has_lifeskillid() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightProductAction::clear_lifeskillid() {
  lifeskillid_ = -1;
  clear_has_lifeskillid();
}
::google::protobuf::int32 FightProductAction::lifeskillid() const {
  // @@protoc_insertion_point(field_get:FightProductAction.LifeSkillId)
  return lifeskillid_;
}
void FightProductAction::set_lifeskillid(::google::protobuf::int32 value) {
  set_has_lifeskillid();
  lifeskillid_ = value;
  // @@protoc_insertion_point(field_set:FightProductAction.LifeSkillId)
}

// optional sint32 Player_ObjId = 5 [default = -1];
bool FightProductAction::has_player_objid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FightProductAction::set_has_player_objid() {
  _has_bits_[0] |= 0x00000004u;
}
void FightProductAction::clear_has_player_objid() {
  _has_bits_[0] &= ~0x00000004u;
}
void FightProductAction::clear_player_objid() {
  player_objid_ = -1;
  clear_has_player_objid();
}
::google::protobuf::int32 FightProductAction::player_objid() const {
  // @@protoc_insertion_point(field_get:FightProductAction.Player_ObjId)
  return player_objid_;
}
void FightProductAction::set_player_objid(::google::protobuf::int32 value) {
  set_has_player_objid();
  player_objid_ = value;
  // @@protoc_insertion_point(field_set:FightProductAction.Player_ObjId)
}

// optional sint32 ProductionId = 9 [default = -1];
bool FightProductAction::has_productionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FightProductAction::set_has_productionid() {
  _has_bits_[0] |= 0x00000008u;
}
void FightProductAction::clear_has_productionid() {
  _has_bits_[0] &= ~0x00000008u;
}
void FightProductAction::clear_productionid() {
  productionid_ = -1;
  clear_has_productionid();
}
::google::protobuf::int32 FightProductAction::productionid() const {
  // @@protoc_insertion_point(field_get:FightProductAction.ProductionId)
  return productionid_;
}
void FightProductAction::set_productionid(::google::protobuf::int32 value) {
  set_has_productionid();
  productionid_ = value;
  // @@protoc_insertion_point(field_set:FightProductAction.ProductionId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FightStartEndAction::kTypeFieldNumber;
const int FightStartEndAction::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FightStartEndAction::FightStartEndAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_FightRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightStartEndAction)
}
FightStartEndAction::FightStartEndAction(const FightStartEndAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&type_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:FightStartEndAction)
}

void FightStartEndAction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&type_)) + sizeof(time_));
}

FightStartEndAction::~FightStartEndAction() {
  // @@protoc_insertion_point(destructor:FightStartEndAction)
  SharedDtor();
}

void FightStartEndAction::SharedDtor() {
}

void FightStartEndAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightStartEndAction::descriptor() {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FightStartEndAction& FightStartEndAction::default_instance() {
  protobuf_FightRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FightStartEndAction* FightStartEndAction::New(::google::protobuf::Arena* arena) const {
  FightStartEndAction* n = new FightStartEndAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FightStartEndAction::Clear() {
// @@protoc_insertion_point(message_clear_start:FightStartEndAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&type_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FightStartEndAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightStartEndAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Type = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Time = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightStartEndAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightStartEndAction)
  return false;
#undef DO_
}

void FightStartEndAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightStartEndAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->type(), output);
  }

  // optional sint32 Time = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightStartEndAction)
}

::google::protobuf::uint8* FightStartEndAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FightStartEndAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Type = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->type(), target);
  }

  // optional sint32 Time = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightStartEndAction)
  return target;
}

size_t FightStartEndAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FightStartEndAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->type());
    }

    // optional sint32 Time = 2 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightStartEndAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FightStartEndAction)
  GOOGLE_DCHECK_NE(&from, this);
  const FightStartEndAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FightStartEndAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FightStartEndAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FightStartEndAction)
    MergeFrom(*source);
  }
}

void FightStartEndAction::MergeFrom(const FightStartEndAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FightStartEndAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FightStartEndAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FightStartEndAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightStartEndAction::CopyFrom(const FightStartEndAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FightStartEndAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightStartEndAction::IsInitialized() const {
  return true;
}

void FightStartEndAction::Swap(FightStartEndAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FightStartEndAction::InternalSwap(FightStartEndAction* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FightStartEndAction::GetMetadata() const {
  protobuf_FightRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FightRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FightStartEndAction

// optional sint32 Type = 1 [default = 0];
bool FightStartEndAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FightStartEndAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FightStartEndAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FightStartEndAction::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 FightStartEndAction::type() const {
  // @@protoc_insertion_point(field_get:FightStartEndAction.Type)
  return type_;
}
void FightStartEndAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightStartEndAction.Type)
}

// optional sint32 Time = 2 [default = 0];
bool FightStartEndAction::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FightStartEndAction::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void FightStartEndAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void FightStartEndAction::clear_time() {
  time_ = 0;
  clear_has_time();
}
::google::protobuf::int32 FightStartEndAction::time() const {
  // @@protoc_insertion_point(field_get:FightStartEndAction.Time)
  return time_;
}
void FightStartEndAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightStartEndAction.Time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
