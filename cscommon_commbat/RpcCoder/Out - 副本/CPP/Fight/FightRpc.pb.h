// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FightRpc.proto

#ifndef PROTOBUF_FightRpc_2eproto__INCLUDED
#define PROTOBUF_FightRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)
class FightAutoFightAction;
class FightAutoFightActionDefaultTypeInternal;
extern FightAutoFightActionDefaultTypeInternal _FightAutoFightAction_default_instance_;
class FightBuffAction;
class FightBuffActionDefaultTypeInternal;
extern FightBuffActionDefaultTypeInternal _FightBuffAction_default_instance_;
class FightCharDeadAction;
class FightCharDeadActionDefaultTypeInternal;
extern FightCharDeadActionDefaultTypeInternal _FightCharDeadAction_default_instance_;
class FightCharHitAction;
class FightCharHitActionDefaultTypeInternal;
extern FightCharHitActionDefaultTypeInternal _FightCharHitAction_default_instance_;
class FightCharReviveAction;
class FightCharReviveActionDefaultTypeInternal;
extern FightCharReviveActionDefaultTypeInternal _FightCharReviveAction_default_instance_;
class FightCityAction;
class FightCityActionDefaultTypeInternal;
extern FightCityActionDefaultTypeInternal _FightCityAction_default_instance_;
class FightCollectAction;
class FightCollectActionDefaultTypeInternal;
extern FightCollectActionDefaultTypeInternal _FightCollectAction_default_instance_;
class FightCollectionShowEffectAction;
class FightCollectionShowEffectActionDefaultTypeInternal;
extern FightCollectionShowEffectActionDefaultTypeInternal _FightCollectionShowEffectAction_default_instance_;
class FightComboSkillAction;
class FightComboSkillActionDefaultTypeInternal;
extern FightComboSkillActionDefaultTypeInternal _FightComboSkillAction_default_instance_;
class FightCreateAction;
class FightCreateActionDefaultTypeInternal;
extern FightCreateActionDefaultTypeInternal _FightCreateAction_default_instance_;
class FightDodgeAction;
class FightDodgeActionDefaultTypeInternal;
extern FightDodgeActionDefaultTypeInternal _FightDodgeAction_default_instance_;
class FightEffectTranslateAction;
class FightEffectTranslateActionDefaultTypeInternal;
extern FightEffectTranslateActionDefaultTypeInternal _FightEffectTranslateAction_default_instance_;
class FightEndSkillAction;
class FightEndSkillActionDefaultTypeInternal;
extern FightEndSkillActionDefaultTypeInternal _FightEndSkillAction_default_instance_;
class FightEscapeResultAction;
class FightEscapeResultActionDefaultTypeInternal;
extern FightEscapeResultActionDefaultTypeInternal _FightEscapeResultAction_default_instance_;
class FightEscapeStartAction;
class FightEscapeStartActionDefaultTypeInternal;
extern FightEscapeStartActionDefaultTypeInternal _FightEscapeStartAction_default_instance_;
class FightEventTriggerAction;
class FightEventTriggerActionDefaultTypeInternal;
extern FightEventTriggerActionDefaultTypeInternal _FightEventTriggerAction_default_instance_;
class FightFinishLevelAction;
class FightFinishLevelActionDefaultTypeInternal;
extern FightFinishLevelActionDefaultTypeInternal _FightFinishLevelAction_default_instance_;
class FightGMAddHpAction;
class FightGMAddHpActionDefaultTypeInternal;
extern FightGMAddHpActionDefaultTypeInternal _FightGMAddHpAction_default_instance_;
class FightGuildDBeginAction;
class FightGuildDBeginActionDefaultTypeInternal;
extern FightGuildDBeginActionDefaultTypeInternal _FightGuildDBeginAction_default_instance_;
class FightGuildDEndAction;
class FightGuildDEndActionDefaultTypeInternal;
extern FightGuildDEndActionDefaultTypeInternal _FightGuildDEndAction_default_instance_;
class FightGuildFightBeginAction;
class FightGuildFightBeginActionDefaultTypeInternal;
extern FightGuildFightBeginActionDefaultTypeInternal _FightGuildFightBeginAction_default_instance_;
class FightGuildFightEndAction;
class FightGuildFightEndActionDefaultTypeInternal;
extern FightGuildFightEndActionDefaultTypeInternal _FightGuildFightEndAction_default_instance_;
class FightGuildFightHpAction;
class FightGuildFightHpActionDefaultTypeInternal;
extern FightGuildFightHpActionDefaultTypeInternal _FightGuildFightHpAction_default_instance_;
class FightHeroFightInfoAction;
class FightHeroFightInfoActionDefaultTypeInternal;
extern FightHeroFightInfoActionDefaultTypeInternal _FightHeroFightInfoAction_default_instance_;
class FightHitTargetInfo;
class FightHitTargetInfoDefaultTypeInternal;
extern FightHitTargetInfoDefaultTypeInternal _FightHitTargetInfo_default_instance_;
class FightHurtAction;
class FightHurtActionDefaultTypeInternal;
extern FightHurtActionDefaultTypeInternal _FightHurtAction_default_instance_;
class FightKillInfo;
class FightKillInfoDefaultTypeInternal;
extern FightKillInfoDefaultTypeInternal _FightKillInfo_default_instance_;
class FightOfflineAction;
class FightOfflineActionDefaultTypeInternal;
extern FightOfflineActionDefaultTypeInternal _FightOfflineAction_default_instance_;
class FightOneVSOneResultAction;
class FightOneVSOneResultActionDefaultTypeInternal;
extern FightOneVSOneResultActionDefaultTypeInternal _FightOneVSOneResultAction_default_instance_;
class FightOneVSOneStartAction;
class FightOneVSOneStartActionDefaultTypeInternal;
extern FightOneVSOneStartActionDefaultTypeInternal _FightOneVSOneStartAction_default_instance_;
class FightPrizeInfo;
class FightPrizeInfoDefaultTypeInternal;
extern FightPrizeInfoDefaultTypeInternal _FightPrizeInfo_default_instance_;
class FightProductAction;
class FightProductActionDefaultTypeInternal;
extern FightProductActionDefaultTypeInternal _FightProductAction_default_instance_;
class FightQuickFinishAction;
class FightQuickFinishActionDefaultTypeInternal;
extern FightQuickFinishActionDefaultTypeInternal _FightQuickFinishAction_default_instance_;
class FightQuitAction;
class FightQuitActionDefaultTypeInternal;
extern FightQuitActionDefaultTypeInternal _FightQuitAction_default_instance_;
class FightRemoveObjAction;
class FightRemoveObjActionDefaultTypeInternal;
extern FightRemoveObjActionDefaultTypeInternal _FightRemoveObjAction_default_instance_;
class FightRpcActionNotify;
class FightRpcActionNotifyDefaultTypeInternal;
extern FightRpcActionNotifyDefaultTypeInternal _FightRpcActionNotify_default_instance_;
class FightRpcEnterAsk;
class FightRpcEnterAskDefaultTypeInternal;
extern FightRpcEnterAskDefaultTypeInternal _FightRpcEnterAsk_default_instance_;
class FightRpcEnterReply;
class FightRpcEnterReplyDefaultTypeInternal;
extern FightRpcEnterReplyDefaultTypeInternal _FightRpcEnterReply_default_instance_;
class FightRpcReadyAsk;
class FightRpcReadyAskDefaultTypeInternal;
extern FightRpcReadyAskDefaultTypeInternal _FightRpcReadyAsk_default_instance_;
class FightRpcReadyReply;
class FightRpcReadyReplyDefaultTypeInternal;
extern FightRpcReadyReplyDefaultTypeInternal _FightRpcReadyReply_default_instance_;
class FightRpcResultNotify;
class FightRpcResultNotifyDefaultTypeInternal;
extern FightRpcResultNotifyDefaultTypeInternal _FightRpcResultNotify_default_instance_;
class FightRpcStartNotify;
class FightRpcStartNotifyDefaultTypeInternal;
extern FightRpcStartNotifyDefaultTypeInternal _FightRpcStartNotify_default_instance_;
class FightSightAction;
class FightSightActionDefaultTypeInternal;
extern FightSightActionDefaultTypeInternal _FightSightAction_default_instance_;
class FightSnipeAction;
class FightSnipeActionDefaultTypeInternal;
extern FightSnipeActionDefaultTypeInternal _FightSnipeAction_default_instance_;
class FightStartEndAction;
class FightStartEndActionDefaultTypeInternal;
extern FightStartEndActionDefaultTypeInternal _FightStartEndAction_default_instance_;
class FightStateAction;
class FightStateActionDefaultTypeInternal;
extern FightStateActionDefaultTypeInternal _FightStateAction_default_instance_;
class FightStormBaseAction;
class FightStormBaseActionDefaultTypeInternal;
extern FightStormBaseActionDefaultTypeInternal _FightStormBaseAction_default_instance_;
class FightStormCampAction;
class FightStormCampActionDefaultTypeInternal;
extern FightStormCampActionDefaultTypeInternal _FightStormCampAction_default_instance_;
class FightStormCampInfo;
class FightStormCampInfoDefaultTypeInternal;
extern FightStormCampInfoDefaultTypeInternal _FightStormCampInfo_default_instance_;
class FightStormFlagAction;
class FightStormFlagActionDefaultTypeInternal;
extern FightStormFlagActionDefaultTypeInternal _FightStormFlagAction_default_instance_;
class FightStormKillEffectAction;
class FightStormKillEffectActionDefaultTypeInternal;
extern FightStormKillEffectActionDefaultTypeInternal _FightStormKillEffectAction_default_instance_;
class FightStormPlayerInfo;
class FightStormPlayerInfoDefaultTypeInternal;
extern FightStormPlayerInfoDefaultTypeInternal _FightStormPlayerInfo_default_instance_;
class FightStormResAction;
class FightStormResActionDefaultTypeInternal;
extern FightStormResActionDefaultTypeInternal _FightStormResAction_default_instance_;
class FightStormResultAction;
class FightStormResultActionDefaultTypeInternal;
extern FightStormResultActionDefaultTypeInternal _FightStormResultAction_default_instance_;
class FightStormStartAction;
class FightStormStartActionDefaultTypeInternal;
extern FightStormStartActionDefaultTypeInternal _FightStormStartAction_default_instance_;
class FightTRandSkillAction;
class FightTRandSkillActionDefaultTypeInternal;
extern FightTRandSkillActionDefaultTypeInternal _FightTRandSkillAction_default_instance_;
class FightTowerLockAction;
class FightTowerLockActionDefaultTypeInternal;
extern FightTowerLockActionDefaultTypeInternal _FightTowerLockAction_default_instance_;
class FightTransferAction;
class FightTransferActionDefaultTypeInternal;
extern FightTransferActionDefaultTypeInternal _FightTransferAction_default_instance_;
class FightUseItemAction;
class FightUseItemActionDefaultTypeInternal;
extern FightUseItemActionDefaultTypeInternal _FightUseItemAction_default_instance_;
class FightUseSkillAction;
class FightUseSkillActionDefaultTypeInternal;
extern FightUseSkillActionDefaultTypeInternal _FightUseSkillAction_default_instance_;

namespace protobuf_FightRpc_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_FightRpc_2eproto

// ===================================================================

class FightRpcReadyAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightRpcReadyAsk) */ {
 public:
  FightRpcReadyAsk();
  virtual ~FightRpcReadyAsk();

  FightRpcReadyAsk(const FightRpcReadyAsk& from);

  inline FightRpcReadyAsk& operator=(const FightRpcReadyAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightRpcReadyAsk(FightRpcReadyAsk&& from) noexcept
    : FightRpcReadyAsk() {
    *this = ::std::move(from);
  }

  inline FightRpcReadyAsk& operator=(FightRpcReadyAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightRpcReadyAsk& default_instance();

  static inline const FightRpcReadyAsk* internal_default_instance() {
    return reinterpret_cast<const FightRpcReadyAsk*>(
               &_FightRpcReadyAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FightRpcReadyAsk* other);
  friend void swap(FightRpcReadyAsk& a, FightRpcReadyAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightRpcReadyAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  FightRpcReadyAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightRpcReadyAsk& from);
  void MergeFrom(const FightRpcReadyAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightRpcReadyAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:FightRpcReadyAsk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightRpcReadyReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightRpcReadyReply) */ {
 public:
  FightRpcReadyReply();
  virtual ~FightRpcReadyReply();

  FightRpcReadyReply(const FightRpcReadyReply& from);

  inline FightRpcReadyReply& operator=(const FightRpcReadyReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightRpcReadyReply(FightRpcReadyReply&& from) noexcept
    : FightRpcReadyReply() {
    *this = ::std::move(from);
  }

  inline FightRpcReadyReply& operator=(FightRpcReadyReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightRpcReadyReply& default_instance();

  static inline const FightRpcReadyReply* internal_default_instance() {
    return reinterpret_cast<const FightRpcReadyReply*>(
               &_FightRpcReadyReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FightRpcReadyReply* other);
  friend void swap(FightRpcReadyReply& a, FightRpcReadyReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightRpcReadyReply* New() const PROTOBUF_FINAL { return New(NULL); }

  FightRpcReadyReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightRpcReadyReply& from);
  void MergeFrom(const FightRpcReadyReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightRpcReadyReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes ActionArr = 5;
  int actionarr_size() const;
  void clear_actionarr();
  static const int kActionArrFieldNumber = 5;
  const ::std::string& actionarr(int index) const;
  ::std::string* mutable_actionarr(int index);
  void set_actionarr(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_actionarr(int index, ::std::string&& value);
  #endif
  void set_actionarr(int index, const char* value);
  void set_actionarr(int index, const void* value, size_t size);
  ::std::string* add_actionarr();
  void add_actionarr(const ::std::string& value);
  #if LANG_CXX11
  void add_actionarr(::std::string&& value);
  #endif
  void add_actionarr(const char* value);
  void add_actionarr(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& actionarr() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_actionarr();

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional sint32 Tick = 2 [default = -1];
  bool has_tick() const;
  void clear_tick();
  static const int kTickFieldNumber = 2;
  ::google::protobuf::int32 tick() const;
  void set_tick(::google::protobuf::int32 value);

  // optional sint32 RandNum = 3 [default = -1];
  bool has_randnum() const;
  void clear_randnum();
  static const int kRandNumFieldNumber = 3;
  ::google::protobuf::int32 randnum() const;
  void set_randnum(::google::protobuf::int32 value);

  // optional sint32 IdHelper = 4 [default = -1];
  bool has_idhelper() const;
  void clear_idhelper();
  static const int kIdHelperFieldNumber = 4;
  ::google::protobuf::int32 idhelper() const;
  void set_idhelper(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightRpcReadyReply)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_tick();
  void clear_has_tick();
  void set_has_randnum();
  void clear_has_randnum();
  void set_has_idhelper();
  void clear_has_idhelper();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> actionarr_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 tick_;
  ::google::protobuf::int32 randnum_;
  ::google::protobuf::int32 idhelper_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightRpcActionNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightRpcActionNotify) */ {
 public:
  FightRpcActionNotify();
  virtual ~FightRpcActionNotify();

  FightRpcActionNotify(const FightRpcActionNotify& from);

  inline FightRpcActionNotify& operator=(const FightRpcActionNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightRpcActionNotify(FightRpcActionNotify&& from) noexcept
    : FightRpcActionNotify() {
    *this = ::std::move(from);
  }

  inline FightRpcActionNotify& operator=(FightRpcActionNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightRpcActionNotify& default_instance();

  static inline const FightRpcActionNotify* internal_default_instance() {
    return reinterpret_cast<const FightRpcActionNotify*>(
               &_FightRpcActionNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(FightRpcActionNotify* other);
  friend void swap(FightRpcActionNotify& a, FightRpcActionNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightRpcActionNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  FightRpcActionNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightRpcActionNotify& from);
  void MergeFrom(const FightRpcActionNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightRpcActionNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes Data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional sint32 Frame = 2 [default = -1];
  bool has_frame() const;
  void clear_frame();
  static const int kFrameFieldNumber = 2;
  ::google::protobuf::int32 frame() const;
  void set_frame(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightRpcActionNotify)
 private:
  void set_has_data();
  void clear_has_data();
  void set_has_frame();
  void clear_has_frame();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 frame_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightRpcResultNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightRpcResultNotify) */ {
 public:
  FightRpcResultNotify();
  virtual ~FightRpcResultNotify();

  FightRpcResultNotify(const FightRpcResultNotify& from);

  inline FightRpcResultNotify& operator=(const FightRpcResultNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightRpcResultNotify(FightRpcResultNotify&& from) noexcept
    : FightRpcResultNotify() {
    *this = ::std::move(from);
  }

  inline FightRpcResultNotify& operator=(FightRpcResultNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightRpcResultNotify& default_instance();

  static inline const FightRpcResultNotify* internal_default_instance() {
    return reinterpret_cast<const FightRpcResultNotify*>(
               &_FightRpcResultNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(FightRpcResultNotify* other);
  friend void swap(FightRpcResultNotify& a, FightRpcResultNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightRpcResultNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  FightRpcResultNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightRpcResultNotify& from);
  void MergeFrom(const FightRpcResultNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightRpcResultNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FightPrizeInfo PrizeList = 6;
  int prizelist_size() const;
  void clear_prizelist();
  static const int kPrizeListFieldNumber = 6;
  const ::FightPrizeInfo& prizelist(int index) const;
  ::FightPrizeInfo* mutable_prizelist(int index);
  ::FightPrizeInfo* add_prizelist();
  ::google::protobuf::RepeatedPtrField< ::FightPrizeInfo >*
      mutable_prizelist();
  const ::google::protobuf::RepeatedPtrField< ::FightPrizeInfo >&
      prizelist() const;

  // repeated .FightKillInfo KillList = 7;
  int killlist_size() const;
  void clear_killlist();
  static const int kKillListFieldNumber = 7;
  const ::FightKillInfo& killlist(int index) const;
  ::FightKillInfo* mutable_killlist(int index);
  ::FightKillInfo* add_killlist();
  ::google::protobuf::RepeatedPtrField< ::FightKillInfo >*
      mutable_killlist();
  const ::google::protobuf::RepeatedPtrField< ::FightKillInfo >&
      killlist() const;

  // optional sint32 ThirdStarLight = 10 [default = -1];
  bool has_thirdstarlight() const;
  void clear_thirdstarlight();
  static const int kThirdStarLightFieldNumber = 10;
  ::google::protobuf::int32 thirdstarlight() const;
  void set_thirdstarlight(::google::protobuf::int32 value);

  // optional sint32 Result = 1 [default = -1];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional sint32 DengeonId = 2 [default = -1];
  bool has_dengeonid() const;
  void clear_dengeonid();
  static const int kDengeonIdFieldNumber = 2;
  ::google::protobuf::int32 dengeonid() const;
  void set_dengeonid(::google::protobuf::int32 value);

  // optional sint32 Star = 4 [default = -1];
  bool has_star() const;
  void clear_star();
  static const int kStarFieldNumber = 4;
  ::google::protobuf::int32 star() const;
  void set_star(::google::protobuf::int32 value);

  // optional sint32 FightTime = 5 [default = -1];
  bool has_fighttime() const;
  void clear_fighttime();
  static const int kFightTimeFieldNumber = 5;
  ::google::protobuf::int32 fighttime() const;
  void set_fighttime(::google::protobuf::int32 value);

  // optional sint32 FirstStarLight = 8 [default = -1];
  bool has_firststarlight() const;
  void clear_firststarlight();
  static const int kFirstStarLightFieldNumber = 8;
  ::google::protobuf::int32 firststarlight() const;
  void set_firststarlight(::google::protobuf::int32 value);

  // optional sint32 SecondStarLight = 9 [default = -1];
  bool has_secondstarlight() const;
  void clear_secondstarlight();
  static const int kSecondStarLightFieldNumber = 9;
  ::google::protobuf::int32 secondstarlight() const;
  void set_secondstarlight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightRpcResultNotify)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_dengeonid();
  void clear_has_dengeonid();
  void set_has_star();
  void clear_has_star();
  void set_has_fighttime();
  void clear_has_fighttime();
  void set_has_firststarlight();
  void clear_has_firststarlight();
  void set_has_secondstarlight();
  void clear_has_secondstarlight();
  void set_has_thirdstarlight();
  void clear_has_thirdstarlight();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FightPrizeInfo > prizelist_;
  ::google::protobuf::RepeatedPtrField< ::FightKillInfo > killlist_;
  ::google::protobuf::int32 thirdstarlight_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 dengeonid_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 fighttime_;
  ::google::protobuf::int32 firststarlight_;
  ::google::protobuf::int32 secondstarlight_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightRpcEnterAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightRpcEnterAsk) */ {
 public:
  FightRpcEnterAsk();
  virtual ~FightRpcEnterAsk();

  FightRpcEnterAsk(const FightRpcEnterAsk& from);

  inline FightRpcEnterAsk& operator=(const FightRpcEnterAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightRpcEnterAsk(FightRpcEnterAsk&& from) noexcept
    : FightRpcEnterAsk() {
    *this = ::std::move(from);
  }

  inline FightRpcEnterAsk& operator=(FightRpcEnterAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightRpcEnterAsk& default_instance();

  static inline const FightRpcEnterAsk* internal_default_instance() {
    return reinterpret_cast<const FightRpcEnterAsk*>(
               &_FightRpcEnterAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(FightRpcEnterAsk* other);
  friend void swap(FightRpcEnterAsk& a, FightRpcEnterAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightRpcEnterAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  FightRpcEnterAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightRpcEnterAsk& from);
  void MergeFrom(const FightRpcEnterAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightRpcEnterAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string DungeonKey = 2;
  bool has_dungeonkey() const;
  void clear_dungeonkey();
  static const int kDungeonKeyFieldNumber = 2;
  const ::std::string& dungeonkey() const;
  void set_dungeonkey(const ::std::string& value);
  #if LANG_CXX11
  void set_dungeonkey(::std::string&& value);
  #endif
  void set_dungeonkey(const char* value);
  void set_dungeonkey(const char* value, size_t size);
  ::std::string* mutable_dungeonkey();
  ::std::string* release_dungeonkey();
  void set_allocated_dungeonkey(::std::string* dungeonkey);

  // optional string SessionKey = 3;
  bool has_sessionkey() const;
  void clear_sessionkey();
  static const int kSessionKeyFieldNumber = 3;
  const ::std::string& sessionkey() const;
  void set_sessionkey(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionkey(::std::string&& value);
  #endif
  void set_sessionkey(const char* value);
  void set_sessionkey(const char* value, size_t size);
  ::std::string* mutable_sessionkey();
  ::std::string* release_sessionkey();
  void set_allocated_sessionkey(::std::string* sessionkey);

  // optional sint64 UserId = 1 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:FightRpcEnterAsk)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_dungeonkey();
  void clear_has_dungeonkey();
  void set_has_sessionkey();
  void clear_has_sessionkey();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dungeonkey_;
  ::google::protobuf::internal::ArenaStringPtr sessionkey_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightRpcEnterReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightRpcEnterReply) */ {
 public:
  FightRpcEnterReply();
  virtual ~FightRpcEnterReply();

  FightRpcEnterReply(const FightRpcEnterReply& from);

  inline FightRpcEnterReply& operator=(const FightRpcEnterReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightRpcEnterReply(FightRpcEnterReply&& from) noexcept
    : FightRpcEnterReply() {
    *this = ::std::move(from);
  }

  inline FightRpcEnterReply& operator=(FightRpcEnterReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightRpcEnterReply& default_instance();

  static inline const FightRpcEnterReply* internal_default_instance() {
    return reinterpret_cast<const FightRpcEnterReply*>(
               &_FightRpcEnterReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(FightRpcEnterReply* other);
  friend void swap(FightRpcEnterReply& a, FightRpcEnterReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightRpcEnterReply* New() const PROTOBUF_FINAL { return New(NULL); }

  FightRpcEnterReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightRpcEnterReply& from);
  void MergeFrom(const FightRpcEnterReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightRpcEnterReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes ActionArr = 5;
  int actionarr_size() const;
  void clear_actionarr();
  static const int kActionArrFieldNumber = 5;
  const ::std::string& actionarr(int index) const;
  ::std::string* mutable_actionarr(int index);
  void set_actionarr(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_actionarr(int index, ::std::string&& value);
  #endif
  void set_actionarr(int index, const char* value);
  void set_actionarr(int index, const void* value, size_t size);
  ::std::string* add_actionarr();
  void add_actionarr(const ::std::string& value);
  #if LANG_CXX11
  void add_actionarr(::std::string&& value);
  #endif
  void add_actionarr(const char* value);
  void add_actionarr(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& actionarr() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_actionarr();

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional sint32 Tick = 2 [default = -1];
  bool has_tick() const;
  void clear_tick();
  static const int kTickFieldNumber = 2;
  ::google::protobuf::int32 tick() const;
  void set_tick(::google::protobuf::int32 value);

  // optional sint32 RandNum = 3 [default = -1];
  bool has_randnum() const;
  void clear_randnum();
  static const int kRandNumFieldNumber = 3;
  ::google::protobuf::int32 randnum() const;
  void set_randnum(::google::protobuf::int32 value);

  // optional sint32 IdHelper = 4 [default = -1];
  bool has_idhelper() const;
  void clear_idhelper();
  static const int kIdHelperFieldNumber = 4;
  ::google::protobuf::int32 idhelper() const;
  void set_idhelper(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightRpcEnterReply)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_tick();
  void clear_has_tick();
  void set_has_randnum();
  void clear_has_randnum();
  void set_has_idhelper();
  void clear_has_idhelper();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> actionarr_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 tick_;
  ::google::protobuf::int32 randnum_;
  ::google::protobuf::int32 idhelper_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightPrizeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightPrizeInfo) */ {
 public:
  FightPrizeInfo();
  virtual ~FightPrizeInfo();

  FightPrizeInfo(const FightPrizeInfo& from);

  inline FightPrizeInfo& operator=(const FightPrizeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightPrizeInfo(FightPrizeInfo&& from) noexcept
    : FightPrizeInfo() {
    *this = ::std::move(from);
  }

  inline FightPrizeInfo& operator=(FightPrizeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightPrizeInfo& default_instance();

  static inline const FightPrizeInfo* internal_default_instance() {
    return reinterpret_cast<const FightPrizeInfo*>(
               &_FightPrizeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(FightPrizeInfo* other);
  friend void swap(FightPrizeInfo& a, FightPrizeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightPrizeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FightPrizeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightPrizeInfo& from);
  void MergeFrom(const FightPrizeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightPrizeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Id = 1 [default = -1];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional sint32 Count = 2 [default = -1];
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightPrizeInfo)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightKillInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightKillInfo) */ {
 public:
  FightKillInfo();
  virtual ~FightKillInfo();

  FightKillInfo(const FightKillInfo& from);

  inline FightKillInfo& operator=(const FightKillInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightKillInfo(FightKillInfo&& from) noexcept
    : FightKillInfo() {
    *this = ::std::move(from);
  }

  inline FightKillInfo& operator=(FightKillInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightKillInfo& default_instance();

  static inline const FightKillInfo* internal_default_instance() {
    return reinterpret_cast<const FightKillInfo*>(
               &_FightKillInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(FightKillInfo* other);
  friend void swap(FightKillInfo& a, FightKillInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightKillInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FightKillInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightKillInfo& from);
  void MergeFrom(const FightKillInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightKillInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Id = 1 [default = -1];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional sint32 Count = 2 [default = -1];
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightKillInfo)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightRpcStartNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightRpcStartNotify) */ {
 public:
  FightRpcStartNotify();
  virtual ~FightRpcStartNotify();

  FightRpcStartNotify(const FightRpcStartNotify& from);

  inline FightRpcStartNotify& operator=(const FightRpcStartNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightRpcStartNotify(FightRpcStartNotify&& from) noexcept
    : FightRpcStartNotify() {
    *this = ::std::move(from);
  }

  inline FightRpcStartNotify& operator=(FightRpcStartNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightRpcStartNotify& default_instance();

  static inline const FightRpcStartNotify* internal_default_instance() {
    return reinterpret_cast<const FightRpcStartNotify*>(
               &_FightRpcStartNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(FightRpcStartNotify* other);
  friend void swap(FightRpcStartNotify& a, FightRpcStartNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightRpcStartNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  FightRpcStartNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightRpcStartNotify& from);
  void MergeFrom(const FightRpcStartNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightRpcStartNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:FightRpcStartNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightUseSkillAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightUseSkillAction) */ {
 public:
  FightUseSkillAction();
  virtual ~FightUseSkillAction();

  FightUseSkillAction(const FightUseSkillAction& from);

  inline FightUseSkillAction& operator=(const FightUseSkillAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightUseSkillAction(FightUseSkillAction&& from) noexcept
    : FightUseSkillAction() {
    *this = ::std::move(from);
  }

  inline FightUseSkillAction& operator=(FightUseSkillAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightUseSkillAction& default_instance();

  static inline const FightUseSkillAction* internal_default_instance() {
    return reinterpret_cast<const FightUseSkillAction*>(
               &_FightUseSkillAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(FightUseSkillAction* other);
  friend void swap(FightUseSkillAction& a, FightUseSkillAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightUseSkillAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightUseSkillAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightUseSkillAction& from);
  void MergeFrom(const FightUseSkillAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightUseSkillAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float V3Pos = 7;
  int v3pos_size() const;
  void clear_v3pos();
  static const int kV3PosFieldNumber = 7;
  float v3pos(int index) const;
  void set_v3pos(int index, float value);
  void add_v3pos(float value);
  const ::google::protobuf::RepeatedField< float >&
      v3pos() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_v3pos();

  // optional bytes PosInfo = 3;
  bool has_posinfo() const;
  void clear_posinfo();
  static const int kPosInfoFieldNumber = 3;
  const ::std::string& posinfo() const;
  void set_posinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_posinfo(::std::string&& value);
  #endif
  void set_posinfo(const char* value);
  void set_posinfo(const void* value, size_t size);
  ::std::string* mutable_posinfo();
  ::std::string* release_posinfo();
  void set_allocated_posinfo(::std::string* posinfo);

  // optional bytes TargetPos = 5;
  bool has_targetpos() const;
  void clear_targetpos();
  static const int kTargetPosFieldNumber = 5;
  const ::std::string& targetpos() const;
  void set_targetpos(const ::std::string& value);
  #if LANG_CXX11
  void set_targetpos(::std::string&& value);
  #endif
  void set_targetpos(const char* value);
  void set_targetpos(const void* value, size_t size);
  ::std::string* mutable_targetpos();
  ::std::string* release_targetpos();
  void set_allocated_targetpos(::std::string* targetpos);

  // optional sint32 Type = 6 [default = 0];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional sint32 ObjId = 1 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 1;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // optional sint32 SkillId = 2 [default = -1];
  bool has_skillid() const;
  void clear_skillid();
  static const int kSkillIdFieldNumber = 2;
  ::google::protobuf::int32 skillid() const;
  void set_skillid(::google::protobuf::int32 value);

  // optional sint32 TargetObjId = 4 [default = -1];
  bool has_targetobjid() const;
  void clear_targetobjid();
  static const int kTargetObjIdFieldNumber = 4;
  ::google::protobuf::int32 targetobjid() const;
  void set_targetobjid(::google::protobuf::int32 value);

  // optional sint32 Time = 8 [default = -1];
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 8;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightUseSkillAction)
 private:
  void set_has_objid();
  void clear_has_objid();
  void set_has_skillid();
  void clear_has_skillid();
  void set_has_posinfo();
  void clear_has_posinfo();
  void set_has_targetobjid();
  void clear_has_targetobjid();
  void set_has_targetpos();
  void clear_has_targetpos();
  void set_has_type();
  void clear_has_type();
  void set_has_time();
  void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > v3pos_;
  ::google::protobuf::internal::ArenaStringPtr posinfo_;
  ::google::protobuf::internal::ArenaStringPtr targetpos_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 targetobjid_;
  ::google::protobuf::int32 time_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightBuffAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightBuffAction) */ {
 public:
  FightBuffAction();
  virtual ~FightBuffAction();

  FightBuffAction(const FightBuffAction& from);

  inline FightBuffAction& operator=(const FightBuffAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightBuffAction(FightBuffAction&& from) noexcept
    : FightBuffAction() {
    *this = ::std::move(from);
  }

  inline FightBuffAction& operator=(FightBuffAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightBuffAction& default_instance();

  static inline const FightBuffAction* internal_default_instance() {
    return reinterpret_cast<const FightBuffAction*>(
               &_FightBuffAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(FightBuffAction* other);
  friend void swap(FightBuffAction& a, FightBuffAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightBuffAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightBuffAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightBuffAction& from);
  void MergeFrom(const FightBuffAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightBuffAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 ObjId = 2 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 2;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // optional sint32 AttackerId = 3 [default = -1];
  bool has_attackerid() const;
  void clear_attackerid();
  static const int kAttackerIdFieldNumber = 3;
  ::google::protobuf::int32 attackerid() const;
  void set_attackerid(::google::protobuf::int32 value);

  // optional sint32 OpType = 4 [default = -1];
  bool has_optype() const;
  void clear_optype();
  static const int kOpTypeFieldNumber = 4;
  ::google::protobuf::int32 optype() const;
  void set_optype(::google::protobuf::int32 value);

  // optional sint32 BuffId = 5 [default = -1];
  bool has_buffid() const;
  void clear_buffid();
  static const int kBuffIdFieldNumber = 5;
  ::google::protobuf::int32 buffid() const;
  void set_buffid(::google::protobuf::int32 value);

  // optional sint32 RemainTime = 7 [default = -1];
  bool has_remaintime() const;
  void clear_remaintime();
  static const int kRemainTimeFieldNumber = 7;
  ::google::protobuf::int32 remaintime() const;
  void set_remaintime(::google::protobuf::int32 value);

  // optional sint32 BuffLv = 8 [default = -1];
  bool has_bufflv() const;
  void clear_bufflv();
  static const int kBuffLvFieldNumber = 8;
  ::google::protobuf::int32 bufflv() const;
  void set_bufflv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightBuffAction)
 private:
  void set_has_objid();
  void clear_has_objid();
  void set_has_attackerid();
  void clear_has_attackerid();
  void set_has_optype();
  void clear_has_optype();
  void set_has_buffid();
  void clear_has_buffid();
  void set_has_remaintime();
  void clear_has_remaintime();
  void set_has_bufflv();
  void clear_has_bufflv();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 attackerid_;
  ::google::protobuf::int32 optype_;
  ::google::protobuf::int32 buffid_;
  ::google::protobuf::int32 remaintime_;
  ::google::protobuf::int32 bufflv_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightCharHitAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightCharHitAction) */ {
 public:
  FightCharHitAction();
  virtual ~FightCharHitAction();

  FightCharHitAction(const FightCharHitAction& from);

  inline FightCharHitAction& operator=(const FightCharHitAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightCharHitAction(FightCharHitAction&& from) noexcept
    : FightCharHitAction() {
    *this = ::std::move(from);
  }

  inline FightCharHitAction& operator=(FightCharHitAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightCharHitAction& default_instance();

  static inline const FightCharHitAction* internal_default_instance() {
    return reinterpret_cast<const FightCharHitAction*>(
               &_FightCharHitAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(FightCharHitAction* other);
  friend void swap(FightCharHitAction& a, FightCharHitAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightCharHitAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightCharHitAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightCharHitAction& from);
  void MergeFrom(const FightCharHitAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightCharHitAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FightHitTargetInfo TargetList = 7;
  int targetlist_size() const;
  void clear_targetlist();
  static const int kTargetListFieldNumber = 7;
  const ::FightHitTargetInfo& targetlist(int index) const;
  ::FightHitTargetInfo* mutable_targetlist(int index);
  ::FightHitTargetInfo* add_targetlist();
  ::google::protobuf::RepeatedPtrField< ::FightHitTargetInfo >*
      mutable_targetlist();
  const ::google::protobuf::RepeatedPtrField< ::FightHitTargetInfo >&
      targetlist() const;

  // optional bytes PosInfo = 11;
  bool has_posinfo() const;
  void clear_posinfo();
  static const int kPosInfoFieldNumber = 11;
  const ::std::string& posinfo() const;
  void set_posinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_posinfo(::std::string&& value);
  #endif
  void set_posinfo(const char* value);
  void set_posinfo(const void* value, size_t size);
  ::std::string* mutable_posinfo();
  ::std::string* release_posinfo();
  void set_allocated_posinfo(::std::string* posinfo);

  // optional sint32 BackDir = 25 [default = 0];
  bool has_backdir() const;
  void clear_backdir();
  static const int kBackDirFieldNumber = 25;
  ::google::protobuf::int32 backdir() const;
  void set_backdir(::google::protobuf::int32 value);

  // optional bool IsHitGround = 32 [default = false];
  bool has_ishitground() const;
  void clear_ishitground();
  static const int kIsHitGroundFieldNumber = 32;
  bool ishitground() const;
  void set_ishitground(bool value);

  // optional sint32 AttackSegment = 31 [default = -1];
  bool has_attacksegment() const;
  void clear_attacksegment();
  static const int kAttackSegmentFieldNumber = 31;
  ::google::protobuf::int32 attacksegment() const;
  void set_attacksegment(::google::protobuf::int32 value);

  // optional sint32 ObjId = 2 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 2;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // optional sint32 SkillId = 3 [default = -1];
  bool has_skillid() const;
  void clear_skillid();
  static const int kSkillIdFieldNumber = 3;
  ::google::protobuf::int32 skillid() const;
  void set_skillid(::google::protobuf::int32 value);

  // optional sint32 Seq = 8 [default = -1];
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 8;
  ::google::protobuf::int32 seq() const;
  void set_seq(::google::protobuf::int32 value);

  // optional sint32 SegmentIndex = 30 [default = -1];
  bool has_segmentindex() const;
  void clear_segmentindex();
  static const int kSegmentIndexFieldNumber = 30;
  ::google::protobuf::int32 segmentindex() const;
  void set_segmentindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightCharHitAction)
 private:
  void set_has_objid();
  void clear_has_objid();
  void set_has_skillid();
  void clear_has_skillid();
  void set_has_seq();
  void clear_has_seq();
  void set_has_posinfo();
  void clear_has_posinfo();
  void set_has_backdir();
  void clear_has_backdir();
  void set_has_segmentindex();
  void clear_has_segmentindex();
  void set_has_attacksegment();
  void clear_has_attacksegment();
  void set_has_ishitground();
  void clear_has_ishitground();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FightHitTargetInfo > targetlist_;
  ::google::protobuf::internal::ArenaStringPtr posinfo_;
  ::google::protobuf::int32 backdir_;
  bool ishitground_;
  ::google::protobuf::int32 attacksegment_;
  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 seq_;
  ::google::protobuf::int32 segmentindex_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightOfflineAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightOfflineAction) */ {
 public:
  FightOfflineAction();
  virtual ~FightOfflineAction();

  FightOfflineAction(const FightOfflineAction& from);

  inline FightOfflineAction& operator=(const FightOfflineAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightOfflineAction(FightOfflineAction&& from) noexcept
    : FightOfflineAction() {
    *this = ::std::move(from);
  }

  inline FightOfflineAction& operator=(FightOfflineAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightOfflineAction& default_instance();

  static inline const FightOfflineAction* internal_default_instance() {
    return reinterpret_cast<const FightOfflineAction*>(
               &_FightOfflineAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(FightOfflineAction* other);
  friend void swap(FightOfflineAction& a, FightOfflineAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightOfflineAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightOfflineAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightOfflineAction& from);
  void MergeFrom(const FightOfflineAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightOfflineAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsOffline = 2 [default = false];
  bool has_isoffline() const;
  void clear_isoffline();
  static const int kIsOfflineFieldNumber = 2;
  bool isoffline() const;
  void set_isoffline(bool value);

  // optional bool IsAIDelegate = 3 [default = false];
  bool has_isaidelegate() const;
  void clear_isaidelegate();
  static const int kIsAIDelegateFieldNumber = 3;
  bool isaidelegate() const;
  void set_isaidelegate(bool value);

  // optional sint32 ObjId = 1 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 1;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightOfflineAction)
 private:
  void set_has_objid();
  void clear_has_objid();
  void set_has_isoffline();
  void clear_has_isoffline();
  void set_has_isaidelegate();
  void clear_has_isaidelegate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool isoffline_;
  bool isaidelegate_;
  ::google::protobuf::int32 objid_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightStateAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightStateAction) */ {
 public:
  FightStateAction();
  virtual ~FightStateAction();

  FightStateAction(const FightStateAction& from);

  inline FightStateAction& operator=(const FightStateAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightStateAction(FightStateAction&& from) noexcept
    : FightStateAction() {
    *this = ::std::move(from);
  }

  inline FightStateAction& operator=(FightStateAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightStateAction& default_instance();

  static inline const FightStateAction* internal_default_instance() {
    return reinterpret_cast<const FightStateAction*>(
               &_FightStateAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(FightStateAction* other);
  friend void swap(FightStateAction& a, FightStateAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightStateAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightStateAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightStateAction& from);
  void MergeFrom(const FightStateAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightStateAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes PosInfo = 3;
  bool has_posinfo() const;
  void clear_posinfo();
  static const int kPosInfoFieldNumber = 3;
  const ::std::string& posinfo() const;
  void set_posinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_posinfo(::std::string&& value);
  #endif
  void set_posinfo(const char* value);
  void set_posinfo(const void* value, size_t size);
  ::std::string* mutable_posinfo();
  ::std::string* release_posinfo();
  void set_allocated_posinfo(::std::string* posinfo);

  // optional bytes TargetPos = 4;
  bool has_targetpos() const;
  void clear_targetpos();
  static const int kTargetPosFieldNumber = 4;
  const ::std::string& targetpos() const;
  void set_targetpos(const ::std::string& value);
  #if LANG_CXX11
  void set_targetpos(::std::string&& value);
  #endif
  void set_targetpos(const char* value);
  void set_targetpos(const void* value, size_t size);
  ::std::string* mutable_targetpos();
  ::std::string* release_targetpos();
  void set_allocated_targetpos(::std::string* targetpos);

  // optional sint32 Type = 1 [default = -1];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional sint32 ObjId = 2 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 2;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // optional sint32 IntPara = 5 [default = -1];
  bool has_intpara() const;
  void clear_intpara();
  static const int kIntParaFieldNumber = 5;
  ::google::protobuf::int32 intpara() const;
  void set_intpara(::google::protobuf::int32 value);

  // optional sint32 LadderObjId = 6 [default = -1];
  bool has_ladderobjid() const;
  void clear_ladderobjid();
  static const int kLadderObjIdFieldNumber = 6;
  ::google::protobuf::int32 ladderobjid() const;
  void set_ladderobjid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightStateAction)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_objid();
  void clear_has_objid();
  void set_has_posinfo();
  void clear_has_posinfo();
  void set_has_targetpos();
  void clear_has_targetpos();
  void set_has_intpara();
  void clear_has_intpara();
  void set_has_ladderobjid();
  void clear_has_ladderobjid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr posinfo_;
  ::google::protobuf::internal::ArenaStringPtr targetpos_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 intpara_;
  ::google::protobuf::int32 ladderobjid_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightCharDeadAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightCharDeadAction) */ {
 public:
  FightCharDeadAction();
  virtual ~FightCharDeadAction();

  FightCharDeadAction(const FightCharDeadAction& from);

  inline FightCharDeadAction& operator=(const FightCharDeadAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightCharDeadAction(FightCharDeadAction&& from) noexcept
    : FightCharDeadAction() {
    *this = ::std::move(from);
  }

  inline FightCharDeadAction& operator=(FightCharDeadAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightCharDeadAction& default_instance();

  static inline const FightCharDeadAction* internal_default_instance() {
    return reinterpret_cast<const FightCharDeadAction*>(
               &_FightCharDeadAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(FightCharDeadAction* other);
  friend void swap(FightCharDeadAction& a, FightCharDeadAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightCharDeadAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightCharDeadAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightCharDeadAction& from);
  void MergeFrom(const FightCharDeadAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightCharDeadAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes PosInfo = 2;
  bool has_posinfo() const;
  void clear_posinfo();
  static const int kPosInfoFieldNumber = 2;
  const ::std::string& posinfo() const;
  void set_posinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_posinfo(::std::string&& value);
  #endif
  void set_posinfo(const char* value);
  void set_posinfo(const void* value, size_t size);
  ::std::string* mutable_posinfo();
  ::std::string* release_posinfo();
  void set_allocated_posinfo(::std::string* posinfo);

  // optional sint32 ObjId = 1 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 1;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightCharDeadAction)
 private:
  void set_has_objid();
  void clear_has_objid();
  void set_has_posinfo();
  void clear_has_posinfo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr posinfo_;
  ::google::protobuf::int32 objid_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightCharReviveAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightCharReviveAction) */ {
 public:
  FightCharReviveAction();
  virtual ~FightCharReviveAction();

  FightCharReviveAction(const FightCharReviveAction& from);

  inline FightCharReviveAction& operator=(const FightCharReviveAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightCharReviveAction(FightCharReviveAction&& from) noexcept
    : FightCharReviveAction() {
    *this = ::std::move(from);
  }

  inline FightCharReviveAction& operator=(FightCharReviveAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightCharReviveAction& default_instance();

  static inline const FightCharReviveAction* internal_default_instance() {
    return reinterpret_cast<const FightCharReviveAction*>(
               &_FightCharReviveAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(FightCharReviveAction* other);
  friend void swap(FightCharReviveAction& a, FightCharReviveAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightCharReviveAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightCharReviveAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightCharReviveAction& from);
  void MergeFrom(const FightCharReviveAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightCharReviveAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes PosInfo = 2;
  bool has_posinfo() const;
  void clear_posinfo();
  static const int kPosInfoFieldNumber = 2;
  const ::std::string& posinfo() const;
  void set_posinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_posinfo(::std::string&& value);
  #endif
  void set_posinfo(const char* value);
  void set_posinfo(const void* value, size_t size);
  ::std::string* mutable_posinfo();
  ::std::string* release_posinfo();
  void set_allocated_posinfo(::std::string* posinfo);

  // optional sint32 CurHp = 3 [default = 0];
  bool has_curhp() const;
  void clear_curhp();
  static const int kCurHpFieldNumber = 3;
  ::google::protobuf::int32 curhp() const;
  void set_curhp(::google::protobuf::int32 value);

  // optional sint32 ManualRevive = 6 [default = 0];
  bool has_manualrevive() const;
  void clear_manualrevive();
  static const int kManualReviveFieldNumber = 6;
  ::google::protobuf::int32 manualrevive() const;
  void set_manualrevive(::google::protobuf::int32 value);

  // optional sint32 MaxHP = 10 [default = 0];
  bool has_maxhp() const;
  void clear_maxhp();
  static const int kMaxHPFieldNumber = 10;
  ::google::protobuf::int32 maxhp() const;
  void set_maxhp(::google::protobuf::int32 value);

  // optional sint32 ObjId = 1 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 1;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // optional sint32 Type = 4 [default = -1];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional sint32 Time = 5 [default = -1];
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 5;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // optional sint32 RemainTimes = 7 [default = -1];
  bool has_remaintimes() const;
  void clear_remaintimes();
  static const int kRemainTimesFieldNumber = 7;
  ::google::protobuf::int32 remaintimes() const;
  void set_remaintimes(::google::protobuf::int32 value);

  // optional sint32 NeedMoney = 8 [default = -1];
  bool has_needmoney() const;
  void clear_needmoney();
  static const int kNeedMoneyFieldNumber = 8;
  ::google::protobuf::int32 needmoney() const;
  void set_needmoney(::google::protobuf::int32 value);

  // optional sint32 TotalTimes = 11 [default = -1];
  bool has_totaltimes() const;
  void clear_totaltimes();
  static const int kTotalTimesFieldNumber = 11;
  ::google::protobuf::int32 totaltimes() const;
  void set_totaltimes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightCharReviveAction)
 private:
  void set_has_objid();
  void clear_has_objid();
  void set_has_posinfo();
  void clear_has_posinfo();
  void set_has_curhp();
  void clear_has_curhp();
  void set_has_type();
  void clear_has_type();
  void set_has_time();
  void clear_has_time();
  void set_has_manualrevive();
  void clear_has_manualrevive();
  void set_has_remaintimes();
  void clear_has_remaintimes();
  void set_has_needmoney();
  void clear_has_needmoney();
  void set_has_maxhp();
  void clear_has_maxhp();
  void set_has_totaltimes();
  void clear_has_totaltimes();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr posinfo_;
  ::google::protobuf::int32 curhp_;
  ::google::protobuf::int32 manualrevive_;
  ::google::protobuf::int32 maxhp_;
  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 remaintimes_;
  ::google::protobuf::int32 needmoney_;
  ::google::protobuf::int32 totaltimes_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightHitTargetInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightHitTargetInfo) */ {
 public:
  FightHitTargetInfo();
  virtual ~FightHitTargetInfo();

  FightHitTargetInfo(const FightHitTargetInfo& from);

  inline FightHitTargetInfo& operator=(const FightHitTargetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightHitTargetInfo(FightHitTargetInfo&& from) noexcept
    : FightHitTargetInfo() {
    *this = ::std::move(from);
  }

  inline FightHitTargetInfo& operator=(FightHitTargetInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightHitTargetInfo& default_instance();

  static inline const FightHitTargetInfo* internal_default_instance() {
    return reinterpret_cast<const FightHitTargetInfo*>(
               &_FightHitTargetInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(FightHitTargetInfo* other);
  friend void swap(FightHitTargetInfo& a, FightHitTargetInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightHitTargetInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FightHitTargetInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightHitTargetInfo& from);
  void MergeFrom(const FightHitTargetInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightHitTargetInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes PosInfo = 2;
  bool has_posinfo() const;
  void clear_posinfo();
  static const int kPosInfoFieldNumber = 2;
  const ::std::string& posinfo() const;
  void set_posinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_posinfo(::std::string&& value);
  #endif
  void set_posinfo(const char* value);
  void set_posinfo(const void* value, size_t size);
  ::std::string* mutable_posinfo();
  ::std::string* release_posinfo();
  void set_allocated_posinfo(::std::string* posinfo);

  // optional sint32 Flag = 3 [default = 0];
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 3;
  ::google::protobuf::int32 flag() const;
  void set_flag(::google::protobuf::int32 value);

  // optional sint32 ObjId = 1 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 1;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // optional sint32 EnemyIndex = 5 [default = -1];
  bool has_enemyindex() const;
  void clear_enemyindex();
  static const int kEnemyIndexFieldNumber = 5;
  ::google::protobuf::int32 enemyindex() const;
  void set_enemyindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightHitTargetInfo)
 private:
  void set_has_objid();
  void clear_has_objid();
  void set_has_posinfo();
  void clear_has_posinfo();
  void set_has_flag();
  void clear_has_flag();
  void set_has_enemyindex();
  void clear_has_enemyindex();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr posinfo_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 enemyindex_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightComboSkillAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightComboSkillAction) */ {
 public:
  FightComboSkillAction();
  virtual ~FightComboSkillAction();

  FightComboSkillAction(const FightComboSkillAction& from);

  inline FightComboSkillAction& operator=(const FightComboSkillAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightComboSkillAction(FightComboSkillAction&& from) noexcept
    : FightComboSkillAction() {
    *this = ::std::move(from);
  }

  inline FightComboSkillAction& operator=(FightComboSkillAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightComboSkillAction& default_instance();

  static inline const FightComboSkillAction* internal_default_instance() {
    return reinterpret_cast<const FightComboSkillAction*>(
               &_FightComboSkillAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(FightComboSkillAction* other);
  friend void swap(FightComboSkillAction& a, FightComboSkillAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightComboSkillAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightComboSkillAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightComboSkillAction& from);
  void MergeFrom(const FightComboSkillAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightComboSkillAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Flag = 4 [default = -1];
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 4;
  ::google::protobuf::int32 flag() const;
  void set_flag(::google::protobuf::int32 value);

  // optional sint32 ObjId = 2 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 2;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // optional sint32 SkillId = 3 [default = -1];
  bool has_skillid() const;
  void clear_skillid();
  static const int kSkillIdFieldNumber = 3;
  ::google::protobuf::int32 skillid() const;
  void set_skillid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightComboSkillAction)
 private:
  void set_has_objid();
  void clear_has_objid();
  void set_has_skillid();
  void clear_has_skillid();
  void set_has_flag();
  void clear_has_flag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 skillid_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightEndSkillAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightEndSkillAction) */ {
 public:
  FightEndSkillAction();
  virtual ~FightEndSkillAction();

  FightEndSkillAction(const FightEndSkillAction& from);

  inline FightEndSkillAction& operator=(const FightEndSkillAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightEndSkillAction(FightEndSkillAction&& from) noexcept
    : FightEndSkillAction() {
    *this = ::std::move(from);
  }

  inline FightEndSkillAction& operator=(FightEndSkillAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightEndSkillAction& default_instance();

  static inline const FightEndSkillAction* internal_default_instance() {
    return reinterpret_cast<const FightEndSkillAction*>(
               &_FightEndSkillAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(FightEndSkillAction* other);
  friend void swap(FightEndSkillAction& a, FightEndSkillAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightEndSkillAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightEndSkillAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightEndSkillAction& from);
  void MergeFrom(const FightEndSkillAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightEndSkillAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes PosInfo = 3;
  bool has_posinfo() const;
  void clear_posinfo();
  static const int kPosInfoFieldNumber = 3;
  const ::std::string& posinfo() const;
  void set_posinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_posinfo(::std::string&& value);
  #endif
  void set_posinfo(const char* value);
  void set_posinfo(const void* value, size_t size);
  ::std::string* mutable_posinfo();
  ::std::string* release_posinfo();
  void set_allocated_posinfo(::std::string* posinfo);

  // optional sint32 ComboSkillId = 4 [default = -1];
  bool has_comboskillid() const;
  void clear_comboskillid();
  static const int kComboSkillIdFieldNumber = 4;
  ::google::protobuf::int32 comboskillid() const;
  void set_comboskillid(::google::protobuf::int32 value);

  // optional sint32 ObjId = 1 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 1;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // optional sint32 SkillId = 2 [default = -1];
  bool has_skillid() const;
  void clear_skillid();
  static const int kSkillIdFieldNumber = 2;
  ::google::protobuf::int32 skillid() const;
  void set_skillid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightEndSkillAction)
 private:
  void set_has_objid();
  void clear_has_objid();
  void set_has_skillid();
  void clear_has_skillid();
  void set_has_posinfo();
  void clear_has_posinfo();
  void set_has_comboskillid();
  void clear_has_comboskillid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr posinfo_;
  ::google::protobuf::int32 comboskillid_;
  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 skillid_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightCityAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightCityAction) */ {
 public:
  FightCityAction();
  virtual ~FightCityAction();

  FightCityAction(const FightCityAction& from);

  inline FightCityAction& operator=(const FightCityAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightCityAction(FightCityAction&& from) noexcept
    : FightCityAction() {
    *this = ::std::move(from);
  }

  inline FightCityAction& operator=(FightCityAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightCityAction& default_instance();

  static inline const FightCityAction* internal_default_instance() {
    return reinterpret_cast<const FightCityAction*>(
               &_FightCityAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(FightCityAction* other);
  friend void swap(FightCityAction& a, FightCityAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightCityAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightCityAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightCityAction& from);
  void MergeFrom(const FightCityAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightCityAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes PosInfo = 3;
  bool has_posinfo() const;
  void clear_posinfo();
  static const int kPosInfoFieldNumber = 3;
  const ::std::string& posinfo() const;
  void set_posinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_posinfo(::std::string&& value);
  #endif
  void set_posinfo(const char* value);
  void set_posinfo(const void* value, size_t size);
  ::std::string* mutable_posinfo();
  ::std::string* release_posinfo();
  void set_allocated_posinfo(::std::string* posinfo);

  // optional bytes TargetPos = 4;
  bool has_targetpos() const;
  void clear_targetpos();
  static const int kTargetPosFieldNumber = 4;
  const ::std::string& targetpos() const;
  void set_targetpos(const ::std::string& value);
  #if LANG_CXX11
  void set_targetpos(::std::string&& value);
  #endif
  void set_targetpos(const char* value);
  void set_targetpos(const void* value, size_t size);
  ::std::string* mutable_targetpos();
  ::std::string* release_targetpos();
  void set_allocated_targetpos(::std::string* targetpos);

  // optional sint32 IntPara = 5 [default = -1];
  bool has_intpara() const;
  void clear_intpara();
  static const int kIntParaFieldNumber = 5;
  ::google::protobuf::int32 intpara() const;
  void set_intpara(::google::protobuf::int32 value);

  // optional sint32 Type = 1 [default = -1];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional sint32 ObjId = 2 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 2;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightCityAction)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_objid();
  void clear_has_objid();
  void set_has_posinfo();
  void clear_has_posinfo();
  void set_has_targetpos();
  void clear_has_targetpos();
  void set_has_intpara();
  void clear_has_intpara();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr posinfo_;
  ::google::protobuf::internal::ArenaStringPtr targetpos_;
  ::google::protobuf::int32 intpara_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 objid_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightSnipeAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightSnipeAction) */ {
 public:
  FightSnipeAction();
  virtual ~FightSnipeAction();

  FightSnipeAction(const FightSnipeAction& from);

  inline FightSnipeAction& operator=(const FightSnipeAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightSnipeAction(FightSnipeAction&& from) noexcept
    : FightSnipeAction() {
    *this = ::std::move(from);
  }

  inline FightSnipeAction& operator=(FightSnipeAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightSnipeAction& default_instance();

  static inline const FightSnipeAction* internal_default_instance() {
    return reinterpret_cast<const FightSnipeAction*>(
               &_FightSnipeAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(FightSnipeAction* other);
  friend void swap(FightSnipeAction& a, FightSnipeAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightSnipeAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightSnipeAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightSnipeAction& from);
  void MergeFrom(const FightSnipeAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightSnipeAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes TargetPos = 3;
  bool has_targetpos() const;
  void clear_targetpos();
  static const int kTargetPosFieldNumber = 3;
  const ::std::string& targetpos() const;
  void set_targetpos(const ::std::string& value);
  #if LANG_CXX11
  void set_targetpos(::std::string&& value);
  #endif
  void set_targetpos(const char* value);
  void set_targetpos(const void* value, size_t size);
  ::std::string* mutable_targetpos();
  ::std::string* release_targetpos();
  void set_allocated_targetpos(::std::string* targetpos);

  // optional sint32 CampId = 4 [default = -1];
  bool has_campid() const;
  void clear_campid();
  static const int kCampIdFieldNumber = 4;
  ::google::protobuf::int32 campid() const;
  void set_campid(::google::protobuf::int32 value);

  // optional sint32 Type = 1 [default = -1];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional sint32 ObjId = 2 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 2;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightSnipeAction)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_objid();
  void clear_has_objid();
  void set_has_targetpos();
  void clear_has_targetpos();
  void set_has_campid();
  void clear_has_campid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr targetpos_;
  ::google::protobuf::int32 campid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 objid_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightHurtAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightHurtAction) */ {
 public:
  FightHurtAction();
  virtual ~FightHurtAction();

  FightHurtAction(const FightHurtAction& from);

  inline FightHurtAction& operator=(const FightHurtAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightHurtAction(FightHurtAction&& from) noexcept
    : FightHurtAction() {
    *this = ::std::move(from);
  }

  inline FightHurtAction& operator=(FightHurtAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightHurtAction& default_instance();

  static inline const FightHurtAction* internal_default_instance() {
    return reinterpret_cast<const FightHurtAction*>(
               &_FightHurtAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(FightHurtAction* other);
  friend void swap(FightHurtAction& a, FightHurtAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightHurtAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightHurtAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightHurtAction& from);
  void MergeFrom(const FightHurtAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightHurtAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 BackDir = 15 [default = 0];
  bool has_backdir() const;
  void clear_backdir();
  static const int kBackDirFieldNumber = 15;
  ::google::protobuf::int32 backdir() const;
  void set_backdir(::google::protobuf::int32 value);

  // optional bool AttackBack = 3 [default = false];
  bool has_attackback() const;
  void clear_attackback();
  static const int kAttackBackFieldNumber = 3;
  bool attackback() const;
  void set_attackback(bool value);

  // optional bool AttackAir = 6 [default = false];
  bool has_attackair() const;
  void clear_attackair();
  static const int kAttackAirFieldNumber = 6;
  bool attackair() const;
  void set_attackair(bool value);

  // optional bool IsCrit = 23 [default = false];
  bool has_iscrit() const;
  void clear_iscrit();
  static const int kIsCritFieldNumber = 23;
  bool iscrit() const;
  void set_iscrit(bool value);

  // optional bool IsHitGround = 33 [default = false];
  bool has_ishitground() const;
  void clear_ishitground();
  static const int kIsHitGroundFieldNumber = 33;
  bool ishitground() const;
  void set_ishitground(bool value);

  // optional sint32 EnemyIndex = 35 [default = -1];
  bool has_enemyindex() const;
  void clear_enemyindex();
  static const int kEnemyIndexFieldNumber = 35;
  ::google::protobuf::int32 enemyindex() const;
  void set_enemyindex(::google::protobuf::int32 value);

  // optional sint32 ObjId = 1 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 1;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // optional sint32 SkillId = 2 [default = -1];
  bool has_skillid() const;
  void clear_skillid();
  static const int kSkillIdFieldNumber = 2;
  ::google::protobuf::int32 skillid() const;
  void set_skillid(::google::protobuf::int32 value);

  // optional sint32 TargetObjId = 16 [default = -1];
  bool has_targetobjid() const;
  void clear_targetobjid();
  static const int kTargetObjIdFieldNumber = 16;
  ::google::protobuf::int32 targetobjid() const;
  void set_targetobjid(::google::protobuf::int32 value);

  // optional sint32 OwnHP = 17 [default = -1];
  bool has_ownhp() const;
  void clear_ownhp();
  static const int kOwnHPFieldNumber = 17;
  ::google::protobuf::int32 ownhp() const;
  void set_ownhp(::google::protobuf::int32 value);

  // optional sint32 TargetHP = 18 [default = -1];
  bool has_targethp() const;
  void clear_targethp();
  static const int kTargetHPFieldNumber = 18;
  ::google::protobuf::int32 targethp() const;
  void set_targethp(::google::protobuf::int32 value);

  // optional sint32 OwnHPChange = 19 [default = -1];
  bool has_ownhpchange() const;
  void clear_ownhpchange();
  static const int kOwnHPChangeFieldNumber = 19;
  ::google::protobuf::int32 ownhpchange() const;
  void set_ownhpchange(::google::protobuf::int32 value);

  // optional sint32 TargetHPChange = 20 [default = -1];
  bool has_targethpchange() const;
  void clear_targethpchange();
  static const int kTargetHPChangeFieldNumber = 20;
  ::google::protobuf::int32 targethpchange() const;
  void set_targethpchange(::google::protobuf::int32 value);

  // optional sint32 TotalDamage = 24 [default = -1];
  bool has_totaldamage() const;
  void clear_totaldamage();
  static const int kTotalDamageFieldNumber = 24;
  ::google::protobuf::int32 totaldamage() const;
  void set_totaldamage(::google::protobuf::int32 value);

  // optional sint32 SegmentIndex = 30 [default = -1];
  bool has_segmentindex() const;
  void clear_segmentindex();
  static const int kSegmentIndexFieldNumber = 30;
  ::google::protobuf::int32 segmentindex() const;
  void set_segmentindex(::google::protobuf::int32 value);

  // optional sint32 HurtType = 31 [default = -1];
  bool has_hurttype() const;
  void clear_hurttype();
  static const int kHurtTypeFieldNumber = 31;
  ::google::protobuf::int32 hurttype() const;
  void set_hurttype(::google::protobuf::int32 value);

  // optional sint32 AttackSegment = 32 [default = -1];
  bool has_attacksegment() const;
  void clear_attacksegment();
  static const int kAttackSegmentFieldNumber = 32;
  ::google::protobuf::int32 attacksegment() const;
  void set_attacksegment(::google::protobuf::int32 value);

  // optional sint32 TargetMaxHP = 34 [default = -1];
  bool has_targetmaxhp() const;
  void clear_targetmaxhp();
  static const int kTargetMaxHPFieldNumber = 34;
  ::google::protobuf::int32 targetmaxhp() const;
  void set_targetmaxhp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightHurtAction)
 private:
  void set_has_objid();
  void clear_has_objid();
  void set_has_skillid();
  void clear_has_skillid();
  void set_has_attackback();
  void clear_has_attackback();
  void set_has_attackair();
  void clear_has_attackair();
  void set_has_backdir();
  void clear_has_backdir();
  void set_has_targetobjid();
  void clear_has_targetobjid();
  void set_has_ownhp();
  void clear_has_ownhp();
  void set_has_targethp();
  void clear_has_targethp();
  void set_has_ownhpchange();
  void clear_has_ownhpchange();
  void set_has_targethpchange();
  void clear_has_targethpchange();
  void set_has_iscrit();
  void clear_has_iscrit();
  void set_has_totaldamage();
  void clear_has_totaldamage();
  void set_has_segmentindex();
  void clear_has_segmentindex();
  void set_has_hurttype();
  void clear_has_hurttype();
  void set_has_attacksegment();
  void clear_has_attacksegment();
  void set_has_ishitground();
  void clear_has_ishitground();
  void set_has_targetmaxhp();
  void clear_has_targetmaxhp();
  void set_has_enemyindex();
  void clear_has_enemyindex();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 backdir_;
  bool attackback_;
  bool attackair_;
  bool iscrit_;
  bool ishitground_;
  ::google::protobuf::int32 enemyindex_;
  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 targetobjid_;
  ::google::protobuf::int32 ownhp_;
  ::google::protobuf::int32 targethp_;
  ::google::protobuf::int32 ownhpchange_;
  ::google::protobuf::int32 targethpchange_;
  ::google::protobuf::int32 totaldamage_;
  ::google::protobuf::int32 segmentindex_;
  ::google::protobuf::int32 hurttype_;
  ::google::protobuf::int32 attacksegment_;
  ::google::protobuf::int32 targetmaxhp_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightDodgeAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightDodgeAction) */ {
 public:
  FightDodgeAction();
  virtual ~FightDodgeAction();

  FightDodgeAction(const FightDodgeAction& from);

  inline FightDodgeAction& operator=(const FightDodgeAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightDodgeAction(FightDodgeAction&& from) noexcept
    : FightDodgeAction() {
    *this = ::std::move(from);
  }

  inline FightDodgeAction& operator=(FightDodgeAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightDodgeAction& default_instance();

  static inline const FightDodgeAction* internal_default_instance() {
    return reinterpret_cast<const FightDodgeAction*>(
               &_FightDodgeAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(FightDodgeAction* other);
  friend void swap(FightDodgeAction& a, FightDodgeAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightDodgeAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightDodgeAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightDodgeAction& from);
  void MergeFrom(const FightDodgeAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightDodgeAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 ObjId = 1 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 1;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // optional sint32 SkillId = 2 [default = -1];
  bool has_skillid() const;
  void clear_skillid();
  static const int kSkillIdFieldNumber = 2;
  ::google::protobuf::int32 skillid() const;
  void set_skillid(::google::protobuf::int32 value);

  // optional sint32 AttackerObjId = 3 [default = -1];
  bool has_attackerobjid() const;
  void clear_attackerobjid();
  static const int kAttackerObjIdFieldNumber = 3;
  ::google::protobuf::int32 attackerobjid() const;
  void set_attackerobjid(::google::protobuf::int32 value);

  // optional sint32 Type = 4 [default = 1];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightDodgeAction)
 private:
  void set_has_objid();
  void clear_has_objid();
  void set_has_skillid();
  void clear_has_skillid();
  void set_has_attackerobjid();
  void clear_has_attackerobjid();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 attackerobjid_;
  ::google::protobuf::int32 type_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightRemoveObjAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightRemoveObjAction) */ {
 public:
  FightRemoveObjAction();
  virtual ~FightRemoveObjAction();

  FightRemoveObjAction(const FightRemoveObjAction& from);

  inline FightRemoveObjAction& operator=(const FightRemoveObjAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightRemoveObjAction(FightRemoveObjAction&& from) noexcept
    : FightRemoveObjAction() {
    *this = ::std::move(from);
  }

  inline FightRemoveObjAction& operator=(FightRemoveObjAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightRemoveObjAction& default_instance();

  static inline const FightRemoveObjAction* internal_default_instance() {
    return reinterpret_cast<const FightRemoveObjAction*>(
               &_FightRemoveObjAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(FightRemoveObjAction* other);
  friend void swap(FightRemoveObjAction& a, FightRemoveObjAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightRemoveObjAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightRemoveObjAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightRemoveObjAction& from);
  void MergeFrom(const FightRemoveObjAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightRemoveObjAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 ObjId = 1 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 1;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightRemoveObjAction)
 private:
  void set_has_objid();
  void clear_has_objid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 objid_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightStormBaseAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightStormBaseAction) */ {
 public:
  FightStormBaseAction();
  virtual ~FightStormBaseAction();

  FightStormBaseAction(const FightStormBaseAction& from);

  inline FightStormBaseAction& operator=(const FightStormBaseAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightStormBaseAction(FightStormBaseAction&& from) noexcept
    : FightStormBaseAction() {
    *this = ::std::move(from);
  }

  inline FightStormBaseAction& operator=(FightStormBaseAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightStormBaseAction& default_instance();

  static inline const FightStormBaseAction* internal_default_instance() {
    return reinterpret_cast<const FightStormBaseAction*>(
               &_FightStormBaseAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(FightStormBaseAction* other);
  friend void swap(FightStormBaseAction& a, FightStormBaseAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightStormBaseAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightStormBaseAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightStormBaseAction& from);
  void MergeFrom(const FightStormBaseAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightStormBaseAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 6;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional sint32 ID = 5 [default = -1];
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 5;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional sint32 Type = 1 [default = -1];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional sint32 Mark = 2 [default = -1];
  bool has_mark() const;
  void clear_mark();
  static const int kMarkFieldNumber = 2;
  ::google::protobuf::int32 mark() const;
  void set_mark(::google::protobuf::int32 value);

  // optional sint32 CampId = 3 [default = -1];
  bool has_campid() const;
  void clear_campid();
  static const int kCampIdFieldNumber = 3;
  ::google::protobuf::int32 campid() const;
  void set_campid(::google::protobuf::int32 value);

  // optional sint32 ObjId = 4 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 4;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightStormBaseAction)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_mark();
  void clear_has_mark();
  void set_has_campid();
  void clear_has_campid();
  void set_has_objid();
  void clear_has_objid();
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 mark_;
  ::google::protobuf::int32 campid_;
  ::google::protobuf::int32 objid_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightStormResAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightStormResAction) */ {
 public:
  FightStormResAction();
  virtual ~FightStormResAction();

  FightStormResAction(const FightStormResAction& from);

  inline FightStormResAction& operator=(const FightStormResAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightStormResAction(FightStormResAction&& from) noexcept
    : FightStormResAction() {
    *this = ::std::move(from);
  }

  inline FightStormResAction& operator=(FightStormResAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightStormResAction& default_instance();

  static inline const FightStormResAction* internal_default_instance() {
    return reinterpret_cast<const FightStormResAction*>(
               &_FightStormResAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(FightStormResAction* other);
  friend void swap(FightStormResAction& a, FightStormResAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightStormResAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightStormResAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightStormResAction& from);
  void MergeFrom(const FightStormResAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightStormResAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 BaseId = 1 [default = -1];
  bool has_baseid() const;
  void clear_baseid();
  static const int kBaseIdFieldNumber = 1;
  ::google::protobuf::int32 baseid() const;
  void set_baseid(::google::protobuf::int32 value);

  // optional sint32 CampId = 2 [default = -1];
  bool has_campid() const;
  void clear_campid();
  static const int kCampIdFieldNumber = 2;
  ::google::protobuf::int32 campid() const;
  void set_campid(::google::protobuf::int32 value);

  // optional sint32 UpdateNum = 3 [default = -1];
  bool has_updatenum() const;
  void clear_updatenum();
  static const int kUpdateNumFieldNumber = 3;
  ::google::protobuf::int32 updatenum() const;
  void set_updatenum(::google::protobuf::int32 value);

  // optional sint32 TotalNum = 4 [default = -1];
  bool has_totalnum() const;
  void clear_totalnum();
  static const int kTotalNumFieldNumber = 4;
  ::google::protobuf::int32 totalnum() const;
  void set_totalnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightStormResAction)
 private:
  void set_has_baseid();
  void clear_has_baseid();
  void set_has_campid();
  void clear_has_campid();
  void set_has_updatenum();
  void clear_has_updatenum();
  void set_has_totalnum();
  void clear_has_totalnum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 baseid_;
  ::google::protobuf::int32 campid_;
  ::google::protobuf::int32 updatenum_;
  ::google::protobuf::int32 totalnum_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightStormFlagAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightStormFlagAction) */ {
 public:
  FightStormFlagAction();
  virtual ~FightStormFlagAction();

  FightStormFlagAction(const FightStormFlagAction& from);

  inline FightStormFlagAction& operator=(const FightStormFlagAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightStormFlagAction(FightStormFlagAction&& from) noexcept
    : FightStormFlagAction() {
    *this = ::std::move(from);
  }

  inline FightStormFlagAction& operator=(FightStormFlagAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightStormFlagAction& default_instance();

  static inline const FightStormFlagAction* internal_default_instance() {
    return reinterpret_cast<const FightStormFlagAction*>(
               &_FightStormFlagAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(FightStormFlagAction* other);
  friend void swap(FightStormFlagAction& a, FightStormFlagAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightStormFlagAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightStormFlagAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightStormFlagAction& from);
  void MergeFrom(const FightStormFlagAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightStormFlagAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Type = 1 [default = 1];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional sint32 Time = 2 [default = -1];
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // optional sint32 FlagObjId = 3 [default = -1];
  bool has_flagobjid() const;
  void clear_flagobjid();
  static const int kFlagObjIdFieldNumber = 3;
  ::google::protobuf::int32 flagobjid() const;
  void set_flagobjid(::google::protobuf::int32 value);

  // optional sint32 ObjId1 = 4 [default = -1];
  bool has_objid1() const;
  void clear_objid1();
  static const int kObjId1FieldNumber = 4;
  ::google::protobuf::int32 objid1() const;
  void set_objid1(::google::protobuf::int32 value);

  // optional sint32 ObjId2 = 5 [default = -1];
  bool has_objid2() const;
  void clear_objid2();
  static const int kObjId2FieldNumber = 5;
  ::google::protobuf::int32 objid2() const;
  void set_objid2(::google::protobuf::int32 value);

  // optional sint32 Result = 6 [default = -1];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 6;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightStormFlagAction)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_time();
  void clear_has_time();
  void set_has_flagobjid();
  void clear_has_flagobjid();
  void set_has_objid1();
  void clear_has_objid1();
  void set_has_objid2();
  void clear_has_objid2();
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 flagobjid_;
  ::google::protobuf::int32 objid1_;
  ::google::protobuf::int32 objid2_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightStormCampAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightStormCampAction) */ {
 public:
  FightStormCampAction();
  virtual ~FightStormCampAction();

  FightStormCampAction(const FightStormCampAction& from);

  inline FightStormCampAction& operator=(const FightStormCampAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightStormCampAction(FightStormCampAction&& from) noexcept
    : FightStormCampAction() {
    *this = ::std::move(from);
  }

  inline FightStormCampAction& operator=(FightStormCampAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightStormCampAction& default_instance();

  static inline const FightStormCampAction* internal_default_instance() {
    return reinterpret_cast<const FightStormCampAction*>(
               &_FightStormCampAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(FightStormCampAction* other);
  friend void swap(FightStormCampAction& a, FightStormCampAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightStormCampAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightStormCampAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightStormCampAction& from);
  void MergeFrom(const FightStormCampAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightStormCampAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sint32 ObjArr = 1;
  int objarr_size() const;
  void clear_objarr();
  static const int kObjArrFieldNumber = 1;
  ::google::protobuf::int32 objarr(int index) const;
  void set_objarr(int index, ::google::protobuf::int32 value);
  void add_objarr(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      objarr() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_objarr();

  // optional sint32 TotalNum = 3 [default = 0];
  bool has_totalnum() const;
  void clear_totalnum();
  static const int kTotalNumFieldNumber = 3;
  ::google::protobuf::int32 totalnum() const;
  void set_totalnum(::google::protobuf::int32 value);

  // optional sint32 Type = 5 [default = -1];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional sint32 CampId = 2 [default = -1];
  bool has_campid() const;
  void clear_campid();
  static const int kCampIdFieldNumber = 2;
  ::google::protobuf::int32 campid() const;
  void set_campid(::google::protobuf::int32 value);

  // optional sint32 Color = 4 [default = -1];
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 4;
  ::google::protobuf::int32 color() const;
  void set_color(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightStormCampAction)
 private:
  void set_has_campid();
  void clear_has_campid();
  void set_has_totalnum();
  void clear_has_totalnum();
  void set_has_color();
  void clear_has_color();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > objarr_;
  ::google::protobuf::int32 totalnum_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 campid_;
  ::google::protobuf::int32 color_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightStormResultAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightStormResultAction) */ {
 public:
  FightStormResultAction();
  virtual ~FightStormResultAction();

  FightStormResultAction(const FightStormResultAction& from);

  inline FightStormResultAction& operator=(const FightStormResultAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightStormResultAction(FightStormResultAction&& from) noexcept
    : FightStormResultAction() {
    *this = ::std::move(from);
  }

  inline FightStormResultAction& operator=(FightStormResultAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightStormResultAction& default_instance();

  static inline const FightStormResultAction* internal_default_instance() {
    return reinterpret_cast<const FightStormResultAction*>(
               &_FightStormResultAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(FightStormResultAction* other);
  friend void swap(FightStormResultAction& a, FightStormResultAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightStormResultAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightStormResultAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightStormResultAction& from);
  void MergeFrom(const FightStormResultAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightStormResultAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FightStormCampInfo CampArr = 1;
  int camparr_size() const;
  void clear_camparr();
  static const int kCampArrFieldNumber = 1;
  const ::FightStormCampInfo& camparr(int index) const;
  ::FightStormCampInfo* mutable_camparr(int index);
  ::FightStormCampInfo* add_camparr();
  ::google::protobuf::RepeatedPtrField< ::FightStormCampInfo >*
      mutable_camparr();
  const ::google::protobuf::RepeatedPtrField< ::FightStormCampInfo >&
      camparr() const;

  // optional bool IsSvrSend = 3 [default = false];
  bool has_issvrsend() const;
  void clear_issvrsend();
  static const int kIsSvrSendFieldNumber = 3;
  bool issvrsend() const;
  void set_issvrsend(bool value);

  // @@protoc_insertion_point(class_scope:FightStormResultAction)
 private:
  void set_has_issvrsend();
  void clear_has_issvrsend();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FightStormCampInfo > camparr_;
  bool issvrsend_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightStormCampInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightStormCampInfo) */ {
 public:
  FightStormCampInfo();
  virtual ~FightStormCampInfo();

  FightStormCampInfo(const FightStormCampInfo& from);

  inline FightStormCampInfo& operator=(const FightStormCampInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightStormCampInfo(FightStormCampInfo&& from) noexcept
    : FightStormCampInfo() {
    *this = ::std::move(from);
  }

  inline FightStormCampInfo& operator=(FightStormCampInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightStormCampInfo& default_instance();

  static inline const FightStormCampInfo* internal_default_instance() {
    return reinterpret_cast<const FightStormCampInfo*>(
               &_FightStormCampInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(FightStormCampInfo* other);
  friend void swap(FightStormCampInfo& a, FightStormCampInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightStormCampInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FightStormCampInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightStormCampInfo& from);
  void MergeFrom(const FightStormCampInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightStormCampInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FightStormPlayerInfo PlayerArr = 1;
  int playerarr_size() const;
  void clear_playerarr();
  static const int kPlayerArrFieldNumber = 1;
  const ::FightStormPlayerInfo& playerarr(int index) const;
  ::FightStormPlayerInfo* mutable_playerarr(int index);
  ::FightStormPlayerInfo* add_playerarr();
  ::google::protobuf::RepeatedPtrField< ::FightStormPlayerInfo >*
      mutable_playerarr();
  const ::google::protobuf::RepeatedPtrField< ::FightStormPlayerInfo >&
      playerarr() const;

  // optional sint32 CampId = 2 [default = -1];
  bool has_campid() const;
  void clear_campid();
  static const int kCampIdFieldNumber = 2;
  ::google::protobuf::int32 campid() const;
  void set_campid(::google::protobuf::int32 value);

  // optional sint32 TotalNum = 3 [default = -1];
  bool has_totalnum() const;
  void clear_totalnum();
  static const int kTotalNumFieldNumber = 3;
  ::google::protobuf::int32 totalnum() const;
  void set_totalnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightStormCampInfo)
 private:
  void set_has_campid();
  void clear_has_campid();
  void set_has_totalnum();
  void clear_has_totalnum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FightStormPlayerInfo > playerarr_;
  ::google::protobuf::int32 campid_;
  ::google::protobuf::int32 totalnum_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightStormPlayerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightStormPlayerInfo) */ {
 public:
  FightStormPlayerInfo();
  virtual ~FightStormPlayerInfo();

  FightStormPlayerInfo(const FightStormPlayerInfo& from);

  inline FightStormPlayerInfo& operator=(const FightStormPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightStormPlayerInfo(FightStormPlayerInfo&& from) noexcept
    : FightStormPlayerInfo() {
    *this = ::std::move(from);
  }

  inline FightStormPlayerInfo& operator=(FightStormPlayerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightStormPlayerInfo& default_instance();

  static inline const FightStormPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const FightStormPlayerInfo*>(
               &_FightStormPlayerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(FightStormPlayerInfo* other);
  friend void swap(FightStormPlayerInfo& a, FightStormPlayerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightStormPlayerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FightStormPlayerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightStormPlayerInfo& from);
  void MergeFrom(const FightStormPlayerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightStormPlayerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional sint32 KilledNum = 1 [default = 0];
  bool has_killednum() const;
  void clear_killednum();
  static const int kKilledNumFieldNumber = 1;
  ::google::protobuf::int32 killednum() const;
  void set_killednum(::google::protobuf::int32 value);

  // optional sint32 DeadTimes = 2 [default = 0];
  bool has_deadtimes() const;
  void clear_deadtimes();
  static const int kDeadTimesFieldNumber = 2;
  ::google::protobuf::int32 deadtimes() const;
  void set_deadtimes(::google::protobuf::int32 value);

  // optional sint32 FlagTimes = 5 [default = 0];
  bool has_flagtimes() const;
  void clear_flagtimes();
  static const int kFlagTimesFieldNumber = 5;
  ::google::protobuf::int32 flagtimes() const;
  void set_flagtimes(::google::protobuf::int32 value);

  // optional sint64 OutputDamage = 7 [default = -1];
  bool has_outputdamage() const;
  void clear_outputdamage();
  static const int kOutputDamageFieldNumber = 7;
  ::google::protobuf::int64 outputdamage() const;
  void set_outputdamage(::google::protobuf::int64 value);

  // optional sint64 EndureDamage = 8 [default = -1];
  bool has_enduredamage() const;
  void clear_enduredamage();
  static const int kEndureDamageFieldNumber = 8;
  ::google::protobuf::int64 enduredamage() const;
  void set_enduredamage(::google::protobuf::int64 value);

  // optional sint32 Prof = 6 [default = -1];
  bool has_prof() const;
  void clear_prof();
  static const int kProfFieldNumber = 6;
  ::google::protobuf::int32 prof() const;
  void set_prof(::google::protobuf::int32 value);

  // optional sint32 ObjId = 10 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 10;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // optional sint64 TreatDamage = 9 [default = -1];
  bool has_treatdamage() const;
  void clear_treatdamage();
  static const int kTreatDamageFieldNumber = 9;
  ::google::protobuf::int64 treatdamage() const;
  void set_treatdamage(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:FightStormPlayerInfo)
 private:
  void set_has_killednum();
  void clear_has_killednum();
  void set_has_deadtimes();
  void clear_has_deadtimes();
  void set_has_name();
  void clear_has_name();
  void set_has_flagtimes();
  void clear_has_flagtimes();
  void set_has_prof();
  void clear_has_prof();
  void set_has_outputdamage();
  void clear_has_outputdamage();
  void set_has_enduredamage();
  void clear_has_enduredamage();
  void set_has_treatdamage();
  void clear_has_treatdamage();
  void set_has_objid();
  void clear_has_objid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 killednum_;
  ::google::protobuf::int32 deadtimes_;
  ::google::protobuf::int32 flagtimes_;
  ::google::protobuf::int64 outputdamage_;
  ::google::protobuf::int64 enduredamage_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int32 objid_;
  ::google::protobuf::int64 treatdamage_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightCreateAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightCreateAction) */ {
 public:
  FightCreateAction();
  virtual ~FightCreateAction();

  FightCreateAction(const FightCreateAction& from);

  inline FightCreateAction& operator=(const FightCreateAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightCreateAction(FightCreateAction&& from) noexcept
    : FightCreateAction() {
    *this = ::std::move(from);
  }

  inline FightCreateAction& operator=(FightCreateAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightCreateAction& default_instance();

  static inline const FightCreateAction* internal_default_instance() {
    return reinterpret_cast<const FightCreateAction*>(
               &_FightCreateAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(FightCreateAction* other);
  friend void swap(FightCreateAction& a, FightCreateAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightCreateAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightCreateAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightCreateAction& from);
  void MergeFrom(const FightCreateAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightCreateAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sint32 IntParaList = 8;
  int intparalist_size() const;
  void clear_intparalist();
  static const int kIntParaListFieldNumber = 8;
  ::google::protobuf::int32 intparalist(int index) const;
  void set_intparalist(int index, ::google::protobuf::int32 value);
  void add_intparalist(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      intparalist() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_intparalist();

  // repeated float FloatParaList = 9;
  int floatparalist_size() const;
  void clear_floatparalist();
  static const int kFloatParaListFieldNumber = 9;
  float floatparalist(int index) const;
  void set_floatparalist(int index, float value);
  void add_floatparalist(float value);
  const ::google::protobuf::RepeatedField< float >&
      floatparalist() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_floatparalist();

  // repeated .EquipSkillBuff2 EquipBuffArr = 13;
  int equipbuffarr_size() const;
  void clear_equipbuffarr();
  static const int kEquipBuffArrFieldNumber = 13;
  const ::EquipSkillBuff2& equipbuffarr(int index) const;
  ::EquipSkillBuff2* mutable_equipbuffarr(int index);
  ::EquipSkillBuff2* add_equipbuffarr();
  ::google::protobuf::RepeatedPtrField< ::EquipSkillBuff2 >*
      mutable_equipbuffarr();
  const ::google::protobuf::RepeatedPtrField< ::EquipSkillBuff2 >&
      equipbuffarr() const;

  // repeated .EquipSkillBuff2 EquipSkillArr = 14;
  int equipskillarr_size() const;
  void clear_equipskillarr();
  static const int kEquipSkillArrFieldNumber = 14;
  const ::EquipSkillBuff2& equipskillarr(int index) const;
  ::EquipSkillBuff2* mutable_equipskillarr(int index);
  ::EquipSkillBuff2* add_equipskillarr();
  ::google::protobuf::RepeatedPtrField< ::EquipSkillBuff2 >*
      mutable_equipskillarr();
  const ::google::protobuf::RepeatedPtrField< ::EquipSkillBuff2 >&
      equipskillarr() const;

  // repeated .KeyValue2 AttrArr = 15;
  int attrarr_size() const;
  void clear_attrarr();
  static const int kAttrArrFieldNumber = 15;
  const ::KeyValue2& attrarr(int index) const;
  ::KeyValue2* mutable_attrarr(int index);
  ::KeyValue2* add_attrarr();
  ::google::protobuf::RepeatedPtrField< ::KeyValue2 >*
      mutable_attrarr();
  const ::google::protobuf::RepeatedPtrField< ::KeyValue2 >&
      attrarr() const;

  // optional bytes PosInfo = 4;
  bool has_posinfo() const;
  void clear_posinfo();
  static const int kPosInfoFieldNumber = 4;
  const ::std::string& posinfo() const;
  void set_posinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_posinfo(::std::string&& value);
  #endif
  void set_posinfo(const char* value);
  void set_posinfo(const void* value, size_t size);
  ::std::string* mutable_posinfo();
  ::std::string* release_posinfo();
  void set_allocated_posinfo(::std::string* posinfo);

  // optional bytes PosInfo2 = 7;
  bool has_posinfo2() const;
  void clear_posinfo2();
  static const int kPosInfo2FieldNumber = 7;
  const ::std::string& posinfo2() const;
  void set_posinfo2(const ::std::string& value);
  #if LANG_CXX11
  void set_posinfo2(::std::string&& value);
  #endif
  void set_posinfo2(const char* value);
  void set_posinfo2(const void* value, size_t size);
  ::std::string* mutable_posinfo2();
  ::std::string* release_posinfo2();
  void set_allocated_posinfo2(::std::string* posinfo2);

  // optional string Name = 12;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 12;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bool IsShowEffect = 18 [default = false];
  bool has_isshoweffect() const;
  void clear_isshoweffect();
  static const int kIsShowEffectFieldNumber = 18;
  bool isshoweffect() const;
  void set_isshoweffect(bool value);

  // optional sint64 UserId = 1 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // optional sint32 ConfigId = 2 [default = -1];
  bool has_configid() const;
  void clear_configid();
  static const int kConfigIdFieldNumber = 2;
  ::google::protobuf::int32 configid() const;
  void set_configid(::google::protobuf::int32 value);

  // optional sint32 ObjId = 3 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 3;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // optional sint32 ObjType = 5 [default = -1];
  bool has_objtype() const;
  void clear_objtype();
  static const int kObjTypeFieldNumber = 5;
  ::google::protobuf::int32 objtype() const;
  void set_objtype(::google::protobuf::int32 value);

  // optional sint32 CampId = 6 [default = -1];
  bool has_campid() const;
  void clear_campid();
  static const int kCampIdFieldNumber = 6;
  ::google::protobuf::int32 campid() const;
  void set_campid(::google::protobuf::int32 value);

  // optional sint32 CurState = 10 [default = -1];
  bool has_curstate() const;
  void clear_curstate();
  static const int kCurStateFieldNumber = 10;
  ::google::protobuf::int32 curstate() const;
  void set_curstate(::google::protobuf::int32 value);

  // optional sint32 CurHp = 11 [default = -1];
  bool has_curhp() const;
  void clear_curhp();
  static const int kCurHpFieldNumber = 11;
  ::google::protobuf::int32 curhp() const;
  void set_curhp(::google::protobuf::int32 value);

  // optional sint32 Level = 16 [default = -1];
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 16;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional sint32 TableType = 17 [default = -1];
  bool has_tabletype() const;
  void clear_tabletype();
  static const int kTableTypeFieldNumber = 17;
  ::google::protobuf::int32 tabletype() const;
  void set_tabletype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightCreateAction)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_configid();
  void clear_has_configid();
  void set_has_objid();
  void clear_has_objid();
  void set_has_posinfo();
  void clear_has_posinfo();
  void set_has_objtype();
  void clear_has_objtype();
  void set_has_campid();
  void clear_has_campid();
  void set_has_posinfo2();
  void clear_has_posinfo2();
  void set_has_curstate();
  void clear_has_curstate();
  void set_has_curhp();
  void clear_has_curhp();
  void set_has_name();
  void clear_has_name();
  void set_has_level();
  void clear_has_level();
  void set_has_tabletype();
  void clear_has_tabletype();
  void set_has_isshoweffect();
  void clear_has_isshoweffect();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > intparalist_;
  ::google::protobuf::RepeatedField< float > floatparalist_;
  ::google::protobuf::RepeatedPtrField< ::EquipSkillBuff2 > equipbuffarr_;
  ::google::protobuf::RepeatedPtrField< ::EquipSkillBuff2 > equipskillarr_;
  ::google::protobuf::RepeatedPtrField< ::KeyValue2 > attrarr_;
  ::google::protobuf::internal::ArenaStringPtr posinfo_;
  ::google::protobuf::internal::ArenaStringPtr posinfo2_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  bool isshoweffect_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 configid_;
  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 objtype_;
  ::google::protobuf::int32 campid_;
  ::google::protobuf::int32 curstate_;
  ::google::protobuf::int32 curhp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 tabletype_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightQuickFinishAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightQuickFinishAction) */ {
 public:
  FightQuickFinishAction();
  virtual ~FightQuickFinishAction();

  FightQuickFinishAction(const FightQuickFinishAction& from);

  inline FightQuickFinishAction& operator=(const FightQuickFinishAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightQuickFinishAction(FightQuickFinishAction&& from) noexcept
    : FightQuickFinishAction() {
    *this = ::std::move(from);
  }

  inline FightQuickFinishAction& operator=(FightQuickFinishAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightQuickFinishAction& default_instance();

  static inline const FightQuickFinishAction* internal_default_instance() {
    return reinterpret_cast<const FightQuickFinishAction*>(
               &_FightQuickFinishAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(FightQuickFinishAction* other);
  friend void swap(FightQuickFinishAction& a, FightQuickFinishAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightQuickFinishAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightQuickFinishAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightQuickFinishAction& from);
  void MergeFrom(const FightQuickFinishAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightQuickFinishAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Type = 1 [default = 0];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightQuickFinishAction)
 private:
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightFinishLevelAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightFinishLevelAction) */ {
 public:
  FightFinishLevelAction();
  virtual ~FightFinishLevelAction();

  FightFinishLevelAction(const FightFinishLevelAction& from);

  inline FightFinishLevelAction& operator=(const FightFinishLevelAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightFinishLevelAction(FightFinishLevelAction&& from) noexcept
    : FightFinishLevelAction() {
    *this = ::std::move(from);
  }

  inline FightFinishLevelAction& operator=(FightFinishLevelAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightFinishLevelAction& default_instance();

  static inline const FightFinishLevelAction* internal_default_instance() {
    return reinterpret_cast<const FightFinishLevelAction*>(
               &_FightFinishLevelAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(FightFinishLevelAction* other);
  friend void swap(FightFinishLevelAction& a, FightFinishLevelAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightFinishLevelAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightFinishLevelAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightFinishLevelAction& from);
  void MergeFrom(const FightFinishLevelAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightFinishLevelAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 WallObjId = 3 [default = -1];
  bool has_wallobjid() const;
  void clear_wallobjid();
  static const int kWallObjIdFieldNumber = 3;
  ::google::protobuf::int32 wallobjid() const;
  void set_wallobjid(::google::protobuf::int32 value);

  // optional sint32 Result = 1 [default = -1];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional sint32 Type = 2 [default = 2];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightFinishLevelAction)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_type();
  void clear_has_type();
  void set_has_wallobjid();
  void clear_has_wallobjid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 wallobjid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 type_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightTowerLockAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightTowerLockAction) */ {
 public:
  FightTowerLockAction();
  virtual ~FightTowerLockAction();

  FightTowerLockAction(const FightTowerLockAction& from);

  inline FightTowerLockAction& operator=(const FightTowerLockAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightTowerLockAction(FightTowerLockAction&& from) noexcept
    : FightTowerLockAction() {
    *this = ::std::move(from);
  }

  inline FightTowerLockAction& operator=(FightTowerLockAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightTowerLockAction& default_instance();

  static inline const FightTowerLockAction* internal_default_instance() {
    return reinterpret_cast<const FightTowerLockAction*>(
               &_FightTowerLockAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(FightTowerLockAction* other);
  friend void swap(FightTowerLockAction& a, FightTowerLockAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightTowerLockAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightTowerLockAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightTowerLockAction& from);
  void MergeFrom(const FightTowerLockAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightTowerLockAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Type = 3 [default = 0];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional sint32 TargetObjId = 1 [default = -1];
  bool has_targetobjid() const;
  void clear_targetobjid();
  static const int kTargetObjIdFieldNumber = 1;
  ::google::protobuf::int32 targetobjid() const;
  void set_targetobjid(::google::protobuf::int32 value);

  // optional sint32 ObjId = 2 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 2;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightTowerLockAction)
 private:
  void set_has_targetobjid();
  void clear_has_targetobjid();
  void set_has_objid();
  void clear_has_objid();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 targetobjid_;
  ::google::protobuf::int32 objid_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightStormStartAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightStormStartAction) */ {
 public:
  FightStormStartAction();
  virtual ~FightStormStartAction();

  FightStormStartAction(const FightStormStartAction& from);

  inline FightStormStartAction& operator=(const FightStormStartAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightStormStartAction(FightStormStartAction&& from) noexcept
    : FightStormStartAction() {
    *this = ::std::move(from);
  }

  inline FightStormStartAction& operator=(FightStormStartAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightStormStartAction& default_instance();

  static inline const FightStormStartAction* internal_default_instance() {
    return reinterpret_cast<const FightStormStartAction*>(
               &_FightStormStartAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(FightStormStartAction* other);
  friend void swap(FightStormStartAction& a, FightStormStartAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightStormStartAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightStormStartAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightStormStartAction& from);
  void MergeFrom(const FightStormStartAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightStormStartAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Type = 1 [default = -1];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional sint32 Time = 2 [default = -1];
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightStormStartAction)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_time();
  void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 time_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightEscapeStartAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightEscapeStartAction) */ {
 public:
  FightEscapeStartAction();
  virtual ~FightEscapeStartAction();

  FightEscapeStartAction(const FightEscapeStartAction& from);

  inline FightEscapeStartAction& operator=(const FightEscapeStartAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightEscapeStartAction(FightEscapeStartAction&& from) noexcept
    : FightEscapeStartAction() {
    *this = ::std::move(from);
  }

  inline FightEscapeStartAction& operator=(FightEscapeStartAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightEscapeStartAction& default_instance();

  static inline const FightEscapeStartAction* internal_default_instance() {
    return reinterpret_cast<const FightEscapeStartAction*>(
               &_FightEscapeStartAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(FightEscapeStartAction* other);
  friend void swap(FightEscapeStartAction& a, FightEscapeStartAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightEscapeStartAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightEscapeStartAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightEscapeStartAction& from);
  void MergeFrom(const FightEscapeStartAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightEscapeStartAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Type = 1 [default = -1];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional sint32 Time = 2 [default = -1];
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightEscapeStartAction)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_time();
  void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 time_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightEscapeResultAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightEscapeResultAction) */ {
 public:
  FightEscapeResultAction();
  virtual ~FightEscapeResultAction();

  FightEscapeResultAction(const FightEscapeResultAction& from);

  inline FightEscapeResultAction& operator=(const FightEscapeResultAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightEscapeResultAction(FightEscapeResultAction&& from) noexcept
    : FightEscapeResultAction() {
    *this = ::std::move(from);
  }

  inline FightEscapeResultAction& operator=(FightEscapeResultAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightEscapeResultAction& default_instance();

  static inline const FightEscapeResultAction* internal_default_instance() {
    return reinterpret_cast<const FightEscapeResultAction*>(
               &_FightEscapeResultAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(FightEscapeResultAction* other);
  friend void swap(FightEscapeResultAction& a, FightEscapeResultAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightEscapeResultAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightEscapeResultAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightEscapeResultAction& from);
  void MergeFrom(const FightEscapeResultAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightEscapeResultAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -1];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightEscapeResultAction)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightGMAddHpAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightGMAddHpAction) */ {
 public:
  FightGMAddHpAction();
  virtual ~FightGMAddHpAction();

  FightGMAddHpAction(const FightGMAddHpAction& from);

  inline FightGMAddHpAction& operator=(const FightGMAddHpAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightGMAddHpAction(FightGMAddHpAction&& from) noexcept
    : FightGMAddHpAction() {
    *this = ::std::move(from);
  }

  inline FightGMAddHpAction& operator=(FightGMAddHpAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightGMAddHpAction& default_instance();

  static inline const FightGMAddHpAction* internal_default_instance() {
    return reinterpret_cast<const FightGMAddHpAction*>(
               &_FightGMAddHpAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(FightGMAddHpAction* other);
  friend void swap(FightGMAddHpAction& a, FightGMAddHpAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightGMAddHpAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightGMAddHpAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightGMAddHpAction& from);
  void MergeFrom(const FightGMAddHpAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightGMAddHpAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 ObjId = 1 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 1;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // optional sint32 AddNum = 2 [default = -1];
  bool has_addnum() const;
  void clear_addnum();
  static const int kAddNumFieldNumber = 2;
  ::google::protobuf::int32 addnum() const;
  void set_addnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightGMAddHpAction)
 private:
  void set_has_objid();
  void clear_has_objid();
  void set_has_addnum();
  void clear_has_addnum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 addnum_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightTRandSkillAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightTRandSkillAction) */ {
 public:
  FightTRandSkillAction();
  virtual ~FightTRandSkillAction();

  FightTRandSkillAction(const FightTRandSkillAction& from);

  inline FightTRandSkillAction& operator=(const FightTRandSkillAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightTRandSkillAction(FightTRandSkillAction&& from) noexcept
    : FightTRandSkillAction() {
    *this = ::std::move(from);
  }

  inline FightTRandSkillAction& operator=(FightTRandSkillAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightTRandSkillAction& default_instance();

  static inline const FightTRandSkillAction* internal_default_instance() {
    return reinterpret_cast<const FightTRandSkillAction*>(
               &_FightTRandSkillAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(FightTRandSkillAction* other);
  friend void swap(FightTRandSkillAction& a, FightTRandSkillAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightTRandSkillAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightTRandSkillAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightTRandSkillAction& from);
  void MergeFrom(const FightTRandSkillAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightTRandSkillAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:FightTRandSkillAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightGuildDBeginAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightGuildDBeginAction) */ {
 public:
  FightGuildDBeginAction();
  virtual ~FightGuildDBeginAction();

  FightGuildDBeginAction(const FightGuildDBeginAction& from);

  inline FightGuildDBeginAction& operator=(const FightGuildDBeginAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightGuildDBeginAction(FightGuildDBeginAction&& from) noexcept
    : FightGuildDBeginAction() {
    *this = ::std::move(from);
  }

  inline FightGuildDBeginAction& operator=(FightGuildDBeginAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightGuildDBeginAction& default_instance();

  static inline const FightGuildDBeginAction* internal_default_instance() {
    return reinterpret_cast<const FightGuildDBeginAction*>(
               &_FightGuildDBeginAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(FightGuildDBeginAction* other);
  friend void swap(FightGuildDBeginAction& a, FightGuildDBeginAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightGuildDBeginAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightGuildDBeginAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightGuildDBeginAction& from);
  void MergeFrom(const FightGuildDBeginAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightGuildDBeginAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Type = 1 [default = -1];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional sint32 Time = 2 [default = -1];
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightGuildDBeginAction)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_time();
  void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 time_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightGuildDEndAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightGuildDEndAction) */ {
 public:
  FightGuildDEndAction();
  virtual ~FightGuildDEndAction();

  FightGuildDEndAction(const FightGuildDEndAction& from);

  inline FightGuildDEndAction& operator=(const FightGuildDEndAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightGuildDEndAction(FightGuildDEndAction&& from) noexcept
    : FightGuildDEndAction() {
    *this = ::std::move(from);
  }

  inline FightGuildDEndAction& operator=(FightGuildDEndAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightGuildDEndAction& default_instance();

  static inline const FightGuildDEndAction* internal_default_instance() {
    return reinterpret_cast<const FightGuildDEndAction*>(
               &_FightGuildDEndAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(FightGuildDEndAction* other);
  friend void swap(FightGuildDEndAction& a, FightGuildDEndAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightGuildDEndAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightGuildDEndAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightGuildDEndAction& from);
  void MergeFrom(const FightGuildDEndAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightGuildDEndAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Time = 1 [default = -1];
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightGuildDEndAction)
 private:
  void set_has_time();
  void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 time_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightTransferAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightTransferAction) */ {
 public:
  FightTransferAction();
  virtual ~FightTransferAction();

  FightTransferAction(const FightTransferAction& from);

  inline FightTransferAction& operator=(const FightTransferAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightTransferAction(FightTransferAction&& from) noexcept
    : FightTransferAction() {
    *this = ::std::move(from);
  }

  inline FightTransferAction& operator=(FightTransferAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightTransferAction& default_instance();

  static inline const FightTransferAction* internal_default_instance() {
    return reinterpret_cast<const FightTransferAction*>(
               &_FightTransferAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(FightTransferAction* other);
  friend void swap(FightTransferAction& a, FightTransferAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightTransferAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightTransferAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightTransferAction& from);
  void MergeFrom(const FightTransferAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightTransferAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 FaceDir = 4 [default = 0];
  bool has_facedir() const;
  void clear_facedir();
  static const int kFaceDirFieldNumber = 4;
  ::google::protobuf::int32 facedir() const;
  void set_facedir(::google::protobuf::int32 value);

  // optional sint32 BirthPoint = 3 [default = -1];
  bool has_birthpoint() const;
  void clear_birthpoint();
  static const int kBirthPointFieldNumber = 3;
  ::google::protobuf::int32 birthpoint() const;
  void set_birthpoint(::google::protobuf::int32 value);

  // optional sint32 DungeonId = 1 [default = -1];
  bool has_dungeonid() const;
  void clear_dungeonid();
  static const int kDungeonIdFieldNumber = 1;
  ::google::protobuf::int32 dungeonid() const;
  void set_dungeonid(::google::protobuf::int32 value);

  // optional sint32 DungeonType = 2 [default = -1];
  bool has_dungeontype() const;
  void clear_dungeontype();
  static const int kDungeonTypeFieldNumber = 2;
  ::google::protobuf::int32 dungeontype() const;
  void set_dungeontype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightTransferAction)
 private:
  void set_has_dungeonid();
  void clear_has_dungeonid();
  void set_has_dungeontype();
  void clear_has_dungeontype();
  void set_has_birthpoint();
  void clear_has_birthpoint();
  void set_has_facedir();
  void clear_has_facedir();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 facedir_;
  ::google::protobuf::int32 birthpoint_;
  ::google::protobuf::int32 dungeonid_;
  ::google::protobuf::int32 dungeontype_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightHeroFightInfoAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightHeroFightInfoAction) */ {
 public:
  FightHeroFightInfoAction();
  virtual ~FightHeroFightInfoAction();

  FightHeroFightInfoAction(const FightHeroFightInfoAction& from);

  inline FightHeroFightInfoAction& operator=(const FightHeroFightInfoAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightHeroFightInfoAction(FightHeroFightInfoAction&& from) noexcept
    : FightHeroFightInfoAction() {
    *this = ::std::move(from);
  }

  inline FightHeroFightInfoAction& operator=(FightHeroFightInfoAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightHeroFightInfoAction& default_instance();

  static inline const FightHeroFightInfoAction* internal_default_instance() {
    return reinterpret_cast<const FightHeroFightInfoAction*>(
               &_FightHeroFightInfoAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(FightHeroFightInfoAction* other);
  friend void swap(FightHeroFightInfoAction& a, FightHeroFightInfoAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightHeroFightInfoAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightHeroFightInfoAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightHeroFightInfoAction& from);
  void MergeFrom(const FightHeroFightInfoAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightHeroFightInfoAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HeroFightInfo HeroInfoArr = 1;
  int heroinfoarr_size() const;
  void clear_heroinfoarr();
  static const int kHeroInfoArrFieldNumber = 1;
  const ::HeroFightInfo& heroinfoarr(int index) const;
  ::HeroFightInfo* mutable_heroinfoarr(int index);
  ::HeroFightInfo* add_heroinfoarr();
  ::google::protobuf::RepeatedPtrField< ::HeroFightInfo >*
      mutable_heroinfoarr();
  const ::google::protobuf::RepeatedPtrField< ::HeroFightInfo >&
      heroinfoarr() const;

  // optional sint32 FunctionId = 2 [default = -1];
  bool has_functionid() const;
  void clear_functionid();
  static const int kFunctionIdFieldNumber = 2;
  ::google::protobuf::int32 functionid() const;
  void set_functionid(::google::protobuf::int32 value);

  // optional sint32 MyCampId = 3 [default = -1];
  bool has_mycampid() const;
  void clear_mycampid();
  static const int kMyCampIdFieldNumber = 3;
  ::google::protobuf::int32 mycampid() const;
  void set_mycampid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightHeroFightInfoAction)
 private:
  void set_has_functionid();
  void clear_has_functionid();
  void set_has_mycampid();
  void clear_has_mycampid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::HeroFightInfo > heroinfoarr_;
  ::google::protobuf::int32 functionid_;
  ::google::protobuf::int32 mycampid_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightGuildFightBeginAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightGuildFightBeginAction) */ {
 public:
  FightGuildFightBeginAction();
  virtual ~FightGuildFightBeginAction();

  FightGuildFightBeginAction(const FightGuildFightBeginAction& from);

  inline FightGuildFightBeginAction& operator=(const FightGuildFightBeginAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightGuildFightBeginAction(FightGuildFightBeginAction&& from) noexcept
    : FightGuildFightBeginAction() {
    *this = ::std::move(from);
  }

  inline FightGuildFightBeginAction& operator=(FightGuildFightBeginAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightGuildFightBeginAction& default_instance();

  static inline const FightGuildFightBeginAction* internal_default_instance() {
    return reinterpret_cast<const FightGuildFightBeginAction*>(
               &_FightGuildFightBeginAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(FightGuildFightBeginAction* other);
  friend void swap(FightGuildFightBeginAction& a, FightGuildFightBeginAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightGuildFightBeginAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightGuildFightBeginAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightGuildFightBeginAction& from);
  void MergeFrom(const FightGuildFightBeginAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightGuildFightBeginAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Type = 1 [default = -1];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional sint32 Time = 2 [default = -1];
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightGuildFightBeginAction)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_time();
  void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 time_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightGuildFightEndAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightGuildFightEndAction) */ {
 public:
  FightGuildFightEndAction();
  virtual ~FightGuildFightEndAction();

  FightGuildFightEndAction(const FightGuildFightEndAction& from);

  inline FightGuildFightEndAction& operator=(const FightGuildFightEndAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightGuildFightEndAction(FightGuildFightEndAction&& from) noexcept
    : FightGuildFightEndAction() {
    *this = ::std::move(from);
  }

  inline FightGuildFightEndAction& operator=(FightGuildFightEndAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightGuildFightEndAction& default_instance();

  static inline const FightGuildFightEndAction* internal_default_instance() {
    return reinterpret_cast<const FightGuildFightEndAction*>(
               &_FightGuildFightEndAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(FightGuildFightEndAction* other);
  friend void swap(FightGuildFightEndAction& a, FightGuildFightEndAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightGuildFightEndAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightGuildFightEndAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightGuildFightEndAction& from);
  void MergeFrom(const FightGuildFightEndAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightGuildFightEndAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Time = 1 [default = -1];
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // optional sint32 VictoryCampId = 2 [default = -1];
  bool has_victorycampid() const;
  void clear_victorycampid();
  static const int kVictoryCampIdFieldNumber = 2;
  ::google::protobuf::int32 victorycampid() const;
  void set_victorycampid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightGuildFightEndAction)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_victorycampid();
  void clear_has_victorycampid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 victorycampid_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightGuildFightHpAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightGuildFightHpAction) */ {
 public:
  FightGuildFightHpAction();
  virtual ~FightGuildFightHpAction();

  FightGuildFightHpAction(const FightGuildFightHpAction& from);

  inline FightGuildFightHpAction& operator=(const FightGuildFightHpAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightGuildFightHpAction(FightGuildFightHpAction&& from) noexcept
    : FightGuildFightHpAction() {
    *this = ::std::move(from);
  }

  inline FightGuildFightHpAction& operator=(FightGuildFightHpAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightGuildFightHpAction& default_instance();

  static inline const FightGuildFightHpAction* internal_default_instance() {
    return reinterpret_cast<const FightGuildFightHpAction*>(
               &_FightGuildFightHpAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(FightGuildFightHpAction* other);
  friend void swap(FightGuildFightHpAction& a, FightGuildFightHpAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightGuildFightHpAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightGuildFightHpAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightGuildFightHpAction& from);
  void MergeFrom(const FightGuildFightHpAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightGuildFightHpAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 MaxHp = 2 [default = 0];
  bool has_maxhp() const;
  void clear_maxhp();
  static const int kMaxHpFieldNumber = 2;
  ::google::protobuf::int32 maxhp() const;
  void set_maxhp(::google::protobuf::int32 value);

  // optional sint32 CurHp = 3 [default = 0];
  bool has_curhp() const;
  void clear_curhp();
  static const int kCurHpFieldNumber = 3;
  ::google::protobuf::int32 curhp() const;
  void set_curhp(::google::protobuf::int32 value);

  // optional sint32 CampId = 1 [default = -1];
  bool has_campid() const;
  void clear_campid();
  static const int kCampIdFieldNumber = 1;
  ::google::protobuf::int32 campid() const;
  void set_campid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightGuildFightHpAction)
 private:
  void set_has_campid();
  void clear_has_campid();
  void set_has_maxhp();
  void clear_has_maxhp();
  void set_has_curhp();
  void clear_has_curhp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 maxhp_;
  ::google::protobuf::int32 curhp_;
  ::google::protobuf::int32 campid_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightEffectTranslateAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightEffectTranslateAction) */ {
 public:
  FightEffectTranslateAction();
  virtual ~FightEffectTranslateAction();

  FightEffectTranslateAction(const FightEffectTranslateAction& from);

  inline FightEffectTranslateAction& operator=(const FightEffectTranslateAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightEffectTranslateAction(FightEffectTranslateAction&& from) noexcept
    : FightEffectTranslateAction() {
    *this = ::std::move(from);
  }

  inline FightEffectTranslateAction& operator=(FightEffectTranslateAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightEffectTranslateAction& default_instance();

  static inline const FightEffectTranslateAction* internal_default_instance() {
    return reinterpret_cast<const FightEffectTranslateAction*>(
               &_FightEffectTranslateAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(FightEffectTranslateAction* other);
  friend void swap(FightEffectTranslateAction& a, FightEffectTranslateAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightEffectTranslateAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightEffectTranslateAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightEffectTranslateAction& from);
  void MergeFrom(const FightEffectTranslateAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightEffectTranslateAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes TargetPos = 4;
  bool has_targetpos() const;
  void clear_targetpos();
  static const int kTargetPosFieldNumber = 4;
  const ::std::string& targetpos() const;
  void set_targetpos(const ::std::string& value);
  #if LANG_CXX11
  void set_targetpos(::std::string&& value);
  #endif
  void set_targetpos(const char* value);
  void set_targetpos(const void* value, size_t size);
  ::std::string* mutable_targetpos();
  ::std::string* release_targetpos();
  void set_allocated_targetpos(::std::string* targetpos);

  // optional bytes PosInfo = 9;
  bool has_posinfo() const;
  void clear_posinfo();
  static const int kPosInfoFieldNumber = 9;
  const ::std::string& posinfo() const;
  void set_posinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_posinfo(::std::string&& value);
  #endif
  void set_posinfo(const char* value);
  void set_posinfo(const void* value, size_t size);
  ::std::string* mutable_posinfo();
  ::std::string* release_posinfo();
  void set_allocated_posinfo(::std::string* posinfo);

  // optional string SpriteName = 13;
  bool has_spritename() const;
  void clear_spritename();
  static const int kSpriteNameFieldNumber = 13;
  const ::std::string& spritename() const;
  void set_spritename(const ::std::string& value);
  #if LANG_CXX11
  void set_spritename(::std::string&& value);
  #endif
  void set_spritename(const char* value);
  void set_spritename(const char* value, size_t size);
  ::std::string* mutable_spritename();
  ::std::string* release_spritename();
  void set_allocated_spritename(::std::string* spritename);

  // optional sint32 Status = 10 [default = 0];
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 10;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // optional bool IsIrregularityEffect = 15 [default = false];
  bool has_isirregularityeffect() const;
  void clear_isirregularityeffect();
  static const int kIsIrregularityEffectFieldNumber = 15;
  bool isirregularityeffect() const;
  void set_isirregularityeffect(bool value);

  // optional sint32 TranslateType = 17 [default = 0];
  bool has_translatetype() const;
  void clear_translatetype();
  static const int kTranslateTypeFieldNumber = 17;
  ::google::protobuf::int32 translatetype() const;
  void set_translatetype(::google::protobuf::int32 value);

  // optional sint32 ObjId = 1 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 1;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // optional sint32 ObjType = 2 [default = -1];
  bool has_objtype() const;
  void clear_objtype();
  static const int kObjTypeFieldNumber = 2;
  ::google::protobuf::int32 objtype() const;
  void set_objtype(::google::protobuf::int32 value);

  // optional sint32 TargetObjId = 3 [default = -1];
  bool has_targetobjid() const;
  void clear_targetobjid();
  static const int kTargetObjIdFieldNumber = 3;
  ::google::protobuf::int32 targetobjid() const;
  void set_targetobjid(::google::protobuf::int32 value);

  // optional sint32 Angle = 5 [default = -1];
  bool has_angle() const;
  void clear_angle();
  static const int kAngleFieldNumber = 5;
  ::google::protobuf::int32 angle() const;
  void set_angle(::google::protobuf::int32 value);

  // optional sint32 Speed = 6 [default = -1];
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 6;
  ::google::protobuf::int32 speed() const;
  void set_speed(::google::protobuf::int32 value);

  // optional sint32 Distance = 8 [default = -1];
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 8;
  ::google::protobuf::int32 distance() const;
  void set_distance(::google::protobuf::int32 value);

  // optional sint32 SkillId = 11 [default = -1];
  bool has_skillid() const;
  void clear_skillid();
  static const int kSkillIdFieldNumber = 11;
  ::google::protobuf::int32 skillid() const;
  void set_skillid(::google::protobuf::int32 value);

  // optional sint32 SegementIndex = 12 [default = -1];
  bool has_segementindex() const;
  void clear_segementindex();
  static const int kSegementIndexFieldNumber = 12;
  ::google::protobuf::int32 segementindex() const;
  void set_segementindex(::google::protobuf::int32 value);

  // optional sint32 BulletType = 14 [default = -1];
  bool has_bullettype() const;
  void clear_bullettype();
  static const int kBulletTypeFieldNumber = 14;
  ::google::protobuf::int32 bullettype() const;
  void set_bullettype(::google::protobuf::int32 value);

  // optional float Time = 18 [default = -1];
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 18;
  float time() const;
  void set_time(float value);

  // @@protoc_insertion_point(class_scope:FightEffectTranslateAction)
 private:
  void set_has_objid();
  void clear_has_objid();
  void set_has_objtype();
  void clear_has_objtype();
  void set_has_targetobjid();
  void clear_has_targetobjid();
  void set_has_targetpos();
  void clear_has_targetpos();
  void set_has_angle();
  void clear_has_angle();
  void set_has_speed();
  void clear_has_speed();
  void set_has_distance();
  void clear_has_distance();
  void set_has_posinfo();
  void clear_has_posinfo();
  void set_has_status();
  void clear_has_status();
  void set_has_skillid();
  void clear_has_skillid();
  void set_has_segementindex();
  void clear_has_segementindex();
  void set_has_spritename();
  void clear_has_spritename();
  void set_has_bullettype();
  void clear_has_bullettype();
  void set_has_isirregularityeffect();
  void clear_has_isirregularityeffect();
  void set_has_translatetype();
  void clear_has_translatetype();
  void set_has_time();
  void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr targetpos_;
  ::google::protobuf::internal::ArenaStringPtr posinfo_;
  ::google::protobuf::internal::ArenaStringPtr spritename_;
  ::google::protobuf::int32 status_;
  bool isirregularityeffect_;
  ::google::protobuf::int32 translatetype_;
  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 objtype_;
  ::google::protobuf::int32 targetobjid_;
  ::google::protobuf::int32 angle_;
  ::google::protobuf::int32 speed_;
  ::google::protobuf::int32 distance_;
  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 segementindex_;
  ::google::protobuf::int32 bullettype_;
  float time_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightCollectAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightCollectAction) */ {
 public:
  FightCollectAction();
  virtual ~FightCollectAction();

  FightCollectAction(const FightCollectAction& from);

  inline FightCollectAction& operator=(const FightCollectAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightCollectAction(FightCollectAction&& from) noexcept
    : FightCollectAction() {
    *this = ::std::move(from);
  }

  inline FightCollectAction& operator=(FightCollectAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightCollectAction& default_instance();

  static inline const FightCollectAction* internal_default_instance() {
    return reinterpret_cast<const FightCollectAction*>(
               &_FightCollectAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(FightCollectAction* other);
  friend void swap(FightCollectAction& a, FightCollectAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightCollectAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightCollectAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightCollectAction& from);
  void MergeFrom(const FightCollectAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightCollectAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Collection_ObjId = 3 [default = -1];
  bool has_collection_objid() const;
  void clear_collection_objid();
  static const int kCollectionObjIdFieldNumber = 3;
  ::google::protobuf::int32 collection_objid() const;
  void set_collection_objid(::google::protobuf::int32 value);

  // optional sint32 Status = 1 [default = 1];
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // optional sint32 Player_ObjId = 2 [default = -1];
  bool has_player_objid() const;
  void clear_player_objid();
  static const int kPlayerObjIdFieldNumber = 2;
  ::google::protobuf::int32 player_objid() const;
  void set_player_objid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightCollectAction)
 private:
  void set_has_status();
  void clear_has_status();
  void set_has_player_objid();
  void clear_has_player_objid();
  void set_has_collection_objid();
  void clear_has_collection_objid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 collection_objid_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 player_objid_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightCollectionShowEffectAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightCollectionShowEffectAction) */ {
 public:
  FightCollectionShowEffectAction();
  virtual ~FightCollectionShowEffectAction();

  FightCollectionShowEffectAction(const FightCollectionShowEffectAction& from);

  inline FightCollectionShowEffectAction& operator=(const FightCollectionShowEffectAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightCollectionShowEffectAction(FightCollectionShowEffectAction&& from) noexcept
    : FightCollectionShowEffectAction() {
    *this = ::std::move(from);
  }

  inline FightCollectionShowEffectAction& operator=(FightCollectionShowEffectAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightCollectionShowEffectAction& default_instance();

  static inline const FightCollectionShowEffectAction* internal_default_instance() {
    return reinterpret_cast<const FightCollectionShowEffectAction*>(
               &_FightCollectionShowEffectAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(FightCollectionShowEffectAction* other);
  friend void swap(FightCollectionShowEffectAction& a, FightCollectionShowEffectAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightCollectionShowEffectAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightCollectionShowEffectAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightCollectionShowEffectAction& from);
  void MergeFrom(const FightCollectionShowEffectAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightCollectionShowEffectAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsShowEffect = 2 [default = false];
  bool has_isshoweffect() const;
  void clear_isshoweffect();
  static const int kIsShowEffectFieldNumber = 2;
  bool isshoweffect() const;
  void set_isshoweffect(bool value);

  // optional sint32 ObjId = 1 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 1;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightCollectionShowEffectAction)
 private:
  void set_has_objid();
  void clear_has_objid();
  void set_has_isshoweffect();
  void clear_has_isshoweffect();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool isshoweffect_;
  ::google::protobuf::int32 objid_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightAutoFightAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightAutoFightAction) */ {
 public:
  FightAutoFightAction();
  virtual ~FightAutoFightAction();

  FightAutoFightAction(const FightAutoFightAction& from);

  inline FightAutoFightAction& operator=(const FightAutoFightAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightAutoFightAction(FightAutoFightAction&& from) noexcept
    : FightAutoFightAction() {
    *this = ::std::move(from);
  }

  inline FightAutoFightAction& operator=(FightAutoFightAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightAutoFightAction& default_instance();

  static inline const FightAutoFightAction* internal_default_instance() {
    return reinterpret_cast<const FightAutoFightAction*>(
               &_FightAutoFightAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(FightAutoFightAction* other);
  friend void swap(FightAutoFightAction& a, FightAutoFightAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightAutoFightAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightAutoFightAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightAutoFightAction& from);
  void MergeFrom(const FightAutoFightAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightAutoFightAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Type = 1 [default = 0];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional sint32 ObjId = 2 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 2;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightAutoFightAction)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_objid();
  void clear_has_objid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 objid_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightUseItemAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightUseItemAction) */ {
 public:
  FightUseItemAction();
  virtual ~FightUseItemAction();

  FightUseItemAction(const FightUseItemAction& from);

  inline FightUseItemAction& operator=(const FightUseItemAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightUseItemAction(FightUseItemAction&& from) noexcept
    : FightUseItemAction() {
    *this = ::std::move(from);
  }

  inline FightUseItemAction& operator=(FightUseItemAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightUseItemAction& default_instance();

  static inline const FightUseItemAction* internal_default_instance() {
    return reinterpret_cast<const FightUseItemAction*>(
               &_FightUseItemAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(FightUseItemAction* other);
  friend void swap(FightUseItemAction& a, FightUseItemAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightUseItemAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightUseItemAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightUseItemAction& from);
  void MergeFrom(const FightUseItemAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightUseItemAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Player_ObjId = 3 [default = -1];
  bool has_player_objid() const;
  void clear_player_objid();
  static const int kPlayerObjIdFieldNumber = 3;
  ::google::protobuf::int32 player_objid() const;
  void set_player_objid(::google::protobuf::int32 value);

  // optional sint32 TemplateId = 1 [default = -1];
  bool has_templateid() const;
  void clear_templateid();
  static const int kTemplateIdFieldNumber = 1;
  ::google::protobuf::int32 templateid() const;
  void set_templateid(::google::protobuf::int32 value);

  // optional sint32 Status = 2 [default = 1];
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightUseItemAction)
 private:
  void set_has_templateid();
  void clear_has_templateid();
  void set_has_status();
  void clear_has_status();
  void set_has_player_objid();
  void clear_has_player_objid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 player_objid_;
  ::google::protobuf::int32 templateid_;
  ::google::protobuf::int32 status_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightStormKillEffectAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightStormKillEffectAction) */ {
 public:
  FightStormKillEffectAction();
  virtual ~FightStormKillEffectAction();

  FightStormKillEffectAction(const FightStormKillEffectAction& from);

  inline FightStormKillEffectAction& operator=(const FightStormKillEffectAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightStormKillEffectAction(FightStormKillEffectAction&& from) noexcept
    : FightStormKillEffectAction() {
    *this = ::std::move(from);
  }

  inline FightStormKillEffectAction& operator=(FightStormKillEffectAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightStormKillEffectAction& default_instance();

  static inline const FightStormKillEffectAction* internal_default_instance() {
    return reinterpret_cast<const FightStormKillEffectAction*>(
               &_FightStormKillEffectAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void Swap(FightStormKillEffectAction* other);
  friend void swap(FightStormKillEffectAction& a, FightStormKillEffectAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightStormKillEffectAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightStormKillEffectAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightStormKillEffectAction& from);
  void MergeFrom(const FightStormKillEffectAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightStormKillEffectAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 ObjId = 1 [default = -1];
  bool has_objid() const;
  void clear_objid();
  static const int kObjIdFieldNumber = 1;
  ::google::protobuf::int32 objid() const;
  void set_objid(::google::protobuf::int32 value);

  // optional sint32 Num = 2 [default = -1];
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightStormKillEffectAction)
 private:
  void set_has_objid();
  void clear_has_objid();
  void set_has_num();
  void clear_has_num();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 objid_;
  ::google::protobuf::int32 num_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightOneVSOneStartAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightOneVSOneStartAction) */ {
 public:
  FightOneVSOneStartAction();
  virtual ~FightOneVSOneStartAction();

  FightOneVSOneStartAction(const FightOneVSOneStartAction& from);

  inline FightOneVSOneStartAction& operator=(const FightOneVSOneStartAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightOneVSOneStartAction(FightOneVSOneStartAction&& from) noexcept
    : FightOneVSOneStartAction() {
    *this = ::std::move(from);
  }

  inline FightOneVSOneStartAction& operator=(FightOneVSOneStartAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightOneVSOneStartAction& default_instance();

  static inline const FightOneVSOneStartAction* internal_default_instance() {
    return reinterpret_cast<const FightOneVSOneStartAction*>(
               &_FightOneVSOneStartAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(FightOneVSOneStartAction* other);
  friend void swap(FightOneVSOneStartAction& a, FightOneVSOneStartAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightOneVSOneStartAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightOneVSOneStartAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightOneVSOneStartAction& from);
  void MergeFrom(const FightOneVSOneStartAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightOneVSOneStartAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Type = 1 [default = -1];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional sint32 Time = 2 [default = -1];
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightOneVSOneStartAction)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_time();
  void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 time_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightOneVSOneResultAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightOneVSOneResultAction) */ {
 public:
  FightOneVSOneResultAction();
  virtual ~FightOneVSOneResultAction();

  FightOneVSOneResultAction(const FightOneVSOneResultAction& from);

  inline FightOneVSOneResultAction& operator=(const FightOneVSOneResultAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightOneVSOneResultAction(FightOneVSOneResultAction&& from) noexcept
    : FightOneVSOneResultAction() {
    *this = ::std::move(from);
  }

  inline FightOneVSOneResultAction& operator=(FightOneVSOneResultAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightOneVSOneResultAction& default_instance();

  static inline const FightOneVSOneResultAction* internal_default_instance() {
    return reinterpret_cast<const FightOneVSOneResultAction*>(
               &_FightOneVSOneResultAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void Swap(FightOneVSOneResultAction* other);
  friend void swap(FightOneVSOneResultAction& a, FightOneVSOneResultAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightOneVSOneResultAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightOneVSOneResultAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightOneVSOneResultAction& from);
  void MergeFrom(const FightOneVSOneResultAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightOneVSOneResultAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -1];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightOneVSOneResultAction)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightSightAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightSightAction) */ {
 public:
  FightSightAction();
  virtual ~FightSightAction();

  FightSightAction(const FightSightAction& from);

  inline FightSightAction& operator=(const FightSightAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightSightAction(FightSightAction&& from) noexcept
    : FightSightAction() {
    *this = ::std::move(from);
  }

  inline FightSightAction& operator=(FightSightAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightSightAction& default_instance();

  static inline const FightSightAction* internal_default_instance() {
    return reinterpret_cast<const FightSightAction*>(
               &_FightSightAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(FightSightAction* other);
  friend void swap(FightSightAction& a, FightSightAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightSightAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightSightAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightSightAction& from);
  void MergeFrom(const FightSightAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightSightAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes ActionArr = 2;
  int actionarr_size() const;
  void clear_actionarr();
  static const int kActionArrFieldNumber = 2;
  const ::std::string& actionarr(int index) const;
  ::std::string* mutable_actionarr(int index);
  void set_actionarr(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_actionarr(int index, ::std::string&& value);
  #endif
  void set_actionarr(int index, const char* value);
  void set_actionarr(int index, const void* value, size_t size);
  ::std::string* add_actionarr();
  void add_actionarr(const ::std::string& value);
  #if LANG_CXX11
  void add_actionarr(::std::string&& value);
  #endif
  void add_actionarr(const char* value);
  void add_actionarr(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& actionarr() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_actionarr();

  // @@protoc_insertion_point(class_scope:FightSightAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> actionarr_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightEventTriggerAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightEventTriggerAction) */ {
 public:
  FightEventTriggerAction();
  virtual ~FightEventTriggerAction();

  FightEventTriggerAction(const FightEventTriggerAction& from);

  inline FightEventTriggerAction& operator=(const FightEventTriggerAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightEventTriggerAction(FightEventTriggerAction&& from) noexcept
    : FightEventTriggerAction() {
    *this = ::std::move(from);
  }

  inline FightEventTriggerAction& operator=(FightEventTriggerAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightEventTriggerAction& default_instance();

  static inline const FightEventTriggerAction* internal_default_instance() {
    return reinterpret_cast<const FightEventTriggerAction*>(
               &_FightEventTriggerAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    56;

  void Swap(FightEventTriggerAction* other);
  friend void swap(FightEventTriggerAction& a, FightEventTriggerAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightEventTriggerAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightEventTriggerAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightEventTriggerAction& from);
  void MergeFrom(const FightEventTriggerAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightEventTriggerAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 EventId = 1 [default = -1];
  bool has_eventid() const;
  void clear_eventid();
  static const int kEventIdFieldNumber = 1;
  ::google::protobuf::int32 eventid() const;
  void set_eventid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightEventTriggerAction)
 private:
  void set_has_eventid();
  void clear_has_eventid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 eventid_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightQuitAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightQuitAction) */ {
 public:
  FightQuitAction();
  virtual ~FightQuitAction();

  FightQuitAction(const FightQuitAction& from);

  inline FightQuitAction& operator=(const FightQuitAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightQuitAction(FightQuitAction&& from) noexcept
    : FightQuitAction() {
    *this = ::std::move(from);
  }

  inline FightQuitAction& operator=(FightQuitAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightQuitAction& default_instance();

  static inline const FightQuitAction* internal_default_instance() {
    return reinterpret_cast<const FightQuitAction*>(
               &_FightQuitAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    57;

  void Swap(FightQuitAction* other);
  friend void swap(FightQuitAction& a, FightQuitAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightQuitAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightQuitAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightQuitAction& from);
  void MergeFrom(const FightQuitAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightQuitAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Type = 1 [default = 0];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightQuitAction)
 private:
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightProductAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightProductAction) */ {
 public:
  FightProductAction();
  virtual ~FightProductAction();

  FightProductAction(const FightProductAction& from);

  inline FightProductAction& operator=(const FightProductAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightProductAction(FightProductAction&& from) noexcept
    : FightProductAction() {
    *this = ::std::move(from);
  }

  inline FightProductAction& operator=(FightProductAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightProductAction& default_instance();

  static inline const FightProductAction* internal_default_instance() {
    return reinterpret_cast<const FightProductAction*>(
               &_FightProductAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    58;

  void Swap(FightProductAction* other);
  friend void swap(FightProductAction& a, FightProductAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightProductAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightProductAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightProductAction& from);
  void MergeFrom(const FightProductAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightProductAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Status = 1 [default = -1];
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // optional sint32 LifeSkillId = 3 [default = -1];
  bool has_lifeskillid() const;
  void clear_lifeskillid();
  static const int kLifeSkillIdFieldNumber = 3;
  ::google::protobuf::int32 lifeskillid() const;
  void set_lifeskillid(::google::protobuf::int32 value);

  // optional sint32 Player_ObjId = 5 [default = -1];
  bool has_player_objid() const;
  void clear_player_objid();
  static const int kPlayerObjIdFieldNumber = 5;
  ::google::protobuf::int32 player_objid() const;
  void set_player_objid(::google::protobuf::int32 value);

  // optional sint32 ProductionId = 9 [default = -1];
  bool has_productionid() const;
  void clear_productionid();
  static const int kProductionIdFieldNumber = 9;
  ::google::protobuf::int32 productionid() const;
  void set_productionid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightProductAction)
 private:
  void set_has_status();
  void clear_has_status();
  void set_has_lifeskillid();
  void clear_has_lifeskillid();
  void set_has_player_objid();
  void clear_has_player_objid();
  void set_has_productionid();
  void clear_has_productionid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 lifeskillid_;
  ::google::protobuf::int32 player_objid_;
  ::google::protobuf::int32 productionid_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FightStartEndAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FightStartEndAction) */ {
 public:
  FightStartEndAction();
  virtual ~FightStartEndAction();

  FightStartEndAction(const FightStartEndAction& from);

  inline FightStartEndAction& operator=(const FightStartEndAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FightStartEndAction(FightStartEndAction&& from) noexcept
    : FightStartEndAction() {
    *this = ::std::move(from);
  }

  inline FightStartEndAction& operator=(FightStartEndAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightStartEndAction& default_instance();

  static inline const FightStartEndAction* internal_default_instance() {
    return reinterpret_cast<const FightStartEndAction*>(
               &_FightStartEndAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    59;

  void Swap(FightStartEndAction* other);
  friend void swap(FightStartEndAction& a, FightStartEndAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FightStartEndAction* New() const PROTOBUF_FINAL { return New(NULL); }

  FightStartEndAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FightStartEndAction& from);
  void MergeFrom(const FightStartEndAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FightStartEndAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Type = 1 [default = 0];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional sint32 Time = 2 [default = 0];
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FightStartEndAction)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_time();
  void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 time_;
  friend struct protobuf_FightRpc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FightRpcReadyAsk

// -------------------------------------------------------------------

// FightRpcReadyReply

// optional sint32 Result = 1 [default = -9999];
inline bool FightRpcReadyReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightRpcReadyReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightRpcReadyReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightRpcReadyReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 FightRpcReadyReply::result() const {
  // @@protoc_insertion_point(field_get:FightRpcReadyReply.Result)
  return result_;
}
inline void FightRpcReadyReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FightRpcReadyReply.Result)
}

// optional sint32 Tick = 2 [default = -1];
inline bool FightRpcReadyReply::has_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightRpcReadyReply::set_has_tick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightRpcReadyReply::clear_has_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightRpcReadyReply::clear_tick() {
  tick_ = -1;
  clear_has_tick();
}
inline ::google::protobuf::int32 FightRpcReadyReply::tick() const {
  // @@protoc_insertion_point(field_get:FightRpcReadyReply.Tick)
  return tick_;
}
inline void FightRpcReadyReply::set_tick(::google::protobuf::int32 value) {
  set_has_tick();
  tick_ = value;
  // @@protoc_insertion_point(field_set:FightRpcReadyReply.Tick)
}

// optional sint32 RandNum = 3 [default = -1];
inline bool FightRpcReadyReply::has_randnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightRpcReadyReply::set_has_randnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightRpcReadyReply::clear_has_randnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightRpcReadyReply::clear_randnum() {
  randnum_ = -1;
  clear_has_randnum();
}
inline ::google::protobuf::int32 FightRpcReadyReply::randnum() const {
  // @@protoc_insertion_point(field_get:FightRpcReadyReply.RandNum)
  return randnum_;
}
inline void FightRpcReadyReply::set_randnum(::google::protobuf::int32 value) {
  set_has_randnum();
  randnum_ = value;
  // @@protoc_insertion_point(field_set:FightRpcReadyReply.RandNum)
}

// optional sint32 IdHelper = 4 [default = -1];
inline bool FightRpcReadyReply::has_idhelper() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightRpcReadyReply::set_has_idhelper() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightRpcReadyReply::clear_has_idhelper() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightRpcReadyReply::clear_idhelper() {
  idhelper_ = -1;
  clear_has_idhelper();
}
inline ::google::protobuf::int32 FightRpcReadyReply::idhelper() const {
  // @@protoc_insertion_point(field_get:FightRpcReadyReply.IdHelper)
  return idhelper_;
}
inline void FightRpcReadyReply::set_idhelper(::google::protobuf::int32 value) {
  set_has_idhelper();
  idhelper_ = value;
  // @@protoc_insertion_point(field_set:FightRpcReadyReply.IdHelper)
}

// repeated bytes ActionArr = 5;
inline int FightRpcReadyReply::actionarr_size() const {
  return actionarr_.size();
}
inline void FightRpcReadyReply::clear_actionarr() {
  actionarr_.Clear();
}
inline const ::std::string& FightRpcReadyReply::actionarr(int index) const {
  // @@protoc_insertion_point(field_get:FightRpcReadyReply.ActionArr)
  return actionarr_.Get(index);
}
inline ::std::string* FightRpcReadyReply::mutable_actionarr(int index) {
  // @@protoc_insertion_point(field_mutable:FightRpcReadyReply.ActionArr)
  return actionarr_.Mutable(index);
}
inline void FightRpcReadyReply::set_actionarr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:FightRpcReadyReply.ActionArr)
  actionarr_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FightRpcReadyReply::set_actionarr(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:FightRpcReadyReply.ActionArr)
  actionarr_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FightRpcReadyReply::set_actionarr(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actionarr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FightRpcReadyReply.ActionArr)
}
inline void FightRpcReadyReply::set_actionarr(int index, const void* value, size_t size) {
  actionarr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FightRpcReadyReply.ActionArr)
}
inline ::std::string* FightRpcReadyReply::add_actionarr() {
  // @@protoc_insertion_point(field_add_mutable:FightRpcReadyReply.ActionArr)
  return actionarr_.Add();
}
inline void FightRpcReadyReply::add_actionarr(const ::std::string& value) {
  actionarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FightRpcReadyReply.ActionArr)
}
#if LANG_CXX11
inline void FightRpcReadyReply::add_actionarr(::std::string&& value) {
  actionarr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FightRpcReadyReply.ActionArr)
}
#endif
inline void FightRpcReadyReply::add_actionarr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actionarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FightRpcReadyReply.ActionArr)
}
inline void FightRpcReadyReply::add_actionarr(const void* value, size_t size) {
  actionarr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FightRpcReadyReply.ActionArr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FightRpcReadyReply::actionarr() const {
  // @@protoc_insertion_point(field_list:FightRpcReadyReply.ActionArr)
  return actionarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FightRpcReadyReply::mutable_actionarr() {
  // @@protoc_insertion_point(field_mutable_list:FightRpcReadyReply.ActionArr)
  return &actionarr_;
}

// -------------------------------------------------------------------

// FightRpcActionNotify

// optional bytes Data = 1;
inline bool FightRpcActionNotify::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightRpcActionNotify::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightRpcActionNotify::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightRpcActionNotify::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& FightRpcActionNotify::data() const {
  // @@protoc_insertion_point(field_get:FightRpcActionNotify.Data)
  return data_.GetNoArena();
}
inline void FightRpcActionNotify::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightRpcActionNotify.Data)
}
#if LANG_CXX11
inline void FightRpcActionNotify::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightRpcActionNotify.Data)
}
#endif
inline void FightRpcActionNotify::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightRpcActionNotify.Data)
}
inline void FightRpcActionNotify::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightRpcActionNotify.Data)
}
inline ::std::string* FightRpcActionNotify::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:FightRpcActionNotify.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightRpcActionNotify::release_data() {
  // @@protoc_insertion_point(field_release:FightRpcActionNotify.Data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightRpcActionNotify::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:FightRpcActionNotify.Data)
}

// optional sint32 Frame = 2 [default = -1];
inline bool FightRpcActionNotify::has_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightRpcActionNotify::set_has_frame() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightRpcActionNotify::clear_has_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightRpcActionNotify::clear_frame() {
  frame_ = -1;
  clear_has_frame();
}
inline ::google::protobuf::int32 FightRpcActionNotify::frame() const {
  // @@protoc_insertion_point(field_get:FightRpcActionNotify.Frame)
  return frame_;
}
inline void FightRpcActionNotify::set_frame(::google::protobuf::int32 value) {
  set_has_frame();
  frame_ = value;
  // @@protoc_insertion_point(field_set:FightRpcActionNotify.Frame)
}

// -------------------------------------------------------------------

// FightRpcResultNotify

// optional sint32 Result = 1 [default = -1];
inline bool FightRpcResultNotify::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightRpcResultNotify::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightRpcResultNotify::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightRpcResultNotify::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 FightRpcResultNotify::result() const {
  // @@protoc_insertion_point(field_get:FightRpcResultNotify.Result)
  return result_;
}
inline void FightRpcResultNotify::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FightRpcResultNotify.Result)
}

// optional sint32 DengeonId = 2 [default = -1];
inline bool FightRpcResultNotify::has_dengeonid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightRpcResultNotify::set_has_dengeonid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightRpcResultNotify::clear_has_dengeonid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightRpcResultNotify::clear_dengeonid() {
  dengeonid_ = -1;
  clear_has_dengeonid();
}
inline ::google::protobuf::int32 FightRpcResultNotify::dengeonid() const {
  // @@protoc_insertion_point(field_get:FightRpcResultNotify.DengeonId)
  return dengeonid_;
}
inline void FightRpcResultNotify::set_dengeonid(::google::protobuf::int32 value) {
  set_has_dengeonid();
  dengeonid_ = value;
  // @@protoc_insertion_point(field_set:FightRpcResultNotify.DengeonId)
}

// optional sint32 Star = 4 [default = -1];
inline bool FightRpcResultNotify::has_star() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightRpcResultNotify::set_has_star() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightRpcResultNotify::clear_has_star() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightRpcResultNotify::clear_star() {
  star_ = -1;
  clear_has_star();
}
inline ::google::protobuf::int32 FightRpcResultNotify::star() const {
  // @@protoc_insertion_point(field_get:FightRpcResultNotify.Star)
  return star_;
}
inline void FightRpcResultNotify::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:FightRpcResultNotify.Star)
}

// optional sint32 FightTime = 5 [default = -1];
inline bool FightRpcResultNotify::has_fighttime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightRpcResultNotify::set_has_fighttime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightRpcResultNotify::clear_has_fighttime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightRpcResultNotify::clear_fighttime() {
  fighttime_ = -1;
  clear_has_fighttime();
}
inline ::google::protobuf::int32 FightRpcResultNotify::fighttime() const {
  // @@protoc_insertion_point(field_get:FightRpcResultNotify.FightTime)
  return fighttime_;
}
inline void FightRpcResultNotify::set_fighttime(::google::protobuf::int32 value) {
  set_has_fighttime();
  fighttime_ = value;
  // @@protoc_insertion_point(field_set:FightRpcResultNotify.FightTime)
}

// repeated .FightPrizeInfo PrizeList = 6;
inline int FightRpcResultNotify::prizelist_size() const {
  return prizelist_.size();
}
inline void FightRpcResultNotify::clear_prizelist() {
  prizelist_.Clear();
}
inline const ::FightPrizeInfo& FightRpcResultNotify::prizelist(int index) const {
  // @@protoc_insertion_point(field_get:FightRpcResultNotify.PrizeList)
  return prizelist_.Get(index);
}
inline ::FightPrizeInfo* FightRpcResultNotify::mutable_prizelist(int index) {
  // @@protoc_insertion_point(field_mutable:FightRpcResultNotify.PrizeList)
  return prizelist_.Mutable(index);
}
inline ::FightPrizeInfo* FightRpcResultNotify::add_prizelist() {
  // @@protoc_insertion_point(field_add:FightRpcResultNotify.PrizeList)
  return prizelist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FightPrizeInfo >*
FightRpcResultNotify::mutable_prizelist() {
  // @@protoc_insertion_point(field_mutable_list:FightRpcResultNotify.PrizeList)
  return &prizelist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FightPrizeInfo >&
FightRpcResultNotify::prizelist() const {
  // @@protoc_insertion_point(field_list:FightRpcResultNotify.PrizeList)
  return prizelist_;
}

// repeated .FightKillInfo KillList = 7;
inline int FightRpcResultNotify::killlist_size() const {
  return killlist_.size();
}
inline void FightRpcResultNotify::clear_killlist() {
  killlist_.Clear();
}
inline const ::FightKillInfo& FightRpcResultNotify::killlist(int index) const {
  // @@protoc_insertion_point(field_get:FightRpcResultNotify.KillList)
  return killlist_.Get(index);
}
inline ::FightKillInfo* FightRpcResultNotify::mutable_killlist(int index) {
  // @@protoc_insertion_point(field_mutable:FightRpcResultNotify.KillList)
  return killlist_.Mutable(index);
}
inline ::FightKillInfo* FightRpcResultNotify::add_killlist() {
  // @@protoc_insertion_point(field_add:FightRpcResultNotify.KillList)
  return killlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FightKillInfo >*
FightRpcResultNotify::mutable_killlist() {
  // @@protoc_insertion_point(field_mutable_list:FightRpcResultNotify.KillList)
  return &killlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FightKillInfo >&
FightRpcResultNotify::killlist() const {
  // @@protoc_insertion_point(field_list:FightRpcResultNotify.KillList)
  return killlist_;
}

// optional sint32 FirstStarLight = 8 [default = -1];
inline bool FightRpcResultNotify::has_firststarlight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightRpcResultNotify::set_has_firststarlight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightRpcResultNotify::clear_has_firststarlight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightRpcResultNotify::clear_firststarlight() {
  firststarlight_ = -1;
  clear_has_firststarlight();
}
inline ::google::protobuf::int32 FightRpcResultNotify::firststarlight() const {
  // @@protoc_insertion_point(field_get:FightRpcResultNotify.FirstStarLight)
  return firststarlight_;
}
inline void FightRpcResultNotify::set_firststarlight(::google::protobuf::int32 value) {
  set_has_firststarlight();
  firststarlight_ = value;
  // @@protoc_insertion_point(field_set:FightRpcResultNotify.FirstStarLight)
}

// optional sint32 SecondStarLight = 9 [default = -1];
inline bool FightRpcResultNotify::has_secondstarlight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FightRpcResultNotify::set_has_secondstarlight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FightRpcResultNotify::clear_has_secondstarlight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FightRpcResultNotify::clear_secondstarlight() {
  secondstarlight_ = -1;
  clear_has_secondstarlight();
}
inline ::google::protobuf::int32 FightRpcResultNotify::secondstarlight() const {
  // @@protoc_insertion_point(field_get:FightRpcResultNotify.SecondStarLight)
  return secondstarlight_;
}
inline void FightRpcResultNotify::set_secondstarlight(::google::protobuf::int32 value) {
  set_has_secondstarlight();
  secondstarlight_ = value;
  // @@protoc_insertion_point(field_set:FightRpcResultNotify.SecondStarLight)
}

// optional sint32 ThirdStarLight = 10 [default = -1];
inline bool FightRpcResultNotify::has_thirdstarlight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightRpcResultNotify::set_has_thirdstarlight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightRpcResultNotify::clear_has_thirdstarlight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightRpcResultNotify::clear_thirdstarlight() {
  thirdstarlight_ = -1;
  clear_has_thirdstarlight();
}
inline ::google::protobuf::int32 FightRpcResultNotify::thirdstarlight() const {
  // @@protoc_insertion_point(field_get:FightRpcResultNotify.ThirdStarLight)
  return thirdstarlight_;
}
inline void FightRpcResultNotify::set_thirdstarlight(::google::protobuf::int32 value) {
  set_has_thirdstarlight();
  thirdstarlight_ = value;
  // @@protoc_insertion_point(field_set:FightRpcResultNotify.ThirdStarLight)
}

// -------------------------------------------------------------------

// FightRpcEnterAsk

// optional sint64 UserId = 1 [default = -1];
inline bool FightRpcEnterAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightRpcEnterAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightRpcEnterAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightRpcEnterAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 FightRpcEnterAsk::userid() const {
  // @@protoc_insertion_point(field_get:FightRpcEnterAsk.UserId)
  return userid_;
}
inline void FightRpcEnterAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FightRpcEnterAsk.UserId)
}

// optional string DungeonKey = 2;
inline bool FightRpcEnterAsk::has_dungeonkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightRpcEnterAsk::set_has_dungeonkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightRpcEnterAsk::clear_has_dungeonkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightRpcEnterAsk::clear_dungeonkey() {
  dungeonkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dungeonkey();
}
inline const ::std::string& FightRpcEnterAsk::dungeonkey() const {
  // @@protoc_insertion_point(field_get:FightRpcEnterAsk.DungeonKey)
  return dungeonkey_.GetNoArena();
}
inline void FightRpcEnterAsk::set_dungeonkey(const ::std::string& value) {
  set_has_dungeonkey();
  dungeonkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightRpcEnterAsk.DungeonKey)
}
#if LANG_CXX11
inline void FightRpcEnterAsk::set_dungeonkey(::std::string&& value) {
  set_has_dungeonkey();
  dungeonkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightRpcEnterAsk.DungeonKey)
}
#endif
inline void FightRpcEnterAsk::set_dungeonkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dungeonkey();
  dungeonkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightRpcEnterAsk.DungeonKey)
}
inline void FightRpcEnterAsk::set_dungeonkey(const char* value, size_t size) {
  set_has_dungeonkey();
  dungeonkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightRpcEnterAsk.DungeonKey)
}
inline ::std::string* FightRpcEnterAsk::mutable_dungeonkey() {
  set_has_dungeonkey();
  // @@protoc_insertion_point(field_mutable:FightRpcEnterAsk.DungeonKey)
  return dungeonkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightRpcEnterAsk::release_dungeonkey() {
  // @@protoc_insertion_point(field_release:FightRpcEnterAsk.DungeonKey)
  clear_has_dungeonkey();
  return dungeonkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightRpcEnterAsk::set_allocated_dungeonkey(::std::string* dungeonkey) {
  if (dungeonkey != NULL) {
    set_has_dungeonkey();
  } else {
    clear_has_dungeonkey();
  }
  dungeonkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dungeonkey);
  // @@protoc_insertion_point(field_set_allocated:FightRpcEnterAsk.DungeonKey)
}

// optional string SessionKey = 3;
inline bool FightRpcEnterAsk::has_sessionkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightRpcEnterAsk::set_has_sessionkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightRpcEnterAsk::clear_has_sessionkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightRpcEnterAsk::clear_sessionkey() {
  sessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionkey();
}
inline const ::std::string& FightRpcEnterAsk::sessionkey() const {
  // @@protoc_insertion_point(field_get:FightRpcEnterAsk.SessionKey)
  return sessionkey_.GetNoArena();
}
inline void FightRpcEnterAsk::set_sessionkey(const ::std::string& value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightRpcEnterAsk.SessionKey)
}
#if LANG_CXX11
inline void FightRpcEnterAsk::set_sessionkey(::std::string&& value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightRpcEnterAsk.SessionKey)
}
#endif
inline void FightRpcEnterAsk::set_sessionkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightRpcEnterAsk.SessionKey)
}
inline void FightRpcEnterAsk::set_sessionkey(const char* value, size_t size) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightRpcEnterAsk.SessionKey)
}
inline ::std::string* FightRpcEnterAsk::mutable_sessionkey() {
  set_has_sessionkey();
  // @@protoc_insertion_point(field_mutable:FightRpcEnterAsk.SessionKey)
  return sessionkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightRpcEnterAsk::release_sessionkey() {
  // @@protoc_insertion_point(field_release:FightRpcEnterAsk.SessionKey)
  clear_has_sessionkey();
  return sessionkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightRpcEnterAsk::set_allocated_sessionkey(::std::string* sessionkey) {
  if (sessionkey != NULL) {
    set_has_sessionkey();
  } else {
    clear_has_sessionkey();
  }
  sessionkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionkey);
  // @@protoc_insertion_point(field_set_allocated:FightRpcEnterAsk.SessionKey)
}

// -------------------------------------------------------------------

// FightRpcEnterReply

// optional sint32 Result = 1 [default = -9999];
inline bool FightRpcEnterReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightRpcEnterReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightRpcEnterReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightRpcEnterReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 FightRpcEnterReply::result() const {
  // @@protoc_insertion_point(field_get:FightRpcEnterReply.Result)
  return result_;
}
inline void FightRpcEnterReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FightRpcEnterReply.Result)
}

// optional sint32 Tick = 2 [default = -1];
inline bool FightRpcEnterReply::has_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightRpcEnterReply::set_has_tick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightRpcEnterReply::clear_has_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightRpcEnterReply::clear_tick() {
  tick_ = -1;
  clear_has_tick();
}
inline ::google::protobuf::int32 FightRpcEnterReply::tick() const {
  // @@protoc_insertion_point(field_get:FightRpcEnterReply.Tick)
  return tick_;
}
inline void FightRpcEnterReply::set_tick(::google::protobuf::int32 value) {
  set_has_tick();
  tick_ = value;
  // @@protoc_insertion_point(field_set:FightRpcEnterReply.Tick)
}

// optional sint32 RandNum = 3 [default = -1];
inline bool FightRpcEnterReply::has_randnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightRpcEnterReply::set_has_randnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightRpcEnterReply::clear_has_randnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightRpcEnterReply::clear_randnum() {
  randnum_ = -1;
  clear_has_randnum();
}
inline ::google::protobuf::int32 FightRpcEnterReply::randnum() const {
  // @@protoc_insertion_point(field_get:FightRpcEnterReply.RandNum)
  return randnum_;
}
inline void FightRpcEnterReply::set_randnum(::google::protobuf::int32 value) {
  set_has_randnum();
  randnum_ = value;
  // @@protoc_insertion_point(field_set:FightRpcEnterReply.RandNum)
}

// optional sint32 IdHelper = 4 [default = -1];
inline bool FightRpcEnterReply::has_idhelper() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightRpcEnterReply::set_has_idhelper() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightRpcEnterReply::clear_has_idhelper() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightRpcEnterReply::clear_idhelper() {
  idhelper_ = -1;
  clear_has_idhelper();
}
inline ::google::protobuf::int32 FightRpcEnterReply::idhelper() const {
  // @@protoc_insertion_point(field_get:FightRpcEnterReply.IdHelper)
  return idhelper_;
}
inline void FightRpcEnterReply::set_idhelper(::google::protobuf::int32 value) {
  set_has_idhelper();
  idhelper_ = value;
  // @@protoc_insertion_point(field_set:FightRpcEnterReply.IdHelper)
}

// repeated bytes ActionArr = 5;
inline int FightRpcEnterReply::actionarr_size() const {
  return actionarr_.size();
}
inline void FightRpcEnterReply::clear_actionarr() {
  actionarr_.Clear();
}
inline const ::std::string& FightRpcEnterReply::actionarr(int index) const {
  // @@protoc_insertion_point(field_get:FightRpcEnterReply.ActionArr)
  return actionarr_.Get(index);
}
inline ::std::string* FightRpcEnterReply::mutable_actionarr(int index) {
  // @@protoc_insertion_point(field_mutable:FightRpcEnterReply.ActionArr)
  return actionarr_.Mutable(index);
}
inline void FightRpcEnterReply::set_actionarr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:FightRpcEnterReply.ActionArr)
  actionarr_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FightRpcEnterReply::set_actionarr(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:FightRpcEnterReply.ActionArr)
  actionarr_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FightRpcEnterReply::set_actionarr(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actionarr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FightRpcEnterReply.ActionArr)
}
inline void FightRpcEnterReply::set_actionarr(int index, const void* value, size_t size) {
  actionarr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FightRpcEnterReply.ActionArr)
}
inline ::std::string* FightRpcEnterReply::add_actionarr() {
  // @@protoc_insertion_point(field_add_mutable:FightRpcEnterReply.ActionArr)
  return actionarr_.Add();
}
inline void FightRpcEnterReply::add_actionarr(const ::std::string& value) {
  actionarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FightRpcEnterReply.ActionArr)
}
#if LANG_CXX11
inline void FightRpcEnterReply::add_actionarr(::std::string&& value) {
  actionarr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FightRpcEnterReply.ActionArr)
}
#endif
inline void FightRpcEnterReply::add_actionarr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actionarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FightRpcEnterReply.ActionArr)
}
inline void FightRpcEnterReply::add_actionarr(const void* value, size_t size) {
  actionarr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FightRpcEnterReply.ActionArr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FightRpcEnterReply::actionarr() const {
  // @@protoc_insertion_point(field_list:FightRpcEnterReply.ActionArr)
  return actionarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FightRpcEnterReply::mutable_actionarr() {
  // @@protoc_insertion_point(field_mutable_list:FightRpcEnterReply.ActionArr)
  return &actionarr_;
}

// -------------------------------------------------------------------

// FightPrizeInfo

// optional sint32 Id = 1 [default = -1];
inline bool FightPrizeInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightPrizeInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightPrizeInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightPrizeInfo::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 FightPrizeInfo::id() const {
  // @@protoc_insertion_point(field_get:FightPrizeInfo.Id)
  return id_;
}
inline void FightPrizeInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:FightPrizeInfo.Id)
}

// optional sint32 Count = 2 [default = -1];
inline bool FightPrizeInfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightPrizeInfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightPrizeInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightPrizeInfo::clear_count() {
  count_ = -1;
  clear_has_count();
}
inline ::google::protobuf::int32 FightPrizeInfo::count() const {
  // @@protoc_insertion_point(field_get:FightPrizeInfo.Count)
  return count_;
}
inline void FightPrizeInfo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:FightPrizeInfo.Count)
}

// -------------------------------------------------------------------

// FightKillInfo

// optional sint32 Id = 1 [default = -1];
inline bool FightKillInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightKillInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightKillInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightKillInfo::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 FightKillInfo::id() const {
  // @@protoc_insertion_point(field_get:FightKillInfo.Id)
  return id_;
}
inline void FightKillInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:FightKillInfo.Id)
}

// optional sint32 Count = 2 [default = -1];
inline bool FightKillInfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightKillInfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightKillInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightKillInfo::clear_count() {
  count_ = -1;
  clear_has_count();
}
inline ::google::protobuf::int32 FightKillInfo::count() const {
  // @@protoc_insertion_point(field_get:FightKillInfo.Count)
  return count_;
}
inline void FightKillInfo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:FightKillInfo.Count)
}

// -------------------------------------------------------------------

// FightRpcStartNotify

// -------------------------------------------------------------------

// FightUseSkillAction

// optional sint32 ObjId = 1 [default = -1];
inline bool FightUseSkillAction::has_objid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightUseSkillAction::set_has_objid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightUseSkillAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightUseSkillAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightUseSkillAction::objid() const {
  // @@protoc_insertion_point(field_get:FightUseSkillAction.ObjId)
  return objid_;
}
inline void FightUseSkillAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightUseSkillAction.ObjId)
}

// optional sint32 SkillId = 2 [default = -1];
inline bool FightUseSkillAction::has_skillid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightUseSkillAction::set_has_skillid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightUseSkillAction::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightUseSkillAction::clear_skillid() {
  skillid_ = -1;
  clear_has_skillid();
}
inline ::google::protobuf::int32 FightUseSkillAction::skillid() const {
  // @@protoc_insertion_point(field_get:FightUseSkillAction.SkillId)
  return skillid_;
}
inline void FightUseSkillAction::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:FightUseSkillAction.SkillId)
}

// optional bytes PosInfo = 3;
inline bool FightUseSkillAction::has_posinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightUseSkillAction::set_has_posinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightUseSkillAction::clear_has_posinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightUseSkillAction::clear_posinfo() {
  posinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo();
}
inline const ::std::string& FightUseSkillAction::posinfo() const {
  // @@protoc_insertion_point(field_get:FightUseSkillAction.PosInfo)
  return posinfo_.GetNoArena();
}
inline void FightUseSkillAction::set_posinfo(const ::std::string& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightUseSkillAction.PosInfo)
}
#if LANG_CXX11
inline void FightUseSkillAction::set_posinfo(::std::string&& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightUseSkillAction.PosInfo)
}
#endif
inline void FightUseSkillAction::set_posinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightUseSkillAction.PosInfo)
}
inline void FightUseSkillAction::set_posinfo(const void* value, size_t size) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightUseSkillAction.PosInfo)
}
inline ::std::string* FightUseSkillAction::mutable_posinfo() {
  set_has_posinfo();
  // @@protoc_insertion_point(field_mutable:FightUseSkillAction.PosInfo)
  return posinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightUseSkillAction::release_posinfo() {
  // @@protoc_insertion_point(field_release:FightUseSkillAction.PosInfo)
  clear_has_posinfo();
  return posinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightUseSkillAction::set_allocated_posinfo(::std::string* posinfo) {
  if (posinfo != NULL) {
    set_has_posinfo();
  } else {
    clear_has_posinfo();
  }
  posinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo);
  // @@protoc_insertion_point(field_set_allocated:FightUseSkillAction.PosInfo)
}

// optional sint32 TargetObjId = 4 [default = -1];
inline bool FightUseSkillAction::has_targetobjid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightUseSkillAction::set_has_targetobjid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightUseSkillAction::clear_has_targetobjid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightUseSkillAction::clear_targetobjid() {
  targetobjid_ = -1;
  clear_has_targetobjid();
}
inline ::google::protobuf::int32 FightUseSkillAction::targetobjid() const {
  // @@protoc_insertion_point(field_get:FightUseSkillAction.TargetObjId)
  return targetobjid_;
}
inline void FightUseSkillAction::set_targetobjid(::google::protobuf::int32 value) {
  set_has_targetobjid();
  targetobjid_ = value;
  // @@protoc_insertion_point(field_set:FightUseSkillAction.TargetObjId)
}

// optional bytes TargetPos = 5;
inline bool FightUseSkillAction::has_targetpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightUseSkillAction::set_has_targetpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightUseSkillAction::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightUseSkillAction::clear_targetpos() {
  targetpos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetpos();
}
inline const ::std::string& FightUseSkillAction::targetpos() const {
  // @@protoc_insertion_point(field_get:FightUseSkillAction.TargetPos)
  return targetpos_.GetNoArena();
}
inline void FightUseSkillAction::set_targetpos(const ::std::string& value) {
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightUseSkillAction.TargetPos)
}
#if LANG_CXX11
inline void FightUseSkillAction::set_targetpos(::std::string&& value) {
  set_has_targetpos();
  targetpos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightUseSkillAction.TargetPos)
}
#endif
inline void FightUseSkillAction::set_targetpos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightUseSkillAction.TargetPos)
}
inline void FightUseSkillAction::set_targetpos(const void* value, size_t size) {
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightUseSkillAction.TargetPos)
}
inline ::std::string* FightUseSkillAction::mutable_targetpos() {
  set_has_targetpos();
  // @@protoc_insertion_point(field_mutable:FightUseSkillAction.TargetPos)
  return targetpos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightUseSkillAction::release_targetpos() {
  // @@protoc_insertion_point(field_release:FightUseSkillAction.TargetPos)
  clear_has_targetpos();
  return targetpos_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightUseSkillAction::set_allocated_targetpos(::std::string* targetpos) {
  if (targetpos != NULL) {
    set_has_targetpos();
  } else {
    clear_has_targetpos();
  }
  targetpos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetpos);
  // @@protoc_insertion_point(field_set_allocated:FightUseSkillAction.TargetPos)
}

// optional sint32 Type = 6 [default = 0];
inline bool FightUseSkillAction::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightUseSkillAction::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightUseSkillAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightUseSkillAction::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FightUseSkillAction::type() const {
  // @@protoc_insertion_point(field_get:FightUseSkillAction.Type)
  return type_;
}
inline void FightUseSkillAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightUseSkillAction.Type)
}

// repeated float V3Pos = 7;
inline int FightUseSkillAction::v3pos_size() const {
  return v3pos_.size();
}
inline void FightUseSkillAction::clear_v3pos() {
  v3pos_.Clear();
}
inline float FightUseSkillAction::v3pos(int index) const {
  // @@protoc_insertion_point(field_get:FightUseSkillAction.V3Pos)
  return v3pos_.Get(index);
}
inline void FightUseSkillAction::set_v3pos(int index, float value) {
  v3pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:FightUseSkillAction.V3Pos)
}
inline void FightUseSkillAction::add_v3pos(float value) {
  v3pos_.Add(value);
  // @@protoc_insertion_point(field_add:FightUseSkillAction.V3Pos)
}
inline const ::google::protobuf::RepeatedField< float >&
FightUseSkillAction::v3pos() const {
  // @@protoc_insertion_point(field_list:FightUseSkillAction.V3Pos)
  return v3pos_;
}
inline ::google::protobuf::RepeatedField< float >*
FightUseSkillAction::mutable_v3pos() {
  // @@protoc_insertion_point(field_mutable_list:FightUseSkillAction.V3Pos)
  return &v3pos_;
}

// optional sint32 Time = 8 [default = -1];
inline bool FightUseSkillAction::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FightUseSkillAction::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FightUseSkillAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FightUseSkillAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
inline ::google::protobuf::int32 FightUseSkillAction::time() const {
  // @@protoc_insertion_point(field_get:FightUseSkillAction.Time)
  return time_;
}
inline void FightUseSkillAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightUseSkillAction.Time)
}

// -------------------------------------------------------------------

// FightBuffAction

// optional sint32 ObjId = 2 [default = -1];
inline bool FightBuffAction::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightBuffAction::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightBuffAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightBuffAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightBuffAction::objid() const {
  // @@protoc_insertion_point(field_get:FightBuffAction.ObjId)
  return objid_;
}
inline void FightBuffAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightBuffAction.ObjId)
}

// optional sint32 AttackerId = 3 [default = -1];
inline bool FightBuffAction::has_attackerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightBuffAction::set_has_attackerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightBuffAction::clear_has_attackerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightBuffAction::clear_attackerid() {
  attackerid_ = -1;
  clear_has_attackerid();
}
inline ::google::protobuf::int32 FightBuffAction::attackerid() const {
  // @@protoc_insertion_point(field_get:FightBuffAction.AttackerId)
  return attackerid_;
}
inline void FightBuffAction::set_attackerid(::google::protobuf::int32 value) {
  set_has_attackerid();
  attackerid_ = value;
  // @@protoc_insertion_point(field_set:FightBuffAction.AttackerId)
}

// optional sint32 OpType = 4 [default = -1];
inline bool FightBuffAction::has_optype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightBuffAction::set_has_optype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightBuffAction::clear_has_optype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightBuffAction::clear_optype() {
  optype_ = -1;
  clear_has_optype();
}
inline ::google::protobuf::int32 FightBuffAction::optype() const {
  // @@protoc_insertion_point(field_get:FightBuffAction.OpType)
  return optype_;
}
inline void FightBuffAction::set_optype(::google::protobuf::int32 value) {
  set_has_optype();
  optype_ = value;
  // @@protoc_insertion_point(field_set:FightBuffAction.OpType)
}

// optional sint32 BuffId = 5 [default = -1];
inline bool FightBuffAction::has_buffid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightBuffAction::set_has_buffid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightBuffAction::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightBuffAction::clear_buffid() {
  buffid_ = -1;
  clear_has_buffid();
}
inline ::google::protobuf::int32 FightBuffAction::buffid() const {
  // @@protoc_insertion_point(field_get:FightBuffAction.BuffId)
  return buffid_;
}
inline void FightBuffAction::set_buffid(::google::protobuf::int32 value) {
  set_has_buffid();
  buffid_ = value;
  // @@protoc_insertion_point(field_set:FightBuffAction.BuffId)
}

// optional sint32 RemainTime = 7 [default = -1];
inline bool FightBuffAction::has_remaintime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightBuffAction::set_has_remaintime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightBuffAction::clear_has_remaintime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightBuffAction::clear_remaintime() {
  remaintime_ = -1;
  clear_has_remaintime();
}
inline ::google::protobuf::int32 FightBuffAction::remaintime() const {
  // @@protoc_insertion_point(field_get:FightBuffAction.RemainTime)
  return remaintime_;
}
inline void FightBuffAction::set_remaintime(::google::protobuf::int32 value) {
  set_has_remaintime();
  remaintime_ = value;
  // @@protoc_insertion_point(field_set:FightBuffAction.RemainTime)
}

// optional sint32 BuffLv = 8 [default = -1];
inline bool FightBuffAction::has_bufflv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightBuffAction::set_has_bufflv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightBuffAction::clear_has_bufflv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightBuffAction::clear_bufflv() {
  bufflv_ = -1;
  clear_has_bufflv();
}
inline ::google::protobuf::int32 FightBuffAction::bufflv() const {
  // @@protoc_insertion_point(field_get:FightBuffAction.BuffLv)
  return bufflv_;
}
inline void FightBuffAction::set_bufflv(::google::protobuf::int32 value) {
  set_has_bufflv();
  bufflv_ = value;
  // @@protoc_insertion_point(field_set:FightBuffAction.BuffLv)
}

// -------------------------------------------------------------------

// FightCharHitAction

// optional sint32 ObjId = 2 [default = -1];
inline bool FightCharHitAction::has_objid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightCharHitAction::set_has_objid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightCharHitAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightCharHitAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightCharHitAction::objid() const {
  // @@protoc_insertion_point(field_get:FightCharHitAction.ObjId)
  return objid_;
}
inline void FightCharHitAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightCharHitAction.ObjId)
}

// optional sint32 SkillId = 3 [default = -1];
inline bool FightCharHitAction::has_skillid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightCharHitAction::set_has_skillid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightCharHitAction::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightCharHitAction::clear_skillid() {
  skillid_ = -1;
  clear_has_skillid();
}
inline ::google::protobuf::int32 FightCharHitAction::skillid() const {
  // @@protoc_insertion_point(field_get:FightCharHitAction.SkillId)
  return skillid_;
}
inline void FightCharHitAction::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:FightCharHitAction.SkillId)
}

// repeated .FightHitTargetInfo TargetList = 7;
inline int FightCharHitAction::targetlist_size() const {
  return targetlist_.size();
}
inline void FightCharHitAction::clear_targetlist() {
  targetlist_.Clear();
}
inline const ::FightHitTargetInfo& FightCharHitAction::targetlist(int index) const {
  // @@protoc_insertion_point(field_get:FightCharHitAction.TargetList)
  return targetlist_.Get(index);
}
inline ::FightHitTargetInfo* FightCharHitAction::mutable_targetlist(int index) {
  // @@protoc_insertion_point(field_mutable:FightCharHitAction.TargetList)
  return targetlist_.Mutable(index);
}
inline ::FightHitTargetInfo* FightCharHitAction::add_targetlist() {
  // @@protoc_insertion_point(field_add:FightCharHitAction.TargetList)
  return targetlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FightHitTargetInfo >*
FightCharHitAction::mutable_targetlist() {
  // @@protoc_insertion_point(field_mutable_list:FightCharHitAction.TargetList)
  return &targetlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FightHitTargetInfo >&
FightCharHitAction::targetlist() const {
  // @@protoc_insertion_point(field_list:FightCharHitAction.TargetList)
  return targetlist_;
}

// optional sint32 Seq = 8 [default = -1];
inline bool FightCharHitAction::has_seq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FightCharHitAction::set_has_seq() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FightCharHitAction::clear_has_seq() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FightCharHitAction::clear_seq() {
  seq_ = -1;
  clear_has_seq();
}
inline ::google::protobuf::int32 FightCharHitAction::seq() const {
  // @@protoc_insertion_point(field_get:FightCharHitAction.Seq)
  return seq_;
}
inline void FightCharHitAction::set_seq(::google::protobuf::int32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:FightCharHitAction.Seq)
}

// optional bytes PosInfo = 11;
inline bool FightCharHitAction::has_posinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightCharHitAction::set_has_posinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightCharHitAction::clear_has_posinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightCharHitAction::clear_posinfo() {
  posinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo();
}
inline const ::std::string& FightCharHitAction::posinfo() const {
  // @@protoc_insertion_point(field_get:FightCharHitAction.PosInfo)
  return posinfo_.GetNoArena();
}
inline void FightCharHitAction::set_posinfo(const ::std::string& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightCharHitAction.PosInfo)
}
#if LANG_CXX11
inline void FightCharHitAction::set_posinfo(::std::string&& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightCharHitAction.PosInfo)
}
#endif
inline void FightCharHitAction::set_posinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightCharHitAction.PosInfo)
}
inline void FightCharHitAction::set_posinfo(const void* value, size_t size) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightCharHitAction.PosInfo)
}
inline ::std::string* FightCharHitAction::mutable_posinfo() {
  set_has_posinfo();
  // @@protoc_insertion_point(field_mutable:FightCharHitAction.PosInfo)
  return posinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightCharHitAction::release_posinfo() {
  // @@protoc_insertion_point(field_release:FightCharHitAction.PosInfo)
  clear_has_posinfo();
  return posinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightCharHitAction::set_allocated_posinfo(::std::string* posinfo) {
  if (posinfo != NULL) {
    set_has_posinfo();
  } else {
    clear_has_posinfo();
  }
  posinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo);
  // @@protoc_insertion_point(field_set_allocated:FightCharHitAction.PosInfo)
}

// optional sint32 BackDir = 25 [default = 0];
inline bool FightCharHitAction::has_backdir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightCharHitAction::set_has_backdir() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightCharHitAction::clear_has_backdir() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightCharHitAction::clear_backdir() {
  backdir_ = 0;
  clear_has_backdir();
}
inline ::google::protobuf::int32 FightCharHitAction::backdir() const {
  // @@protoc_insertion_point(field_get:FightCharHitAction.BackDir)
  return backdir_;
}
inline void FightCharHitAction::set_backdir(::google::protobuf::int32 value) {
  set_has_backdir();
  backdir_ = value;
  // @@protoc_insertion_point(field_set:FightCharHitAction.BackDir)
}

// optional sint32 SegmentIndex = 30 [default = -1];
inline bool FightCharHitAction::has_segmentindex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FightCharHitAction::set_has_segmentindex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FightCharHitAction::clear_has_segmentindex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FightCharHitAction::clear_segmentindex() {
  segmentindex_ = -1;
  clear_has_segmentindex();
}
inline ::google::protobuf::int32 FightCharHitAction::segmentindex() const {
  // @@protoc_insertion_point(field_get:FightCharHitAction.SegmentIndex)
  return segmentindex_;
}
inline void FightCharHitAction::set_segmentindex(::google::protobuf::int32 value) {
  set_has_segmentindex();
  segmentindex_ = value;
  // @@protoc_insertion_point(field_set:FightCharHitAction.SegmentIndex)
}

// optional sint32 AttackSegment = 31 [default = -1];
inline bool FightCharHitAction::has_attacksegment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightCharHitAction::set_has_attacksegment() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightCharHitAction::clear_has_attacksegment() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightCharHitAction::clear_attacksegment() {
  attacksegment_ = -1;
  clear_has_attacksegment();
}
inline ::google::protobuf::int32 FightCharHitAction::attacksegment() const {
  // @@protoc_insertion_point(field_get:FightCharHitAction.AttackSegment)
  return attacksegment_;
}
inline void FightCharHitAction::set_attacksegment(::google::protobuf::int32 value) {
  set_has_attacksegment();
  attacksegment_ = value;
  // @@protoc_insertion_point(field_set:FightCharHitAction.AttackSegment)
}

// optional bool IsHitGround = 32 [default = false];
inline bool FightCharHitAction::has_ishitground() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightCharHitAction::set_has_ishitground() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightCharHitAction::clear_has_ishitground() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightCharHitAction::clear_ishitground() {
  ishitground_ = false;
  clear_has_ishitground();
}
inline bool FightCharHitAction::ishitground() const {
  // @@protoc_insertion_point(field_get:FightCharHitAction.IsHitGround)
  return ishitground_;
}
inline void FightCharHitAction::set_ishitground(bool value) {
  set_has_ishitground();
  ishitground_ = value;
  // @@protoc_insertion_point(field_set:FightCharHitAction.IsHitGround)
}

// -------------------------------------------------------------------

// FightOfflineAction

// optional sint32 ObjId = 1 [default = -1];
inline bool FightOfflineAction::has_objid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightOfflineAction::set_has_objid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightOfflineAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightOfflineAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightOfflineAction::objid() const {
  // @@protoc_insertion_point(field_get:FightOfflineAction.ObjId)
  return objid_;
}
inline void FightOfflineAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightOfflineAction.ObjId)
}

// optional bool IsOffline = 2 [default = false];
inline bool FightOfflineAction::has_isoffline() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightOfflineAction::set_has_isoffline() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightOfflineAction::clear_has_isoffline() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightOfflineAction::clear_isoffline() {
  isoffline_ = false;
  clear_has_isoffline();
}
inline bool FightOfflineAction::isoffline() const {
  // @@protoc_insertion_point(field_get:FightOfflineAction.IsOffline)
  return isoffline_;
}
inline void FightOfflineAction::set_isoffline(bool value) {
  set_has_isoffline();
  isoffline_ = value;
  // @@protoc_insertion_point(field_set:FightOfflineAction.IsOffline)
}

// optional bool IsAIDelegate = 3 [default = false];
inline bool FightOfflineAction::has_isaidelegate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightOfflineAction::set_has_isaidelegate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightOfflineAction::clear_has_isaidelegate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightOfflineAction::clear_isaidelegate() {
  isaidelegate_ = false;
  clear_has_isaidelegate();
}
inline bool FightOfflineAction::isaidelegate() const {
  // @@protoc_insertion_point(field_get:FightOfflineAction.IsAIDelegate)
  return isaidelegate_;
}
inline void FightOfflineAction::set_isaidelegate(bool value) {
  set_has_isaidelegate();
  isaidelegate_ = value;
  // @@protoc_insertion_point(field_set:FightOfflineAction.IsAIDelegate)
}

// -------------------------------------------------------------------

// FightStateAction

// optional sint32 Type = 1 [default = -1];
inline bool FightStateAction::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightStateAction::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightStateAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightStateAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 FightStateAction::type() const {
  // @@protoc_insertion_point(field_get:FightStateAction.Type)
  return type_;
}
inline void FightStateAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightStateAction.Type)
}

// optional sint32 ObjId = 2 [default = -1];
inline bool FightStateAction::has_objid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightStateAction::set_has_objid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightStateAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightStateAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightStateAction::objid() const {
  // @@protoc_insertion_point(field_get:FightStateAction.ObjId)
  return objid_;
}
inline void FightStateAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightStateAction.ObjId)
}

// optional bytes PosInfo = 3;
inline bool FightStateAction::has_posinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightStateAction::set_has_posinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightStateAction::clear_has_posinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightStateAction::clear_posinfo() {
  posinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo();
}
inline const ::std::string& FightStateAction::posinfo() const {
  // @@protoc_insertion_point(field_get:FightStateAction.PosInfo)
  return posinfo_.GetNoArena();
}
inline void FightStateAction::set_posinfo(const ::std::string& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightStateAction.PosInfo)
}
#if LANG_CXX11
inline void FightStateAction::set_posinfo(::std::string&& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightStateAction.PosInfo)
}
#endif
inline void FightStateAction::set_posinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightStateAction.PosInfo)
}
inline void FightStateAction::set_posinfo(const void* value, size_t size) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightStateAction.PosInfo)
}
inline ::std::string* FightStateAction::mutable_posinfo() {
  set_has_posinfo();
  // @@protoc_insertion_point(field_mutable:FightStateAction.PosInfo)
  return posinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightStateAction::release_posinfo() {
  // @@protoc_insertion_point(field_release:FightStateAction.PosInfo)
  clear_has_posinfo();
  return posinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightStateAction::set_allocated_posinfo(::std::string* posinfo) {
  if (posinfo != NULL) {
    set_has_posinfo();
  } else {
    clear_has_posinfo();
  }
  posinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo);
  // @@protoc_insertion_point(field_set_allocated:FightStateAction.PosInfo)
}

// optional bytes TargetPos = 4;
inline bool FightStateAction::has_targetpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightStateAction::set_has_targetpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightStateAction::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightStateAction::clear_targetpos() {
  targetpos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetpos();
}
inline const ::std::string& FightStateAction::targetpos() const {
  // @@protoc_insertion_point(field_get:FightStateAction.TargetPos)
  return targetpos_.GetNoArena();
}
inline void FightStateAction::set_targetpos(const ::std::string& value) {
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightStateAction.TargetPos)
}
#if LANG_CXX11
inline void FightStateAction::set_targetpos(::std::string&& value) {
  set_has_targetpos();
  targetpos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightStateAction.TargetPos)
}
#endif
inline void FightStateAction::set_targetpos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightStateAction.TargetPos)
}
inline void FightStateAction::set_targetpos(const void* value, size_t size) {
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightStateAction.TargetPos)
}
inline ::std::string* FightStateAction::mutable_targetpos() {
  set_has_targetpos();
  // @@protoc_insertion_point(field_mutable:FightStateAction.TargetPos)
  return targetpos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightStateAction::release_targetpos() {
  // @@protoc_insertion_point(field_release:FightStateAction.TargetPos)
  clear_has_targetpos();
  return targetpos_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightStateAction::set_allocated_targetpos(::std::string* targetpos) {
  if (targetpos != NULL) {
    set_has_targetpos();
  } else {
    clear_has_targetpos();
  }
  targetpos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetpos);
  // @@protoc_insertion_point(field_set_allocated:FightStateAction.TargetPos)
}

// optional sint32 IntPara = 5 [default = -1];
inline bool FightStateAction::has_intpara() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightStateAction::set_has_intpara() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightStateAction::clear_has_intpara() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightStateAction::clear_intpara() {
  intpara_ = -1;
  clear_has_intpara();
}
inline ::google::protobuf::int32 FightStateAction::intpara() const {
  // @@protoc_insertion_point(field_get:FightStateAction.IntPara)
  return intpara_;
}
inline void FightStateAction::set_intpara(::google::protobuf::int32 value) {
  set_has_intpara();
  intpara_ = value;
  // @@protoc_insertion_point(field_set:FightStateAction.IntPara)
}

// optional sint32 LadderObjId = 6 [default = -1];
inline bool FightStateAction::has_ladderobjid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightStateAction::set_has_ladderobjid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightStateAction::clear_has_ladderobjid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightStateAction::clear_ladderobjid() {
  ladderobjid_ = -1;
  clear_has_ladderobjid();
}
inline ::google::protobuf::int32 FightStateAction::ladderobjid() const {
  // @@protoc_insertion_point(field_get:FightStateAction.LadderObjId)
  return ladderobjid_;
}
inline void FightStateAction::set_ladderobjid(::google::protobuf::int32 value) {
  set_has_ladderobjid();
  ladderobjid_ = value;
  // @@protoc_insertion_point(field_set:FightStateAction.LadderObjId)
}

// -------------------------------------------------------------------

// FightCharDeadAction

// optional sint32 ObjId = 1 [default = -1];
inline bool FightCharDeadAction::has_objid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightCharDeadAction::set_has_objid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightCharDeadAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightCharDeadAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightCharDeadAction::objid() const {
  // @@protoc_insertion_point(field_get:FightCharDeadAction.ObjId)
  return objid_;
}
inline void FightCharDeadAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightCharDeadAction.ObjId)
}

// optional bytes PosInfo = 2;
inline bool FightCharDeadAction::has_posinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightCharDeadAction::set_has_posinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightCharDeadAction::clear_has_posinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightCharDeadAction::clear_posinfo() {
  posinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo();
}
inline const ::std::string& FightCharDeadAction::posinfo() const {
  // @@protoc_insertion_point(field_get:FightCharDeadAction.PosInfo)
  return posinfo_.GetNoArena();
}
inline void FightCharDeadAction::set_posinfo(const ::std::string& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightCharDeadAction.PosInfo)
}
#if LANG_CXX11
inline void FightCharDeadAction::set_posinfo(::std::string&& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightCharDeadAction.PosInfo)
}
#endif
inline void FightCharDeadAction::set_posinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightCharDeadAction.PosInfo)
}
inline void FightCharDeadAction::set_posinfo(const void* value, size_t size) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightCharDeadAction.PosInfo)
}
inline ::std::string* FightCharDeadAction::mutable_posinfo() {
  set_has_posinfo();
  // @@protoc_insertion_point(field_mutable:FightCharDeadAction.PosInfo)
  return posinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightCharDeadAction::release_posinfo() {
  // @@protoc_insertion_point(field_release:FightCharDeadAction.PosInfo)
  clear_has_posinfo();
  return posinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightCharDeadAction::set_allocated_posinfo(::std::string* posinfo) {
  if (posinfo != NULL) {
    set_has_posinfo();
  } else {
    clear_has_posinfo();
  }
  posinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo);
  // @@protoc_insertion_point(field_set_allocated:FightCharDeadAction.PosInfo)
}

// -------------------------------------------------------------------

// FightCharReviveAction

// optional sint32 ObjId = 1 [default = -1];
inline bool FightCharReviveAction::has_objid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightCharReviveAction::set_has_objid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightCharReviveAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightCharReviveAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightCharReviveAction::objid() const {
  // @@protoc_insertion_point(field_get:FightCharReviveAction.ObjId)
  return objid_;
}
inline void FightCharReviveAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightCharReviveAction.ObjId)
}

// optional bytes PosInfo = 2;
inline bool FightCharReviveAction::has_posinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightCharReviveAction::set_has_posinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightCharReviveAction::clear_has_posinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightCharReviveAction::clear_posinfo() {
  posinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo();
}
inline const ::std::string& FightCharReviveAction::posinfo() const {
  // @@protoc_insertion_point(field_get:FightCharReviveAction.PosInfo)
  return posinfo_.GetNoArena();
}
inline void FightCharReviveAction::set_posinfo(const ::std::string& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightCharReviveAction.PosInfo)
}
#if LANG_CXX11
inline void FightCharReviveAction::set_posinfo(::std::string&& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightCharReviveAction.PosInfo)
}
#endif
inline void FightCharReviveAction::set_posinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightCharReviveAction.PosInfo)
}
inline void FightCharReviveAction::set_posinfo(const void* value, size_t size) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightCharReviveAction.PosInfo)
}
inline ::std::string* FightCharReviveAction::mutable_posinfo() {
  set_has_posinfo();
  // @@protoc_insertion_point(field_mutable:FightCharReviveAction.PosInfo)
  return posinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightCharReviveAction::release_posinfo() {
  // @@protoc_insertion_point(field_release:FightCharReviveAction.PosInfo)
  clear_has_posinfo();
  return posinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightCharReviveAction::set_allocated_posinfo(::std::string* posinfo) {
  if (posinfo != NULL) {
    set_has_posinfo();
  } else {
    clear_has_posinfo();
  }
  posinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo);
  // @@protoc_insertion_point(field_set_allocated:FightCharReviveAction.PosInfo)
}

// optional sint32 CurHp = 3 [default = 0];
inline bool FightCharReviveAction::has_curhp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightCharReviveAction::set_has_curhp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightCharReviveAction::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightCharReviveAction::clear_curhp() {
  curhp_ = 0;
  clear_has_curhp();
}
inline ::google::protobuf::int32 FightCharReviveAction::curhp() const {
  // @@protoc_insertion_point(field_get:FightCharReviveAction.CurHp)
  return curhp_;
}
inline void FightCharReviveAction::set_curhp(::google::protobuf::int32 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:FightCharReviveAction.CurHp)
}

// optional sint32 Type = 4 [default = -1];
inline bool FightCharReviveAction::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightCharReviveAction::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightCharReviveAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightCharReviveAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 FightCharReviveAction::type() const {
  // @@protoc_insertion_point(field_get:FightCharReviveAction.Type)
  return type_;
}
inline void FightCharReviveAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightCharReviveAction.Type)
}

// optional sint32 Time = 5 [default = -1];
inline bool FightCharReviveAction::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FightCharReviveAction::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FightCharReviveAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FightCharReviveAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
inline ::google::protobuf::int32 FightCharReviveAction::time() const {
  // @@protoc_insertion_point(field_get:FightCharReviveAction.Time)
  return time_;
}
inline void FightCharReviveAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightCharReviveAction.Time)
}

// optional sint32 ManualRevive = 6 [default = 0];
inline bool FightCharReviveAction::has_manualrevive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightCharReviveAction::set_has_manualrevive() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightCharReviveAction::clear_has_manualrevive() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightCharReviveAction::clear_manualrevive() {
  manualrevive_ = 0;
  clear_has_manualrevive();
}
inline ::google::protobuf::int32 FightCharReviveAction::manualrevive() const {
  // @@protoc_insertion_point(field_get:FightCharReviveAction.ManualRevive)
  return manualrevive_;
}
inline void FightCharReviveAction::set_manualrevive(::google::protobuf::int32 value) {
  set_has_manualrevive();
  manualrevive_ = value;
  // @@protoc_insertion_point(field_set:FightCharReviveAction.ManualRevive)
}

// optional sint32 RemainTimes = 7 [default = -1];
inline bool FightCharReviveAction::has_remaintimes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FightCharReviveAction::set_has_remaintimes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FightCharReviveAction::clear_has_remaintimes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FightCharReviveAction::clear_remaintimes() {
  remaintimes_ = -1;
  clear_has_remaintimes();
}
inline ::google::protobuf::int32 FightCharReviveAction::remaintimes() const {
  // @@protoc_insertion_point(field_get:FightCharReviveAction.RemainTimes)
  return remaintimes_;
}
inline void FightCharReviveAction::set_remaintimes(::google::protobuf::int32 value) {
  set_has_remaintimes();
  remaintimes_ = value;
  // @@protoc_insertion_point(field_set:FightCharReviveAction.RemainTimes)
}

// optional sint32 NeedMoney = 8 [default = -1];
inline bool FightCharReviveAction::has_needmoney() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FightCharReviveAction::set_has_needmoney() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FightCharReviveAction::clear_has_needmoney() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FightCharReviveAction::clear_needmoney() {
  needmoney_ = -1;
  clear_has_needmoney();
}
inline ::google::protobuf::int32 FightCharReviveAction::needmoney() const {
  // @@protoc_insertion_point(field_get:FightCharReviveAction.NeedMoney)
  return needmoney_;
}
inline void FightCharReviveAction::set_needmoney(::google::protobuf::int32 value) {
  set_has_needmoney();
  needmoney_ = value;
  // @@protoc_insertion_point(field_set:FightCharReviveAction.NeedMoney)
}

// optional sint32 MaxHP = 10 [default = 0];
inline bool FightCharReviveAction::has_maxhp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightCharReviveAction::set_has_maxhp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightCharReviveAction::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightCharReviveAction::clear_maxhp() {
  maxhp_ = 0;
  clear_has_maxhp();
}
inline ::google::protobuf::int32 FightCharReviveAction::maxhp() const {
  // @@protoc_insertion_point(field_get:FightCharReviveAction.MaxHP)
  return maxhp_;
}
inline void FightCharReviveAction::set_maxhp(::google::protobuf::int32 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:FightCharReviveAction.MaxHP)
}

// optional sint32 TotalTimes = 11 [default = -1];
inline bool FightCharReviveAction::has_totaltimes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FightCharReviveAction::set_has_totaltimes() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FightCharReviveAction::clear_has_totaltimes() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FightCharReviveAction::clear_totaltimes() {
  totaltimes_ = -1;
  clear_has_totaltimes();
}
inline ::google::protobuf::int32 FightCharReviveAction::totaltimes() const {
  // @@protoc_insertion_point(field_get:FightCharReviveAction.TotalTimes)
  return totaltimes_;
}
inline void FightCharReviveAction::set_totaltimes(::google::protobuf::int32 value) {
  set_has_totaltimes();
  totaltimes_ = value;
  // @@protoc_insertion_point(field_set:FightCharReviveAction.TotalTimes)
}

// -------------------------------------------------------------------

// FightHitTargetInfo

// optional sint32 ObjId = 1 [default = -1];
inline bool FightHitTargetInfo::has_objid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightHitTargetInfo::set_has_objid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightHitTargetInfo::clear_has_objid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightHitTargetInfo::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightHitTargetInfo::objid() const {
  // @@protoc_insertion_point(field_get:FightHitTargetInfo.ObjId)
  return objid_;
}
inline void FightHitTargetInfo::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightHitTargetInfo.ObjId)
}

// optional bytes PosInfo = 2;
inline bool FightHitTargetInfo::has_posinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightHitTargetInfo::set_has_posinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightHitTargetInfo::clear_has_posinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightHitTargetInfo::clear_posinfo() {
  posinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo();
}
inline const ::std::string& FightHitTargetInfo::posinfo() const {
  // @@protoc_insertion_point(field_get:FightHitTargetInfo.PosInfo)
  return posinfo_.GetNoArena();
}
inline void FightHitTargetInfo::set_posinfo(const ::std::string& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightHitTargetInfo.PosInfo)
}
#if LANG_CXX11
inline void FightHitTargetInfo::set_posinfo(::std::string&& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightHitTargetInfo.PosInfo)
}
#endif
inline void FightHitTargetInfo::set_posinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightHitTargetInfo.PosInfo)
}
inline void FightHitTargetInfo::set_posinfo(const void* value, size_t size) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightHitTargetInfo.PosInfo)
}
inline ::std::string* FightHitTargetInfo::mutable_posinfo() {
  set_has_posinfo();
  // @@protoc_insertion_point(field_mutable:FightHitTargetInfo.PosInfo)
  return posinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightHitTargetInfo::release_posinfo() {
  // @@protoc_insertion_point(field_release:FightHitTargetInfo.PosInfo)
  clear_has_posinfo();
  return posinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightHitTargetInfo::set_allocated_posinfo(::std::string* posinfo) {
  if (posinfo != NULL) {
    set_has_posinfo();
  } else {
    clear_has_posinfo();
  }
  posinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo);
  // @@protoc_insertion_point(field_set_allocated:FightHitTargetInfo.PosInfo)
}

// optional sint32 Flag = 3 [default = 0];
inline bool FightHitTargetInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightHitTargetInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightHitTargetInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightHitTargetInfo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 FightHitTargetInfo::flag() const {
  // @@protoc_insertion_point(field_get:FightHitTargetInfo.Flag)
  return flag_;
}
inline void FightHitTargetInfo::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:FightHitTargetInfo.Flag)
}

// optional sint32 EnemyIndex = 5 [default = -1];
inline bool FightHitTargetInfo::has_enemyindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightHitTargetInfo::set_has_enemyindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightHitTargetInfo::clear_has_enemyindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightHitTargetInfo::clear_enemyindex() {
  enemyindex_ = -1;
  clear_has_enemyindex();
}
inline ::google::protobuf::int32 FightHitTargetInfo::enemyindex() const {
  // @@protoc_insertion_point(field_get:FightHitTargetInfo.EnemyIndex)
  return enemyindex_;
}
inline void FightHitTargetInfo::set_enemyindex(::google::protobuf::int32 value) {
  set_has_enemyindex();
  enemyindex_ = value;
  // @@protoc_insertion_point(field_set:FightHitTargetInfo.EnemyIndex)
}

// -------------------------------------------------------------------

// FightComboSkillAction

// optional sint32 ObjId = 2 [default = -1];
inline bool FightComboSkillAction::has_objid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightComboSkillAction::set_has_objid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightComboSkillAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightComboSkillAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightComboSkillAction::objid() const {
  // @@protoc_insertion_point(field_get:FightComboSkillAction.ObjId)
  return objid_;
}
inline void FightComboSkillAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightComboSkillAction.ObjId)
}

// optional sint32 SkillId = 3 [default = -1];
inline bool FightComboSkillAction::has_skillid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightComboSkillAction::set_has_skillid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightComboSkillAction::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightComboSkillAction::clear_skillid() {
  skillid_ = -1;
  clear_has_skillid();
}
inline ::google::protobuf::int32 FightComboSkillAction::skillid() const {
  // @@protoc_insertion_point(field_get:FightComboSkillAction.SkillId)
  return skillid_;
}
inline void FightComboSkillAction::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:FightComboSkillAction.SkillId)
}

// optional sint32 Flag = 4 [default = -1];
inline bool FightComboSkillAction::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightComboSkillAction::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightComboSkillAction::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightComboSkillAction::clear_flag() {
  flag_ = -1;
  clear_has_flag();
}
inline ::google::protobuf::int32 FightComboSkillAction::flag() const {
  // @@protoc_insertion_point(field_get:FightComboSkillAction.Flag)
  return flag_;
}
inline void FightComboSkillAction::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:FightComboSkillAction.Flag)
}

// -------------------------------------------------------------------

// FightEndSkillAction

// optional sint32 ObjId = 1 [default = -1];
inline bool FightEndSkillAction::has_objid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightEndSkillAction::set_has_objid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightEndSkillAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightEndSkillAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightEndSkillAction::objid() const {
  // @@protoc_insertion_point(field_get:FightEndSkillAction.ObjId)
  return objid_;
}
inline void FightEndSkillAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightEndSkillAction.ObjId)
}

// optional sint32 SkillId = 2 [default = -1];
inline bool FightEndSkillAction::has_skillid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightEndSkillAction::set_has_skillid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightEndSkillAction::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightEndSkillAction::clear_skillid() {
  skillid_ = -1;
  clear_has_skillid();
}
inline ::google::protobuf::int32 FightEndSkillAction::skillid() const {
  // @@protoc_insertion_point(field_get:FightEndSkillAction.SkillId)
  return skillid_;
}
inline void FightEndSkillAction::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:FightEndSkillAction.SkillId)
}

// optional bytes PosInfo = 3;
inline bool FightEndSkillAction::has_posinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightEndSkillAction::set_has_posinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightEndSkillAction::clear_has_posinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightEndSkillAction::clear_posinfo() {
  posinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo();
}
inline const ::std::string& FightEndSkillAction::posinfo() const {
  // @@protoc_insertion_point(field_get:FightEndSkillAction.PosInfo)
  return posinfo_.GetNoArena();
}
inline void FightEndSkillAction::set_posinfo(const ::std::string& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightEndSkillAction.PosInfo)
}
#if LANG_CXX11
inline void FightEndSkillAction::set_posinfo(::std::string&& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightEndSkillAction.PosInfo)
}
#endif
inline void FightEndSkillAction::set_posinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightEndSkillAction.PosInfo)
}
inline void FightEndSkillAction::set_posinfo(const void* value, size_t size) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightEndSkillAction.PosInfo)
}
inline ::std::string* FightEndSkillAction::mutable_posinfo() {
  set_has_posinfo();
  // @@protoc_insertion_point(field_mutable:FightEndSkillAction.PosInfo)
  return posinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightEndSkillAction::release_posinfo() {
  // @@protoc_insertion_point(field_release:FightEndSkillAction.PosInfo)
  clear_has_posinfo();
  return posinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightEndSkillAction::set_allocated_posinfo(::std::string* posinfo) {
  if (posinfo != NULL) {
    set_has_posinfo();
  } else {
    clear_has_posinfo();
  }
  posinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo);
  // @@protoc_insertion_point(field_set_allocated:FightEndSkillAction.PosInfo)
}

// optional sint32 ComboSkillId = 4 [default = -1];
inline bool FightEndSkillAction::has_comboskillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightEndSkillAction::set_has_comboskillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightEndSkillAction::clear_has_comboskillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightEndSkillAction::clear_comboskillid() {
  comboskillid_ = -1;
  clear_has_comboskillid();
}
inline ::google::protobuf::int32 FightEndSkillAction::comboskillid() const {
  // @@protoc_insertion_point(field_get:FightEndSkillAction.ComboSkillId)
  return comboskillid_;
}
inline void FightEndSkillAction::set_comboskillid(::google::protobuf::int32 value) {
  set_has_comboskillid();
  comboskillid_ = value;
  // @@protoc_insertion_point(field_set:FightEndSkillAction.ComboSkillId)
}

// -------------------------------------------------------------------

// FightCityAction

// optional sint32 Type = 1 [default = -1];
inline bool FightCityAction::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightCityAction::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightCityAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightCityAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 FightCityAction::type() const {
  // @@protoc_insertion_point(field_get:FightCityAction.Type)
  return type_;
}
inline void FightCityAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightCityAction.Type)
}

// optional sint32 ObjId = 2 [default = -1];
inline bool FightCityAction::has_objid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightCityAction::set_has_objid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightCityAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightCityAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightCityAction::objid() const {
  // @@protoc_insertion_point(field_get:FightCityAction.ObjId)
  return objid_;
}
inline void FightCityAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightCityAction.ObjId)
}

// optional bytes PosInfo = 3;
inline bool FightCityAction::has_posinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightCityAction::set_has_posinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightCityAction::clear_has_posinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightCityAction::clear_posinfo() {
  posinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo();
}
inline const ::std::string& FightCityAction::posinfo() const {
  // @@protoc_insertion_point(field_get:FightCityAction.PosInfo)
  return posinfo_.GetNoArena();
}
inline void FightCityAction::set_posinfo(const ::std::string& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightCityAction.PosInfo)
}
#if LANG_CXX11
inline void FightCityAction::set_posinfo(::std::string&& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightCityAction.PosInfo)
}
#endif
inline void FightCityAction::set_posinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightCityAction.PosInfo)
}
inline void FightCityAction::set_posinfo(const void* value, size_t size) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightCityAction.PosInfo)
}
inline ::std::string* FightCityAction::mutable_posinfo() {
  set_has_posinfo();
  // @@protoc_insertion_point(field_mutable:FightCityAction.PosInfo)
  return posinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightCityAction::release_posinfo() {
  // @@protoc_insertion_point(field_release:FightCityAction.PosInfo)
  clear_has_posinfo();
  return posinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightCityAction::set_allocated_posinfo(::std::string* posinfo) {
  if (posinfo != NULL) {
    set_has_posinfo();
  } else {
    clear_has_posinfo();
  }
  posinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo);
  // @@protoc_insertion_point(field_set_allocated:FightCityAction.PosInfo)
}

// optional bytes TargetPos = 4;
inline bool FightCityAction::has_targetpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightCityAction::set_has_targetpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightCityAction::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightCityAction::clear_targetpos() {
  targetpos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetpos();
}
inline const ::std::string& FightCityAction::targetpos() const {
  // @@protoc_insertion_point(field_get:FightCityAction.TargetPos)
  return targetpos_.GetNoArena();
}
inline void FightCityAction::set_targetpos(const ::std::string& value) {
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightCityAction.TargetPos)
}
#if LANG_CXX11
inline void FightCityAction::set_targetpos(::std::string&& value) {
  set_has_targetpos();
  targetpos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightCityAction.TargetPos)
}
#endif
inline void FightCityAction::set_targetpos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightCityAction.TargetPos)
}
inline void FightCityAction::set_targetpos(const void* value, size_t size) {
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightCityAction.TargetPos)
}
inline ::std::string* FightCityAction::mutable_targetpos() {
  set_has_targetpos();
  // @@protoc_insertion_point(field_mutable:FightCityAction.TargetPos)
  return targetpos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightCityAction::release_targetpos() {
  // @@protoc_insertion_point(field_release:FightCityAction.TargetPos)
  clear_has_targetpos();
  return targetpos_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightCityAction::set_allocated_targetpos(::std::string* targetpos) {
  if (targetpos != NULL) {
    set_has_targetpos();
  } else {
    clear_has_targetpos();
  }
  targetpos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetpos);
  // @@protoc_insertion_point(field_set_allocated:FightCityAction.TargetPos)
}

// optional sint32 IntPara = 5 [default = -1];
inline bool FightCityAction::has_intpara() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightCityAction::set_has_intpara() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightCityAction::clear_has_intpara() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightCityAction::clear_intpara() {
  intpara_ = -1;
  clear_has_intpara();
}
inline ::google::protobuf::int32 FightCityAction::intpara() const {
  // @@protoc_insertion_point(field_get:FightCityAction.IntPara)
  return intpara_;
}
inline void FightCityAction::set_intpara(::google::protobuf::int32 value) {
  set_has_intpara();
  intpara_ = value;
  // @@protoc_insertion_point(field_set:FightCityAction.IntPara)
}

// -------------------------------------------------------------------

// FightSnipeAction

// optional sint32 Type = 1 [default = -1];
inline bool FightSnipeAction::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightSnipeAction::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightSnipeAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightSnipeAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 FightSnipeAction::type() const {
  // @@protoc_insertion_point(field_get:FightSnipeAction.Type)
  return type_;
}
inline void FightSnipeAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightSnipeAction.Type)
}

// optional sint32 ObjId = 2 [default = -1];
inline bool FightSnipeAction::has_objid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightSnipeAction::set_has_objid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightSnipeAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightSnipeAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightSnipeAction::objid() const {
  // @@protoc_insertion_point(field_get:FightSnipeAction.ObjId)
  return objid_;
}
inline void FightSnipeAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightSnipeAction.ObjId)
}

// optional bytes TargetPos = 3;
inline bool FightSnipeAction::has_targetpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightSnipeAction::set_has_targetpos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightSnipeAction::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightSnipeAction::clear_targetpos() {
  targetpos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetpos();
}
inline const ::std::string& FightSnipeAction::targetpos() const {
  // @@protoc_insertion_point(field_get:FightSnipeAction.TargetPos)
  return targetpos_.GetNoArena();
}
inline void FightSnipeAction::set_targetpos(const ::std::string& value) {
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightSnipeAction.TargetPos)
}
#if LANG_CXX11
inline void FightSnipeAction::set_targetpos(::std::string&& value) {
  set_has_targetpos();
  targetpos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightSnipeAction.TargetPos)
}
#endif
inline void FightSnipeAction::set_targetpos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightSnipeAction.TargetPos)
}
inline void FightSnipeAction::set_targetpos(const void* value, size_t size) {
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightSnipeAction.TargetPos)
}
inline ::std::string* FightSnipeAction::mutable_targetpos() {
  set_has_targetpos();
  // @@protoc_insertion_point(field_mutable:FightSnipeAction.TargetPos)
  return targetpos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightSnipeAction::release_targetpos() {
  // @@protoc_insertion_point(field_release:FightSnipeAction.TargetPos)
  clear_has_targetpos();
  return targetpos_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightSnipeAction::set_allocated_targetpos(::std::string* targetpos) {
  if (targetpos != NULL) {
    set_has_targetpos();
  } else {
    clear_has_targetpos();
  }
  targetpos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetpos);
  // @@protoc_insertion_point(field_set_allocated:FightSnipeAction.TargetPos)
}

// optional sint32 CampId = 4 [default = -1];
inline bool FightSnipeAction::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightSnipeAction::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightSnipeAction::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightSnipeAction::clear_campid() {
  campid_ = -1;
  clear_has_campid();
}
inline ::google::protobuf::int32 FightSnipeAction::campid() const {
  // @@protoc_insertion_point(field_get:FightSnipeAction.CampId)
  return campid_;
}
inline void FightSnipeAction::set_campid(::google::protobuf::int32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:FightSnipeAction.CampId)
}

// -------------------------------------------------------------------

// FightHurtAction

// optional sint32 ObjId = 1 [default = -1];
inline bool FightHurtAction::has_objid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FightHurtAction::set_has_objid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FightHurtAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FightHurtAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightHurtAction::objid() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.ObjId)
  return objid_;
}
inline void FightHurtAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.ObjId)
}

// optional sint32 SkillId = 2 [default = -1];
inline bool FightHurtAction::has_skillid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FightHurtAction::set_has_skillid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FightHurtAction::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FightHurtAction::clear_skillid() {
  skillid_ = -1;
  clear_has_skillid();
}
inline ::google::protobuf::int32 FightHurtAction::skillid() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.SkillId)
  return skillid_;
}
inline void FightHurtAction::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.SkillId)
}

// optional bool AttackBack = 3 [default = false];
inline bool FightHurtAction::has_attackback() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightHurtAction::set_has_attackback() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightHurtAction::clear_has_attackback() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightHurtAction::clear_attackback() {
  attackback_ = false;
  clear_has_attackback();
}
inline bool FightHurtAction::attackback() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.AttackBack)
  return attackback_;
}
inline void FightHurtAction::set_attackback(bool value) {
  set_has_attackback();
  attackback_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.AttackBack)
}

// optional bool AttackAir = 6 [default = false];
inline bool FightHurtAction::has_attackair() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightHurtAction::set_has_attackair() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightHurtAction::clear_has_attackair() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightHurtAction::clear_attackair() {
  attackair_ = false;
  clear_has_attackair();
}
inline bool FightHurtAction::attackair() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.AttackAir)
  return attackair_;
}
inline void FightHurtAction::set_attackair(bool value) {
  set_has_attackair();
  attackair_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.AttackAir)
}

// optional sint32 BackDir = 15 [default = 0];
inline bool FightHurtAction::has_backdir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightHurtAction::set_has_backdir() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightHurtAction::clear_has_backdir() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightHurtAction::clear_backdir() {
  backdir_ = 0;
  clear_has_backdir();
}
inline ::google::protobuf::int32 FightHurtAction::backdir() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.BackDir)
  return backdir_;
}
inline void FightHurtAction::set_backdir(::google::protobuf::int32 value) {
  set_has_backdir();
  backdir_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.BackDir)
}

// optional sint32 TargetObjId = 16 [default = -1];
inline bool FightHurtAction::has_targetobjid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FightHurtAction::set_has_targetobjid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FightHurtAction::clear_has_targetobjid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FightHurtAction::clear_targetobjid() {
  targetobjid_ = -1;
  clear_has_targetobjid();
}
inline ::google::protobuf::int32 FightHurtAction::targetobjid() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.TargetObjId)
  return targetobjid_;
}
inline void FightHurtAction::set_targetobjid(::google::protobuf::int32 value) {
  set_has_targetobjid();
  targetobjid_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.TargetObjId)
}

// optional sint32 OwnHP = 17 [default = -1];
inline bool FightHurtAction::has_ownhp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FightHurtAction::set_has_ownhp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FightHurtAction::clear_has_ownhp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FightHurtAction::clear_ownhp() {
  ownhp_ = -1;
  clear_has_ownhp();
}
inline ::google::protobuf::int32 FightHurtAction::ownhp() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.OwnHP)
  return ownhp_;
}
inline void FightHurtAction::set_ownhp(::google::protobuf::int32 value) {
  set_has_ownhp();
  ownhp_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.OwnHP)
}

// optional sint32 TargetHP = 18 [default = -1];
inline bool FightHurtAction::has_targethp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FightHurtAction::set_has_targethp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FightHurtAction::clear_has_targethp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FightHurtAction::clear_targethp() {
  targethp_ = -1;
  clear_has_targethp();
}
inline ::google::protobuf::int32 FightHurtAction::targethp() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.TargetHP)
  return targethp_;
}
inline void FightHurtAction::set_targethp(::google::protobuf::int32 value) {
  set_has_targethp();
  targethp_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.TargetHP)
}

// optional sint32 OwnHPChange = 19 [default = -1];
inline bool FightHurtAction::has_ownhpchange() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FightHurtAction::set_has_ownhpchange() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FightHurtAction::clear_has_ownhpchange() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FightHurtAction::clear_ownhpchange() {
  ownhpchange_ = -1;
  clear_has_ownhpchange();
}
inline ::google::protobuf::int32 FightHurtAction::ownhpchange() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.OwnHPChange)
  return ownhpchange_;
}
inline void FightHurtAction::set_ownhpchange(::google::protobuf::int32 value) {
  set_has_ownhpchange();
  ownhpchange_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.OwnHPChange)
}

// optional sint32 TargetHPChange = 20 [default = -1];
inline bool FightHurtAction::has_targethpchange() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FightHurtAction::set_has_targethpchange() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FightHurtAction::clear_has_targethpchange() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FightHurtAction::clear_targethpchange() {
  targethpchange_ = -1;
  clear_has_targethpchange();
}
inline ::google::protobuf::int32 FightHurtAction::targethpchange() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.TargetHPChange)
  return targethpchange_;
}
inline void FightHurtAction::set_targethpchange(::google::protobuf::int32 value) {
  set_has_targethpchange();
  targethpchange_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.TargetHPChange)
}

// optional bool IsCrit = 23 [default = false];
inline bool FightHurtAction::has_iscrit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightHurtAction::set_has_iscrit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightHurtAction::clear_has_iscrit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightHurtAction::clear_iscrit() {
  iscrit_ = false;
  clear_has_iscrit();
}
inline bool FightHurtAction::iscrit() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.IsCrit)
  return iscrit_;
}
inline void FightHurtAction::set_iscrit(bool value) {
  set_has_iscrit();
  iscrit_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.IsCrit)
}

// optional sint32 TotalDamage = 24 [default = -1];
inline bool FightHurtAction::has_totaldamage() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FightHurtAction::set_has_totaldamage() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FightHurtAction::clear_has_totaldamage() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FightHurtAction::clear_totaldamage() {
  totaldamage_ = -1;
  clear_has_totaldamage();
}
inline ::google::protobuf::int32 FightHurtAction::totaldamage() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.TotalDamage)
  return totaldamage_;
}
inline void FightHurtAction::set_totaldamage(::google::protobuf::int32 value) {
  set_has_totaldamage();
  totaldamage_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.TotalDamage)
}

// optional sint32 SegmentIndex = 30 [default = -1];
inline bool FightHurtAction::has_segmentindex() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FightHurtAction::set_has_segmentindex() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FightHurtAction::clear_has_segmentindex() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FightHurtAction::clear_segmentindex() {
  segmentindex_ = -1;
  clear_has_segmentindex();
}
inline ::google::protobuf::int32 FightHurtAction::segmentindex() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.SegmentIndex)
  return segmentindex_;
}
inline void FightHurtAction::set_segmentindex(::google::protobuf::int32 value) {
  set_has_segmentindex();
  segmentindex_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.SegmentIndex)
}

// optional sint32 HurtType = 31 [default = -1];
inline bool FightHurtAction::has_hurttype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FightHurtAction::set_has_hurttype() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FightHurtAction::clear_has_hurttype() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FightHurtAction::clear_hurttype() {
  hurttype_ = -1;
  clear_has_hurttype();
}
inline ::google::protobuf::int32 FightHurtAction::hurttype() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.HurtType)
  return hurttype_;
}
inline void FightHurtAction::set_hurttype(::google::protobuf::int32 value) {
  set_has_hurttype();
  hurttype_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.HurtType)
}

// optional sint32 AttackSegment = 32 [default = -1];
inline bool FightHurtAction::has_attacksegment() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FightHurtAction::set_has_attacksegment() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FightHurtAction::clear_has_attacksegment() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FightHurtAction::clear_attacksegment() {
  attacksegment_ = -1;
  clear_has_attacksegment();
}
inline ::google::protobuf::int32 FightHurtAction::attacksegment() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.AttackSegment)
  return attacksegment_;
}
inline void FightHurtAction::set_attacksegment(::google::protobuf::int32 value) {
  set_has_attacksegment();
  attacksegment_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.AttackSegment)
}

// optional bool IsHitGround = 33 [default = false];
inline bool FightHurtAction::has_ishitground() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightHurtAction::set_has_ishitground() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightHurtAction::clear_has_ishitground() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightHurtAction::clear_ishitground() {
  ishitground_ = false;
  clear_has_ishitground();
}
inline bool FightHurtAction::ishitground() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.IsHitGround)
  return ishitground_;
}
inline void FightHurtAction::set_ishitground(bool value) {
  set_has_ishitground();
  ishitground_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.IsHitGround)
}

// optional sint32 TargetMaxHP = 34 [default = -1];
inline bool FightHurtAction::has_targetmaxhp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FightHurtAction::set_has_targetmaxhp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FightHurtAction::clear_has_targetmaxhp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FightHurtAction::clear_targetmaxhp() {
  targetmaxhp_ = -1;
  clear_has_targetmaxhp();
}
inline ::google::protobuf::int32 FightHurtAction::targetmaxhp() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.TargetMaxHP)
  return targetmaxhp_;
}
inline void FightHurtAction::set_targetmaxhp(::google::protobuf::int32 value) {
  set_has_targetmaxhp();
  targetmaxhp_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.TargetMaxHP)
}

// optional sint32 EnemyIndex = 35 [default = -1];
inline bool FightHurtAction::has_enemyindex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightHurtAction::set_has_enemyindex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightHurtAction::clear_has_enemyindex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightHurtAction::clear_enemyindex() {
  enemyindex_ = -1;
  clear_has_enemyindex();
}
inline ::google::protobuf::int32 FightHurtAction::enemyindex() const {
  // @@protoc_insertion_point(field_get:FightHurtAction.EnemyIndex)
  return enemyindex_;
}
inline void FightHurtAction::set_enemyindex(::google::protobuf::int32 value) {
  set_has_enemyindex();
  enemyindex_ = value;
  // @@protoc_insertion_point(field_set:FightHurtAction.EnemyIndex)
}

// -------------------------------------------------------------------

// FightDodgeAction

// optional sint32 ObjId = 1 [default = -1];
inline bool FightDodgeAction::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightDodgeAction::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightDodgeAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightDodgeAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightDodgeAction::objid() const {
  // @@protoc_insertion_point(field_get:FightDodgeAction.ObjId)
  return objid_;
}
inline void FightDodgeAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightDodgeAction.ObjId)
}

// optional sint32 SkillId = 2 [default = -1];
inline bool FightDodgeAction::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightDodgeAction::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightDodgeAction::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightDodgeAction::clear_skillid() {
  skillid_ = -1;
  clear_has_skillid();
}
inline ::google::protobuf::int32 FightDodgeAction::skillid() const {
  // @@protoc_insertion_point(field_get:FightDodgeAction.SkillId)
  return skillid_;
}
inline void FightDodgeAction::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:FightDodgeAction.SkillId)
}

// optional sint32 AttackerObjId = 3 [default = -1];
inline bool FightDodgeAction::has_attackerobjid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightDodgeAction::set_has_attackerobjid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightDodgeAction::clear_has_attackerobjid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightDodgeAction::clear_attackerobjid() {
  attackerobjid_ = -1;
  clear_has_attackerobjid();
}
inline ::google::protobuf::int32 FightDodgeAction::attackerobjid() const {
  // @@protoc_insertion_point(field_get:FightDodgeAction.AttackerObjId)
  return attackerobjid_;
}
inline void FightDodgeAction::set_attackerobjid(::google::protobuf::int32 value) {
  set_has_attackerobjid();
  attackerobjid_ = value;
  // @@protoc_insertion_point(field_set:FightDodgeAction.AttackerObjId)
}

// optional sint32 Type = 4 [default = 1];
inline bool FightDodgeAction::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightDodgeAction::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightDodgeAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightDodgeAction::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::google::protobuf::int32 FightDodgeAction::type() const {
  // @@protoc_insertion_point(field_get:FightDodgeAction.Type)
  return type_;
}
inline void FightDodgeAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightDodgeAction.Type)
}

// -------------------------------------------------------------------

// FightRemoveObjAction

// optional sint32 ObjId = 1 [default = -1];
inline bool FightRemoveObjAction::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightRemoveObjAction::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightRemoveObjAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightRemoveObjAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightRemoveObjAction::objid() const {
  // @@protoc_insertion_point(field_get:FightRemoveObjAction.ObjId)
  return objid_;
}
inline void FightRemoveObjAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightRemoveObjAction.ObjId)
}

// -------------------------------------------------------------------

// FightStormBaseAction

// optional sint32 Type = 1 [default = -1];
inline bool FightStormBaseAction::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightStormBaseAction::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightStormBaseAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightStormBaseAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 FightStormBaseAction::type() const {
  // @@protoc_insertion_point(field_get:FightStormBaseAction.Type)
  return type_;
}
inline void FightStormBaseAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightStormBaseAction.Type)
}

// optional sint32 Mark = 2 [default = -1];
inline bool FightStormBaseAction::has_mark() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightStormBaseAction::set_has_mark() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightStormBaseAction::clear_has_mark() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightStormBaseAction::clear_mark() {
  mark_ = -1;
  clear_has_mark();
}
inline ::google::protobuf::int32 FightStormBaseAction::mark() const {
  // @@protoc_insertion_point(field_get:FightStormBaseAction.Mark)
  return mark_;
}
inline void FightStormBaseAction::set_mark(::google::protobuf::int32 value) {
  set_has_mark();
  mark_ = value;
  // @@protoc_insertion_point(field_set:FightStormBaseAction.Mark)
}

// optional sint32 CampId = 3 [default = -1];
inline bool FightStormBaseAction::has_campid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightStormBaseAction::set_has_campid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightStormBaseAction::clear_has_campid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightStormBaseAction::clear_campid() {
  campid_ = -1;
  clear_has_campid();
}
inline ::google::protobuf::int32 FightStormBaseAction::campid() const {
  // @@protoc_insertion_point(field_get:FightStormBaseAction.CampId)
  return campid_;
}
inline void FightStormBaseAction::set_campid(::google::protobuf::int32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:FightStormBaseAction.CampId)
}

// optional sint32 ObjId = 4 [default = -1];
inline bool FightStormBaseAction::has_objid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightStormBaseAction::set_has_objid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightStormBaseAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightStormBaseAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightStormBaseAction::objid() const {
  // @@protoc_insertion_point(field_get:FightStormBaseAction.ObjId)
  return objid_;
}
inline void FightStormBaseAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightStormBaseAction.ObjId)
}

// optional sint32 ID = 5 [default = -1];
inline bool FightStormBaseAction::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightStormBaseAction::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightStormBaseAction::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightStormBaseAction::clear_id() {
  id_ = -1;
  clear_has_id();
}
inline ::google::protobuf::int32 FightStormBaseAction::id() const {
  // @@protoc_insertion_point(field_get:FightStormBaseAction.ID)
  return id_;
}
inline void FightStormBaseAction::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:FightStormBaseAction.ID)
}

// optional string Name = 6;
inline bool FightStormBaseAction::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightStormBaseAction::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightStormBaseAction::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightStormBaseAction::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FightStormBaseAction::name() const {
  // @@protoc_insertion_point(field_get:FightStormBaseAction.Name)
  return name_.GetNoArena();
}
inline void FightStormBaseAction::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightStormBaseAction.Name)
}
#if LANG_CXX11
inline void FightStormBaseAction::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightStormBaseAction.Name)
}
#endif
inline void FightStormBaseAction::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightStormBaseAction.Name)
}
inline void FightStormBaseAction::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightStormBaseAction.Name)
}
inline ::std::string* FightStormBaseAction::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:FightStormBaseAction.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightStormBaseAction::release_name() {
  // @@protoc_insertion_point(field_release:FightStormBaseAction.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightStormBaseAction::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:FightStormBaseAction.Name)
}

// -------------------------------------------------------------------

// FightStormResAction

// optional sint32 BaseId = 1 [default = -1];
inline bool FightStormResAction::has_baseid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightStormResAction::set_has_baseid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightStormResAction::clear_has_baseid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightStormResAction::clear_baseid() {
  baseid_ = -1;
  clear_has_baseid();
}
inline ::google::protobuf::int32 FightStormResAction::baseid() const {
  // @@protoc_insertion_point(field_get:FightStormResAction.BaseId)
  return baseid_;
}
inline void FightStormResAction::set_baseid(::google::protobuf::int32 value) {
  set_has_baseid();
  baseid_ = value;
  // @@protoc_insertion_point(field_set:FightStormResAction.BaseId)
}

// optional sint32 CampId = 2 [default = -1];
inline bool FightStormResAction::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightStormResAction::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightStormResAction::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightStormResAction::clear_campid() {
  campid_ = -1;
  clear_has_campid();
}
inline ::google::protobuf::int32 FightStormResAction::campid() const {
  // @@protoc_insertion_point(field_get:FightStormResAction.CampId)
  return campid_;
}
inline void FightStormResAction::set_campid(::google::protobuf::int32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:FightStormResAction.CampId)
}

// optional sint32 UpdateNum = 3 [default = -1];
inline bool FightStormResAction::has_updatenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightStormResAction::set_has_updatenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightStormResAction::clear_has_updatenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightStormResAction::clear_updatenum() {
  updatenum_ = -1;
  clear_has_updatenum();
}
inline ::google::protobuf::int32 FightStormResAction::updatenum() const {
  // @@protoc_insertion_point(field_get:FightStormResAction.UpdateNum)
  return updatenum_;
}
inline void FightStormResAction::set_updatenum(::google::protobuf::int32 value) {
  set_has_updatenum();
  updatenum_ = value;
  // @@protoc_insertion_point(field_set:FightStormResAction.UpdateNum)
}

// optional sint32 TotalNum = 4 [default = -1];
inline bool FightStormResAction::has_totalnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightStormResAction::set_has_totalnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightStormResAction::clear_has_totalnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightStormResAction::clear_totalnum() {
  totalnum_ = -1;
  clear_has_totalnum();
}
inline ::google::protobuf::int32 FightStormResAction::totalnum() const {
  // @@protoc_insertion_point(field_get:FightStormResAction.TotalNum)
  return totalnum_;
}
inline void FightStormResAction::set_totalnum(::google::protobuf::int32 value) {
  set_has_totalnum();
  totalnum_ = value;
  // @@protoc_insertion_point(field_set:FightStormResAction.TotalNum)
}

// -------------------------------------------------------------------

// FightStormFlagAction

// optional sint32 Type = 1 [default = 1];
inline bool FightStormFlagAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightStormFlagAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightStormFlagAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightStormFlagAction::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::google::protobuf::int32 FightStormFlagAction::type() const {
  // @@protoc_insertion_point(field_get:FightStormFlagAction.Type)
  return type_;
}
inline void FightStormFlagAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightStormFlagAction.Type)
}

// optional sint32 Time = 2 [default = -1];
inline bool FightStormFlagAction::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightStormFlagAction::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightStormFlagAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightStormFlagAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
inline ::google::protobuf::int32 FightStormFlagAction::time() const {
  // @@protoc_insertion_point(field_get:FightStormFlagAction.Time)
  return time_;
}
inline void FightStormFlagAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightStormFlagAction.Time)
}

// optional sint32 FlagObjId = 3 [default = -1];
inline bool FightStormFlagAction::has_flagobjid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightStormFlagAction::set_has_flagobjid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightStormFlagAction::clear_has_flagobjid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightStormFlagAction::clear_flagobjid() {
  flagobjid_ = -1;
  clear_has_flagobjid();
}
inline ::google::protobuf::int32 FightStormFlagAction::flagobjid() const {
  // @@protoc_insertion_point(field_get:FightStormFlagAction.FlagObjId)
  return flagobjid_;
}
inline void FightStormFlagAction::set_flagobjid(::google::protobuf::int32 value) {
  set_has_flagobjid();
  flagobjid_ = value;
  // @@protoc_insertion_point(field_set:FightStormFlagAction.FlagObjId)
}

// optional sint32 ObjId1 = 4 [default = -1];
inline bool FightStormFlagAction::has_objid1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightStormFlagAction::set_has_objid1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightStormFlagAction::clear_has_objid1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightStormFlagAction::clear_objid1() {
  objid1_ = -1;
  clear_has_objid1();
}
inline ::google::protobuf::int32 FightStormFlagAction::objid1() const {
  // @@protoc_insertion_point(field_get:FightStormFlagAction.ObjId1)
  return objid1_;
}
inline void FightStormFlagAction::set_objid1(::google::protobuf::int32 value) {
  set_has_objid1();
  objid1_ = value;
  // @@protoc_insertion_point(field_set:FightStormFlagAction.ObjId1)
}

// optional sint32 ObjId2 = 5 [default = -1];
inline bool FightStormFlagAction::has_objid2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightStormFlagAction::set_has_objid2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightStormFlagAction::clear_has_objid2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightStormFlagAction::clear_objid2() {
  objid2_ = -1;
  clear_has_objid2();
}
inline ::google::protobuf::int32 FightStormFlagAction::objid2() const {
  // @@protoc_insertion_point(field_get:FightStormFlagAction.ObjId2)
  return objid2_;
}
inline void FightStormFlagAction::set_objid2(::google::protobuf::int32 value) {
  set_has_objid2();
  objid2_ = value;
  // @@protoc_insertion_point(field_set:FightStormFlagAction.ObjId2)
}

// optional sint32 Result = 6 [default = -1];
inline bool FightStormFlagAction::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightStormFlagAction::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightStormFlagAction::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightStormFlagAction::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 FightStormFlagAction::result() const {
  // @@protoc_insertion_point(field_get:FightStormFlagAction.Result)
  return result_;
}
inline void FightStormFlagAction::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FightStormFlagAction.Result)
}

// -------------------------------------------------------------------

// FightStormCampAction

// repeated sint32 ObjArr = 1;
inline int FightStormCampAction::objarr_size() const {
  return objarr_.size();
}
inline void FightStormCampAction::clear_objarr() {
  objarr_.Clear();
}
inline ::google::protobuf::int32 FightStormCampAction::objarr(int index) const {
  // @@protoc_insertion_point(field_get:FightStormCampAction.ObjArr)
  return objarr_.Get(index);
}
inline void FightStormCampAction::set_objarr(int index, ::google::protobuf::int32 value) {
  objarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:FightStormCampAction.ObjArr)
}
inline void FightStormCampAction::add_objarr(::google::protobuf::int32 value) {
  objarr_.Add(value);
  // @@protoc_insertion_point(field_add:FightStormCampAction.ObjArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FightStormCampAction::objarr() const {
  // @@protoc_insertion_point(field_list:FightStormCampAction.ObjArr)
  return objarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FightStormCampAction::mutable_objarr() {
  // @@protoc_insertion_point(field_mutable_list:FightStormCampAction.ObjArr)
  return &objarr_;
}

// optional sint32 CampId = 2 [default = -1];
inline bool FightStormCampAction::has_campid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightStormCampAction::set_has_campid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightStormCampAction::clear_has_campid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightStormCampAction::clear_campid() {
  campid_ = -1;
  clear_has_campid();
}
inline ::google::protobuf::int32 FightStormCampAction::campid() const {
  // @@protoc_insertion_point(field_get:FightStormCampAction.CampId)
  return campid_;
}
inline void FightStormCampAction::set_campid(::google::protobuf::int32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:FightStormCampAction.CampId)
}

// optional sint32 TotalNum = 3 [default = 0];
inline bool FightStormCampAction::has_totalnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightStormCampAction::set_has_totalnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightStormCampAction::clear_has_totalnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightStormCampAction::clear_totalnum() {
  totalnum_ = 0;
  clear_has_totalnum();
}
inline ::google::protobuf::int32 FightStormCampAction::totalnum() const {
  // @@protoc_insertion_point(field_get:FightStormCampAction.TotalNum)
  return totalnum_;
}
inline void FightStormCampAction::set_totalnum(::google::protobuf::int32 value) {
  set_has_totalnum();
  totalnum_ = value;
  // @@protoc_insertion_point(field_set:FightStormCampAction.TotalNum)
}

// optional sint32 Color = 4 [default = -1];
inline bool FightStormCampAction::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightStormCampAction::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightStormCampAction::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightStormCampAction::clear_color() {
  color_ = -1;
  clear_has_color();
}
inline ::google::protobuf::int32 FightStormCampAction::color() const {
  // @@protoc_insertion_point(field_get:FightStormCampAction.Color)
  return color_;
}
inline void FightStormCampAction::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:FightStormCampAction.Color)
}

// optional sint32 Type = 5 [default = -1];
inline bool FightStormCampAction::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightStormCampAction::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightStormCampAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightStormCampAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 FightStormCampAction::type() const {
  // @@protoc_insertion_point(field_get:FightStormCampAction.Type)
  return type_;
}
inline void FightStormCampAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightStormCampAction.Type)
}

// -------------------------------------------------------------------

// FightStormResultAction

// repeated .FightStormCampInfo CampArr = 1;
inline int FightStormResultAction::camparr_size() const {
  return camparr_.size();
}
inline void FightStormResultAction::clear_camparr() {
  camparr_.Clear();
}
inline const ::FightStormCampInfo& FightStormResultAction::camparr(int index) const {
  // @@protoc_insertion_point(field_get:FightStormResultAction.CampArr)
  return camparr_.Get(index);
}
inline ::FightStormCampInfo* FightStormResultAction::mutable_camparr(int index) {
  // @@protoc_insertion_point(field_mutable:FightStormResultAction.CampArr)
  return camparr_.Mutable(index);
}
inline ::FightStormCampInfo* FightStormResultAction::add_camparr() {
  // @@protoc_insertion_point(field_add:FightStormResultAction.CampArr)
  return camparr_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FightStormCampInfo >*
FightStormResultAction::mutable_camparr() {
  // @@protoc_insertion_point(field_mutable_list:FightStormResultAction.CampArr)
  return &camparr_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FightStormCampInfo >&
FightStormResultAction::camparr() const {
  // @@protoc_insertion_point(field_list:FightStormResultAction.CampArr)
  return camparr_;
}

// optional bool IsSvrSend = 3 [default = false];
inline bool FightStormResultAction::has_issvrsend() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightStormResultAction::set_has_issvrsend() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightStormResultAction::clear_has_issvrsend() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightStormResultAction::clear_issvrsend() {
  issvrsend_ = false;
  clear_has_issvrsend();
}
inline bool FightStormResultAction::issvrsend() const {
  // @@protoc_insertion_point(field_get:FightStormResultAction.IsSvrSend)
  return issvrsend_;
}
inline void FightStormResultAction::set_issvrsend(bool value) {
  set_has_issvrsend();
  issvrsend_ = value;
  // @@protoc_insertion_point(field_set:FightStormResultAction.IsSvrSend)
}

// -------------------------------------------------------------------

// FightStormCampInfo

// repeated .FightStormPlayerInfo PlayerArr = 1;
inline int FightStormCampInfo::playerarr_size() const {
  return playerarr_.size();
}
inline void FightStormCampInfo::clear_playerarr() {
  playerarr_.Clear();
}
inline const ::FightStormPlayerInfo& FightStormCampInfo::playerarr(int index) const {
  // @@protoc_insertion_point(field_get:FightStormCampInfo.PlayerArr)
  return playerarr_.Get(index);
}
inline ::FightStormPlayerInfo* FightStormCampInfo::mutable_playerarr(int index) {
  // @@protoc_insertion_point(field_mutable:FightStormCampInfo.PlayerArr)
  return playerarr_.Mutable(index);
}
inline ::FightStormPlayerInfo* FightStormCampInfo::add_playerarr() {
  // @@protoc_insertion_point(field_add:FightStormCampInfo.PlayerArr)
  return playerarr_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FightStormPlayerInfo >*
FightStormCampInfo::mutable_playerarr() {
  // @@protoc_insertion_point(field_mutable_list:FightStormCampInfo.PlayerArr)
  return &playerarr_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FightStormPlayerInfo >&
FightStormCampInfo::playerarr() const {
  // @@protoc_insertion_point(field_list:FightStormCampInfo.PlayerArr)
  return playerarr_;
}

// optional sint32 CampId = 2 [default = -1];
inline bool FightStormCampInfo::has_campid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightStormCampInfo::set_has_campid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightStormCampInfo::clear_has_campid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightStormCampInfo::clear_campid() {
  campid_ = -1;
  clear_has_campid();
}
inline ::google::protobuf::int32 FightStormCampInfo::campid() const {
  // @@protoc_insertion_point(field_get:FightStormCampInfo.CampId)
  return campid_;
}
inline void FightStormCampInfo::set_campid(::google::protobuf::int32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:FightStormCampInfo.CampId)
}

// optional sint32 TotalNum = 3 [default = -1];
inline bool FightStormCampInfo::has_totalnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightStormCampInfo::set_has_totalnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightStormCampInfo::clear_has_totalnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightStormCampInfo::clear_totalnum() {
  totalnum_ = -1;
  clear_has_totalnum();
}
inline ::google::protobuf::int32 FightStormCampInfo::totalnum() const {
  // @@protoc_insertion_point(field_get:FightStormCampInfo.TotalNum)
  return totalnum_;
}
inline void FightStormCampInfo::set_totalnum(::google::protobuf::int32 value) {
  set_has_totalnum();
  totalnum_ = value;
  // @@protoc_insertion_point(field_set:FightStormCampInfo.TotalNum)
}

// -------------------------------------------------------------------

// FightStormPlayerInfo

// optional sint32 KilledNum = 1 [default = 0];
inline bool FightStormPlayerInfo::has_killednum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightStormPlayerInfo::set_has_killednum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightStormPlayerInfo::clear_has_killednum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightStormPlayerInfo::clear_killednum() {
  killednum_ = 0;
  clear_has_killednum();
}
inline ::google::protobuf::int32 FightStormPlayerInfo::killednum() const {
  // @@protoc_insertion_point(field_get:FightStormPlayerInfo.KilledNum)
  return killednum_;
}
inline void FightStormPlayerInfo::set_killednum(::google::protobuf::int32 value) {
  set_has_killednum();
  killednum_ = value;
  // @@protoc_insertion_point(field_set:FightStormPlayerInfo.KilledNum)
}

// optional sint32 DeadTimes = 2 [default = 0];
inline bool FightStormPlayerInfo::has_deadtimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightStormPlayerInfo::set_has_deadtimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightStormPlayerInfo::clear_has_deadtimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightStormPlayerInfo::clear_deadtimes() {
  deadtimes_ = 0;
  clear_has_deadtimes();
}
inline ::google::protobuf::int32 FightStormPlayerInfo::deadtimes() const {
  // @@protoc_insertion_point(field_get:FightStormPlayerInfo.DeadTimes)
  return deadtimes_;
}
inline void FightStormPlayerInfo::set_deadtimes(::google::protobuf::int32 value) {
  set_has_deadtimes();
  deadtimes_ = value;
  // @@protoc_insertion_point(field_set:FightStormPlayerInfo.DeadTimes)
}

// optional string Name = 4;
inline bool FightStormPlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightStormPlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightStormPlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightStormPlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FightStormPlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:FightStormPlayerInfo.Name)
  return name_.GetNoArena();
}
inline void FightStormPlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightStormPlayerInfo.Name)
}
#if LANG_CXX11
inline void FightStormPlayerInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightStormPlayerInfo.Name)
}
#endif
inline void FightStormPlayerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightStormPlayerInfo.Name)
}
inline void FightStormPlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightStormPlayerInfo.Name)
}
inline ::std::string* FightStormPlayerInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:FightStormPlayerInfo.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightStormPlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:FightStormPlayerInfo.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightStormPlayerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:FightStormPlayerInfo.Name)
}

// optional sint32 FlagTimes = 5 [default = 0];
inline bool FightStormPlayerInfo::has_flagtimes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightStormPlayerInfo::set_has_flagtimes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightStormPlayerInfo::clear_has_flagtimes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightStormPlayerInfo::clear_flagtimes() {
  flagtimes_ = 0;
  clear_has_flagtimes();
}
inline ::google::protobuf::int32 FightStormPlayerInfo::flagtimes() const {
  // @@protoc_insertion_point(field_get:FightStormPlayerInfo.FlagTimes)
  return flagtimes_;
}
inline void FightStormPlayerInfo::set_flagtimes(::google::protobuf::int32 value) {
  set_has_flagtimes();
  flagtimes_ = value;
  // @@protoc_insertion_point(field_set:FightStormPlayerInfo.FlagTimes)
}

// optional sint32 Prof = 6 [default = -1];
inline bool FightStormPlayerInfo::has_prof() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FightStormPlayerInfo::set_has_prof() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FightStormPlayerInfo::clear_has_prof() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FightStormPlayerInfo::clear_prof() {
  prof_ = -1;
  clear_has_prof();
}
inline ::google::protobuf::int32 FightStormPlayerInfo::prof() const {
  // @@protoc_insertion_point(field_get:FightStormPlayerInfo.Prof)
  return prof_;
}
inline void FightStormPlayerInfo::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
  // @@protoc_insertion_point(field_set:FightStormPlayerInfo.Prof)
}

// optional sint64 OutputDamage = 7 [default = -1];
inline bool FightStormPlayerInfo::has_outputdamage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightStormPlayerInfo::set_has_outputdamage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightStormPlayerInfo::clear_has_outputdamage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightStormPlayerInfo::clear_outputdamage() {
  outputdamage_ = GOOGLE_LONGLONG(-1);
  clear_has_outputdamage();
}
inline ::google::protobuf::int64 FightStormPlayerInfo::outputdamage() const {
  // @@protoc_insertion_point(field_get:FightStormPlayerInfo.OutputDamage)
  return outputdamage_;
}
inline void FightStormPlayerInfo::set_outputdamage(::google::protobuf::int64 value) {
  set_has_outputdamage();
  outputdamage_ = value;
  // @@protoc_insertion_point(field_set:FightStormPlayerInfo.OutputDamage)
}

// optional sint64 EndureDamage = 8 [default = -1];
inline bool FightStormPlayerInfo::has_enduredamage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightStormPlayerInfo::set_has_enduredamage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightStormPlayerInfo::clear_has_enduredamage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightStormPlayerInfo::clear_enduredamage() {
  enduredamage_ = GOOGLE_LONGLONG(-1);
  clear_has_enduredamage();
}
inline ::google::protobuf::int64 FightStormPlayerInfo::enduredamage() const {
  // @@protoc_insertion_point(field_get:FightStormPlayerInfo.EndureDamage)
  return enduredamage_;
}
inline void FightStormPlayerInfo::set_enduredamage(::google::protobuf::int64 value) {
  set_has_enduredamage();
  enduredamage_ = value;
  // @@protoc_insertion_point(field_set:FightStormPlayerInfo.EndureDamage)
}

// optional sint64 TreatDamage = 9 [default = -1];
inline bool FightStormPlayerInfo::has_treatdamage() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FightStormPlayerInfo::set_has_treatdamage() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FightStormPlayerInfo::clear_has_treatdamage() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FightStormPlayerInfo::clear_treatdamage() {
  treatdamage_ = GOOGLE_LONGLONG(-1);
  clear_has_treatdamage();
}
inline ::google::protobuf::int64 FightStormPlayerInfo::treatdamage() const {
  // @@protoc_insertion_point(field_get:FightStormPlayerInfo.TreatDamage)
  return treatdamage_;
}
inline void FightStormPlayerInfo::set_treatdamage(::google::protobuf::int64 value) {
  set_has_treatdamage();
  treatdamage_ = value;
  // @@protoc_insertion_point(field_set:FightStormPlayerInfo.TreatDamage)
}

// optional sint32 ObjId = 10 [default = -1];
inline bool FightStormPlayerInfo::has_objid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FightStormPlayerInfo::set_has_objid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FightStormPlayerInfo::clear_has_objid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FightStormPlayerInfo::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightStormPlayerInfo::objid() const {
  // @@protoc_insertion_point(field_get:FightStormPlayerInfo.ObjId)
  return objid_;
}
inline void FightStormPlayerInfo::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightStormPlayerInfo.ObjId)
}

// -------------------------------------------------------------------

// FightCreateAction

// optional sint64 UserId = 1 [default = -1];
inline bool FightCreateAction::has_userid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightCreateAction::set_has_userid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightCreateAction::clear_has_userid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightCreateAction::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 FightCreateAction::userid() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.UserId)
  return userid_;
}
inline void FightCreateAction::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:FightCreateAction.UserId)
}

// optional sint32 ConfigId = 2 [default = -1];
inline bool FightCreateAction::has_configid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightCreateAction::set_has_configid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightCreateAction::clear_has_configid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightCreateAction::clear_configid() {
  configid_ = -1;
  clear_has_configid();
}
inline ::google::protobuf::int32 FightCreateAction::configid() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.ConfigId)
  return configid_;
}
inline void FightCreateAction::set_configid(::google::protobuf::int32 value) {
  set_has_configid();
  configid_ = value;
  // @@protoc_insertion_point(field_set:FightCreateAction.ConfigId)
}

// optional sint32 ObjId = 3 [default = -1];
inline bool FightCreateAction::has_objid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FightCreateAction::set_has_objid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FightCreateAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FightCreateAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightCreateAction::objid() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.ObjId)
  return objid_;
}
inline void FightCreateAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightCreateAction.ObjId)
}

// optional bytes PosInfo = 4;
inline bool FightCreateAction::has_posinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightCreateAction::set_has_posinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightCreateAction::clear_has_posinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightCreateAction::clear_posinfo() {
  posinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo();
}
inline const ::std::string& FightCreateAction::posinfo() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.PosInfo)
  return posinfo_.GetNoArena();
}
inline void FightCreateAction::set_posinfo(const ::std::string& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightCreateAction.PosInfo)
}
#if LANG_CXX11
inline void FightCreateAction::set_posinfo(::std::string&& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightCreateAction.PosInfo)
}
#endif
inline void FightCreateAction::set_posinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightCreateAction.PosInfo)
}
inline void FightCreateAction::set_posinfo(const void* value, size_t size) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightCreateAction.PosInfo)
}
inline ::std::string* FightCreateAction::mutable_posinfo() {
  set_has_posinfo();
  // @@protoc_insertion_point(field_mutable:FightCreateAction.PosInfo)
  return posinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightCreateAction::release_posinfo() {
  // @@protoc_insertion_point(field_release:FightCreateAction.PosInfo)
  clear_has_posinfo();
  return posinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightCreateAction::set_allocated_posinfo(::std::string* posinfo) {
  if (posinfo != NULL) {
    set_has_posinfo();
  } else {
    clear_has_posinfo();
  }
  posinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo);
  // @@protoc_insertion_point(field_set_allocated:FightCreateAction.PosInfo)
}

// optional sint32 ObjType = 5 [default = -1];
inline bool FightCreateAction::has_objtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FightCreateAction::set_has_objtype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FightCreateAction::clear_has_objtype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FightCreateAction::clear_objtype() {
  objtype_ = -1;
  clear_has_objtype();
}
inline ::google::protobuf::int32 FightCreateAction::objtype() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.ObjType)
  return objtype_;
}
inline void FightCreateAction::set_objtype(::google::protobuf::int32 value) {
  set_has_objtype();
  objtype_ = value;
  // @@protoc_insertion_point(field_set:FightCreateAction.ObjType)
}

// optional sint32 CampId = 6 [default = -1];
inline bool FightCreateAction::has_campid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FightCreateAction::set_has_campid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FightCreateAction::clear_has_campid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FightCreateAction::clear_campid() {
  campid_ = -1;
  clear_has_campid();
}
inline ::google::protobuf::int32 FightCreateAction::campid() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.CampId)
  return campid_;
}
inline void FightCreateAction::set_campid(::google::protobuf::int32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:FightCreateAction.CampId)
}

// optional bytes PosInfo2 = 7;
inline bool FightCreateAction::has_posinfo2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightCreateAction::set_has_posinfo2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightCreateAction::clear_has_posinfo2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightCreateAction::clear_posinfo2() {
  posinfo2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo2();
}
inline const ::std::string& FightCreateAction::posinfo2() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.PosInfo2)
  return posinfo2_.GetNoArena();
}
inline void FightCreateAction::set_posinfo2(const ::std::string& value) {
  set_has_posinfo2();
  posinfo2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightCreateAction.PosInfo2)
}
#if LANG_CXX11
inline void FightCreateAction::set_posinfo2(::std::string&& value) {
  set_has_posinfo2();
  posinfo2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightCreateAction.PosInfo2)
}
#endif
inline void FightCreateAction::set_posinfo2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo2();
  posinfo2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightCreateAction.PosInfo2)
}
inline void FightCreateAction::set_posinfo2(const void* value, size_t size) {
  set_has_posinfo2();
  posinfo2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightCreateAction.PosInfo2)
}
inline ::std::string* FightCreateAction::mutable_posinfo2() {
  set_has_posinfo2();
  // @@protoc_insertion_point(field_mutable:FightCreateAction.PosInfo2)
  return posinfo2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightCreateAction::release_posinfo2() {
  // @@protoc_insertion_point(field_release:FightCreateAction.PosInfo2)
  clear_has_posinfo2();
  return posinfo2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightCreateAction::set_allocated_posinfo2(::std::string* posinfo2) {
  if (posinfo2 != NULL) {
    set_has_posinfo2();
  } else {
    clear_has_posinfo2();
  }
  posinfo2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo2);
  // @@protoc_insertion_point(field_set_allocated:FightCreateAction.PosInfo2)
}

// repeated sint32 IntParaList = 8;
inline int FightCreateAction::intparalist_size() const {
  return intparalist_.size();
}
inline void FightCreateAction::clear_intparalist() {
  intparalist_.Clear();
}
inline ::google::protobuf::int32 FightCreateAction::intparalist(int index) const {
  // @@protoc_insertion_point(field_get:FightCreateAction.IntParaList)
  return intparalist_.Get(index);
}
inline void FightCreateAction::set_intparalist(int index, ::google::protobuf::int32 value) {
  intparalist_.Set(index, value);
  // @@protoc_insertion_point(field_set:FightCreateAction.IntParaList)
}
inline void FightCreateAction::add_intparalist(::google::protobuf::int32 value) {
  intparalist_.Add(value);
  // @@protoc_insertion_point(field_add:FightCreateAction.IntParaList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FightCreateAction::intparalist() const {
  // @@protoc_insertion_point(field_list:FightCreateAction.IntParaList)
  return intparalist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FightCreateAction::mutable_intparalist() {
  // @@protoc_insertion_point(field_mutable_list:FightCreateAction.IntParaList)
  return &intparalist_;
}

// repeated float FloatParaList = 9;
inline int FightCreateAction::floatparalist_size() const {
  return floatparalist_.size();
}
inline void FightCreateAction::clear_floatparalist() {
  floatparalist_.Clear();
}
inline float FightCreateAction::floatparalist(int index) const {
  // @@protoc_insertion_point(field_get:FightCreateAction.FloatParaList)
  return floatparalist_.Get(index);
}
inline void FightCreateAction::set_floatparalist(int index, float value) {
  floatparalist_.Set(index, value);
  // @@protoc_insertion_point(field_set:FightCreateAction.FloatParaList)
}
inline void FightCreateAction::add_floatparalist(float value) {
  floatparalist_.Add(value);
  // @@protoc_insertion_point(field_add:FightCreateAction.FloatParaList)
}
inline const ::google::protobuf::RepeatedField< float >&
FightCreateAction::floatparalist() const {
  // @@protoc_insertion_point(field_list:FightCreateAction.FloatParaList)
  return floatparalist_;
}
inline ::google::protobuf::RepeatedField< float >*
FightCreateAction::mutable_floatparalist() {
  // @@protoc_insertion_point(field_mutable_list:FightCreateAction.FloatParaList)
  return &floatparalist_;
}

// optional sint32 CurState = 10 [default = -1];
inline bool FightCreateAction::has_curstate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FightCreateAction::set_has_curstate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FightCreateAction::clear_has_curstate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FightCreateAction::clear_curstate() {
  curstate_ = -1;
  clear_has_curstate();
}
inline ::google::protobuf::int32 FightCreateAction::curstate() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.CurState)
  return curstate_;
}
inline void FightCreateAction::set_curstate(::google::protobuf::int32 value) {
  set_has_curstate();
  curstate_ = value;
  // @@protoc_insertion_point(field_set:FightCreateAction.CurState)
}

// optional sint32 CurHp = 11 [default = -1];
inline bool FightCreateAction::has_curhp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FightCreateAction::set_has_curhp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FightCreateAction::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FightCreateAction::clear_curhp() {
  curhp_ = -1;
  clear_has_curhp();
}
inline ::google::protobuf::int32 FightCreateAction::curhp() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.CurHp)
  return curhp_;
}
inline void FightCreateAction::set_curhp(::google::protobuf::int32 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:FightCreateAction.CurHp)
}

// optional string Name = 12;
inline bool FightCreateAction::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightCreateAction::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightCreateAction::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightCreateAction::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FightCreateAction::name() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.Name)
  return name_.GetNoArena();
}
inline void FightCreateAction::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightCreateAction.Name)
}
#if LANG_CXX11
inline void FightCreateAction::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightCreateAction.Name)
}
#endif
inline void FightCreateAction::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightCreateAction.Name)
}
inline void FightCreateAction::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightCreateAction.Name)
}
inline ::std::string* FightCreateAction::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:FightCreateAction.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightCreateAction::release_name() {
  // @@protoc_insertion_point(field_release:FightCreateAction.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightCreateAction::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:FightCreateAction.Name)
}

// repeated .EquipSkillBuff2 EquipBuffArr = 13;
inline int FightCreateAction::equipbuffarr_size() const {
  return equipbuffarr_.size();
}
inline void FightCreateAction::clear_equipbuffarr() {
  equipbuffarr_.Clear();
}
inline const ::EquipSkillBuff2& FightCreateAction::equipbuffarr(int index) const {
  // @@protoc_insertion_point(field_get:FightCreateAction.EquipBuffArr)
  return equipbuffarr_.Get(index);
}
inline ::EquipSkillBuff2* FightCreateAction::mutable_equipbuffarr(int index) {
  // @@protoc_insertion_point(field_mutable:FightCreateAction.EquipBuffArr)
  return equipbuffarr_.Mutable(index);
}
inline ::EquipSkillBuff2* FightCreateAction::add_equipbuffarr() {
  // @@protoc_insertion_point(field_add:FightCreateAction.EquipBuffArr)
  return equipbuffarr_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::EquipSkillBuff2 >*
FightCreateAction::mutable_equipbuffarr() {
  // @@protoc_insertion_point(field_mutable_list:FightCreateAction.EquipBuffArr)
  return &equipbuffarr_;
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipSkillBuff2 >&
FightCreateAction::equipbuffarr() const {
  // @@protoc_insertion_point(field_list:FightCreateAction.EquipBuffArr)
  return equipbuffarr_;
}

// repeated .EquipSkillBuff2 EquipSkillArr = 14;
inline int FightCreateAction::equipskillarr_size() const {
  return equipskillarr_.size();
}
inline void FightCreateAction::clear_equipskillarr() {
  equipskillarr_.Clear();
}
inline const ::EquipSkillBuff2& FightCreateAction::equipskillarr(int index) const {
  // @@protoc_insertion_point(field_get:FightCreateAction.EquipSkillArr)
  return equipskillarr_.Get(index);
}
inline ::EquipSkillBuff2* FightCreateAction::mutable_equipskillarr(int index) {
  // @@protoc_insertion_point(field_mutable:FightCreateAction.EquipSkillArr)
  return equipskillarr_.Mutable(index);
}
inline ::EquipSkillBuff2* FightCreateAction::add_equipskillarr() {
  // @@protoc_insertion_point(field_add:FightCreateAction.EquipSkillArr)
  return equipskillarr_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::EquipSkillBuff2 >*
FightCreateAction::mutable_equipskillarr() {
  // @@protoc_insertion_point(field_mutable_list:FightCreateAction.EquipSkillArr)
  return &equipskillarr_;
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipSkillBuff2 >&
FightCreateAction::equipskillarr() const {
  // @@protoc_insertion_point(field_list:FightCreateAction.EquipSkillArr)
  return equipskillarr_;
}

// repeated .KeyValue2 AttrArr = 15;
inline int FightCreateAction::attrarr_size() const {
  return attrarr_.size();
}
inline void FightCreateAction::clear_attrarr() {
  attrarr_.Clear();
}
inline const ::KeyValue2& FightCreateAction::attrarr(int index) const {
  // @@protoc_insertion_point(field_get:FightCreateAction.AttrArr)
  return attrarr_.Get(index);
}
inline ::KeyValue2* FightCreateAction::mutable_attrarr(int index) {
  // @@protoc_insertion_point(field_mutable:FightCreateAction.AttrArr)
  return attrarr_.Mutable(index);
}
inline ::KeyValue2* FightCreateAction::add_attrarr() {
  // @@protoc_insertion_point(field_add:FightCreateAction.AttrArr)
  return attrarr_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::KeyValue2 >*
FightCreateAction::mutable_attrarr() {
  // @@protoc_insertion_point(field_mutable_list:FightCreateAction.AttrArr)
  return &attrarr_;
}
inline const ::google::protobuf::RepeatedPtrField< ::KeyValue2 >&
FightCreateAction::attrarr() const {
  // @@protoc_insertion_point(field_list:FightCreateAction.AttrArr)
  return attrarr_;
}

// optional sint32 Level = 16 [default = -1];
inline bool FightCreateAction::has_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FightCreateAction::set_has_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FightCreateAction::clear_has_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FightCreateAction::clear_level() {
  level_ = -1;
  clear_has_level();
}
inline ::google::protobuf::int32 FightCreateAction::level() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.Level)
  return level_;
}
inline void FightCreateAction::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:FightCreateAction.Level)
}

// optional sint32 TableType = 17 [default = -1];
inline bool FightCreateAction::has_tabletype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FightCreateAction::set_has_tabletype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FightCreateAction::clear_has_tabletype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FightCreateAction::clear_tabletype() {
  tabletype_ = -1;
  clear_has_tabletype();
}
inline ::google::protobuf::int32 FightCreateAction::tabletype() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.TableType)
  return tabletype_;
}
inline void FightCreateAction::set_tabletype(::google::protobuf::int32 value) {
  set_has_tabletype();
  tabletype_ = value;
  // @@protoc_insertion_point(field_set:FightCreateAction.TableType)
}

// optional bool IsShowEffect = 18 [default = false];
inline bool FightCreateAction::has_isshoweffect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightCreateAction::set_has_isshoweffect() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightCreateAction::clear_has_isshoweffect() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightCreateAction::clear_isshoweffect() {
  isshoweffect_ = false;
  clear_has_isshoweffect();
}
inline bool FightCreateAction::isshoweffect() const {
  // @@protoc_insertion_point(field_get:FightCreateAction.IsShowEffect)
  return isshoweffect_;
}
inline void FightCreateAction::set_isshoweffect(bool value) {
  set_has_isshoweffect();
  isshoweffect_ = value;
  // @@protoc_insertion_point(field_set:FightCreateAction.IsShowEffect)
}

// -------------------------------------------------------------------

// FightQuickFinishAction

// optional sint32 Type = 1 [default = 0];
inline bool FightQuickFinishAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightQuickFinishAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightQuickFinishAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightQuickFinishAction::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FightQuickFinishAction::type() const {
  // @@protoc_insertion_point(field_get:FightQuickFinishAction.Type)
  return type_;
}
inline void FightQuickFinishAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightQuickFinishAction.Type)
}

// -------------------------------------------------------------------

// FightFinishLevelAction

// optional sint32 Result = 1 [default = -1];
inline bool FightFinishLevelAction::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightFinishLevelAction::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightFinishLevelAction::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightFinishLevelAction::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 FightFinishLevelAction::result() const {
  // @@protoc_insertion_point(field_get:FightFinishLevelAction.Result)
  return result_;
}
inline void FightFinishLevelAction::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FightFinishLevelAction.Result)
}

// optional sint32 Type = 2 [default = 2];
inline bool FightFinishLevelAction::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightFinishLevelAction::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightFinishLevelAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightFinishLevelAction::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline ::google::protobuf::int32 FightFinishLevelAction::type() const {
  // @@protoc_insertion_point(field_get:FightFinishLevelAction.Type)
  return type_;
}
inline void FightFinishLevelAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightFinishLevelAction.Type)
}

// optional sint32 WallObjId = 3 [default = -1];
inline bool FightFinishLevelAction::has_wallobjid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightFinishLevelAction::set_has_wallobjid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightFinishLevelAction::clear_has_wallobjid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightFinishLevelAction::clear_wallobjid() {
  wallobjid_ = -1;
  clear_has_wallobjid();
}
inline ::google::protobuf::int32 FightFinishLevelAction::wallobjid() const {
  // @@protoc_insertion_point(field_get:FightFinishLevelAction.WallObjId)
  return wallobjid_;
}
inline void FightFinishLevelAction::set_wallobjid(::google::protobuf::int32 value) {
  set_has_wallobjid();
  wallobjid_ = value;
  // @@protoc_insertion_point(field_set:FightFinishLevelAction.WallObjId)
}

// -------------------------------------------------------------------

// FightTowerLockAction

// optional sint32 TargetObjId = 1 [default = -1];
inline bool FightTowerLockAction::has_targetobjid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightTowerLockAction::set_has_targetobjid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightTowerLockAction::clear_has_targetobjid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightTowerLockAction::clear_targetobjid() {
  targetobjid_ = -1;
  clear_has_targetobjid();
}
inline ::google::protobuf::int32 FightTowerLockAction::targetobjid() const {
  // @@protoc_insertion_point(field_get:FightTowerLockAction.TargetObjId)
  return targetobjid_;
}
inline void FightTowerLockAction::set_targetobjid(::google::protobuf::int32 value) {
  set_has_targetobjid();
  targetobjid_ = value;
  // @@protoc_insertion_point(field_set:FightTowerLockAction.TargetObjId)
}

// optional sint32 ObjId = 2 [default = -1];
inline bool FightTowerLockAction::has_objid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightTowerLockAction::set_has_objid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightTowerLockAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightTowerLockAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightTowerLockAction::objid() const {
  // @@protoc_insertion_point(field_get:FightTowerLockAction.ObjId)
  return objid_;
}
inline void FightTowerLockAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightTowerLockAction.ObjId)
}

// optional sint32 Type = 3 [default = 0];
inline bool FightTowerLockAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightTowerLockAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightTowerLockAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightTowerLockAction::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FightTowerLockAction::type() const {
  // @@protoc_insertion_point(field_get:FightTowerLockAction.Type)
  return type_;
}
inline void FightTowerLockAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightTowerLockAction.Type)
}

// -------------------------------------------------------------------

// FightStormStartAction

// optional sint32 Type = 1 [default = -1];
inline bool FightStormStartAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightStormStartAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightStormStartAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightStormStartAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 FightStormStartAction::type() const {
  // @@protoc_insertion_point(field_get:FightStormStartAction.Type)
  return type_;
}
inline void FightStormStartAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightStormStartAction.Type)
}

// optional sint32 Time = 2 [default = -1];
inline bool FightStormStartAction::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightStormStartAction::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightStormStartAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightStormStartAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
inline ::google::protobuf::int32 FightStormStartAction::time() const {
  // @@protoc_insertion_point(field_get:FightStormStartAction.Time)
  return time_;
}
inline void FightStormStartAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightStormStartAction.Time)
}

// -------------------------------------------------------------------

// FightEscapeStartAction

// optional sint32 Type = 1 [default = -1];
inline bool FightEscapeStartAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightEscapeStartAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightEscapeStartAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightEscapeStartAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 FightEscapeStartAction::type() const {
  // @@protoc_insertion_point(field_get:FightEscapeStartAction.Type)
  return type_;
}
inline void FightEscapeStartAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightEscapeStartAction.Type)
}

// optional sint32 Time = 2 [default = -1];
inline bool FightEscapeStartAction::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightEscapeStartAction::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightEscapeStartAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightEscapeStartAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
inline ::google::protobuf::int32 FightEscapeStartAction::time() const {
  // @@protoc_insertion_point(field_get:FightEscapeStartAction.Time)
  return time_;
}
inline void FightEscapeStartAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightEscapeStartAction.Time)
}

// -------------------------------------------------------------------

// FightEscapeResultAction

// optional sint32 Result = 1 [default = -1];
inline bool FightEscapeResultAction::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightEscapeResultAction::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightEscapeResultAction::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightEscapeResultAction::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 FightEscapeResultAction::result() const {
  // @@protoc_insertion_point(field_get:FightEscapeResultAction.Result)
  return result_;
}
inline void FightEscapeResultAction::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FightEscapeResultAction.Result)
}

// -------------------------------------------------------------------

// FightGMAddHpAction

// optional sint32 ObjId = 1 [default = -1];
inline bool FightGMAddHpAction::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightGMAddHpAction::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightGMAddHpAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightGMAddHpAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightGMAddHpAction::objid() const {
  // @@protoc_insertion_point(field_get:FightGMAddHpAction.ObjId)
  return objid_;
}
inline void FightGMAddHpAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightGMAddHpAction.ObjId)
}

// optional sint32 AddNum = 2 [default = -1];
inline bool FightGMAddHpAction::has_addnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightGMAddHpAction::set_has_addnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightGMAddHpAction::clear_has_addnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightGMAddHpAction::clear_addnum() {
  addnum_ = -1;
  clear_has_addnum();
}
inline ::google::protobuf::int32 FightGMAddHpAction::addnum() const {
  // @@protoc_insertion_point(field_get:FightGMAddHpAction.AddNum)
  return addnum_;
}
inline void FightGMAddHpAction::set_addnum(::google::protobuf::int32 value) {
  set_has_addnum();
  addnum_ = value;
  // @@protoc_insertion_point(field_set:FightGMAddHpAction.AddNum)
}

// -------------------------------------------------------------------

// FightTRandSkillAction

// -------------------------------------------------------------------

// FightGuildDBeginAction

// optional sint32 Type = 1 [default = -1];
inline bool FightGuildDBeginAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightGuildDBeginAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightGuildDBeginAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightGuildDBeginAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 FightGuildDBeginAction::type() const {
  // @@protoc_insertion_point(field_get:FightGuildDBeginAction.Type)
  return type_;
}
inline void FightGuildDBeginAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightGuildDBeginAction.Type)
}

// optional sint32 Time = 2 [default = -1];
inline bool FightGuildDBeginAction::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightGuildDBeginAction::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightGuildDBeginAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightGuildDBeginAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
inline ::google::protobuf::int32 FightGuildDBeginAction::time() const {
  // @@protoc_insertion_point(field_get:FightGuildDBeginAction.Time)
  return time_;
}
inline void FightGuildDBeginAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightGuildDBeginAction.Time)
}

// -------------------------------------------------------------------

// FightGuildDEndAction

// optional sint32 Time = 1 [default = -1];
inline bool FightGuildDEndAction::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightGuildDEndAction::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightGuildDEndAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightGuildDEndAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
inline ::google::protobuf::int32 FightGuildDEndAction::time() const {
  // @@protoc_insertion_point(field_get:FightGuildDEndAction.Time)
  return time_;
}
inline void FightGuildDEndAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightGuildDEndAction.Time)
}

// -------------------------------------------------------------------

// FightTransferAction

// optional sint32 DungeonId = 1 [default = -1];
inline bool FightTransferAction::has_dungeonid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightTransferAction::set_has_dungeonid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightTransferAction::clear_has_dungeonid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightTransferAction::clear_dungeonid() {
  dungeonid_ = -1;
  clear_has_dungeonid();
}
inline ::google::protobuf::int32 FightTransferAction::dungeonid() const {
  // @@protoc_insertion_point(field_get:FightTransferAction.DungeonId)
  return dungeonid_;
}
inline void FightTransferAction::set_dungeonid(::google::protobuf::int32 value) {
  set_has_dungeonid();
  dungeonid_ = value;
  // @@protoc_insertion_point(field_set:FightTransferAction.DungeonId)
}

// optional sint32 DungeonType = 2 [default = -1];
inline bool FightTransferAction::has_dungeontype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightTransferAction::set_has_dungeontype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightTransferAction::clear_has_dungeontype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightTransferAction::clear_dungeontype() {
  dungeontype_ = -1;
  clear_has_dungeontype();
}
inline ::google::protobuf::int32 FightTransferAction::dungeontype() const {
  // @@protoc_insertion_point(field_get:FightTransferAction.DungeonType)
  return dungeontype_;
}
inline void FightTransferAction::set_dungeontype(::google::protobuf::int32 value) {
  set_has_dungeontype();
  dungeontype_ = value;
  // @@protoc_insertion_point(field_set:FightTransferAction.DungeonType)
}

// optional sint32 BirthPoint = 3 [default = -1];
inline bool FightTransferAction::has_birthpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightTransferAction::set_has_birthpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightTransferAction::clear_has_birthpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightTransferAction::clear_birthpoint() {
  birthpoint_ = -1;
  clear_has_birthpoint();
}
inline ::google::protobuf::int32 FightTransferAction::birthpoint() const {
  // @@protoc_insertion_point(field_get:FightTransferAction.BirthPoint)
  return birthpoint_;
}
inline void FightTransferAction::set_birthpoint(::google::protobuf::int32 value) {
  set_has_birthpoint();
  birthpoint_ = value;
  // @@protoc_insertion_point(field_set:FightTransferAction.BirthPoint)
}

// optional sint32 FaceDir = 4 [default = 0];
inline bool FightTransferAction::has_facedir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightTransferAction::set_has_facedir() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightTransferAction::clear_has_facedir() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightTransferAction::clear_facedir() {
  facedir_ = 0;
  clear_has_facedir();
}
inline ::google::protobuf::int32 FightTransferAction::facedir() const {
  // @@protoc_insertion_point(field_get:FightTransferAction.FaceDir)
  return facedir_;
}
inline void FightTransferAction::set_facedir(::google::protobuf::int32 value) {
  set_has_facedir();
  facedir_ = value;
  // @@protoc_insertion_point(field_set:FightTransferAction.FaceDir)
}

// -------------------------------------------------------------------

// FightHeroFightInfoAction

// repeated .HeroFightInfo HeroInfoArr = 1;
inline int FightHeroFightInfoAction::heroinfoarr_size() const {
  return heroinfoarr_.size();
}
inline void FightHeroFightInfoAction::clear_heroinfoarr() {
  heroinfoarr_.Clear();
}
inline const ::HeroFightInfo& FightHeroFightInfoAction::heroinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:FightHeroFightInfoAction.HeroInfoArr)
  return heroinfoarr_.Get(index);
}
inline ::HeroFightInfo* FightHeroFightInfoAction::mutable_heroinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:FightHeroFightInfoAction.HeroInfoArr)
  return heroinfoarr_.Mutable(index);
}
inline ::HeroFightInfo* FightHeroFightInfoAction::add_heroinfoarr() {
  // @@protoc_insertion_point(field_add:FightHeroFightInfoAction.HeroInfoArr)
  return heroinfoarr_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::HeroFightInfo >*
FightHeroFightInfoAction::mutable_heroinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:FightHeroFightInfoAction.HeroInfoArr)
  return &heroinfoarr_;
}
inline const ::google::protobuf::RepeatedPtrField< ::HeroFightInfo >&
FightHeroFightInfoAction::heroinfoarr() const {
  // @@protoc_insertion_point(field_list:FightHeroFightInfoAction.HeroInfoArr)
  return heroinfoarr_;
}

// optional sint32 FunctionId = 2 [default = -1];
inline bool FightHeroFightInfoAction::has_functionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightHeroFightInfoAction::set_has_functionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightHeroFightInfoAction::clear_has_functionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightHeroFightInfoAction::clear_functionid() {
  functionid_ = -1;
  clear_has_functionid();
}
inline ::google::protobuf::int32 FightHeroFightInfoAction::functionid() const {
  // @@protoc_insertion_point(field_get:FightHeroFightInfoAction.FunctionId)
  return functionid_;
}
inline void FightHeroFightInfoAction::set_functionid(::google::protobuf::int32 value) {
  set_has_functionid();
  functionid_ = value;
  // @@protoc_insertion_point(field_set:FightHeroFightInfoAction.FunctionId)
}

// optional sint32 MyCampId = 3 [default = -1];
inline bool FightHeroFightInfoAction::has_mycampid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightHeroFightInfoAction::set_has_mycampid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightHeroFightInfoAction::clear_has_mycampid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightHeroFightInfoAction::clear_mycampid() {
  mycampid_ = -1;
  clear_has_mycampid();
}
inline ::google::protobuf::int32 FightHeroFightInfoAction::mycampid() const {
  // @@protoc_insertion_point(field_get:FightHeroFightInfoAction.MyCampId)
  return mycampid_;
}
inline void FightHeroFightInfoAction::set_mycampid(::google::protobuf::int32 value) {
  set_has_mycampid();
  mycampid_ = value;
  // @@protoc_insertion_point(field_set:FightHeroFightInfoAction.MyCampId)
}

// -------------------------------------------------------------------

// FightGuildFightBeginAction

// optional sint32 Type = 1 [default = -1];
inline bool FightGuildFightBeginAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightGuildFightBeginAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightGuildFightBeginAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightGuildFightBeginAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 FightGuildFightBeginAction::type() const {
  // @@protoc_insertion_point(field_get:FightGuildFightBeginAction.Type)
  return type_;
}
inline void FightGuildFightBeginAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightGuildFightBeginAction.Type)
}

// optional sint32 Time = 2 [default = -1];
inline bool FightGuildFightBeginAction::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightGuildFightBeginAction::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightGuildFightBeginAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightGuildFightBeginAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
inline ::google::protobuf::int32 FightGuildFightBeginAction::time() const {
  // @@protoc_insertion_point(field_get:FightGuildFightBeginAction.Time)
  return time_;
}
inline void FightGuildFightBeginAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightGuildFightBeginAction.Time)
}

// -------------------------------------------------------------------

// FightGuildFightEndAction

// optional sint32 Time = 1 [default = -1];
inline bool FightGuildFightEndAction::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightGuildFightEndAction::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightGuildFightEndAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightGuildFightEndAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
inline ::google::protobuf::int32 FightGuildFightEndAction::time() const {
  // @@protoc_insertion_point(field_get:FightGuildFightEndAction.Time)
  return time_;
}
inline void FightGuildFightEndAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightGuildFightEndAction.Time)
}

// optional sint32 VictoryCampId = 2 [default = -1];
inline bool FightGuildFightEndAction::has_victorycampid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightGuildFightEndAction::set_has_victorycampid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightGuildFightEndAction::clear_has_victorycampid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightGuildFightEndAction::clear_victorycampid() {
  victorycampid_ = -1;
  clear_has_victorycampid();
}
inline ::google::protobuf::int32 FightGuildFightEndAction::victorycampid() const {
  // @@protoc_insertion_point(field_get:FightGuildFightEndAction.VictoryCampId)
  return victorycampid_;
}
inline void FightGuildFightEndAction::set_victorycampid(::google::protobuf::int32 value) {
  set_has_victorycampid();
  victorycampid_ = value;
  // @@protoc_insertion_point(field_set:FightGuildFightEndAction.VictoryCampId)
}

// -------------------------------------------------------------------

// FightGuildFightHpAction

// optional sint32 CampId = 1 [default = -1];
inline bool FightGuildFightHpAction::has_campid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightGuildFightHpAction::set_has_campid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightGuildFightHpAction::clear_has_campid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightGuildFightHpAction::clear_campid() {
  campid_ = -1;
  clear_has_campid();
}
inline ::google::protobuf::int32 FightGuildFightHpAction::campid() const {
  // @@protoc_insertion_point(field_get:FightGuildFightHpAction.CampId)
  return campid_;
}
inline void FightGuildFightHpAction::set_campid(::google::protobuf::int32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:FightGuildFightHpAction.CampId)
}

// optional sint32 MaxHp = 2 [default = 0];
inline bool FightGuildFightHpAction::has_maxhp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightGuildFightHpAction::set_has_maxhp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightGuildFightHpAction::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightGuildFightHpAction::clear_maxhp() {
  maxhp_ = 0;
  clear_has_maxhp();
}
inline ::google::protobuf::int32 FightGuildFightHpAction::maxhp() const {
  // @@protoc_insertion_point(field_get:FightGuildFightHpAction.MaxHp)
  return maxhp_;
}
inline void FightGuildFightHpAction::set_maxhp(::google::protobuf::int32 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:FightGuildFightHpAction.MaxHp)
}

// optional sint32 CurHp = 3 [default = 0];
inline bool FightGuildFightHpAction::has_curhp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightGuildFightHpAction::set_has_curhp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightGuildFightHpAction::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightGuildFightHpAction::clear_curhp() {
  curhp_ = 0;
  clear_has_curhp();
}
inline ::google::protobuf::int32 FightGuildFightHpAction::curhp() const {
  // @@protoc_insertion_point(field_get:FightGuildFightHpAction.CurHp)
  return curhp_;
}
inline void FightGuildFightHpAction::set_curhp(::google::protobuf::int32 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:FightGuildFightHpAction.CurHp)
}

// -------------------------------------------------------------------

// FightEffectTranslateAction

// optional sint32 ObjId = 1 [default = -1];
inline bool FightEffectTranslateAction::has_objid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FightEffectTranslateAction::set_has_objid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FightEffectTranslateAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FightEffectTranslateAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightEffectTranslateAction::objid() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.ObjId)
  return objid_;
}
inline void FightEffectTranslateAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.ObjId)
}

// optional sint32 ObjType = 2 [default = -1];
inline bool FightEffectTranslateAction::has_objtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FightEffectTranslateAction::set_has_objtype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FightEffectTranslateAction::clear_has_objtype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FightEffectTranslateAction::clear_objtype() {
  objtype_ = -1;
  clear_has_objtype();
}
inline ::google::protobuf::int32 FightEffectTranslateAction::objtype() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.ObjType)
  return objtype_;
}
inline void FightEffectTranslateAction::set_objtype(::google::protobuf::int32 value) {
  set_has_objtype();
  objtype_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.ObjType)
}

// optional sint32 TargetObjId = 3 [default = -1];
inline bool FightEffectTranslateAction::has_targetobjid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FightEffectTranslateAction::set_has_targetobjid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FightEffectTranslateAction::clear_has_targetobjid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FightEffectTranslateAction::clear_targetobjid() {
  targetobjid_ = -1;
  clear_has_targetobjid();
}
inline ::google::protobuf::int32 FightEffectTranslateAction::targetobjid() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.TargetObjId)
  return targetobjid_;
}
inline void FightEffectTranslateAction::set_targetobjid(::google::protobuf::int32 value) {
  set_has_targetobjid();
  targetobjid_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.TargetObjId)
}

// optional bytes TargetPos = 4;
inline bool FightEffectTranslateAction::has_targetpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightEffectTranslateAction::set_has_targetpos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightEffectTranslateAction::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightEffectTranslateAction::clear_targetpos() {
  targetpos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetpos();
}
inline const ::std::string& FightEffectTranslateAction::targetpos() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.TargetPos)
  return targetpos_.GetNoArena();
}
inline void FightEffectTranslateAction::set_targetpos(const ::std::string& value) {
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.TargetPos)
}
#if LANG_CXX11
inline void FightEffectTranslateAction::set_targetpos(::std::string&& value) {
  set_has_targetpos();
  targetpos_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightEffectTranslateAction.TargetPos)
}
#endif
inline void FightEffectTranslateAction::set_targetpos(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightEffectTranslateAction.TargetPos)
}
inline void FightEffectTranslateAction::set_targetpos(const void* value, size_t size) {
  set_has_targetpos();
  targetpos_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightEffectTranslateAction.TargetPos)
}
inline ::std::string* FightEffectTranslateAction::mutable_targetpos() {
  set_has_targetpos();
  // @@protoc_insertion_point(field_mutable:FightEffectTranslateAction.TargetPos)
  return targetpos_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightEffectTranslateAction::release_targetpos() {
  // @@protoc_insertion_point(field_release:FightEffectTranslateAction.TargetPos)
  clear_has_targetpos();
  return targetpos_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightEffectTranslateAction::set_allocated_targetpos(::std::string* targetpos) {
  if (targetpos != NULL) {
    set_has_targetpos();
  } else {
    clear_has_targetpos();
  }
  targetpos_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetpos);
  // @@protoc_insertion_point(field_set_allocated:FightEffectTranslateAction.TargetPos)
}

// optional sint32 Angle = 5 [default = -1];
inline bool FightEffectTranslateAction::has_angle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FightEffectTranslateAction::set_has_angle() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FightEffectTranslateAction::clear_has_angle() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FightEffectTranslateAction::clear_angle() {
  angle_ = -1;
  clear_has_angle();
}
inline ::google::protobuf::int32 FightEffectTranslateAction::angle() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.Angle)
  return angle_;
}
inline void FightEffectTranslateAction::set_angle(::google::protobuf::int32 value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.Angle)
}

// optional sint32 Speed = 6 [default = -1];
inline bool FightEffectTranslateAction::has_speed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FightEffectTranslateAction::set_has_speed() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FightEffectTranslateAction::clear_has_speed() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FightEffectTranslateAction::clear_speed() {
  speed_ = -1;
  clear_has_speed();
}
inline ::google::protobuf::int32 FightEffectTranslateAction::speed() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.Speed)
  return speed_;
}
inline void FightEffectTranslateAction::set_speed(::google::protobuf::int32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.Speed)
}

// optional sint32 Distance = 8 [default = -1];
inline bool FightEffectTranslateAction::has_distance() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FightEffectTranslateAction::set_has_distance() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FightEffectTranslateAction::clear_has_distance() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FightEffectTranslateAction::clear_distance() {
  distance_ = -1;
  clear_has_distance();
}
inline ::google::protobuf::int32 FightEffectTranslateAction::distance() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.Distance)
  return distance_;
}
inline void FightEffectTranslateAction::set_distance(::google::protobuf::int32 value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.Distance)
}

// optional bytes PosInfo = 9;
inline bool FightEffectTranslateAction::has_posinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightEffectTranslateAction::set_has_posinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightEffectTranslateAction::clear_has_posinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightEffectTranslateAction::clear_posinfo() {
  posinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posinfo();
}
inline const ::std::string& FightEffectTranslateAction::posinfo() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.PosInfo)
  return posinfo_.GetNoArena();
}
inline void FightEffectTranslateAction::set_posinfo(const ::std::string& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.PosInfo)
}
#if LANG_CXX11
inline void FightEffectTranslateAction::set_posinfo(::std::string&& value) {
  set_has_posinfo();
  posinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightEffectTranslateAction.PosInfo)
}
#endif
inline void FightEffectTranslateAction::set_posinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightEffectTranslateAction.PosInfo)
}
inline void FightEffectTranslateAction::set_posinfo(const void* value, size_t size) {
  set_has_posinfo();
  posinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightEffectTranslateAction.PosInfo)
}
inline ::std::string* FightEffectTranslateAction::mutable_posinfo() {
  set_has_posinfo();
  // @@protoc_insertion_point(field_mutable:FightEffectTranslateAction.PosInfo)
  return posinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightEffectTranslateAction::release_posinfo() {
  // @@protoc_insertion_point(field_release:FightEffectTranslateAction.PosInfo)
  clear_has_posinfo();
  return posinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightEffectTranslateAction::set_allocated_posinfo(::std::string* posinfo) {
  if (posinfo != NULL) {
    set_has_posinfo();
  } else {
    clear_has_posinfo();
  }
  posinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posinfo);
  // @@protoc_insertion_point(field_set_allocated:FightEffectTranslateAction.PosInfo)
}

// optional sint32 Status = 10 [default = 0];
inline bool FightEffectTranslateAction::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightEffectTranslateAction::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightEffectTranslateAction::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightEffectTranslateAction::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 FightEffectTranslateAction::status() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.Status)
  return status_;
}
inline void FightEffectTranslateAction::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.Status)
}

// optional sint32 SkillId = 11 [default = -1];
inline bool FightEffectTranslateAction::has_skillid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FightEffectTranslateAction::set_has_skillid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FightEffectTranslateAction::clear_has_skillid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FightEffectTranslateAction::clear_skillid() {
  skillid_ = -1;
  clear_has_skillid();
}
inline ::google::protobuf::int32 FightEffectTranslateAction::skillid() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.SkillId)
  return skillid_;
}
inline void FightEffectTranslateAction::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.SkillId)
}

// optional sint32 SegementIndex = 12 [default = -1];
inline bool FightEffectTranslateAction::has_segementindex() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FightEffectTranslateAction::set_has_segementindex() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FightEffectTranslateAction::clear_has_segementindex() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FightEffectTranslateAction::clear_segementindex() {
  segementindex_ = -1;
  clear_has_segementindex();
}
inline ::google::protobuf::int32 FightEffectTranslateAction::segementindex() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.SegementIndex)
  return segementindex_;
}
inline void FightEffectTranslateAction::set_segementindex(::google::protobuf::int32 value) {
  set_has_segementindex();
  segementindex_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.SegementIndex)
}

// optional string SpriteName = 13;
inline bool FightEffectTranslateAction::has_spritename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightEffectTranslateAction::set_has_spritename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightEffectTranslateAction::clear_has_spritename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightEffectTranslateAction::clear_spritename() {
  spritename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_spritename();
}
inline const ::std::string& FightEffectTranslateAction::spritename() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.SpriteName)
  return spritename_.GetNoArena();
}
inline void FightEffectTranslateAction::set_spritename(const ::std::string& value) {
  set_has_spritename();
  spritename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.SpriteName)
}
#if LANG_CXX11
inline void FightEffectTranslateAction::set_spritename(::std::string&& value) {
  set_has_spritename();
  spritename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FightEffectTranslateAction.SpriteName)
}
#endif
inline void FightEffectTranslateAction::set_spritename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_spritename();
  spritename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FightEffectTranslateAction.SpriteName)
}
inline void FightEffectTranslateAction::set_spritename(const char* value, size_t size) {
  set_has_spritename();
  spritename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FightEffectTranslateAction.SpriteName)
}
inline ::std::string* FightEffectTranslateAction::mutable_spritename() {
  set_has_spritename();
  // @@protoc_insertion_point(field_mutable:FightEffectTranslateAction.SpriteName)
  return spritename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FightEffectTranslateAction::release_spritename() {
  // @@protoc_insertion_point(field_release:FightEffectTranslateAction.SpriteName)
  clear_has_spritename();
  return spritename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FightEffectTranslateAction::set_allocated_spritename(::std::string* spritename) {
  if (spritename != NULL) {
    set_has_spritename();
  } else {
    clear_has_spritename();
  }
  spritename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spritename);
  // @@protoc_insertion_point(field_set_allocated:FightEffectTranslateAction.SpriteName)
}

// optional sint32 BulletType = 14 [default = -1];
inline bool FightEffectTranslateAction::has_bullettype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FightEffectTranslateAction::set_has_bullettype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FightEffectTranslateAction::clear_has_bullettype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FightEffectTranslateAction::clear_bullettype() {
  bullettype_ = -1;
  clear_has_bullettype();
}
inline ::google::protobuf::int32 FightEffectTranslateAction::bullettype() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.BulletType)
  return bullettype_;
}
inline void FightEffectTranslateAction::set_bullettype(::google::protobuf::int32 value) {
  set_has_bullettype();
  bullettype_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.BulletType)
}

// optional bool IsIrregularityEffect = 15 [default = false];
inline bool FightEffectTranslateAction::has_isirregularityeffect() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightEffectTranslateAction::set_has_isirregularityeffect() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightEffectTranslateAction::clear_has_isirregularityeffect() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightEffectTranslateAction::clear_isirregularityeffect() {
  isirregularityeffect_ = false;
  clear_has_isirregularityeffect();
}
inline bool FightEffectTranslateAction::isirregularityeffect() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.IsIrregularityEffect)
  return isirregularityeffect_;
}
inline void FightEffectTranslateAction::set_isirregularityeffect(bool value) {
  set_has_isirregularityeffect();
  isirregularityeffect_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.IsIrregularityEffect)
}

// optional sint32 TranslateType = 17 [default = 0];
inline bool FightEffectTranslateAction::has_translatetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightEffectTranslateAction::set_has_translatetype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightEffectTranslateAction::clear_has_translatetype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightEffectTranslateAction::clear_translatetype() {
  translatetype_ = 0;
  clear_has_translatetype();
}
inline ::google::protobuf::int32 FightEffectTranslateAction::translatetype() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.TranslateType)
  return translatetype_;
}
inline void FightEffectTranslateAction::set_translatetype(::google::protobuf::int32 value) {
  set_has_translatetype();
  translatetype_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.TranslateType)
}

// optional float Time = 18 [default = -1];
inline bool FightEffectTranslateAction::has_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FightEffectTranslateAction::set_has_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FightEffectTranslateAction::clear_has_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FightEffectTranslateAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
inline float FightEffectTranslateAction::time() const {
  // @@protoc_insertion_point(field_get:FightEffectTranslateAction.Time)
  return time_;
}
inline void FightEffectTranslateAction::set_time(float value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightEffectTranslateAction.Time)
}

// -------------------------------------------------------------------

// FightCollectAction

// optional sint32 Status = 1 [default = 1];
inline bool FightCollectAction::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightCollectAction::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightCollectAction::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightCollectAction::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::google::protobuf::int32 FightCollectAction::status() const {
  // @@protoc_insertion_point(field_get:FightCollectAction.Status)
  return status_;
}
inline void FightCollectAction::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:FightCollectAction.Status)
}

// optional sint32 Player_ObjId = 2 [default = -1];
inline bool FightCollectAction::has_player_objid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightCollectAction::set_has_player_objid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightCollectAction::clear_has_player_objid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightCollectAction::clear_player_objid() {
  player_objid_ = -1;
  clear_has_player_objid();
}
inline ::google::protobuf::int32 FightCollectAction::player_objid() const {
  // @@protoc_insertion_point(field_get:FightCollectAction.Player_ObjId)
  return player_objid_;
}
inline void FightCollectAction::set_player_objid(::google::protobuf::int32 value) {
  set_has_player_objid();
  player_objid_ = value;
  // @@protoc_insertion_point(field_set:FightCollectAction.Player_ObjId)
}

// optional sint32 Collection_ObjId = 3 [default = -1];
inline bool FightCollectAction::has_collection_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightCollectAction::set_has_collection_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightCollectAction::clear_has_collection_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightCollectAction::clear_collection_objid() {
  collection_objid_ = -1;
  clear_has_collection_objid();
}
inline ::google::protobuf::int32 FightCollectAction::collection_objid() const {
  // @@protoc_insertion_point(field_get:FightCollectAction.Collection_ObjId)
  return collection_objid_;
}
inline void FightCollectAction::set_collection_objid(::google::protobuf::int32 value) {
  set_has_collection_objid();
  collection_objid_ = value;
  // @@protoc_insertion_point(field_set:FightCollectAction.Collection_ObjId)
}

// -------------------------------------------------------------------

// FightCollectionShowEffectAction

// optional sint32 ObjId = 1 [default = -1];
inline bool FightCollectionShowEffectAction::has_objid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightCollectionShowEffectAction::set_has_objid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightCollectionShowEffectAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightCollectionShowEffectAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightCollectionShowEffectAction::objid() const {
  // @@protoc_insertion_point(field_get:FightCollectionShowEffectAction.ObjId)
  return objid_;
}
inline void FightCollectionShowEffectAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightCollectionShowEffectAction.ObjId)
}

// optional bool IsShowEffect = 2 [default = false];
inline bool FightCollectionShowEffectAction::has_isshoweffect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightCollectionShowEffectAction::set_has_isshoweffect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightCollectionShowEffectAction::clear_has_isshoweffect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightCollectionShowEffectAction::clear_isshoweffect() {
  isshoweffect_ = false;
  clear_has_isshoweffect();
}
inline bool FightCollectionShowEffectAction::isshoweffect() const {
  // @@protoc_insertion_point(field_get:FightCollectionShowEffectAction.IsShowEffect)
  return isshoweffect_;
}
inline void FightCollectionShowEffectAction::set_isshoweffect(bool value) {
  set_has_isshoweffect();
  isshoweffect_ = value;
  // @@protoc_insertion_point(field_set:FightCollectionShowEffectAction.IsShowEffect)
}

// -------------------------------------------------------------------

// FightAutoFightAction

// optional sint32 Type = 1 [default = 0];
inline bool FightAutoFightAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightAutoFightAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightAutoFightAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightAutoFightAction::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FightAutoFightAction::type() const {
  // @@protoc_insertion_point(field_get:FightAutoFightAction.Type)
  return type_;
}
inline void FightAutoFightAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightAutoFightAction.Type)
}

// optional sint32 ObjId = 2 [default = -1];
inline bool FightAutoFightAction::has_objid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightAutoFightAction::set_has_objid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightAutoFightAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightAutoFightAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightAutoFightAction::objid() const {
  // @@protoc_insertion_point(field_get:FightAutoFightAction.ObjId)
  return objid_;
}
inline void FightAutoFightAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightAutoFightAction.ObjId)
}

// -------------------------------------------------------------------

// FightUseItemAction

// optional sint32 TemplateId = 1 [default = -1];
inline bool FightUseItemAction::has_templateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightUseItemAction::set_has_templateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightUseItemAction::clear_has_templateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightUseItemAction::clear_templateid() {
  templateid_ = -1;
  clear_has_templateid();
}
inline ::google::protobuf::int32 FightUseItemAction::templateid() const {
  // @@protoc_insertion_point(field_get:FightUseItemAction.TemplateId)
  return templateid_;
}
inline void FightUseItemAction::set_templateid(::google::protobuf::int32 value) {
  set_has_templateid();
  templateid_ = value;
  // @@protoc_insertion_point(field_set:FightUseItemAction.TemplateId)
}

// optional sint32 Status = 2 [default = 1];
inline bool FightUseItemAction::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightUseItemAction::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightUseItemAction::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightUseItemAction::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::google::protobuf::int32 FightUseItemAction::status() const {
  // @@protoc_insertion_point(field_get:FightUseItemAction.Status)
  return status_;
}
inline void FightUseItemAction::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:FightUseItemAction.Status)
}

// optional sint32 Player_ObjId = 3 [default = -1];
inline bool FightUseItemAction::has_player_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightUseItemAction::set_has_player_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightUseItemAction::clear_has_player_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightUseItemAction::clear_player_objid() {
  player_objid_ = -1;
  clear_has_player_objid();
}
inline ::google::protobuf::int32 FightUseItemAction::player_objid() const {
  // @@protoc_insertion_point(field_get:FightUseItemAction.Player_ObjId)
  return player_objid_;
}
inline void FightUseItemAction::set_player_objid(::google::protobuf::int32 value) {
  set_has_player_objid();
  player_objid_ = value;
  // @@protoc_insertion_point(field_set:FightUseItemAction.Player_ObjId)
}

// -------------------------------------------------------------------

// FightStormKillEffectAction

// optional sint32 ObjId = 1 [default = -1];
inline bool FightStormKillEffectAction::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightStormKillEffectAction::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightStormKillEffectAction::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightStormKillEffectAction::clear_objid() {
  objid_ = -1;
  clear_has_objid();
}
inline ::google::protobuf::int32 FightStormKillEffectAction::objid() const {
  // @@protoc_insertion_point(field_get:FightStormKillEffectAction.ObjId)
  return objid_;
}
inline void FightStormKillEffectAction::set_objid(::google::protobuf::int32 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:FightStormKillEffectAction.ObjId)
}

// optional sint32 Num = 2 [default = -1];
inline bool FightStormKillEffectAction::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightStormKillEffectAction::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightStormKillEffectAction::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightStormKillEffectAction::clear_num() {
  num_ = -1;
  clear_has_num();
}
inline ::google::protobuf::int32 FightStormKillEffectAction::num() const {
  // @@protoc_insertion_point(field_get:FightStormKillEffectAction.Num)
  return num_;
}
inline void FightStormKillEffectAction::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:FightStormKillEffectAction.Num)
}

// -------------------------------------------------------------------

// FightOneVSOneStartAction

// optional sint32 Type = 1 [default = -1];
inline bool FightOneVSOneStartAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightOneVSOneStartAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightOneVSOneStartAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightOneVSOneStartAction::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::google::protobuf::int32 FightOneVSOneStartAction::type() const {
  // @@protoc_insertion_point(field_get:FightOneVSOneStartAction.Type)
  return type_;
}
inline void FightOneVSOneStartAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightOneVSOneStartAction.Type)
}

// optional sint32 Time = 2 [default = -1];
inline bool FightOneVSOneStartAction::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightOneVSOneStartAction::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightOneVSOneStartAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightOneVSOneStartAction::clear_time() {
  time_ = -1;
  clear_has_time();
}
inline ::google::protobuf::int32 FightOneVSOneStartAction::time() const {
  // @@protoc_insertion_point(field_get:FightOneVSOneStartAction.Time)
  return time_;
}
inline void FightOneVSOneStartAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightOneVSOneStartAction.Time)
}

// -------------------------------------------------------------------

// FightOneVSOneResultAction

// optional sint32 Result = 1 [default = -1];
inline bool FightOneVSOneResultAction::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightOneVSOneResultAction::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightOneVSOneResultAction::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightOneVSOneResultAction::clear_result() {
  result_ = -1;
  clear_has_result();
}
inline ::google::protobuf::int32 FightOneVSOneResultAction::result() const {
  // @@protoc_insertion_point(field_get:FightOneVSOneResultAction.Result)
  return result_;
}
inline void FightOneVSOneResultAction::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FightOneVSOneResultAction.Result)
}

// -------------------------------------------------------------------

// FightSightAction

// repeated bytes ActionArr = 2;
inline int FightSightAction::actionarr_size() const {
  return actionarr_.size();
}
inline void FightSightAction::clear_actionarr() {
  actionarr_.Clear();
}
inline const ::std::string& FightSightAction::actionarr(int index) const {
  // @@protoc_insertion_point(field_get:FightSightAction.ActionArr)
  return actionarr_.Get(index);
}
inline ::std::string* FightSightAction::mutable_actionarr(int index) {
  // @@protoc_insertion_point(field_mutable:FightSightAction.ActionArr)
  return actionarr_.Mutable(index);
}
inline void FightSightAction::set_actionarr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:FightSightAction.ActionArr)
  actionarr_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FightSightAction::set_actionarr(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:FightSightAction.ActionArr)
  actionarr_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FightSightAction::set_actionarr(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actionarr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FightSightAction.ActionArr)
}
inline void FightSightAction::set_actionarr(int index, const void* value, size_t size) {
  actionarr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FightSightAction.ActionArr)
}
inline ::std::string* FightSightAction::add_actionarr() {
  // @@protoc_insertion_point(field_add_mutable:FightSightAction.ActionArr)
  return actionarr_.Add();
}
inline void FightSightAction::add_actionarr(const ::std::string& value) {
  actionarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FightSightAction.ActionArr)
}
#if LANG_CXX11
inline void FightSightAction::add_actionarr(::std::string&& value) {
  actionarr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FightSightAction.ActionArr)
}
#endif
inline void FightSightAction::add_actionarr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  actionarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FightSightAction.ActionArr)
}
inline void FightSightAction::add_actionarr(const void* value, size_t size) {
  actionarr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FightSightAction.ActionArr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FightSightAction::actionarr() const {
  // @@protoc_insertion_point(field_list:FightSightAction.ActionArr)
  return actionarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FightSightAction::mutable_actionarr() {
  // @@protoc_insertion_point(field_mutable_list:FightSightAction.ActionArr)
  return &actionarr_;
}

// -------------------------------------------------------------------

// FightEventTriggerAction

// optional sint32 EventId = 1 [default = -1];
inline bool FightEventTriggerAction::has_eventid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightEventTriggerAction::set_has_eventid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightEventTriggerAction::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightEventTriggerAction::clear_eventid() {
  eventid_ = -1;
  clear_has_eventid();
}
inline ::google::protobuf::int32 FightEventTriggerAction::eventid() const {
  // @@protoc_insertion_point(field_get:FightEventTriggerAction.EventId)
  return eventid_;
}
inline void FightEventTriggerAction::set_eventid(::google::protobuf::int32 value) {
  set_has_eventid();
  eventid_ = value;
  // @@protoc_insertion_point(field_set:FightEventTriggerAction.EventId)
}

// -------------------------------------------------------------------

// FightQuitAction

// optional sint32 Type = 1 [default = 0];
inline bool FightQuitAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightQuitAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightQuitAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightQuitAction::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FightQuitAction::type() const {
  // @@protoc_insertion_point(field_get:FightQuitAction.Type)
  return type_;
}
inline void FightQuitAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightQuitAction.Type)
}

// -------------------------------------------------------------------

// FightProductAction

// optional sint32 Status = 1 [default = -1];
inline bool FightProductAction::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightProductAction::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightProductAction::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightProductAction::clear_status() {
  status_ = -1;
  clear_has_status();
}
inline ::google::protobuf::int32 FightProductAction::status() const {
  // @@protoc_insertion_point(field_get:FightProductAction.Status)
  return status_;
}
inline void FightProductAction::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:FightProductAction.Status)
}

// optional sint32 LifeSkillId = 3 [default = -1];
inline bool FightProductAction::has_lifeskillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightProductAction::set_has_lifeskillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightProductAction::clear_has_lifeskillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightProductAction::clear_lifeskillid() {
  lifeskillid_ = -1;
  clear_has_lifeskillid();
}
inline ::google::protobuf::int32 FightProductAction::lifeskillid() const {
  // @@protoc_insertion_point(field_get:FightProductAction.LifeSkillId)
  return lifeskillid_;
}
inline void FightProductAction::set_lifeskillid(::google::protobuf::int32 value) {
  set_has_lifeskillid();
  lifeskillid_ = value;
  // @@protoc_insertion_point(field_set:FightProductAction.LifeSkillId)
}

// optional sint32 Player_ObjId = 5 [default = -1];
inline bool FightProductAction::has_player_objid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightProductAction::set_has_player_objid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightProductAction::clear_has_player_objid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightProductAction::clear_player_objid() {
  player_objid_ = -1;
  clear_has_player_objid();
}
inline ::google::protobuf::int32 FightProductAction::player_objid() const {
  // @@protoc_insertion_point(field_get:FightProductAction.Player_ObjId)
  return player_objid_;
}
inline void FightProductAction::set_player_objid(::google::protobuf::int32 value) {
  set_has_player_objid();
  player_objid_ = value;
  // @@protoc_insertion_point(field_set:FightProductAction.Player_ObjId)
}

// optional sint32 ProductionId = 9 [default = -1];
inline bool FightProductAction::has_productionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightProductAction::set_has_productionid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightProductAction::clear_has_productionid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightProductAction::clear_productionid() {
  productionid_ = -1;
  clear_has_productionid();
}
inline ::google::protobuf::int32 FightProductAction::productionid() const {
  // @@protoc_insertion_point(field_get:FightProductAction.ProductionId)
  return productionid_;
}
inline void FightProductAction::set_productionid(::google::protobuf::int32 value) {
  set_has_productionid();
  productionid_ = value;
  // @@protoc_insertion_point(field_set:FightProductAction.ProductionId)
}

// -------------------------------------------------------------------

// FightStartEndAction

// optional sint32 Type = 1 [default = 0];
inline bool FightStartEndAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightStartEndAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightStartEndAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightStartEndAction::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FightStartEndAction::type() const {
  // @@protoc_insertion_point(field_get:FightStartEndAction.Type)
  return type_;
}
inline void FightStartEndAction::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FightStartEndAction.Type)
}

// optional sint32 Time = 2 [default = 0];
inline bool FightStartEndAction::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightStartEndAction::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightStartEndAction::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightStartEndAction::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 FightStartEndAction::time() const {
  // @@protoc_insertion_point(field_get:FightStartEndAction.Time)
  return time_;
}
inline void FightStartEndAction::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FightStartEndAction.Time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FightRpc_2eproto__INCLUDED
