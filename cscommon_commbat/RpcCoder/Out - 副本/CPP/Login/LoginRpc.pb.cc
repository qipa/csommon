// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LoginRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class LoginRpcKeyAuthAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LoginRpcKeyAuthAsk>
     _instance;
} _LoginRpcKeyAuthAsk_default_instance_;
class LoginRpcKeyAuthReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LoginRpcKeyAuthReply>
     _instance;
} _LoginRpcKeyAuthReply_default_instance_;
class LoginRpcKickOffNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LoginRpcKickOffNotify>
     _instance;
} _LoginRpcKickOffNotify_default_instance_;

namespace protobuf_LoginRpc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcKeyAuthAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcKeyAuthAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcKeyAuthAsk, distid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcKeyAuthAsk, rsadata_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcKeyAuthReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcKeyAuthReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcKeyAuthReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcKeyAuthReply, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcKeyAuthReply, platname_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcKickOffNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRpcKickOffNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(LoginRpcKeyAuthAsk)},
  { 9, 17, sizeof(LoginRpcKeyAuthReply)},
  { 20, 25, sizeof(LoginRpcKickOffNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginRpcKeyAuthAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginRpcKeyAuthReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginRpcKickOffNotify_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "LoginRpc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_PublicStruct_2eproto::InitDefaults();
  _LoginRpcKeyAuthAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LoginRpcKeyAuthAsk_default_instance_);_LoginRpcKeyAuthReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LoginRpcKeyAuthReply_default_instance_);_LoginRpcKickOffNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LoginRpcKickOffNotify_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016LoginRpc.proto\032\022PublicStruct.proto\"9\n\022"
      "LoginRpcKeyAuthAsk\022\022\n\006DistId\030\002 \001(\021:\002-1\022\017"
      "\n\007RsaData\030\003 \001(\t\"S\n\024LoginRpcKeyAuthReply\022"
      "\025\n\006Result\030\001 \001(\021:\005-9999\022\022\n\006UserId\030\002 \001(\022:\002"
      "-1\022\020\n\010PlatName\030\004 \001(\t\"\027\n\025LoginRpcKickOffN"
      "otify"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 205);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LoginRpc.proto", &protobuf_RegisterTypes);
  ::protobuf_PublicStruct_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_LoginRpc_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRpcKeyAuthAsk::kDistIdFieldNumber;
const int LoginRpcKeyAuthAsk::kRsaDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRpcKeyAuthAsk::LoginRpcKeyAuthAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LoginRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginRpcKeyAuthAsk)
}
LoginRpcKeyAuthAsk::LoginRpcKeyAuthAsk(const LoginRpcKeyAuthAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rsadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rsadata()) {
    rsadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsadata_);
  }
  distid_ = from.distid_;
  // @@protoc_insertion_point(copy_constructor:LoginRpcKeyAuthAsk)
}

void LoginRpcKeyAuthAsk::SharedCtor() {
  _cached_size_ = 0;
  rsadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  distid_ = -1;
}

LoginRpcKeyAuthAsk::~LoginRpcKeyAuthAsk() {
  // @@protoc_insertion_point(destructor:LoginRpcKeyAuthAsk)
  SharedDtor();
}

void LoginRpcKeyAuthAsk::SharedDtor() {
  rsadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginRpcKeyAuthAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRpcKeyAuthAsk::descriptor() {
  protobuf_LoginRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LoginRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginRpcKeyAuthAsk& LoginRpcKeyAuthAsk::default_instance() {
  protobuf_LoginRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginRpcKeyAuthAsk* LoginRpcKeyAuthAsk::New(::google::protobuf::Arena* arena) const {
  LoginRpcKeyAuthAsk* n = new LoginRpcKeyAuthAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRpcKeyAuthAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginRpcKeyAuthAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!rsadata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rsadata_.UnsafeRawStringPointer())->clear();
    }
    distid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginRpcKeyAuthAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginRpcKeyAuthAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 DistId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_distid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &distid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RsaData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rsadata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rsadata().data(), static_cast<int>(this->rsadata().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LoginRpcKeyAuthAsk.RsaData");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginRpcKeyAuthAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginRpcKeyAuthAsk)
  return false;
#undef DO_
}

void LoginRpcKeyAuthAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginRpcKeyAuthAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 DistId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->distid(), output);
  }

  // optional string RsaData = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rsadata().data(), static_cast<int>(this->rsadata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LoginRpcKeyAuthAsk.RsaData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rsadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoginRpcKeyAuthAsk)
}

::google::protobuf::uint8* LoginRpcKeyAuthAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LoginRpcKeyAuthAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 DistId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->distid(), target);
  }

  // optional string RsaData = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rsadata().data(), static_cast<int>(this->rsadata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LoginRpcKeyAuthAsk.RsaData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rsadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginRpcKeyAuthAsk)
  return target;
}

size_t LoginRpcKeyAuthAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginRpcKeyAuthAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string RsaData = 3;
    if (has_rsadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rsadata());
    }

    // optional sint32 DistId = 2 [default = -1];
    if (has_distid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->distid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRpcKeyAuthAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginRpcKeyAuthAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRpcKeyAuthAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRpcKeyAuthAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginRpcKeyAuthAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginRpcKeyAuthAsk)
    MergeFrom(*source);
  }
}

void LoginRpcKeyAuthAsk::MergeFrom(const LoginRpcKeyAuthAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginRpcKeyAuthAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rsadata();
      rsadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      distid_ = from.distid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoginRpcKeyAuthAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginRpcKeyAuthAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRpcKeyAuthAsk::CopyFrom(const LoginRpcKeyAuthAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginRpcKeyAuthAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRpcKeyAuthAsk::IsInitialized() const {
  return true;
}

void LoginRpcKeyAuthAsk::Swap(LoginRpcKeyAuthAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRpcKeyAuthAsk::InternalSwap(LoginRpcKeyAuthAsk* other) {
  using std::swap;
  rsadata_.Swap(&other->rsadata_);
  swap(distid_, other->distid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRpcKeyAuthAsk::GetMetadata() const {
  protobuf_LoginRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LoginRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRpcKeyAuthAsk

// optional sint32 DistId = 2 [default = -1];
bool LoginRpcKeyAuthAsk::has_distid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginRpcKeyAuthAsk::set_has_distid() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginRpcKeyAuthAsk::clear_has_distid() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginRpcKeyAuthAsk::clear_distid() {
  distid_ = -1;
  clear_has_distid();
}
::google::protobuf::int32 LoginRpcKeyAuthAsk::distid() const {
  // @@protoc_insertion_point(field_get:LoginRpcKeyAuthAsk.DistId)
  return distid_;
}
void LoginRpcKeyAuthAsk::set_distid(::google::protobuf::int32 value) {
  set_has_distid();
  distid_ = value;
  // @@protoc_insertion_point(field_set:LoginRpcKeyAuthAsk.DistId)
}

// optional string RsaData = 3;
bool LoginRpcKeyAuthAsk::has_rsadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginRpcKeyAuthAsk::set_has_rsadata() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginRpcKeyAuthAsk::clear_has_rsadata() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginRpcKeyAuthAsk::clear_rsadata() {
  rsadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rsadata();
}
const ::std::string& LoginRpcKeyAuthAsk::rsadata() const {
  // @@protoc_insertion_point(field_get:LoginRpcKeyAuthAsk.RsaData)
  return rsadata_.GetNoArena();
}
void LoginRpcKeyAuthAsk::set_rsadata(const ::std::string& value) {
  set_has_rsadata();
  rsadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRpcKeyAuthAsk.RsaData)
}
#if LANG_CXX11
void LoginRpcKeyAuthAsk::set_rsadata(::std::string&& value) {
  set_has_rsadata();
  rsadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginRpcKeyAuthAsk.RsaData)
}
#endif
void LoginRpcKeyAuthAsk::set_rsadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rsadata();
  rsadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRpcKeyAuthAsk.RsaData)
}
void LoginRpcKeyAuthAsk::set_rsadata(const char* value, size_t size) {
  set_has_rsadata();
  rsadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRpcKeyAuthAsk.RsaData)
}
::std::string* LoginRpcKeyAuthAsk::mutable_rsadata() {
  set_has_rsadata();
  // @@protoc_insertion_point(field_mutable:LoginRpcKeyAuthAsk.RsaData)
  return rsadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRpcKeyAuthAsk::release_rsadata() {
  // @@protoc_insertion_point(field_release:LoginRpcKeyAuthAsk.RsaData)
  clear_has_rsadata();
  return rsadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRpcKeyAuthAsk::set_allocated_rsadata(::std::string* rsadata) {
  if (rsadata != NULL) {
    set_has_rsadata();
  } else {
    clear_has_rsadata();
  }
  rsadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsadata);
  // @@protoc_insertion_point(field_set_allocated:LoginRpcKeyAuthAsk.RsaData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRpcKeyAuthReply::kResultFieldNumber;
const int LoginRpcKeyAuthReply::kUserIdFieldNumber;
const int LoginRpcKeyAuthReply::kPlatNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRpcKeyAuthReply::LoginRpcKeyAuthReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LoginRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginRpcKeyAuthReply)
}
LoginRpcKeyAuthReply::LoginRpcKeyAuthReply(const LoginRpcKeyAuthReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  platname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_platname()) {
    platname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platname_);
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:LoginRpcKeyAuthReply)
}

void LoginRpcKeyAuthReply::SharedCtor() {
  _cached_size_ = 0;
  platname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = -9999;
  userid_ = GOOGLE_LONGLONG(-1);
}

LoginRpcKeyAuthReply::~LoginRpcKeyAuthReply() {
  // @@protoc_insertion_point(destructor:LoginRpcKeyAuthReply)
  SharedDtor();
}

void LoginRpcKeyAuthReply::SharedDtor() {
  platname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginRpcKeyAuthReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRpcKeyAuthReply::descriptor() {
  protobuf_LoginRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LoginRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginRpcKeyAuthReply& LoginRpcKeyAuthReply::default_instance() {
  protobuf_LoginRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginRpcKeyAuthReply* LoginRpcKeyAuthReply::New(::google::protobuf::Arena* arena) const {
  LoginRpcKeyAuthReply* n = new LoginRpcKeyAuthReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRpcKeyAuthReply::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginRpcKeyAuthReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!platname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*platname_.UnsafeRawStringPointer())->clear();
    }
    result_ = -9999;
    userid_ = GOOGLE_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginRpcKeyAuthReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginRpcKeyAuthReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 UserId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PlatName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platname().data(), static_cast<int>(this->platname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LoginRpcKeyAuthReply.PlatName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginRpcKeyAuthReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginRpcKeyAuthReply)
  return false;
#undef DO_
}

void LoginRpcKeyAuthReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginRpcKeyAuthReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->userid(), output);
  }

  // optional string PlatName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platname().data(), static_cast<int>(this->platname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LoginRpcKeyAuthReply.PlatName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->platname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoginRpcKeyAuthReply)
}

::google::protobuf::uint8* LoginRpcKeyAuthReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LoginRpcKeyAuthReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->userid(), target);
  }

  // optional string PlatName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platname().data(), static_cast<int>(this->platname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LoginRpcKeyAuthReply.PlatName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->platname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginRpcKeyAuthReply)
  return target;
}

size_t LoginRpcKeyAuthReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginRpcKeyAuthReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string PlatName = 4;
    if (has_platname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platname());
    }

    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint64 UserId = 2 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRpcKeyAuthReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginRpcKeyAuthReply)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRpcKeyAuthReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRpcKeyAuthReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginRpcKeyAuthReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginRpcKeyAuthReply)
    MergeFrom(*source);
  }
}

void LoginRpcKeyAuthReply::MergeFrom(const LoginRpcKeyAuthReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginRpcKeyAuthReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_platname();
      platname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platname_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoginRpcKeyAuthReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginRpcKeyAuthReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRpcKeyAuthReply::CopyFrom(const LoginRpcKeyAuthReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginRpcKeyAuthReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRpcKeyAuthReply::IsInitialized() const {
  return true;
}

void LoginRpcKeyAuthReply::Swap(LoginRpcKeyAuthReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRpcKeyAuthReply::InternalSwap(LoginRpcKeyAuthReply* other) {
  using std::swap;
  platname_.Swap(&other->platname_);
  swap(result_, other->result_);
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRpcKeyAuthReply::GetMetadata() const {
  protobuf_LoginRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LoginRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRpcKeyAuthReply

// optional sint32 Result = 1 [default = -9999];
bool LoginRpcKeyAuthReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginRpcKeyAuthReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginRpcKeyAuthReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginRpcKeyAuthReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 LoginRpcKeyAuthReply::result() const {
  // @@protoc_insertion_point(field_get:LoginRpcKeyAuthReply.Result)
  return result_;
}
void LoginRpcKeyAuthReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:LoginRpcKeyAuthReply.Result)
}

// optional sint64 UserId = 2 [default = -1];
bool LoginRpcKeyAuthReply::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginRpcKeyAuthReply::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginRpcKeyAuthReply::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginRpcKeyAuthReply::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 LoginRpcKeyAuthReply::userid() const {
  // @@protoc_insertion_point(field_get:LoginRpcKeyAuthReply.UserId)
  return userid_;
}
void LoginRpcKeyAuthReply::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:LoginRpcKeyAuthReply.UserId)
}

// optional string PlatName = 4;
bool LoginRpcKeyAuthReply::has_platname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginRpcKeyAuthReply::set_has_platname() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginRpcKeyAuthReply::clear_has_platname() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginRpcKeyAuthReply::clear_platname() {
  platname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platname();
}
const ::std::string& LoginRpcKeyAuthReply::platname() const {
  // @@protoc_insertion_point(field_get:LoginRpcKeyAuthReply.PlatName)
  return platname_.GetNoArena();
}
void LoginRpcKeyAuthReply::set_platname(const ::std::string& value) {
  set_has_platname();
  platname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRpcKeyAuthReply.PlatName)
}
#if LANG_CXX11
void LoginRpcKeyAuthReply::set_platname(::std::string&& value) {
  set_has_platname();
  platname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginRpcKeyAuthReply.PlatName)
}
#endif
void LoginRpcKeyAuthReply::set_platname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_platname();
  platname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRpcKeyAuthReply.PlatName)
}
void LoginRpcKeyAuthReply::set_platname(const char* value, size_t size) {
  set_has_platname();
  platname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRpcKeyAuthReply.PlatName)
}
::std::string* LoginRpcKeyAuthReply::mutable_platname() {
  set_has_platname();
  // @@protoc_insertion_point(field_mutable:LoginRpcKeyAuthReply.PlatName)
  return platname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRpcKeyAuthReply::release_platname() {
  // @@protoc_insertion_point(field_release:LoginRpcKeyAuthReply.PlatName)
  clear_has_platname();
  return platname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRpcKeyAuthReply::set_allocated_platname(::std::string* platname) {
  if (platname != NULL) {
    set_has_platname();
  } else {
    clear_has_platname();
  }
  platname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platname);
  // @@protoc_insertion_point(field_set_allocated:LoginRpcKeyAuthReply.PlatName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRpcKickOffNotify::LoginRpcKickOffNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LoginRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginRpcKickOffNotify)
}
LoginRpcKickOffNotify::LoginRpcKickOffNotify(const LoginRpcKickOffNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LoginRpcKickOffNotify)
}

void LoginRpcKickOffNotify::SharedCtor() {
  _cached_size_ = 0;
}

LoginRpcKickOffNotify::~LoginRpcKickOffNotify() {
  // @@protoc_insertion_point(destructor:LoginRpcKickOffNotify)
  SharedDtor();
}

void LoginRpcKickOffNotify::SharedDtor() {
}

void LoginRpcKickOffNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRpcKickOffNotify::descriptor() {
  protobuf_LoginRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LoginRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginRpcKickOffNotify& LoginRpcKickOffNotify::default_instance() {
  protobuf_LoginRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginRpcKickOffNotify* LoginRpcKickOffNotify::New(::google::protobuf::Arena* arena) const {
  LoginRpcKickOffNotify* n = new LoginRpcKickOffNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRpcKickOffNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginRpcKickOffNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginRpcKickOffNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginRpcKickOffNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LoginRpcKickOffNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginRpcKickOffNotify)
  return false;
#undef DO_
}

void LoginRpcKickOffNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginRpcKickOffNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoginRpcKickOffNotify)
}

::google::protobuf::uint8* LoginRpcKickOffNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LoginRpcKickOffNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginRpcKickOffNotify)
  return target;
}

size_t LoginRpcKickOffNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginRpcKickOffNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRpcKickOffNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginRpcKickOffNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRpcKickOffNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRpcKickOffNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginRpcKickOffNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginRpcKickOffNotify)
    MergeFrom(*source);
  }
}

void LoginRpcKickOffNotify::MergeFrom(const LoginRpcKickOffNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginRpcKickOffNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LoginRpcKickOffNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginRpcKickOffNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRpcKickOffNotify::CopyFrom(const LoginRpcKickOffNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginRpcKickOffNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRpcKickOffNotify::IsInitialized() const {
  return true;
}

void LoginRpcKickOffNotify::Swap(LoginRpcKickOffNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRpcKickOffNotify::InternalSwap(LoginRpcKickOffNotify* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRpcKickOffNotify::GetMetadata() const {
  protobuf_LoginRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LoginRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRpcKickOffNotify

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
