// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginRpc.proto

#ifndef PROTOBUF_LoginRpc_2eproto__INCLUDED
#define PROTOBUF_LoginRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)
class LoginRpcKeyAuthAsk;
class LoginRpcKeyAuthAskDefaultTypeInternal;
extern LoginRpcKeyAuthAskDefaultTypeInternal _LoginRpcKeyAuthAsk_default_instance_;
class LoginRpcKeyAuthReply;
class LoginRpcKeyAuthReplyDefaultTypeInternal;
extern LoginRpcKeyAuthReplyDefaultTypeInternal _LoginRpcKeyAuthReply_default_instance_;
class LoginRpcKickOffNotify;
class LoginRpcKickOffNotifyDefaultTypeInternal;
extern LoginRpcKickOffNotifyDefaultTypeInternal _LoginRpcKickOffNotify_default_instance_;

namespace protobuf_LoginRpc_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_LoginRpc_2eproto

// ===================================================================

class LoginRpcKeyAuthAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LoginRpcKeyAuthAsk) */ {
 public:
  LoginRpcKeyAuthAsk();
  virtual ~LoginRpcKeyAuthAsk();

  LoginRpcKeyAuthAsk(const LoginRpcKeyAuthAsk& from);

  inline LoginRpcKeyAuthAsk& operator=(const LoginRpcKeyAuthAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRpcKeyAuthAsk(LoginRpcKeyAuthAsk&& from) noexcept
    : LoginRpcKeyAuthAsk() {
    *this = ::std::move(from);
  }

  inline LoginRpcKeyAuthAsk& operator=(LoginRpcKeyAuthAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcKeyAuthAsk& default_instance();

  static inline const LoginRpcKeyAuthAsk* internal_default_instance() {
    return reinterpret_cast<const LoginRpcKeyAuthAsk*>(
               &_LoginRpcKeyAuthAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LoginRpcKeyAuthAsk* other);
  friend void swap(LoginRpcKeyAuthAsk& a, LoginRpcKeyAuthAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRpcKeyAuthAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRpcKeyAuthAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginRpcKeyAuthAsk& from);
  void MergeFrom(const LoginRpcKeyAuthAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginRpcKeyAuthAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string RsaData = 3;
  bool has_rsadata() const;
  void clear_rsadata();
  static const int kRsaDataFieldNumber = 3;
  const ::std::string& rsadata() const;
  void set_rsadata(const ::std::string& value);
  #if LANG_CXX11
  void set_rsadata(::std::string&& value);
  #endif
  void set_rsadata(const char* value);
  void set_rsadata(const char* value, size_t size);
  ::std::string* mutable_rsadata();
  ::std::string* release_rsadata();
  void set_allocated_rsadata(::std::string* rsadata);

  // optional sint32 DistId = 2 [default = -1];
  bool has_distid() const;
  void clear_distid();
  static const int kDistIdFieldNumber = 2;
  ::google::protobuf::int32 distid() const;
  void set_distid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LoginRpcKeyAuthAsk)
 private:
  void set_has_distid();
  void clear_has_distid();
  void set_has_rsadata();
  void clear_has_rsadata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr rsadata_;
  ::google::protobuf::int32 distid_;
  friend struct protobuf_LoginRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginRpcKeyAuthReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LoginRpcKeyAuthReply) */ {
 public:
  LoginRpcKeyAuthReply();
  virtual ~LoginRpcKeyAuthReply();

  LoginRpcKeyAuthReply(const LoginRpcKeyAuthReply& from);

  inline LoginRpcKeyAuthReply& operator=(const LoginRpcKeyAuthReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRpcKeyAuthReply(LoginRpcKeyAuthReply&& from) noexcept
    : LoginRpcKeyAuthReply() {
    *this = ::std::move(from);
  }

  inline LoginRpcKeyAuthReply& operator=(LoginRpcKeyAuthReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcKeyAuthReply& default_instance();

  static inline const LoginRpcKeyAuthReply* internal_default_instance() {
    return reinterpret_cast<const LoginRpcKeyAuthReply*>(
               &_LoginRpcKeyAuthReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LoginRpcKeyAuthReply* other);
  friend void swap(LoginRpcKeyAuthReply& a, LoginRpcKeyAuthReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRpcKeyAuthReply* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRpcKeyAuthReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginRpcKeyAuthReply& from);
  void MergeFrom(const LoginRpcKeyAuthReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginRpcKeyAuthReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string PlatName = 4;
  bool has_platname() const;
  void clear_platname();
  static const int kPlatNameFieldNumber = 4;
  const ::std::string& platname() const;
  void set_platname(const ::std::string& value);
  #if LANG_CXX11
  void set_platname(::std::string&& value);
  #endif
  void set_platname(const char* value);
  void set_platname(const char* value, size_t size);
  ::std::string* mutable_platname();
  ::std::string* release_platname();
  void set_allocated_platname(::std::string* platname);

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional sint64 UserId = 2 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:LoginRpcKeyAuthReply)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_userid();
  void clear_has_userid();
  void set_has_platname();
  void clear_has_platname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr platname_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_LoginRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginRpcKickOffNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LoginRpcKickOffNotify) */ {
 public:
  LoginRpcKickOffNotify();
  virtual ~LoginRpcKickOffNotify();

  LoginRpcKickOffNotify(const LoginRpcKickOffNotify& from);

  inline LoginRpcKickOffNotify& operator=(const LoginRpcKickOffNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRpcKickOffNotify(LoginRpcKickOffNotify&& from) noexcept
    : LoginRpcKickOffNotify() {
    *this = ::std::move(from);
  }

  inline LoginRpcKickOffNotify& operator=(LoginRpcKickOffNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRpcKickOffNotify& default_instance();

  static inline const LoginRpcKickOffNotify* internal_default_instance() {
    return reinterpret_cast<const LoginRpcKickOffNotify*>(
               &_LoginRpcKickOffNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(LoginRpcKickOffNotify* other);
  friend void swap(LoginRpcKickOffNotify& a, LoginRpcKickOffNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRpcKickOffNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRpcKickOffNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginRpcKickOffNotify& from);
  void MergeFrom(const LoginRpcKickOffNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginRpcKickOffNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LoginRpcKickOffNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_LoginRpc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginRpcKeyAuthAsk

// optional sint32 DistId = 2 [default = -1];
inline bool LoginRpcKeyAuthAsk::has_distid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRpcKeyAuthAsk::set_has_distid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRpcKeyAuthAsk::clear_has_distid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRpcKeyAuthAsk::clear_distid() {
  distid_ = -1;
  clear_has_distid();
}
inline ::google::protobuf::int32 LoginRpcKeyAuthAsk::distid() const {
  // @@protoc_insertion_point(field_get:LoginRpcKeyAuthAsk.DistId)
  return distid_;
}
inline void LoginRpcKeyAuthAsk::set_distid(::google::protobuf::int32 value) {
  set_has_distid();
  distid_ = value;
  // @@protoc_insertion_point(field_set:LoginRpcKeyAuthAsk.DistId)
}

// optional string RsaData = 3;
inline bool LoginRpcKeyAuthAsk::has_rsadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRpcKeyAuthAsk::set_has_rsadata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRpcKeyAuthAsk::clear_has_rsadata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRpcKeyAuthAsk::clear_rsadata() {
  rsadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rsadata();
}
inline const ::std::string& LoginRpcKeyAuthAsk::rsadata() const {
  // @@protoc_insertion_point(field_get:LoginRpcKeyAuthAsk.RsaData)
  return rsadata_.GetNoArena();
}
inline void LoginRpcKeyAuthAsk::set_rsadata(const ::std::string& value) {
  set_has_rsadata();
  rsadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRpcKeyAuthAsk.RsaData)
}
#if LANG_CXX11
inline void LoginRpcKeyAuthAsk::set_rsadata(::std::string&& value) {
  set_has_rsadata();
  rsadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginRpcKeyAuthAsk.RsaData)
}
#endif
inline void LoginRpcKeyAuthAsk::set_rsadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rsadata();
  rsadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRpcKeyAuthAsk.RsaData)
}
inline void LoginRpcKeyAuthAsk::set_rsadata(const char* value, size_t size) {
  set_has_rsadata();
  rsadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRpcKeyAuthAsk.RsaData)
}
inline ::std::string* LoginRpcKeyAuthAsk::mutable_rsadata() {
  set_has_rsadata();
  // @@protoc_insertion_point(field_mutable:LoginRpcKeyAuthAsk.RsaData)
  return rsadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRpcKeyAuthAsk::release_rsadata() {
  // @@protoc_insertion_point(field_release:LoginRpcKeyAuthAsk.RsaData)
  clear_has_rsadata();
  return rsadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRpcKeyAuthAsk::set_allocated_rsadata(::std::string* rsadata) {
  if (rsadata != NULL) {
    set_has_rsadata();
  } else {
    clear_has_rsadata();
  }
  rsadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsadata);
  // @@protoc_insertion_point(field_set_allocated:LoginRpcKeyAuthAsk.RsaData)
}

// -------------------------------------------------------------------

// LoginRpcKeyAuthReply

// optional sint32 Result = 1 [default = -9999];
inline bool LoginRpcKeyAuthReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRpcKeyAuthReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRpcKeyAuthReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRpcKeyAuthReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 LoginRpcKeyAuthReply::result() const {
  // @@protoc_insertion_point(field_get:LoginRpcKeyAuthReply.Result)
  return result_;
}
inline void LoginRpcKeyAuthReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:LoginRpcKeyAuthReply.Result)
}

// optional sint64 UserId = 2 [default = -1];
inline bool LoginRpcKeyAuthReply::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginRpcKeyAuthReply::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginRpcKeyAuthReply::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginRpcKeyAuthReply::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 LoginRpcKeyAuthReply::userid() const {
  // @@protoc_insertion_point(field_get:LoginRpcKeyAuthReply.UserId)
  return userid_;
}
inline void LoginRpcKeyAuthReply::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:LoginRpcKeyAuthReply.UserId)
}

// optional string PlatName = 4;
inline bool LoginRpcKeyAuthReply::has_platname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRpcKeyAuthReply::set_has_platname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRpcKeyAuthReply::clear_has_platname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRpcKeyAuthReply::clear_platname() {
  platname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platname();
}
inline const ::std::string& LoginRpcKeyAuthReply::platname() const {
  // @@protoc_insertion_point(field_get:LoginRpcKeyAuthReply.PlatName)
  return platname_.GetNoArena();
}
inline void LoginRpcKeyAuthReply::set_platname(const ::std::string& value) {
  set_has_platname();
  platname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRpcKeyAuthReply.PlatName)
}
#if LANG_CXX11
inline void LoginRpcKeyAuthReply::set_platname(::std::string&& value) {
  set_has_platname();
  platname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginRpcKeyAuthReply.PlatName)
}
#endif
inline void LoginRpcKeyAuthReply::set_platname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_platname();
  platname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRpcKeyAuthReply.PlatName)
}
inline void LoginRpcKeyAuthReply::set_platname(const char* value, size_t size) {
  set_has_platname();
  platname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRpcKeyAuthReply.PlatName)
}
inline ::std::string* LoginRpcKeyAuthReply::mutable_platname() {
  set_has_platname();
  // @@protoc_insertion_point(field_mutable:LoginRpcKeyAuthReply.PlatName)
  return platname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRpcKeyAuthReply::release_platname() {
  // @@protoc_insertion_point(field_release:LoginRpcKeyAuthReply.PlatName)
  clear_has_platname();
  return platname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRpcKeyAuthReply::set_allocated_platname(::std::string* platname) {
  if (platname != NULL) {
    set_has_platname();
  } else {
    clear_has_platname();
  }
  platname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platname);
  // @@protoc_insertion_point(field_set_allocated:LoginRpcKeyAuthReply.PlatName)
}

// -------------------------------------------------------------------

// LoginRpcKickOffNotify

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LoginRpc_2eproto__INCLUDED
