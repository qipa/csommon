// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TeamRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TeamRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class TeamRpcCreateTeamAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcCreateTeamAsk>
     _instance;
} _TeamRpcCreateTeamAsk_default_instance_;
class TeamRpcCreateTeamReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcCreateTeamReply>
     _instance;
} _TeamRpcCreateTeamReply_default_instance_;
class TeamRpcApplyForTeamAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcApplyForTeamAsk>
     _instance;
} _TeamRpcApplyForTeamAsk_default_instance_;
class TeamRpcApplyForTeamReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcApplyForTeamReply>
     _instance;
} _TeamRpcApplyForTeamReply_default_instance_;
class TeamRpcInviteToTeamAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcInviteToTeamAsk>
     _instance;
} _TeamRpcInviteToTeamAsk_default_instance_;
class TeamRpcInviteToTeamReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcInviteToTeamReply>
     _instance;
} _TeamRpcInviteToTeamReply_default_instance_;
class TeamRpcChangeTeamTargetAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcChangeTeamTargetAsk>
     _instance;
} _TeamRpcChangeTeamTargetAsk_default_instance_;
class TeamRpcChangeTeamTargetReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcChangeTeamTargetReply>
     _instance;
} _TeamRpcChangeTeamTargetReply_default_instance_;
class TeamRpcBeInvitedNoticeNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcBeInvitedNoticeNotify>
     _instance;
} _TeamRpcBeInvitedNoticeNotify_default_instance_;
class TeamRpcBeInviteHandleAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcBeInviteHandleAsk>
     _instance;
} _TeamRpcBeInviteHandleAsk_default_instance_;
class TeamRpcBeInviteHandleReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcBeInviteHandleReply>
     _instance;
} _TeamRpcBeInviteHandleReply_default_instance_;
class TeamRpcNearbyTeamObjDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcNearbyTeamObj>
     _instance;
} _TeamRpcNearbyTeamObj_default_instance_;
class TeamRpcNearbyTeamAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcNearbyTeamAsk>
     _instance;
} _TeamRpcNearbyTeamAsk_default_instance_;
class TeamRpcNearbyTeamReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcNearbyTeamReply>
     _instance;
} _TeamRpcNearbyTeamReply_default_instance_;
class TeamRpcApplyNoticeCaptainNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcApplyNoticeCaptainNotify>
     _instance;
} _TeamRpcApplyNoticeCaptainNotify_default_instance_;
class TeamRpcApplyHandleAgreeAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcApplyHandleAgreeAsk>
     _instance;
} _TeamRpcApplyHandleAgreeAsk_default_instance_;
class TeamRpcApplyHandleAgreeReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcApplyHandleAgreeReply>
     _instance;
} _TeamRpcApplyHandleAgreeReply_default_instance_;
class TeamRpcUpdateMyTeamNoticeNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcUpdateMyTeamNoticeNotify>
     _instance;
} _TeamRpcUpdateMyTeamNoticeNotify_default_instance_;
class TeamRpcQuitTeamNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcQuitTeamNotify>
     _instance;
} _TeamRpcQuitTeamNotify_default_instance_;
class TeamRpcLeaveTeamNoticeNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcLeaveTeamNoticeNotify>
     _instance;
} _TeamRpcLeaveTeamNoticeNotify_default_instance_;
class TeamRpcBreakUpNoticeNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcBreakUpNoticeNotify>
     _instance;
} _TeamRpcBreakUpNoticeNotify_default_instance_;
class TeamRpcReqMyTeamDataNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcReqMyTeamDataNotify>
     _instance;
} _TeamRpcReqMyTeamDataNotify_default_instance_;
class TeamRpcDeleteFromApplyListNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcDeleteFromApplyListNotify>
     _instance;
} _TeamRpcDeleteFromApplyListNotify_default_instance_;
class TeamRpcAppointCaptainAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcAppointCaptainAsk>
     _instance;
} _TeamRpcAppointCaptainAsk_default_instance_;
class TeamRpcAppointCaptainReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcAppointCaptainReply>
     _instance;
} _TeamRpcAppointCaptainReply_default_instance_;
class TeamRpcCaptainChangeNoticeNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcCaptainChangeNoticeNotify>
     _instance;
} _TeamRpcCaptainChangeNoticeNotify_default_instance_;
class TeamRpcTeamMemberHPChangeNoticeNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcTeamMemberHPChangeNoticeNotify>
     _instance;
} _TeamRpcTeamMemberHPChangeNoticeNotify_default_instance_;
class TeamRpcInviteHandleNoticeNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcInviteHandleNoticeNotify>
     _instance;
} _TeamRpcInviteHandleNoticeNotify_default_instance_;
class TeamRpcNearbyRoleObjDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcNearbyRoleObj>
     _instance;
} _TeamRpcNearbyRoleObj_default_instance_;
class TeamRpcNearbyRoleListAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcNearbyRoleListAsk>
     _instance;
} _TeamRpcNearbyRoleListAsk_default_instance_;
class TeamRpcNearbyRoleListReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcNearbyRoleListReply>
     _instance;
} _TeamRpcNearbyRoleListReply_default_instance_;
class TeamRpcKickRoleAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcKickRoleAsk>
     _instance;
} _TeamRpcKickRoleAsk_default_instance_;
class TeamRpcKickRoleReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcKickRoleReply>
     _instance;
} _TeamRpcKickRoleReply_default_instance_;
class TeamRpcBeingKickedNoticeNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcBeingKickedNoticeNotify>
     _instance;
} _TeamRpcBeingKickedNoticeNotify_default_instance_;
class TeamRpcBreakUpAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcBreakUpAsk>
     _instance;
} _TeamRpcBreakUpAsk_default_instance_;
class TeamRpcBreakUpReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcBreakUpReply>
     _instance;
} _TeamRpcBreakUpReply_default_instance_;
class TeamRpcAddNewMemberNoticeNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcAddNewMemberNoticeNotify>
     _instance;
} _TeamRpcAddNewMemberNoticeNotify_default_instance_;
class TeamRpcCaptainAutoMatchAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcCaptainAutoMatchAsk>
     _instance;
} _TeamRpcCaptainAutoMatchAsk_default_instance_;
class TeamRpcCaptainAutoMatchReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcCaptainAutoMatchReply>
     _instance;
} _TeamRpcCaptainAutoMatchReply_default_instance_;
class TeamRpcNormalAutoMatchAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcNormalAutoMatchAsk>
     _instance;
} _TeamRpcNormalAutoMatchAsk_default_instance_;
class TeamRpcNormalAutoMatchReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcNormalAutoMatchReply>
     _instance;
} _TeamRpcNormalAutoMatchReply_default_instance_;
class TeamRpcFollowAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcFollowAsk>
     _instance;
} _TeamRpcFollowAsk_default_instance_;
class TeamRpcFollowReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcFollowReply>
     _instance;
} _TeamRpcFollowReply_default_instance_;
class TeamRpcClearApplyListAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcClearApplyListAsk>
     _instance;
} _TeamRpcClearApplyListAsk_default_instance_;
class TeamRpcClearApplyListReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamRpcClearApplyListReply>
     _instance;
} _TeamRpcClearApplyListReply_default_instance_;

namespace protobuf_TeamRpc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[45];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCreateTeamAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCreateTeamAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCreateTeamAsk, targetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCreateTeamAsk, targetminlv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCreateTeamAsk, targetmaxlv_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCreateTeamReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCreateTeamReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCreateTeamReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCreateTeamReply, teamdata_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyForTeamAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyForTeamAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyForTeamAsk, teamid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyForTeamReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyForTeamReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyForTeamReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyForTeamReply, teamid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcInviteToTeamAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcInviteToTeamAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcInviteToTeamAsk, userid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcInviteToTeamReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcInviteToTeamReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcInviteToTeamReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcInviteToTeamReply, userid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcChangeTeamTargetAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcChangeTeamTargetAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcChangeTeamTargetAsk, targetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcChangeTeamTargetAsk, targetminlv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcChangeTeamTargetAsk, targetmaxlv_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcChangeTeamTargetReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcChangeTeamTargetReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcChangeTeamTargetReply, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBeInvitedNoticeNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBeInvitedNoticeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBeInvitedNoticeNotify, teamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBeInvitedNoticeNotify, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBeInvitedNoticeNotify, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBeInvitedNoticeNotify, captainusername_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBeInviteHandleAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBeInviteHandleAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBeInviteHandleAsk, teamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBeInviteHandleAsk, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBeInviteHandleAsk, handle_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBeInviteHandleReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBeInviteHandleReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBeInviteHandleReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBeInviteHandleReply, teamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBeInviteHandleReply, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBeInviteHandleReply, handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBeInviteHandleReply, iscapatain_),
  2,
  3,
  4,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyTeamObj, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyTeamObj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyTeamObj, teamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyTeamObj, captainuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyTeamObj, captainusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyTeamObj, captainlevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyTeamObj, membercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyTeamObj, captainprof_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyTeamObj, teamtarget_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyTeamObj, targetminlv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyTeamObj, targetmaxlv_),
  3,
  2,
  0,
  4,
  5,
  6,
  7,
  8,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyTeamAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyTeamAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyTeamAsk, targetid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyTeamReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyTeamReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyTeamReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyTeamReply, teams_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyNoticeCaptainNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyNoticeCaptainNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyNoticeCaptainNotify, applyuser_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyHandleAgreeAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyHandleAgreeAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyHandleAgreeAsk, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyHandleAgreeAsk, teamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyHandleAgreeAsk, handle_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyHandleAgreeReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyHandleAgreeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyHandleAgreeReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyHandleAgreeReply, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyHandleAgreeReply, teamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcApplyHandleAgreeReply, handle_),
  2,
  1,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcUpdateMyTeamNoticeNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcUpdateMyTeamNoticeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcUpdateMyTeamNoticeNotify, myteamdata_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcQuitTeamNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcQuitTeamNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcLeaveTeamNoticeNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcLeaveTeamNoticeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcLeaveTeamNoticeNotify, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcLeaveTeamNoticeNotify, username_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBreakUpNoticeNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBreakUpNoticeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBreakUpNoticeNotify, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBreakUpNoticeNotify, username_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcReqMyTeamDataNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcReqMyTeamDataNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcDeleteFromApplyListNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcDeleteFromApplyListNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcDeleteFromApplyListNotify, userid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAppointCaptainAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAppointCaptainAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAppointCaptainAsk, userid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAppointCaptainReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAppointCaptainReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAppointCaptainReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAppointCaptainReply, userid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCaptainChangeNoticeNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCaptainChangeNoticeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCaptainChangeNoticeNotify, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCaptainChangeNoticeNotify, username_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcTeamMemberHPChangeNoticeNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcTeamMemberHPChangeNoticeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcTeamMemberHPChangeNoticeNotify, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcTeamMemberHPChangeNoticeNotify, hp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcTeamMemberHPChangeNoticeNotify, maxhp_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcInviteHandleNoticeNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcInviteHandleNoticeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcInviteHandleNoticeNotify, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyRoleObj, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyRoleObj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyRoleObj, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyRoleObj, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyRoleObj, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyRoleObj, prof_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyRoleListAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyRoleListAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyRoleListReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyRoleListReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyRoleListReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNearbyRoleListReply, nearbyrolelist_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcKickRoleAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcKickRoleAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcKickRoleAsk, userid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcKickRoleReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcKickRoleReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcKickRoleReply, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBeingKickedNoticeNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBeingKickedNoticeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBreakUpAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBreakUpAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBreakUpReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBreakUpReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcBreakUpReply, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAddNewMemberNoticeNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAddNewMemberNoticeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAddNewMemberNoticeNotify, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcAddNewMemberNoticeNotify, username_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCaptainAutoMatchAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCaptainAutoMatchAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCaptainAutoMatchAsk, oper_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCaptainAutoMatchReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCaptainAutoMatchReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcCaptainAutoMatchReply, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNormalAutoMatchAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNormalAutoMatchAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNormalAutoMatchAsk, oper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNormalAutoMatchAsk, target_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNormalAutoMatchReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNormalAutoMatchReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcNormalAutoMatchReply, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcFollowAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcFollowAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcFollowReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcFollowReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcFollowReply, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcClearApplyListAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcClearApplyListAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcClearApplyListReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcClearApplyListReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRpcClearApplyListReply, result_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(TeamRpcCreateTeamAsk)},
  { 11, 18, sizeof(TeamRpcCreateTeamReply)},
  { 20, 26, sizeof(TeamRpcApplyForTeamAsk)},
  { 27, 34, sizeof(TeamRpcApplyForTeamReply)},
  { 36, 42, sizeof(TeamRpcInviteToTeamAsk)},
  { 43, 50, sizeof(TeamRpcInviteToTeamReply)},
  { 52, 60, sizeof(TeamRpcChangeTeamTargetAsk)},
  { 63, 69, sizeof(TeamRpcChangeTeamTargetReply)},
  { 70, 79, sizeof(TeamRpcBeInvitedNoticeNotify)},
  { 83, 91, sizeof(TeamRpcBeInviteHandleAsk)},
  { 94, 104, sizeof(TeamRpcBeInviteHandleReply)},
  { 109, 123, sizeof(TeamRpcNearbyTeamObj)},
  { 132, 138, sizeof(TeamRpcNearbyTeamAsk)},
  { 139, 146, sizeof(TeamRpcNearbyTeamReply)},
  { 148, 154, sizeof(TeamRpcApplyNoticeCaptainNotify)},
  { 155, 163, sizeof(TeamRpcApplyHandleAgreeAsk)},
  { 166, 175, sizeof(TeamRpcApplyHandleAgreeReply)},
  { 179, 185, sizeof(TeamRpcUpdateMyTeamNoticeNotify)},
  { 186, 191, sizeof(TeamRpcQuitTeamNotify)},
  { 191, 198, sizeof(TeamRpcLeaveTeamNoticeNotify)},
  { 200, 207, sizeof(TeamRpcBreakUpNoticeNotify)},
  { 209, 214, sizeof(TeamRpcReqMyTeamDataNotify)},
  { 214, 220, sizeof(TeamRpcDeleteFromApplyListNotify)},
  { 221, 227, sizeof(TeamRpcAppointCaptainAsk)},
  { 228, 235, sizeof(TeamRpcAppointCaptainReply)},
  { 237, 244, sizeof(TeamRpcCaptainChangeNoticeNotify)},
  { 246, 254, sizeof(TeamRpcTeamMemberHPChangeNoticeNotify)},
  { 257, 263, sizeof(TeamRpcInviteHandleNoticeNotify)},
  { 264, 273, sizeof(TeamRpcNearbyRoleObj)},
  { 277, 282, sizeof(TeamRpcNearbyRoleListAsk)},
  { 282, 289, sizeof(TeamRpcNearbyRoleListReply)},
  { 291, 297, sizeof(TeamRpcKickRoleAsk)},
  { 298, 304, sizeof(TeamRpcKickRoleReply)},
  { 305, 310, sizeof(TeamRpcBeingKickedNoticeNotify)},
  { 310, 315, sizeof(TeamRpcBreakUpAsk)},
  { 315, 321, sizeof(TeamRpcBreakUpReply)},
  { 322, 329, sizeof(TeamRpcAddNewMemberNoticeNotify)},
  { 331, 337, sizeof(TeamRpcCaptainAutoMatchAsk)},
  { 338, 344, sizeof(TeamRpcCaptainAutoMatchReply)},
  { 345, 352, sizeof(TeamRpcNormalAutoMatchAsk)},
  { 354, 360, sizeof(TeamRpcNormalAutoMatchReply)},
  { 361, 366, sizeof(TeamRpcFollowAsk)},
  { 366, 372, sizeof(TeamRpcFollowReply)},
  { 373, 378, sizeof(TeamRpcClearApplyListAsk)},
  { 378, 384, sizeof(TeamRpcClearApplyListReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcCreateTeamAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcCreateTeamReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcApplyForTeamAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcApplyForTeamReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcInviteToTeamAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcInviteToTeamReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcChangeTeamTargetAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcChangeTeamTargetReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcBeInvitedNoticeNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcBeInviteHandleAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcBeInviteHandleReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcNearbyTeamObj_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcNearbyTeamAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcNearbyTeamReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcApplyNoticeCaptainNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcApplyHandleAgreeAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcApplyHandleAgreeReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcUpdateMyTeamNoticeNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcQuitTeamNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcLeaveTeamNoticeNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcBreakUpNoticeNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcReqMyTeamDataNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcDeleteFromApplyListNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcAppointCaptainAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcAppointCaptainReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcCaptainChangeNoticeNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcTeamMemberHPChangeNoticeNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcInviteHandleNoticeNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcNearbyRoleObj_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcNearbyRoleListAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcNearbyRoleListReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcKickRoleAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcKickRoleReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcBeingKickedNoticeNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcBreakUpAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcBreakUpReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcAddNewMemberNoticeNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcCaptainAutoMatchAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcCaptainAutoMatchReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcNormalAutoMatchAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcNormalAutoMatchReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcFollowAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcFollowReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcClearApplyListAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamRpcClearApplyListReply_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "TeamRpc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 45);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_PublicStruct_2eproto::InitDefaults();
  _TeamRpcCreateTeamAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcCreateTeamAsk_default_instance_);_TeamRpcCreateTeamReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcCreateTeamReply_default_instance_);_TeamRpcApplyForTeamAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcApplyForTeamAsk_default_instance_);_TeamRpcApplyForTeamReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcApplyForTeamReply_default_instance_);_TeamRpcInviteToTeamAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcInviteToTeamAsk_default_instance_);_TeamRpcInviteToTeamReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcInviteToTeamReply_default_instance_);_TeamRpcChangeTeamTargetAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcChangeTeamTargetAsk_default_instance_);_TeamRpcChangeTeamTargetReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcChangeTeamTargetReply_default_instance_);_TeamRpcBeInvitedNoticeNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcBeInvitedNoticeNotify_default_instance_);_TeamRpcBeInviteHandleAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcBeInviteHandleAsk_default_instance_);_TeamRpcBeInviteHandleReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcBeInviteHandleReply_default_instance_);_TeamRpcNearbyTeamObj_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcNearbyTeamObj_default_instance_);_TeamRpcNearbyTeamAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcNearbyTeamAsk_default_instance_);_TeamRpcNearbyTeamReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcNearbyTeamReply_default_instance_);_TeamRpcApplyNoticeCaptainNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcApplyNoticeCaptainNotify_default_instance_);_TeamRpcApplyHandleAgreeAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcApplyHandleAgreeAsk_default_instance_);_TeamRpcApplyHandleAgreeReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcApplyHandleAgreeReply_default_instance_);_TeamRpcUpdateMyTeamNoticeNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcUpdateMyTeamNoticeNotify_default_instance_);_TeamRpcQuitTeamNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcQuitTeamNotify_default_instance_);_TeamRpcLeaveTeamNoticeNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcLeaveTeamNoticeNotify_default_instance_);_TeamRpcBreakUpNoticeNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcBreakUpNoticeNotify_default_instance_);_TeamRpcReqMyTeamDataNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcReqMyTeamDataNotify_default_instance_);_TeamRpcDeleteFromApplyListNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcDeleteFromApplyListNotify_default_instance_);_TeamRpcAppointCaptainAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcAppointCaptainAsk_default_instance_);_TeamRpcAppointCaptainReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcAppointCaptainReply_default_instance_);_TeamRpcCaptainChangeNoticeNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcCaptainChangeNoticeNotify_default_instance_);_TeamRpcTeamMemberHPChangeNoticeNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcTeamMemberHPChangeNoticeNotify_default_instance_);_TeamRpcInviteHandleNoticeNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcInviteHandleNoticeNotify_default_instance_);_TeamRpcNearbyRoleObj_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcNearbyRoleObj_default_instance_);_TeamRpcNearbyRoleListAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcNearbyRoleListAsk_default_instance_);_TeamRpcNearbyRoleListReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcNearbyRoleListReply_default_instance_);_TeamRpcKickRoleAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcKickRoleAsk_default_instance_);_TeamRpcKickRoleReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcKickRoleReply_default_instance_);_TeamRpcBeingKickedNoticeNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcBeingKickedNoticeNotify_default_instance_);_TeamRpcBreakUpAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcBreakUpAsk_default_instance_);_TeamRpcBreakUpReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcBreakUpReply_default_instance_);_TeamRpcAddNewMemberNoticeNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcAddNewMemberNoticeNotify_default_instance_);_TeamRpcCaptainAutoMatchAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcCaptainAutoMatchAsk_default_instance_);_TeamRpcCaptainAutoMatchReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcCaptainAutoMatchReply_default_instance_);_TeamRpcNormalAutoMatchAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcNormalAutoMatchAsk_default_instance_);_TeamRpcNormalAutoMatchReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcNormalAutoMatchReply_default_instance_);_TeamRpcFollowAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcFollowAsk_default_instance_);_TeamRpcFollowReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcFollowReply_default_instance_);_TeamRpcClearApplyListAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcClearApplyListAsk_default_instance_);_TeamRpcClearApplyListReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamRpcClearApplyListReply_default_instance_);_TeamRpcCreateTeamReply_default_instance_._instance.get_mutable()->teamdata_ = const_cast< ::TeamObj*>(
      ::TeamObj::internal_default_instance());
  _TeamRpcApplyNoticeCaptainNotify_default_instance_._instance.get_mutable()->applyuser_ = const_cast< ::TeamApplyUserObj*>(
      ::TeamApplyUserObj::internal_default_instance());
  _TeamRpcUpdateMyTeamNoticeNotify_default_instance_._instance.get_mutable()->myteamdata_ = const_cast< ::TeamObj*>(
      ::TeamObj::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rTeamRpc.proto\032\022PublicStruct.proto\"^\n\024T"
      "eamRpcCreateTeamAsk\022\024\n\010TargetId\030\001 \001(\021:\002-"
      "1\022\027\n\013TargetMinLv\030\002 \001(\021:\002-1\022\027\n\013TargetMaxL"
      "v\030\003 \001(\021:\002-1\"K\n\026TeamRpcCreateTeamReply\022\025\n"
      "\006Result\030\001 \001(\021:\005-9999\022\032\n\010TeamData\030\002 \001(\0132\010"
      ".TeamObj\",\n\026TeamRpcApplyForTeamAsk\022\022\n\006Te"
      "amId\030\001 \001(\021:\002-1\"E\n\030TeamRpcApplyForTeamRep"
      "ly\022\025\n\006Result\030\001 \001(\021:\005-9999\022\022\n\006TeamId\030\002 \001("
      "\021:\002-1\",\n\026TeamRpcInviteToTeamAsk\022\022\n\006UserI"
      "d\030\001 \001(\022:\002-1\"E\n\030TeamRpcInviteToTeamReply\022"
      "\025\n\006Result\030\001 \001(\021:\005-9999\022\022\n\006UserId\030\002 \001(\022:\002"
      "-1\"d\n\032TeamRpcChangeTeamTargetAsk\022\024\n\010Targ"
      "etId\030\001 \001(\021:\002-1\022\027\n\013TargetMinLv\030\003 \001(\021:\002-1\022"
      "\027\n\013TargetMaxLv\030\004 \001(\021:\002-1\"5\n\034TeamRpcChang"
      "eTeamTargetReply\022\025\n\006Result\030\001 \001(\021:\005-9999\""
      "q\n\034TeamRpcBeInvitedNoticeNotify\022\022\n\006TeamI"
      "d\030\001 \001(\021:\002-1\022\022\n\006UserId\030\002 \001(\022:\002-1\022\020\n\010UserN"
      "ame\030\003 \001(\t\022\027\n\017CaptainUserName\030\004 \001(\t\"V\n\030Te"
      "amRpcBeInviteHandleAsk\022\022\n\006TeamId\030\002 \001(\021:\002"
      "-1\022\022\n\006UserId\030\003 \001(\022:\002-1\022\022\n\006Handle\030\004 \001(\021:\002"
      "-1\"\212\001\n\032TeamRpcBeInviteHandleReply\022\025\n\006Res"
      "ult\030\001 \001(\021:\005-9999\022\022\n\006TeamId\030\002 \001(\021:\002-1\022\022\n\006"
      "UserId\030\003 \001(\022:\002-1\022\022\n\006Handle\030\004 \001(\021:\002-1\022\031\n\n"
      "IsCapatain\030\005 \001(\010:\005false\"\364\001\n\024TeamRpcNearb"
      "yTeamObj\022\022\n\006TeamId\030\002 \001(\021:\002-1\022\031\n\rCaptainU"
      "serId\030\003 \001(\022:\002-1\022\027\n\017CaptainUserName\030\004 \001(\t"
      "\022\030\n\014CaptainLevel\030\006 \001(\021:\002-1\022\027\n\013MemberCoun"
      "t\030\007 \001(\021:\002-1\022\027\n\013CaptainProf\030\010 \001(\021:\002-1\022\026\n\n"
      "TeamTarget\030\t \001(\021:\002-1\022\027\n\013TargetMinLv\030\n \001("
      "\021:\002-1\022\027\n\013TargetMaxLv\030\013 \001(\021:\002-1\",\n\024TeamRp"
      "cNearbyTeamAsk\022\024\n\010TargetId\030\001 \001(\021:\002-1\"U\n\026"
      "TeamRpcNearbyTeamReply\022\025\n\006Result\030\001 \001(\021:\005"
      "-9999\022$\n\005Teams\030\002 \003(\0132\025.TeamRpcNearbyTeam"
      "Obj\"G\n\037TeamRpcApplyNoticeCaptainNotify\022$"
      "\n\tApplyUser\030\005 \001(\0132\021.TeamApplyUserObj\"X\n\032"
      "TeamRpcApplyHandleAgreeAsk\022\022\n\006UserId\030\002 \001"
      "(\022:\002-1\022\022\n\006TeamId\030\003 \001(\021:\002-1\022\022\n\006Handle\030\004 \001"
      "(\021:\002-1\"q\n\034TeamRpcApplyHandleAgreeReply\022\025"
      "\n\006Result\030\001 \001(\021:\005-9999\022\022\n\006UserId\030\002 \001(\022:\002-"
      "1\022\022\n\006TeamId\030\003 \001(\021:\002-1\022\022\n\006Handle\030\004 \001(\021:\002-"
      "1\"\?\n\037TeamRpcUpdateMyTeamNoticeNotify\022\034\n\n"
      "MyTeamData\030\001 \001(\0132\010.TeamObj\"\027\n\025TeamRpcQui"
      "tTeamNotify\"D\n\034TeamRpcLeaveTeamNoticeNot"
      "ify\022\022\n\006UserId\030\002 \001(\021:\002-1\022\020\n\010UserName\030\003 \001("
      "\t\"B\n\032TeamRpcBreakUpNoticeNotify\022\022\n\006UserI"
      "d\030\001 \001(\022:\002-1\022\020\n\010UserName\030\002 \001(\t\"\034\n\032TeamRpc"
      "ReqMyTeamDataNotify\"6\n TeamRpcDeleteFrom"
      "ApplyListNotify\022\022\n\006UserId\030\002 \001(\022:\002-1\".\n\030T"
      "eamRpcAppointCaptainAsk\022\022\n\006UserId\030\001 \001(\022:"
      "\002-1\"G\n\032TeamRpcAppointCaptainReply\022\025\n\006Res"
      "ult\030\001 \001(\021:\005-9999\022\022\n\006UserId\030\004 \001(\022:\002-1\"H\n "
      "TeamRpcCaptainChangeNoticeNotify\022\022\n\006User"
      "Id\030\001 \001(\022:\002-1\022\020\n\010UserName\030\002 \001(\t\"^\n%TeamRp"
      "cTeamMemberHPChangeNoticeNotify\022\022\n\006UserI"
      "d\030\001 \001(\022:\002-1\022\016\n\002HP\030\002 \001(\021:\002-1\022\021\n\005MaxHP\030\003 \001"
      "(\021:\002-1\"4\n\037TeamRpcInviteHandleNoticeNotif"
      "y\022\021\n\006Result\030\002 \001(\021:\0010\"a\n\024TeamRpcNearbyRol"
      "eObj\022\022\n\006UserId\030\002 \001(\022:\002-1\022\020\n\010UserName\030\003 \001"
      "(\t\022\021\n\005Level\030\004 \001(\021:\002-1\022\020\n\004Prof\030\005 \001(\021:\002-1\""
      "\032\n\030TeamRpcNearbyRoleListAsk\"b\n\032TeamRpcNe"
      "arbyRoleListReply\022\025\n\006Result\030\001 \001(\021:\005-9999"
      "\022-\n\016NearbyRoleList\030\002 \003(\0132\025.TeamRpcNearby"
      "RoleObj\"(\n\022TeamRpcKickRoleAsk\022\022\n\006UserId\030"
      "\001 \001(\022:\002-1\"-\n\024TeamRpcKickRoleReply\022\025\n\006Res"
      "ult\030\001 \001(\021:\005-9999\" \n\036TeamRpcBeingKickedNo"
      "ticeNotify\"\023\n\021TeamRpcBreakUpAsk\",\n\023TeamR"
      "pcBreakUpReply\022\025\n\006Result\030\001 \001(\021:\005-9999\"G\n"
      "\037TeamRpcAddNewMemberNoticeNotify\022\022\n\006User"
      "Id\030\001 \001(\022:\002-1\022\020\n\010UserName\030\002 \001(\t\".\n\032TeamRp"
      "cCaptainAutoMatchAsk\022\020\n\004Oper\030\001 \001(\021:\002-1\"5"
      "\n\034TeamRpcCaptainAutoMatchReply\022\025\n\006Result"
      "\030\001 \001(\021:\005-9999\"A\n\031TeamRpcNormalAutoMatchA"
      "sk\022\020\n\004Oper\030\001 \001(\021:\002-1\022\022\n\006Target\030\002 \001(\021:\002-1"
      "\"4\n\033TeamRpcNormalAutoMatchReply\022\025\n\006Resul"
      "t\030\001 \001(\021:\005-9999\"\022\n\020TeamRpcFollowAsk\"+\n\022Te"
      "amRpcFollowReply\022\025\n\006Result\030\001 \001(\021:\005-9999\""
      "\032\n\030TeamRpcClearApplyListAsk\"3\n\032TeamRpcCl"
      "earApplyListReply\022\025\n\006Result\030\001 \001(\021:\005-9999"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3120);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TeamRpc.proto", &protobuf_RegisterTypes);
  ::protobuf_PublicStruct_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_TeamRpc_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcCreateTeamAsk::kTargetIdFieldNumber;
const int TeamRpcCreateTeamAsk::kTargetMinLvFieldNumber;
const int TeamRpcCreateTeamAsk::kTargetMaxLvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcCreateTeamAsk::TeamRpcCreateTeamAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcCreateTeamAsk)
}
TeamRpcCreateTeamAsk::TeamRpcCreateTeamAsk(const TeamRpcCreateTeamAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&targetmaxlv_, &from.targetmaxlv_,
    static_cast<size_t>(reinterpret_cast<char*>(&targetminlv_) -
    reinterpret_cast<char*>(&targetmaxlv_)) + sizeof(targetminlv_));
  // @@protoc_insertion_point(copy_constructor:TeamRpcCreateTeamAsk)
}

void TeamRpcCreateTeamAsk::SharedCtor() {
  _cached_size_ = 0;
  targetmaxlv_ = -1;
  targetid_ = -1;
  targetminlv_ = -1;
}

TeamRpcCreateTeamAsk::~TeamRpcCreateTeamAsk() {
  // @@protoc_insertion_point(destructor:TeamRpcCreateTeamAsk)
  SharedDtor();
}

void TeamRpcCreateTeamAsk::SharedDtor() {
}

void TeamRpcCreateTeamAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcCreateTeamAsk::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcCreateTeamAsk& TeamRpcCreateTeamAsk::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcCreateTeamAsk* TeamRpcCreateTeamAsk::New(::google::protobuf::Arena* arena) const {
  TeamRpcCreateTeamAsk* n = new TeamRpcCreateTeamAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcCreateTeamAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcCreateTeamAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    targetmaxlv_ = -1;
    targetid_ = -1;
    targetminlv_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcCreateTeamAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcCreateTeamAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TargetId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_targetid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &targetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TargetMinLv = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_targetminlv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &targetminlv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TargetMaxLv = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_targetmaxlv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &targetmaxlv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcCreateTeamAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcCreateTeamAsk)
  return false;
#undef DO_
}

void TeamRpcCreateTeamAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcCreateTeamAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TargetId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->targetid(), output);
  }

  // optional sint32 TargetMinLv = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->targetminlv(), output);
  }

  // optional sint32 TargetMaxLv = 3 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->targetmaxlv(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcCreateTeamAsk)
}

::google::protobuf::uint8* TeamRpcCreateTeamAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcCreateTeamAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TargetId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->targetid(), target);
  }

  // optional sint32 TargetMinLv = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->targetminlv(), target);
  }

  // optional sint32 TargetMaxLv = 3 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->targetmaxlv(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcCreateTeamAsk)
  return target;
}

size_t TeamRpcCreateTeamAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcCreateTeamAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional sint32 TargetMaxLv = 3 [default = -1];
    if (has_targetmaxlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->targetmaxlv());
    }

    // optional sint32 TargetId = 1 [default = -1];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->targetid());
    }

    // optional sint32 TargetMinLv = 2 [default = -1];
    if (has_targetminlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->targetminlv());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcCreateTeamAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcCreateTeamAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcCreateTeamAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcCreateTeamAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcCreateTeamAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcCreateTeamAsk)
    MergeFrom(*source);
  }
}

void TeamRpcCreateTeamAsk::MergeFrom(const TeamRpcCreateTeamAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcCreateTeamAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      targetmaxlv_ = from.targetmaxlv_;
    }
    if (cached_has_bits & 0x00000002u) {
      targetid_ = from.targetid_;
    }
    if (cached_has_bits & 0x00000004u) {
      targetminlv_ = from.targetminlv_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamRpcCreateTeamAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcCreateTeamAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcCreateTeamAsk::CopyFrom(const TeamRpcCreateTeamAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcCreateTeamAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcCreateTeamAsk::IsInitialized() const {
  return true;
}

void TeamRpcCreateTeamAsk::Swap(TeamRpcCreateTeamAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcCreateTeamAsk::InternalSwap(TeamRpcCreateTeamAsk* other) {
  using std::swap;
  swap(targetmaxlv_, other->targetmaxlv_);
  swap(targetid_, other->targetid_);
  swap(targetminlv_, other->targetminlv_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcCreateTeamAsk::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcCreateTeamAsk

// optional sint32 TargetId = 1 [default = -1];
bool TeamRpcCreateTeamAsk::has_targetid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamRpcCreateTeamAsk::set_has_targetid() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamRpcCreateTeamAsk::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamRpcCreateTeamAsk::clear_targetid() {
  targetid_ = -1;
  clear_has_targetid();
}
::google::protobuf::int32 TeamRpcCreateTeamAsk::targetid() const {
  // @@protoc_insertion_point(field_get:TeamRpcCreateTeamAsk.TargetId)
  return targetid_;
}
void TeamRpcCreateTeamAsk::set_targetid(::google::protobuf::int32 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcCreateTeamAsk.TargetId)
}

// optional sint32 TargetMinLv = 2 [default = -1];
bool TeamRpcCreateTeamAsk::has_targetminlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TeamRpcCreateTeamAsk::set_has_targetminlv() {
  _has_bits_[0] |= 0x00000004u;
}
void TeamRpcCreateTeamAsk::clear_has_targetminlv() {
  _has_bits_[0] &= ~0x00000004u;
}
void TeamRpcCreateTeamAsk::clear_targetminlv() {
  targetminlv_ = -1;
  clear_has_targetminlv();
}
::google::protobuf::int32 TeamRpcCreateTeamAsk::targetminlv() const {
  // @@protoc_insertion_point(field_get:TeamRpcCreateTeamAsk.TargetMinLv)
  return targetminlv_;
}
void TeamRpcCreateTeamAsk::set_targetminlv(::google::protobuf::int32 value) {
  set_has_targetminlv();
  targetminlv_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcCreateTeamAsk.TargetMinLv)
}

// optional sint32 TargetMaxLv = 3 [default = -1];
bool TeamRpcCreateTeamAsk::has_targetmaxlv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcCreateTeamAsk::set_has_targetmaxlv() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcCreateTeamAsk::clear_has_targetmaxlv() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcCreateTeamAsk::clear_targetmaxlv() {
  targetmaxlv_ = -1;
  clear_has_targetmaxlv();
}
::google::protobuf::int32 TeamRpcCreateTeamAsk::targetmaxlv() const {
  // @@protoc_insertion_point(field_get:TeamRpcCreateTeamAsk.TargetMaxLv)
  return targetmaxlv_;
}
void TeamRpcCreateTeamAsk::set_targetmaxlv(::google::protobuf::int32 value) {
  set_has_targetmaxlv();
  targetmaxlv_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcCreateTeamAsk.TargetMaxLv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcCreateTeamReply::kResultFieldNumber;
const int TeamRpcCreateTeamReply::kTeamDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcCreateTeamReply::TeamRpcCreateTeamReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcCreateTeamReply)
}
TeamRpcCreateTeamReply::TeamRpcCreateTeamReply(const TeamRpcCreateTeamReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_teamdata()) {
    teamdata_ = new ::TeamObj(*from.teamdata_);
  } else {
    teamdata_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcCreateTeamReply)
}

void TeamRpcCreateTeamReply::SharedCtor() {
  _cached_size_ = 0;
  teamdata_ = NULL;
  result_ = -9999;
}

TeamRpcCreateTeamReply::~TeamRpcCreateTeamReply() {
  // @@protoc_insertion_point(destructor:TeamRpcCreateTeamReply)
  SharedDtor();
}

void TeamRpcCreateTeamReply::SharedDtor() {
  if (this != internal_default_instance()) delete teamdata_;
}

void TeamRpcCreateTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcCreateTeamReply::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcCreateTeamReply& TeamRpcCreateTeamReply::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcCreateTeamReply* TeamRpcCreateTeamReply::New(::google::protobuf::Arena* arena) const {
  TeamRpcCreateTeamReply* n = new TeamRpcCreateTeamReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcCreateTeamReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcCreateTeamReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(teamdata_ != NULL);
      teamdata_->::TeamObj::Clear();
    }
    result_ = -9999;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcCreateTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcCreateTeamReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TeamObj TeamData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teamdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcCreateTeamReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcCreateTeamReply)
  return false;
#undef DO_
}

void TeamRpcCreateTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcCreateTeamReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional .TeamObj TeamData = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->teamdata_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcCreateTeamReply)
}

::google::protobuf::uint8* TeamRpcCreateTeamReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcCreateTeamReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional .TeamObj TeamData = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->teamdata_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcCreateTeamReply)
  return target;
}

size_t TeamRpcCreateTeamReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcCreateTeamReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .TeamObj TeamData = 2;
    if (has_teamdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->teamdata_);
    }

    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcCreateTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcCreateTeamReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcCreateTeamReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcCreateTeamReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcCreateTeamReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcCreateTeamReply)
    MergeFrom(*source);
  }
}

void TeamRpcCreateTeamReply::MergeFrom(const TeamRpcCreateTeamReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcCreateTeamReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_teamdata()->::TeamObj::MergeFrom(from.teamdata());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamRpcCreateTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcCreateTeamReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcCreateTeamReply::CopyFrom(const TeamRpcCreateTeamReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcCreateTeamReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcCreateTeamReply::IsInitialized() const {
  return true;
}

void TeamRpcCreateTeamReply::Swap(TeamRpcCreateTeamReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcCreateTeamReply::InternalSwap(TeamRpcCreateTeamReply* other) {
  using std::swap;
  swap(teamdata_, other->teamdata_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcCreateTeamReply::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcCreateTeamReply

// optional sint32 Result = 1 [default = -9999];
bool TeamRpcCreateTeamReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamRpcCreateTeamReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamRpcCreateTeamReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamRpcCreateTeamReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TeamRpcCreateTeamReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcCreateTeamReply.Result)
  return result_;
}
void TeamRpcCreateTeamReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcCreateTeamReply.Result)
}

// optional .TeamObj TeamData = 2;
bool TeamRpcCreateTeamReply::has_teamdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcCreateTeamReply::set_has_teamdata() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcCreateTeamReply::clear_has_teamdata() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcCreateTeamReply::clear_teamdata() {
  if (teamdata_ != NULL) teamdata_->::TeamObj::Clear();
  clear_has_teamdata();
}
const ::TeamObj& TeamRpcCreateTeamReply::teamdata() const {
  const ::TeamObj* p = teamdata_;
  // @@protoc_insertion_point(field_get:TeamRpcCreateTeamReply.TeamData)
  return p != NULL ? *p : *reinterpret_cast<const ::TeamObj*>(
      &::_TeamObj_default_instance_);
}
::TeamObj* TeamRpcCreateTeamReply::mutable_teamdata() {
  set_has_teamdata();
  if (teamdata_ == NULL) {
    teamdata_ = new ::TeamObj;
  }
  // @@protoc_insertion_point(field_mutable:TeamRpcCreateTeamReply.TeamData)
  return teamdata_;
}
::TeamObj* TeamRpcCreateTeamReply::release_teamdata() {
  // @@protoc_insertion_point(field_release:TeamRpcCreateTeamReply.TeamData)
  clear_has_teamdata();
  ::TeamObj* temp = teamdata_;
  teamdata_ = NULL;
  return temp;
}
void TeamRpcCreateTeamReply::set_allocated_teamdata(::TeamObj* teamdata) {
  delete teamdata_;
  teamdata_ = teamdata;
  if (teamdata) {
    set_has_teamdata();
  } else {
    clear_has_teamdata();
  }
  // @@protoc_insertion_point(field_set_allocated:TeamRpcCreateTeamReply.TeamData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcApplyForTeamAsk::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcApplyForTeamAsk::TeamRpcApplyForTeamAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcApplyForTeamAsk)
}
TeamRpcApplyForTeamAsk::TeamRpcApplyForTeamAsk(const TeamRpcApplyForTeamAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  teamid_ = from.teamid_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcApplyForTeamAsk)
}

void TeamRpcApplyForTeamAsk::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = -1;
}

TeamRpcApplyForTeamAsk::~TeamRpcApplyForTeamAsk() {
  // @@protoc_insertion_point(destructor:TeamRpcApplyForTeamAsk)
  SharedDtor();
}

void TeamRpcApplyForTeamAsk::SharedDtor() {
}

void TeamRpcApplyForTeamAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcApplyForTeamAsk::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcApplyForTeamAsk& TeamRpcApplyForTeamAsk::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcApplyForTeamAsk* TeamRpcApplyForTeamAsk::New(::google::protobuf::Arena* arena) const {
  TeamRpcApplyForTeamAsk* n = new TeamRpcApplyForTeamAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcApplyForTeamAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcApplyForTeamAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teamid_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcApplyForTeamAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcApplyForTeamAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TeamId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_teamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcApplyForTeamAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcApplyForTeamAsk)
  return false;
#undef DO_
}

void TeamRpcApplyForTeamAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcApplyForTeamAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TeamId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->teamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcApplyForTeamAsk)
}

::google::protobuf::uint8* TeamRpcApplyForTeamAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcApplyForTeamAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TeamId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->teamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcApplyForTeamAsk)
  return target;
}

size_t TeamRpcApplyForTeamAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcApplyForTeamAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 TeamId = 1 [default = -1];
  if (has_teamid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->teamid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcApplyForTeamAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcApplyForTeamAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcApplyForTeamAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcApplyForTeamAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcApplyForTeamAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcApplyForTeamAsk)
    MergeFrom(*source);
  }
}

void TeamRpcApplyForTeamAsk::MergeFrom(const TeamRpcApplyForTeamAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcApplyForTeamAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_teamid()) {
    set_teamid(from.teamid());
  }
}

void TeamRpcApplyForTeamAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcApplyForTeamAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcApplyForTeamAsk::CopyFrom(const TeamRpcApplyForTeamAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcApplyForTeamAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcApplyForTeamAsk::IsInitialized() const {
  return true;
}

void TeamRpcApplyForTeamAsk::Swap(TeamRpcApplyForTeamAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcApplyForTeamAsk::InternalSwap(TeamRpcApplyForTeamAsk* other) {
  using std::swap;
  swap(teamid_, other->teamid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcApplyForTeamAsk::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcApplyForTeamAsk

// optional sint32 TeamId = 1 [default = -1];
bool TeamRpcApplyForTeamAsk::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcApplyForTeamAsk::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcApplyForTeamAsk::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcApplyForTeamAsk::clear_teamid() {
  teamid_ = -1;
  clear_has_teamid();
}
::google::protobuf::int32 TeamRpcApplyForTeamAsk::teamid() const {
  // @@protoc_insertion_point(field_get:TeamRpcApplyForTeamAsk.TeamId)
  return teamid_;
}
void TeamRpcApplyForTeamAsk::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcApplyForTeamAsk.TeamId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcApplyForTeamReply::kResultFieldNumber;
const int TeamRpcApplyForTeamReply::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcApplyForTeamReply::TeamRpcApplyForTeamReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcApplyForTeamReply)
}
TeamRpcApplyForTeamReply::TeamRpcApplyForTeamReply(const TeamRpcApplyForTeamReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&teamid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(teamid_));
  // @@protoc_insertion_point(copy_constructor:TeamRpcApplyForTeamReply)
}

void TeamRpcApplyForTeamReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  teamid_ = -1;
}

TeamRpcApplyForTeamReply::~TeamRpcApplyForTeamReply() {
  // @@protoc_insertion_point(destructor:TeamRpcApplyForTeamReply)
  SharedDtor();
}

void TeamRpcApplyForTeamReply::SharedDtor() {
}

void TeamRpcApplyForTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcApplyForTeamReply::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcApplyForTeamReply& TeamRpcApplyForTeamReply::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcApplyForTeamReply* TeamRpcApplyForTeamReply::New(::google::protobuf::Arena* arena) const {
  TeamRpcApplyForTeamReply* n = new TeamRpcApplyForTeamReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcApplyForTeamReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcApplyForTeamReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    result_ = -9999;
    teamid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcApplyForTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcApplyForTeamReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TeamId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_teamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcApplyForTeamReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcApplyForTeamReply)
  return false;
#undef DO_
}

void TeamRpcApplyForTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcApplyForTeamReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 TeamId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->teamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcApplyForTeamReply)
}

::google::protobuf::uint8* TeamRpcApplyForTeamReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcApplyForTeamReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 TeamId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->teamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcApplyForTeamReply)
  return target;
}

size_t TeamRpcApplyForTeamReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcApplyForTeamReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 TeamId = 2 [default = -1];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teamid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcApplyForTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcApplyForTeamReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcApplyForTeamReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcApplyForTeamReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcApplyForTeamReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcApplyForTeamReply)
    MergeFrom(*source);
  }
}

void TeamRpcApplyForTeamReply::MergeFrom(const TeamRpcApplyForTeamReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcApplyForTeamReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      teamid_ = from.teamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamRpcApplyForTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcApplyForTeamReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcApplyForTeamReply::CopyFrom(const TeamRpcApplyForTeamReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcApplyForTeamReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcApplyForTeamReply::IsInitialized() const {
  return true;
}

void TeamRpcApplyForTeamReply::Swap(TeamRpcApplyForTeamReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcApplyForTeamReply::InternalSwap(TeamRpcApplyForTeamReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(teamid_, other->teamid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcApplyForTeamReply::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcApplyForTeamReply

// optional sint32 Result = 1 [default = -9999];
bool TeamRpcApplyForTeamReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcApplyForTeamReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcApplyForTeamReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcApplyForTeamReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TeamRpcApplyForTeamReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcApplyForTeamReply.Result)
  return result_;
}
void TeamRpcApplyForTeamReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcApplyForTeamReply.Result)
}

// optional sint32 TeamId = 2 [default = -1];
bool TeamRpcApplyForTeamReply::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamRpcApplyForTeamReply::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamRpcApplyForTeamReply::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamRpcApplyForTeamReply::clear_teamid() {
  teamid_ = -1;
  clear_has_teamid();
}
::google::protobuf::int32 TeamRpcApplyForTeamReply::teamid() const {
  // @@protoc_insertion_point(field_get:TeamRpcApplyForTeamReply.TeamId)
  return teamid_;
}
void TeamRpcApplyForTeamReply::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcApplyForTeamReply.TeamId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcInviteToTeamAsk::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcInviteToTeamAsk::TeamRpcInviteToTeamAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcInviteToTeamAsk)
}
TeamRpcInviteToTeamAsk::TeamRpcInviteToTeamAsk(const TeamRpcInviteToTeamAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcInviteToTeamAsk)
}

void TeamRpcInviteToTeamAsk::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(-1);
}

TeamRpcInviteToTeamAsk::~TeamRpcInviteToTeamAsk() {
  // @@protoc_insertion_point(destructor:TeamRpcInviteToTeamAsk)
  SharedDtor();
}

void TeamRpcInviteToTeamAsk::SharedDtor() {
}

void TeamRpcInviteToTeamAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcInviteToTeamAsk::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcInviteToTeamAsk& TeamRpcInviteToTeamAsk::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcInviteToTeamAsk* TeamRpcInviteToTeamAsk::New(::google::protobuf::Arena* arena) const {
  TeamRpcInviteToTeamAsk* n = new TeamRpcInviteToTeamAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcInviteToTeamAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcInviteToTeamAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = GOOGLE_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcInviteToTeamAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcInviteToTeamAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcInviteToTeamAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcInviteToTeamAsk)
  return false;
#undef DO_
}

void TeamRpcInviteToTeamAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcInviteToTeamAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcInviteToTeamAsk)
}

::google::protobuf::uint8* TeamRpcInviteToTeamAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcInviteToTeamAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcInviteToTeamAsk)
  return target;
}

size_t TeamRpcInviteToTeamAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcInviteToTeamAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint64 UserId = 1 [default = -1];
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcInviteToTeamAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcInviteToTeamAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcInviteToTeamAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcInviteToTeamAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcInviteToTeamAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcInviteToTeamAsk)
    MergeFrom(*source);
  }
}

void TeamRpcInviteToTeamAsk::MergeFrom(const TeamRpcInviteToTeamAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcInviteToTeamAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_userid()) {
    set_userid(from.userid());
  }
}

void TeamRpcInviteToTeamAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcInviteToTeamAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcInviteToTeamAsk::CopyFrom(const TeamRpcInviteToTeamAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcInviteToTeamAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcInviteToTeamAsk::IsInitialized() const {
  return true;
}

void TeamRpcInviteToTeamAsk::Swap(TeamRpcInviteToTeamAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcInviteToTeamAsk::InternalSwap(TeamRpcInviteToTeamAsk* other) {
  using std::swap;
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcInviteToTeamAsk::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcInviteToTeamAsk

// optional sint64 UserId = 1 [default = -1];
bool TeamRpcInviteToTeamAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcInviteToTeamAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcInviteToTeamAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcInviteToTeamAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 TeamRpcInviteToTeamAsk::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcInviteToTeamAsk.UserId)
  return userid_;
}
void TeamRpcInviteToTeamAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcInviteToTeamAsk.UserId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcInviteToTeamReply::kResultFieldNumber;
const int TeamRpcInviteToTeamReply::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcInviteToTeamReply::TeamRpcInviteToTeamReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcInviteToTeamReply)
}
TeamRpcInviteToTeamReply::TeamRpcInviteToTeamReply(const TeamRpcInviteToTeamReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:TeamRpcInviteToTeamReply)
}

void TeamRpcInviteToTeamReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  userid_ = GOOGLE_LONGLONG(-1);
}

TeamRpcInviteToTeamReply::~TeamRpcInviteToTeamReply() {
  // @@protoc_insertion_point(destructor:TeamRpcInviteToTeamReply)
  SharedDtor();
}

void TeamRpcInviteToTeamReply::SharedDtor() {
}

void TeamRpcInviteToTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcInviteToTeamReply::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcInviteToTeamReply& TeamRpcInviteToTeamReply::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcInviteToTeamReply* TeamRpcInviteToTeamReply::New(::google::protobuf::Arena* arena) const {
  TeamRpcInviteToTeamReply* n = new TeamRpcInviteToTeamReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcInviteToTeamReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcInviteToTeamReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    result_ = -9999;
    userid_ = GOOGLE_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcInviteToTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcInviteToTeamReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 UserId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcInviteToTeamReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcInviteToTeamReply)
  return false;
#undef DO_
}

void TeamRpcInviteToTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcInviteToTeamReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcInviteToTeamReply)
}

::google::protobuf::uint8* TeamRpcInviteToTeamReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcInviteToTeamReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcInviteToTeamReply)
  return target;
}

size_t TeamRpcInviteToTeamReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcInviteToTeamReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint64 UserId = 2 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcInviteToTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcInviteToTeamReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcInviteToTeamReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcInviteToTeamReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcInviteToTeamReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcInviteToTeamReply)
    MergeFrom(*source);
  }
}

void TeamRpcInviteToTeamReply::MergeFrom(const TeamRpcInviteToTeamReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcInviteToTeamReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamRpcInviteToTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcInviteToTeamReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcInviteToTeamReply::CopyFrom(const TeamRpcInviteToTeamReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcInviteToTeamReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcInviteToTeamReply::IsInitialized() const {
  return true;
}

void TeamRpcInviteToTeamReply::Swap(TeamRpcInviteToTeamReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcInviteToTeamReply::InternalSwap(TeamRpcInviteToTeamReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcInviteToTeamReply::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcInviteToTeamReply

// optional sint32 Result = 1 [default = -9999];
bool TeamRpcInviteToTeamReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcInviteToTeamReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcInviteToTeamReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcInviteToTeamReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TeamRpcInviteToTeamReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcInviteToTeamReply.Result)
  return result_;
}
void TeamRpcInviteToTeamReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcInviteToTeamReply.Result)
}

// optional sint64 UserId = 2 [default = -1];
bool TeamRpcInviteToTeamReply::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamRpcInviteToTeamReply::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamRpcInviteToTeamReply::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamRpcInviteToTeamReply::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 TeamRpcInviteToTeamReply::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcInviteToTeamReply.UserId)
  return userid_;
}
void TeamRpcInviteToTeamReply::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcInviteToTeamReply.UserId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcChangeTeamTargetAsk::kTargetIdFieldNumber;
const int TeamRpcChangeTeamTargetAsk::kTargetMinLvFieldNumber;
const int TeamRpcChangeTeamTargetAsk::kTargetMaxLvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcChangeTeamTargetAsk::TeamRpcChangeTeamTargetAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcChangeTeamTargetAsk)
}
TeamRpcChangeTeamTargetAsk::TeamRpcChangeTeamTargetAsk(const TeamRpcChangeTeamTargetAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&targetmaxlv_, &from.targetmaxlv_,
    static_cast<size_t>(reinterpret_cast<char*>(&targetminlv_) -
    reinterpret_cast<char*>(&targetmaxlv_)) + sizeof(targetminlv_));
  // @@protoc_insertion_point(copy_constructor:TeamRpcChangeTeamTargetAsk)
}

void TeamRpcChangeTeamTargetAsk::SharedCtor() {
  _cached_size_ = 0;
  targetmaxlv_ = -1;
  targetid_ = -1;
  targetminlv_ = -1;
}

TeamRpcChangeTeamTargetAsk::~TeamRpcChangeTeamTargetAsk() {
  // @@protoc_insertion_point(destructor:TeamRpcChangeTeamTargetAsk)
  SharedDtor();
}

void TeamRpcChangeTeamTargetAsk::SharedDtor() {
}

void TeamRpcChangeTeamTargetAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcChangeTeamTargetAsk::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcChangeTeamTargetAsk& TeamRpcChangeTeamTargetAsk::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcChangeTeamTargetAsk* TeamRpcChangeTeamTargetAsk::New(::google::protobuf::Arena* arena) const {
  TeamRpcChangeTeamTargetAsk* n = new TeamRpcChangeTeamTargetAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcChangeTeamTargetAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcChangeTeamTargetAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    targetmaxlv_ = -1;
    targetid_ = -1;
    targetminlv_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcChangeTeamTargetAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcChangeTeamTargetAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TargetId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_targetid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &targetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TargetMinLv = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_targetminlv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &targetminlv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TargetMaxLv = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_targetmaxlv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &targetmaxlv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcChangeTeamTargetAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcChangeTeamTargetAsk)
  return false;
#undef DO_
}

void TeamRpcChangeTeamTargetAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcChangeTeamTargetAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TargetId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->targetid(), output);
  }

  // optional sint32 TargetMinLv = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->targetminlv(), output);
  }

  // optional sint32 TargetMaxLv = 4 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->targetmaxlv(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcChangeTeamTargetAsk)
}

::google::protobuf::uint8* TeamRpcChangeTeamTargetAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcChangeTeamTargetAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TargetId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->targetid(), target);
  }

  // optional sint32 TargetMinLv = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->targetminlv(), target);
  }

  // optional sint32 TargetMaxLv = 4 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->targetmaxlv(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcChangeTeamTargetAsk)
  return target;
}

size_t TeamRpcChangeTeamTargetAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcChangeTeamTargetAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional sint32 TargetMaxLv = 4 [default = -1];
    if (has_targetmaxlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->targetmaxlv());
    }

    // optional sint32 TargetId = 1 [default = -1];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->targetid());
    }

    // optional sint32 TargetMinLv = 3 [default = -1];
    if (has_targetminlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->targetminlv());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcChangeTeamTargetAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcChangeTeamTargetAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcChangeTeamTargetAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcChangeTeamTargetAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcChangeTeamTargetAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcChangeTeamTargetAsk)
    MergeFrom(*source);
  }
}

void TeamRpcChangeTeamTargetAsk::MergeFrom(const TeamRpcChangeTeamTargetAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcChangeTeamTargetAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      targetmaxlv_ = from.targetmaxlv_;
    }
    if (cached_has_bits & 0x00000002u) {
      targetid_ = from.targetid_;
    }
    if (cached_has_bits & 0x00000004u) {
      targetminlv_ = from.targetminlv_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamRpcChangeTeamTargetAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcChangeTeamTargetAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcChangeTeamTargetAsk::CopyFrom(const TeamRpcChangeTeamTargetAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcChangeTeamTargetAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcChangeTeamTargetAsk::IsInitialized() const {
  return true;
}

void TeamRpcChangeTeamTargetAsk::Swap(TeamRpcChangeTeamTargetAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcChangeTeamTargetAsk::InternalSwap(TeamRpcChangeTeamTargetAsk* other) {
  using std::swap;
  swap(targetmaxlv_, other->targetmaxlv_);
  swap(targetid_, other->targetid_);
  swap(targetminlv_, other->targetminlv_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcChangeTeamTargetAsk::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcChangeTeamTargetAsk

// optional sint32 TargetId = 1 [default = -1];
bool TeamRpcChangeTeamTargetAsk::has_targetid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamRpcChangeTeamTargetAsk::set_has_targetid() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamRpcChangeTeamTargetAsk::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamRpcChangeTeamTargetAsk::clear_targetid() {
  targetid_ = -1;
  clear_has_targetid();
}
::google::protobuf::int32 TeamRpcChangeTeamTargetAsk::targetid() const {
  // @@protoc_insertion_point(field_get:TeamRpcChangeTeamTargetAsk.TargetId)
  return targetid_;
}
void TeamRpcChangeTeamTargetAsk::set_targetid(::google::protobuf::int32 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcChangeTeamTargetAsk.TargetId)
}

// optional sint32 TargetMinLv = 3 [default = -1];
bool TeamRpcChangeTeamTargetAsk::has_targetminlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TeamRpcChangeTeamTargetAsk::set_has_targetminlv() {
  _has_bits_[0] |= 0x00000004u;
}
void TeamRpcChangeTeamTargetAsk::clear_has_targetminlv() {
  _has_bits_[0] &= ~0x00000004u;
}
void TeamRpcChangeTeamTargetAsk::clear_targetminlv() {
  targetminlv_ = -1;
  clear_has_targetminlv();
}
::google::protobuf::int32 TeamRpcChangeTeamTargetAsk::targetminlv() const {
  // @@protoc_insertion_point(field_get:TeamRpcChangeTeamTargetAsk.TargetMinLv)
  return targetminlv_;
}
void TeamRpcChangeTeamTargetAsk::set_targetminlv(::google::protobuf::int32 value) {
  set_has_targetminlv();
  targetminlv_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcChangeTeamTargetAsk.TargetMinLv)
}

// optional sint32 TargetMaxLv = 4 [default = -1];
bool TeamRpcChangeTeamTargetAsk::has_targetmaxlv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcChangeTeamTargetAsk::set_has_targetmaxlv() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcChangeTeamTargetAsk::clear_has_targetmaxlv() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcChangeTeamTargetAsk::clear_targetmaxlv() {
  targetmaxlv_ = -1;
  clear_has_targetmaxlv();
}
::google::protobuf::int32 TeamRpcChangeTeamTargetAsk::targetmaxlv() const {
  // @@protoc_insertion_point(field_get:TeamRpcChangeTeamTargetAsk.TargetMaxLv)
  return targetmaxlv_;
}
void TeamRpcChangeTeamTargetAsk::set_targetmaxlv(::google::protobuf::int32 value) {
  set_has_targetmaxlv();
  targetmaxlv_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcChangeTeamTargetAsk.TargetMaxLv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcChangeTeamTargetReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcChangeTeamTargetReply::TeamRpcChangeTeamTargetReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcChangeTeamTargetReply)
}
TeamRpcChangeTeamTargetReply::TeamRpcChangeTeamTargetReply(const TeamRpcChangeTeamTargetReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcChangeTeamTargetReply)
}

void TeamRpcChangeTeamTargetReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

TeamRpcChangeTeamTargetReply::~TeamRpcChangeTeamTargetReply() {
  // @@protoc_insertion_point(destructor:TeamRpcChangeTeamTargetReply)
  SharedDtor();
}

void TeamRpcChangeTeamTargetReply::SharedDtor() {
}

void TeamRpcChangeTeamTargetReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcChangeTeamTargetReply::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcChangeTeamTargetReply& TeamRpcChangeTeamTargetReply::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcChangeTeamTargetReply* TeamRpcChangeTeamTargetReply::New(::google::protobuf::Arena* arena) const {
  TeamRpcChangeTeamTargetReply* n = new TeamRpcChangeTeamTargetReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcChangeTeamTargetReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcChangeTeamTargetReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcChangeTeamTargetReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcChangeTeamTargetReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcChangeTeamTargetReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcChangeTeamTargetReply)
  return false;
#undef DO_
}

void TeamRpcChangeTeamTargetReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcChangeTeamTargetReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcChangeTeamTargetReply)
}

::google::protobuf::uint8* TeamRpcChangeTeamTargetReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcChangeTeamTargetReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcChangeTeamTargetReply)
  return target;
}

size_t TeamRpcChangeTeamTargetReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcChangeTeamTargetReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcChangeTeamTargetReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcChangeTeamTargetReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcChangeTeamTargetReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcChangeTeamTargetReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcChangeTeamTargetReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcChangeTeamTargetReply)
    MergeFrom(*source);
  }
}

void TeamRpcChangeTeamTargetReply::MergeFrom(const TeamRpcChangeTeamTargetReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcChangeTeamTargetReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void TeamRpcChangeTeamTargetReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcChangeTeamTargetReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcChangeTeamTargetReply::CopyFrom(const TeamRpcChangeTeamTargetReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcChangeTeamTargetReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcChangeTeamTargetReply::IsInitialized() const {
  return true;
}

void TeamRpcChangeTeamTargetReply::Swap(TeamRpcChangeTeamTargetReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcChangeTeamTargetReply::InternalSwap(TeamRpcChangeTeamTargetReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcChangeTeamTargetReply::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcChangeTeamTargetReply

// optional sint32 Result = 1 [default = -9999];
bool TeamRpcChangeTeamTargetReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcChangeTeamTargetReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcChangeTeamTargetReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcChangeTeamTargetReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TeamRpcChangeTeamTargetReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcChangeTeamTargetReply.Result)
  return result_;
}
void TeamRpcChangeTeamTargetReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcChangeTeamTargetReply.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcBeInvitedNoticeNotify::kTeamIdFieldNumber;
const int TeamRpcBeInvitedNoticeNotify::kUserIdFieldNumber;
const int TeamRpcBeInvitedNoticeNotify::kUserNameFieldNumber;
const int TeamRpcBeInvitedNoticeNotify::kCaptainUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcBeInvitedNoticeNotify::TeamRpcBeInvitedNoticeNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcBeInvitedNoticeNotify)
}
TeamRpcBeInvitedNoticeNotify::TeamRpcBeInvitedNoticeNotify(const TeamRpcBeInvitedNoticeNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  captainusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_captainusername()) {
    captainusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.captainusername_);
  }
  ::memcpy(&teamid_, &from.teamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&teamid_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:TeamRpcBeInvitedNoticeNotify)
}

void TeamRpcBeInvitedNoticeNotify::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  captainusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  teamid_ = -1;
  userid_ = GOOGLE_LONGLONG(-1);
}

TeamRpcBeInvitedNoticeNotify::~TeamRpcBeInvitedNoticeNotify() {
  // @@protoc_insertion_point(destructor:TeamRpcBeInvitedNoticeNotify)
  SharedDtor();
}

void TeamRpcBeInvitedNoticeNotify::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  captainusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TeamRpcBeInvitedNoticeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcBeInvitedNoticeNotify::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcBeInvitedNoticeNotify& TeamRpcBeInvitedNoticeNotify::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcBeInvitedNoticeNotify* TeamRpcBeInvitedNoticeNotify::New(::google::protobuf::Arena* arena) const {
  TeamRpcBeInvitedNoticeNotify* n = new TeamRpcBeInvitedNoticeNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcBeInvitedNoticeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcBeInvitedNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!captainusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*captainusername_.UnsafeRawStringPointer())->clear();
    }
    teamid_ = -1;
    userid_ = GOOGLE_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcBeInvitedNoticeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcBeInvitedNoticeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TeamId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_teamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 UserId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TeamRpcBeInvitedNoticeNotify.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CaptainUserName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_captainusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->captainusername().data(), static_cast<int>(this->captainusername().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TeamRpcBeInvitedNoticeNotify.CaptainUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcBeInvitedNoticeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcBeInvitedNoticeNotify)
  return false;
#undef DO_
}

void TeamRpcBeInvitedNoticeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcBeInvitedNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TeamId = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->teamid(), output);
  }

  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->userid(), output);
  }

  // optional string UserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TeamRpcBeInvitedNoticeNotify.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // optional string CaptainUserName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->captainusername().data(), static_cast<int>(this->captainusername().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TeamRpcBeInvitedNoticeNotify.CaptainUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->captainusername(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcBeInvitedNoticeNotify)
}

::google::protobuf::uint8* TeamRpcBeInvitedNoticeNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcBeInvitedNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TeamId = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->teamid(), target);
  }

  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->userid(), target);
  }

  // optional string UserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TeamRpcBeInvitedNoticeNotify.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // optional string CaptainUserName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->captainusername().data(), static_cast<int>(this->captainusername().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TeamRpcBeInvitedNoticeNotify.CaptainUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->captainusername(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcBeInvitedNoticeNotify)
  return target;
}

size_t TeamRpcBeInvitedNoticeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcBeInvitedNoticeNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string UserName = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string CaptainUserName = 4;
    if (has_captainusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->captainusername());
    }

    // optional sint32 TeamId = 1 [default = -1];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teamid());
    }

    // optional sint64 UserId = 2 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcBeInvitedNoticeNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcBeInvitedNoticeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcBeInvitedNoticeNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcBeInvitedNoticeNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcBeInvitedNoticeNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcBeInvitedNoticeNotify)
    MergeFrom(*source);
  }
}

void TeamRpcBeInvitedNoticeNotify::MergeFrom(const TeamRpcBeInvitedNoticeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcBeInvitedNoticeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_captainusername();
      captainusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.captainusername_);
    }
    if (cached_has_bits & 0x00000004u) {
      teamid_ = from.teamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamRpcBeInvitedNoticeNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcBeInvitedNoticeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcBeInvitedNoticeNotify::CopyFrom(const TeamRpcBeInvitedNoticeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcBeInvitedNoticeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcBeInvitedNoticeNotify::IsInitialized() const {
  return true;
}

void TeamRpcBeInvitedNoticeNotify::Swap(TeamRpcBeInvitedNoticeNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcBeInvitedNoticeNotify::InternalSwap(TeamRpcBeInvitedNoticeNotify* other) {
  using std::swap;
  username_.Swap(&other->username_);
  captainusername_.Swap(&other->captainusername_);
  swap(teamid_, other->teamid_);
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcBeInvitedNoticeNotify::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcBeInvitedNoticeNotify

// optional sint32 TeamId = 1 [default = -1];
bool TeamRpcBeInvitedNoticeNotify::has_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TeamRpcBeInvitedNoticeNotify::set_has_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
void TeamRpcBeInvitedNoticeNotify::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
void TeamRpcBeInvitedNoticeNotify::clear_teamid() {
  teamid_ = -1;
  clear_has_teamid();
}
::google::protobuf::int32 TeamRpcBeInvitedNoticeNotify::teamid() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInvitedNoticeNotify.TeamId)
  return teamid_;
}
void TeamRpcBeInvitedNoticeNotify::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBeInvitedNoticeNotify.TeamId)
}

// optional sint64 UserId = 2 [default = -1];
bool TeamRpcBeInvitedNoticeNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TeamRpcBeInvitedNoticeNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
void TeamRpcBeInvitedNoticeNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
void TeamRpcBeInvitedNoticeNotify::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 TeamRpcBeInvitedNoticeNotify::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInvitedNoticeNotify.UserId)
  return userid_;
}
void TeamRpcBeInvitedNoticeNotify::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBeInvitedNoticeNotify.UserId)
}

// optional string UserName = 3;
bool TeamRpcBeInvitedNoticeNotify::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcBeInvitedNoticeNotify::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcBeInvitedNoticeNotify::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcBeInvitedNoticeNotify::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& TeamRpcBeInvitedNoticeNotify::username() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInvitedNoticeNotify.UserName)
  return username_.GetNoArena();
}
void TeamRpcBeInvitedNoticeNotify::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TeamRpcBeInvitedNoticeNotify.UserName)
}
#if LANG_CXX11
void TeamRpcBeInvitedNoticeNotify::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TeamRpcBeInvitedNoticeNotify.UserName)
}
#endif
void TeamRpcBeInvitedNoticeNotify::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TeamRpcBeInvitedNoticeNotify.UserName)
}
void TeamRpcBeInvitedNoticeNotify::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TeamRpcBeInvitedNoticeNotify.UserName)
}
::std::string* TeamRpcBeInvitedNoticeNotify::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:TeamRpcBeInvitedNoticeNotify.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TeamRpcBeInvitedNoticeNotify::release_username() {
  // @@protoc_insertion_point(field_release:TeamRpcBeInvitedNoticeNotify.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TeamRpcBeInvitedNoticeNotify::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:TeamRpcBeInvitedNoticeNotify.UserName)
}

// optional string CaptainUserName = 4;
bool TeamRpcBeInvitedNoticeNotify::has_captainusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamRpcBeInvitedNoticeNotify::set_has_captainusername() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamRpcBeInvitedNoticeNotify::clear_has_captainusername() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamRpcBeInvitedNoticeNotify::clear_captainusername() {
  captainusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_captainusername();
}
const ::std::string& TeamRpcBeInvitedNoticeNotify::captainusername() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInvitedNoticeNotify.CaptainUserName)
  return captainusername_.GetNoArena();
}
void TeamRpcBeInvitedNoticeNotify::set_captainusername(const ::std::string& value) {
  set_has_captainusername();
  captainusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TeamRpcBeInvitedNoticeNotify.CaptainUserName)
}
#if LANG_CXX11
void TeamRpcBeInvitedNoticeNotify::set_captainusername(::std::string&& value) {
  set_has_captainusername();
  captainusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TeamRpcBeInvitedNoticeNotify.CaptainUserName)
}
#endif
void TeamRpcBeInvitedNoticeNotify::set_captainusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_captainusername();
  captainusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TeamRpcBeInvitedNoticeNotify.CaptainUserName)
}
void TeamRpcBeInvitedNoticeNotify::set_captainusername(const char* value, size_t size) {
  set_has_captainusername();
  captainusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TeamRpcBeInvitedNoticeNotify.CaptainUserName)
}
::std::string* TeamRpcBeInvitedNoticeNotify::mutable_captainusername() {
  set_has_captainusername();
  // @@protoc_insertion_point(field_mutable:TeamRpcBeInvitedNoticeNotify.CaptainUserName)
  return captainusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TeamRpcBeInvitedNoticeNotify::release_captainusername() {
  // @@protoc_insertion_point(field_release:TeamRpcBeInvitedNoticeNotify.CaptainUserName)
  clear_has_captainusername();
  return captainusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TeamRpcBeInvitedNoticeNotify::set_allocated_captainusername(::std::string* captainusername) {
  if (captainusername != NULL) {
    set_has_captainusername();
  } else {
    clear_has_captainusername();
  }
  captainusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), captainusername);
  // @@protoc_insertion_point(field_set_allocated:TeamRpcBeInvitedNoticeNotify.CaptainUserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcBeInviteHandleAsk::kTeamIdFieldNumber;
const int TeamRpcBeInviteHandleAsk::kUserIdFieldNumber;
const int TeamRpcBeInviteHandleAsk::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcBeInviteHandleAsk::TeamRpcBeInviteHandleAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcBeInviteHandleAsk)
}
TeamRpcBeInviteHandleAsk::TeamRpcBeInviteHandleAsk(const TeamRpcBeInviteHandleAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&handle_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(handle_));
  // @@protoc_insertion_point(copy_constructor:TeamRpcBeInviteHandleAsk)
}

void TeamRpcBeInviteHandleAsk::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(-1);
  teamid_ = -1;
  handle_ = -1;
}

TeamRpcBeInviteHandleAsk::~TeamRpcBeInviteHandleAsk() {
  // @@protoc_insertion_point(destructor:TeamRpcBeInviteHandleAsk)
  SharedDtor();
}

void TeamRpcBeInviteHandleAsk::SharedDtor() {
}

void TeamRpcBeInviteHandleAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcBeInviteHandleAsk::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcBeInviteHandleAsk& TeamRpcBeInviteHandleAsk::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcBeInviteHandleAsk* TeamRpcBeInviteHandleAsk::New(::google::protobuf::Arena* arena) const {
  TeamRpcBeInviteHandleAsk* n = new TeamRpcBeInviteHandleAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcBeInviteHandleAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcBeInviteHandleAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    userid_ = GOOGLE_LONGLONG(-1);
    teamid_ = -1;
    handle_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcBeInviteHandleAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcBeInviteHandleAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TeamId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_teamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 UserId = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Handle = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcBeInviteHandleAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcBeInviteHandleAsk)
  return false;
#undef DO_
}

void TeamRpcBeInviteHandleAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcBeInviteHandleAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TeamId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->teamid(), output);
  }

  // optional sint64 UserId = 3 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->userid(), output);
  }

  // optional sint32 Handle = 4 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcBeInviteHandleAsk)
}

::google::protobuf::uint8* TeamRpcBeInviteHandleAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcBeInviteHandleAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TeamId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->teamid(), target);
  }

  // optional sint64 UserId = 3 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->userid(), target);
  }

  // optional sint32 Handle = 4 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcBeInviteHandleAsk)
  return target;
}

size_t TeamRpcBeInviteHandleAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcBeInviteHandleAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional sint64 UserId = 3 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

    // optional sint32 TeamId = 2 [default = -1];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teamid());
    }

    // optional sint32 Handle = 4 [default = -1];
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcBeInviteHandleAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcBeInviteHandleAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcBeInviteHandleAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcBeInviteHandleAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcBeInviteHandleAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcBeInviteHandleAsk)
    MergeFrom(*source);
  }
}

void TeamRpcBeInviteHandleAsk::MergeFrom(const TeamRpcBeInviteHandleAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcBeInviteHandleAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      teamid_ = from.teamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      handle_ = from.handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamRpcBeInviteHandleAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcBeInviteHandleAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcBeInviteHandleAsk::CopyFrom(const TeamRpcBeInviteHandleAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcBeInviteHandleAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcBeInviteHandleAsk::IsInitialized() const {
  return true;
}

void TeamRpcBeInviteHandleAsk::Swap(TeamRpcBeInviteHandleAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcBeInviteHandleAsk::InternalSwap(TeamRpcBeInviteHandleAsk* other) {
  using std::swap;
  swap(userid_, other->userid_);
  swap(teamid_, other->teamid_);
  swap(handle_, other->handle_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcBeInviteHandleAsk::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcBeInviteHandleAsk

// optional sint32 TeamId = 2 [default = -1];
bool TeamRpcBeInviteHandleAsk::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamRpcBeInviteHandleAsk::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamRpcBeInviteHandleAsk::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamRpcBeInviteHandleAsk::clear_teamid() {
  teamid_ = -1;
  clear_has_teamid();
}
::google::protobuf::int32 TeamRpcBeInviteHandleAsk::teamid() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInviteHandleAsk.TeamId)
  return teamid_;
}
void TeamRpcBeInviteHandleAsk::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBeInviteHandleAsk.TeamId)
}

// optional sint64 UserId = 3 [default = -1];
bool TeamRpcBeInviteHandleAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcBeInviteHandleAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcBeInviteHandleAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcBeInviteHandleAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 TeamRpcBeInviteHandleAsk::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInviteHandleAsk.UserId)
  return userid_;
}
void TeamRpcBeInviteHandleAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBeInviteHandleAsk.UserId)
}

// optional sint32 Handle = 4 [default = -1];
bool TeamRpcBeInviteHandleAsk::has_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TeamRpcBeInviteHandleAsk::set_has_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void TeamRpcBeInviteHandleAsk::clear_has_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void TeamRpcBeInviteHandleAsk::clear_handle() {
  handle_ = -1;
  clear_has_handle();
}
::google::protobuf::int32 TeamRpcBeInviteHandleAsk::handle() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInviteHandleAsk.Handle)
  return handle_;
}
void TeamRpcBeInviteHandleAsk::set_handle(::google::protobuf::int32 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBeInviteHandleAsk.Handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcBeInviteHandleReply::kResultFieldNumber;
const int TeamRpcBeInviteHandleReply::kTeamIdFieldNumber;
const int TeamRpcBeInviteHandleReply::kUserIdFieldNumber;
const int TeamRpcBeInviteHandleReply::kHandleFieldNumber;
const int TeamRpcBeInviteHandleReply::kIsCapatainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcBeInviteHandleReply::TeamRpcBeInviteHandleReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcBeInviteHandleReply)
}
TeamRpcBeInviteHandleReply::TeamRpcBeInviteHandleReply(const TeamRpcBeInviteHandleReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&iscapatain_, &from.iscapatain_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&iscapatain_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:TeamRpcBeInviteHandleReply)
}

void TeamRpcBeInviteHandleReply::SharedCtor() {
  _cached_size_ = 0;
  iscapatain_ = false;
  handle_ = -1;
  result_ = -9999;
  teamid_ = -1;
  userid_ = GOOGLE_LONGLONG(-1);
}

TeamRpcBeInviteHandleReply::~TeamRpcBeInviteHandleReply() {
  // @@protoc_insertion_point(destructor:TeamRpcBeInviteHandleReply)
  SharedDtor();
}

void TeamRpcBeInviteHandleReply::SharedDtor() {
}

void TeamRpcBeInviteHandleReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcBeInviteHandleReply::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcBeInviteHandleReply& TeamRpcBeInviteHandleReply::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcBeInviteHandleReply* TeamRpcBeInviteHandleReply::New(::google::protobuf::Arena* arena) const {
  TeamRpcBeInviteHandleReply* n = new TeamRpcBeInviteHandleReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcBeInviteHandleReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcBeInviteHandleReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    iscapatain_ = false;
    handle_ = -1;
    result_ = -9999;
    teamid_ = -1;
    userid_ = GOOGLE_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcBeInviteHandleReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcBeInviteHandleReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TeamId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_teamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 UserId = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Handle = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool IsCapatain = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_iscapatain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscapatain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcBeInviteHandleReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcBeInviteHandleReply)
  return false;
#undef DO_
}

void TeamRpcBeInviteHandleReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcBeInviteHandleReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 TeamId = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->teamid(), output);
  }

  // optional sint64 UserId = 3 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->userid(), output);
  }

  // optional sint32 Handle = 4 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->handle(), output);
  }

  // optional bool IsCapatain = 5 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->iscapatain(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcBeInviteHandleReply)
}

::google::protobuf::uint8* TeamRpcBeInviteHandleReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcBeInviteHandleReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 TeamId = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->teamid(), target);
  }

  // optional sint64 UserId = 3 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->userid(), target);
  }

  // optional sint32 Handle = 4 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->handle(), target);
  }

  // optional bool IsCapatain = 5 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->iscapatain(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcBeInviteHandleReply)
  return target;
}

size_t TeamRpcBeInviteHandleReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcBeInviteHandleReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bool IsCapatain = 5 [default = false];
    if (has_iscapatain()) {
      total_size += 1 + 1;
    }

    // optional sint32 Handle = 4 [default = -1];
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->handle());
    }

    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 TeamId = 2 [default = -1];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teamid());
    }

    // optional sint64 UserId = 3 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcBeInviteHandleReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcBeInviteHandleReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcBeInviteHandleReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcBeInviteHandleReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcBeInviteHandleReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcBeInviteHandleReply)
    MergeFrom(*source);
  }
}

void TeamRpcBeInviteHandleReply::MergeFrom(const TeamRpcBeInviteHandleReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcBeInviteHandleReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      iscapatain_ = from.iscapatain_;
    }
    if (cached_has_bits & 0x00000002u) {
      handle_ = from.handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      teamid_ = from.teamid_;
    }
    if (cached_has_bits & 0x00000010u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamRpcBeInviteHandleReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcBeInviteHandleReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcBeInviteHandleReply::CopyFrom(const TeamRpcBeInviteHandleReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcBeInviteHandleReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcBeInviteHandleReply::IsInitialized() const {
  return true;
}

void TeamRpcBeInviteHandleReply::Swap(TeamRpcBeInviteHandleReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcBeInviteHandleReply::InternalSwap(TeamRpcBeInviteHandleReply* other) {
  using std::swap;
  swap(iscapatain_, other->iscapatain_);
  swap(handle_, other->handle_);
  swap(result_, other->result_);
  swap(teamid_, other->teamid_);
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcBeInviteHandleReply::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcBeInviteHandleReply

// optional sint32 Result = 1 [default = -9999];
bool TeamRpcBeInviteHandleReply::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TeamRpcBeInviteHandleReply::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void TeamRpcBeInviteHandleReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void TeamRpcBeInviteHandleReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TeamRpcBeInviteHandleReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInviteHandleReply.Result)
  return result_;
}
void TeamRpcBeInviteHandleReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBeInviteHandleReply.Result)
}

// optional sint32 TeamId = 2 [default = -1];
bool TeamRpcBeInviteHandleReply::has_teamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TeamRpcBeInviteHandleReply::set_has_teamid() {
  _has_bits_[0] |= 0x00000008u;
}
void TeamRpcBeInviteHandleReply::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000008u;
}
void TeamRpcBeInviteHandleReply::clear_teamid() {
  teamid_ = -1;
  clear_has_teamid();
}
::google::protobuf::int32 TeamRpcBeInviteHandleReply::teamid() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInviteHandleReply.TeamId)
  return teamid_;
}
void TeamRpcBeInviteHandleReply::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBeInviteHandleReply.TeamId)
}

// optional sint64 UserId = 3 [default = -1];
bool TeamRpcBeInviteHandleReply::has_userid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TeamRpcBeInviteHandleReply::set_has_userid() {
  _has_bits_[0] |= 0x00000010u;
}
void TeamRpcBeInviteHandleReply::clear_has_userid() {
  _has_bits_[0] &= ~0x00000010u;
}
void TeamRpcBeInviteHandleReply::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 TeamRpcBeInviteHandleReply::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInviteHandleReply.UserId)
  return userid_;
}
void TeamRpcBeInviteHandleReply::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBeInviteHandleReply.UserId)
}

// optional sint32 Handle = 4 [default = -1];
bool TeamRpcBeInviteHandleReply::has_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamRpcBeInviteHandleReply::set_has_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamRpcBeInviteHandleReply::clear_has_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamRpcBeInviteHandleReply::clear_handle() {
  handle_ = -1;
  clear_has_handle();
}
::google::protobuf::int32 TeamRpcBeInviteHandleReply::handle() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInviteHandleReply.Handle)
  return handle_;
}
void TeamRpcBeInviteHandleReply::set_handle(::google::protobuf::int32 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBeInviteHandleReply.Handle)
}

// optional bool IsCapatain = 5 [default = false];
bool TeamRpcBeInviteHandleReply::has_iscapatain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcBeInviteHandleReply::set_has_iscapatain() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcBeInviteHandleReply::clear_has_iscapatain() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcBeInviteHandleReply::clear_iscapatain() {
  iscapatain_ = false;
  clear_has_iscapatain();
}
bool TeamRpcBeInviteHandleReply::iscapatain() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInviteHandleReply.IsCapatain)
  return iscapatain_;
}
void TeamRpcBeInviteHandleReply::set_iscapatain(bool value) {
  set_has_iscapatain();
  iscapatain_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBeInviteHandleReply.IsCapatain)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcNearbyTeamObj::kTeamIdFieldNumber;
const int TeamRpcNearbyTeamObj::kCaptainUserIdFieldNumber;
const int TeamRpcNearbyTeamObj::kCaptainUserNameFieldNumber;
const int TeamRpcNearbyTeamObj::kCaptainLevelFieldNumber;
const int TeamRpcNearbyTeamObj::kMemberCountFieldNumber;
const int TeamRpcNearbyTeamObj::kCaptainProfFieldNumber;
const int TeamRpcNearbyTeamObj::kTeamTargetFieldNumber;
const int TeamRpcNearbyTeamObj::kTargetMinLvFieldNumber;
const int TeamRpcNearbyTeamObj::kTargetMaxLvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcNearbyTeamObj::TeamRpcNearbyTeamObj()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcNearbyTeamObj)
}
TeamRpcNearbyTeamObj::TeamRpcNearbyTeamObj(const TeamRpcNearbyTeamObj& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  captainusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_captainusername()) {
    captainusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.captainusername_);
  }
  ::memcpy(&targetmaxlv_, &from.targetmaxlv_,
    static_cast<size_t>(reinterpret_cast<char*>(&targetminlv_) -
    reinterpret_cast<char*>(&targetmaxlv_)) + sizeof(targetminlv_));
  // @@protoc_insertion_point(copy_constructor:TeamRpcNearbyTeamObj)
}

void TeamRpcNearbyTeamObj::SharedCtor() {
  _cached_size_ = 0;
  captainusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetmaxlv_ = -1;
  captainuserid_ = GOOGLE_LONGLONG(-1);
  teamid_ = -1;
  captainlevel_ = -1;
  membercount_ = -1;
  captainprof_ = -1;
  teamtarget_ = -1;
  targetminlv_ = -1;
}

TeamRpcNearbyTeamObj::~TeamRpcNearbyTeamObj() {
  // @@protoc_insertion_point(destructor:TeamRpcNearbyTeamObj)
  SharedDtor();
}

void TeamRpcNearbyTeamObj::SharedDtor() {
  captainusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TeamRpcNearbyTeamObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcNearbyTeamObj::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcNearbyTeamObj& TeamRpcNearbyTeamObj::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcNearbyTeamObj* TeamRpcNearbyTeamObj::New(::google::protobuf::Arena* arena) const {
  TeamRpcNearbyTeamObj* n = new TeamRpcNearbyTeamObj;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcNearbyTeamObj::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcNearbyTeamObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!captainusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*captainusername_.UnsafeRawStringPointer())->clear();
    }
    targetmaxlv_ = -1;
    captainuserid_ = GOOGLE_LONGLONG(-1);
    teamid_ = -1;
    captainlevel_ = -1;
    membercount_ = -1;
    captainprof_ = -1;
    teamtarget_ = -1;
  }
  targetminlv_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcNearbyTeamObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcNearbyTeamObj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TeamId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_teamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 CaptainUserId = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_captainuserid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &captainuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CaptainUserName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_captainusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->captainusername().data(), static_cast<int>(this->captainusername().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TeamRpcNearbyTeamObj.CaptainUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 CaptainLevel = 6 [default = -1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_captainlevel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &captainlevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 MemberCount = 7 [default = -1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_membercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &membercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 CaptainProf = 8 [default = -1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_captainprof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &captainprof_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TeamTarget = 9 [default = -1];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_teamtarget();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamtarget_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TargetMinLv = 10 [default = -1];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_targetminlv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &targetminlv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TargetMaxLv = 11 [default = -1];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_targetmaxlv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &targetmaxlv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcNearbyTeamObj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcNearbyTeamObj)
  return false;
#undef DO_
}

void TeamRpcNearbyTeamObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcNearbyTeamObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TeamId = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->teamid(), output);
  }

  // optional sint64 CaptainUserId = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->captainuserid(), output);
  }

  // optional string CaptainUserName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->captainusername().data(), static_cast<int>(this->captainusername().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TeamRpcNearbyTeamObj.CaptainUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->captainusername(), output);
  }

  // optional sint32 CaptainLevel = 6 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->captainlevel(), output);
  }

  // optional sint32 MemberCount = 7 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->membercount(), output);
  }

  // optional sint32 CaptainProf = 8 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->captainprof(), output);
  }

  // optional sint32 TeamTarget = 9 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->teamtarget(), output);
  }

  // optional sint32 TargetMinLv = 10 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->targetminlv(), output);
  }

  // optional sint32 TargetMaxLv = 11 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->targetmaxlv(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcNearbyTeamObj)
}

::google::protobuf::uint8* TeamRpcNearbyTeamObj::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcNearbyTeamObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TeamId = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->teamid(), target);
  }

  // optional sint64 CaptainUserId = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->captainuserid(), target);
  }

  // optional string CaptainUserName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->captainusername().data(), static_cast<int>(this->captainusername().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TeamRpcNearbyTeamObj.CaptainUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->captainusername(), target);
  }

  // optional sint32 CaptainLevel = 6 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->captainlevel(), target);
  }

  // optional sint32 MemberCount = 7 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->membercount(), target);
  }

  // optional sint32 CaptainProf = 8 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->captainprof(), target);
  }

  // optional sint32 TeamTarget = 9 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->teamtarget(), target);
  }

  // optional sint32 TargetMinLv = 10 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->targetminlv(), target);
  }

  // optional sint32 TargetMaxLv = 11 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->targetmaxlv(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcNearbyTeamObj)
  return target;
}

size_t TeamRpcNearbyTeamObj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcNearbyTeamObj)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string CaptainUserName = 4;
    if (has_captainusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->captainusername());
    }

    // optional sint32 TargetMaxLv = 11 [default = -1];
    if (has_targetmaxlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->targetmaxlv());
    }

    // optional sint64 CaptainUserId = 3 [default = -1];
    if (has_captainuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->captainuserid());
    }

    // optional sint32 TeamId = 2 [default = -1];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teamid());
    }

    // optional sint32 CaptainLevel = 6 [default = -1];
    if (has_captainlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->captainlevel());
    }

    // optional sint32 MemberCount = 7 [default = -1];
    if (has_membercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->membercount());
    }

    // optional sint32 CaptainProf = 8 [default = -1];
    if (has_captainprof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->captainprof());
    }

    // optional sint32 TeamTarget = 9 [default = -1];
    if (has_teamtarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teamtarget());
    }

  }
  // optional sint32 TargetMinLv = 10 [default = -1];
  if (has_targetminlv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->targetminlv());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcNearbyTeamObj::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcNearbyTeamObj)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcNearbyTeamObj* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcNearbyTeamObj>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcNearbyTeamObj)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcNearbyTeamObj)
    MergeFrom(*source);
  }
}

void TeamRpcNearbyTeamObj::MergeFrom(const TeamRpcNearbyTeamObj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcNearbyTeamObj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_captainusername();
      captainusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.captainusername_);
    }
    if (cached_has_bits & 0x00000002u) {
      targetmaxlv_ = from.targetmaxlv_;
    }
    if (cached_has_bits & 0x00000004u) {
      captainuserid_ = from.captainuserid_;
    }
    if (cached_has_bits & 0x00000008u) {
      teamid_ = from.teamid_;
    }
    if (cached_has_bits & 0x00000010u) {
      captainlevel_ = from.captainlevel_;
    }
    if (cached_has_bits & 0x00000020u) {
      membercount_ = from.membercount_;
    }
    if (cached_has_bits & 0x00000040u) {
      captainprof_ = from.captainprof_;
    }
    if (cached_has_bits & 0x00000080u) {
      teamtarget_ = from.teamtarget_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_targetminlv(from.targetminlv());
  }
}

void TeamRpcNearbyTeamObj::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcNearbyTeamObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcNearbyTeamObj::CopyFrom(const TeamRpcNearbyTeamObj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcNearbyTeamObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcNearbyTeamObj::IsInitialized() const {
  return true;
}

void TeamRpcNearbyTeamObj::Swap(TeamRpcNearbyTeamObj* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcNearbyTeamObj::InternalSwap(TeamRpcNearbyTeamObj* other) {
  using std::swap;
  captainusername_.Swap(&other->captainusername_);
  swap(targetmaxlv_, other->targetmaxlv_);
  swap(captainuserid_, other->captainuserid_);
  swap(teamid_, other->teamid_);
  swap(captainlevel_, other->captainlevel_);
  swap(membercount_, other->membercount_);
  swap(captainprof_, other->captainprof_);
  swap(teamtarget_, other->teamtarget_);
  swap(targetminlv_, other->targetminlv_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcNearbyTeamObj::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcNearbyTeamObj

// optional sint32 TeamId = 2 [default = -1];
bool TeamRpcNearbyTeamObj::has_teamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TeamRpcNearbyTeamObj::set_has_teamid() {
  _has_bits_[0] |= 0x00000008u;
}
void TeamRpcNearbyTeamObj::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000008u;
}
void TeamRpcNearbyTeamObj::clear_teamid() {
  teamid_ = -1;
  clear_has_teamid();
}
::google::protobuf::int32 TeamRpcNearbyTeamObj::teamid() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamObj.TeamId)
  return teamid_;
}
void TeamRpcNearbyTeamObj::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamObj.TeamId)
}

// optional sint64 CaptainUserId = 3 [default = -1];
bool TeamRpcNearbyTeamObj::has_captainuserid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TeamRpcNearbyTeamObj::set_has_captainuserid() {
  _has_bits_[0] |= 0x00000004u;
}
void TeamRpcNearbyTeamObj::clear_has_captainuserid() {
  _has_bits_[0] &= ~0x00000004u;
}
void TeamRpcNearbyTeamObj::clear_captainuserid() {
  captainuserid_ = GOOGLE_LONGLONG(-1);
  clear_has_captainuserid();
}
::google::protobuf::int64 TeamRpcNearbyTeamObj::captainuserid() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamObj.CaptainUserId)
  return captainuserid_;
}
void TeamRpcNearbyTeamObj::set_captainuserid(::google::protobuf::int64 value) {
  set_has_captainuserid();
  captainuserid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamObj.CaptainUserId)
}

// optional string CaptainUserName = 4;
bool TeamRpcNearbyTeamObj::has_captainusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcNearbyTeamObj::set_has_captainusername() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcNearbyTeamObj::clear_has_captainusername() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcNearbyTeamObj::clear_captainusername() {
  captainusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_captainusername();
}
const ::std::string& TeamRpcNearbyTeamObj::captainusername() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamObj.CaptainUserName)
  return captainusername_.GetNoArena();
}
void TeamRpcNearbyTeamObj::set_captainusername(const ::std::string& value) {
  set_has_captainusername();
  captainusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamObj.CaptainUserName)
}
#if LANG_CXX11
void TeamRpcNearbyTeamObj::set_captainusername(::std::string&& value) {
  set_has_captainusername();
  captainusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TeamRpcNearbyTeamObj.CaptainUserName)
}
#endif
void TeamRpcNearbyTeamObj::set_captainusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_captainusername();
  captainusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TeamRpcNearbyTeamObj.CaptainUserName)
}
void TeamRpcNearbyTeamObj::set_captainusername(const char* value, size_t size) {
  set_has_captainusername();
  captainusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TeamRpcNearbyTeamObj.CaptainUserName)
}
::std::string* TeamRpcNearbyTeamObj::mutable_captainusername() {
  set_has_captainusername();
  // @@protoc_insertion_point(field_mutable:TeamRpcNearbyTeamObj.CaptainUserName)
  return captainusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TeamRpcNearbyTeamObj::release_captainusername() {
  // @@protoc_insertion_point(field_release:TeamRpcNearbyTeamObj.CaptainUserName)
  clear_has_captainusername();
  return captainusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TeamRpcNearbyTeamObj::set_allocated_captainusername(::std::string* captainusername) {
  if (captainusername != NULL) {
    set_has_captainusername();
  } else {
    clear_has_captainusername();
  }
  captainusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), captainusername);
  // @@protoc_insertion_point(field_set_allocated:TeamRpcNearbyTeamObj.CaptainUserName)
}

// optional sint32 CaptainLevel = 6 [default = -1];
bool TeamRpcNearbyTeamObj::has_captainlevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TeamRpcNearbyTeamObj::set_has_captainlevel() {
  _has_bits_[0] |= 0x00000010u;
}
void TeamRpcNearbyTeamObj::clear_has_captainlevel() {
  _has_bits_[0] &= ~0x00000010u;
}
void TeamRpcNearbyTeamObj::clear_captainlevel() {
  captainlevel_ = -1;
  clear_has_captainlevel();
}
::google::protobuf::int32 TeamRpcNearbyTeamObj::captainlevel() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamObj.CaptainLevel)
  return captainlevel_;
}
void TeamRpcNearbyTeamObj::set_captainlevel(::google::protobuf::int32 value) {
  set_has_captainlevel();
  captainlevel_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamObj.CaptainLevel)
}

// optional sint32 MemberCount = 7 [default = -1];
bool TeamRpcNearbyTeamObj::has_membercount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TeamRpcNearbyTeamObj::set_has_membercount() {
  _has_bits_[0] |= 0x00000020u;
}
void TeamRpcNearbyTeamObj::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000020u;
}
void TeamRpcNearbyTeamObj::clear_membercount() {
  membercount_ = -1;
  clear_has_membercount();
}
::google::protobuf::int32 TeamRpcNearbyTeamObj::membercount() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamObj.MemberCount)
  return membercount_;
}
void TeamRpcNearbyTeamObj::set_membercount(::google::protobuf::int32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamObj.MemberCount)
}

// optional sint32 CaptainProf = 8 [default = -1];
bool TeamRpcNearbyTeamObj::has_captainprof() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TeamRpcNearbyTeamObj::set_has_captainprof() {
  _has_bits_[0] |= 0x00000040u;
}
void TeamRpcNearbyTeamObj::clear_has_captainprof() {
  _has_bits_[0] &= ~0x00000040u;
}
void TeamRpcNearbyTeamObj::clear_captainprof() {
  captainprof_ = -1;
  clear_has_captainprof();
}
::google::protobuf::int32 TeamRpcNearbyTeamObj::captainprof() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamObj.CaptainProf)
  return captainprof_;
}
void TeamRpcNearbyTeamObj::set_captainprof(::google::protobuf::int32 value) {
  set_has_captainprof();
  captainprof_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamObj.CaptainProf)
}

// optional sint32 TeamTarget = 9 [default = -1];
bool TeamRpcNearbyTeamObj::has_teamtarget() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TeamRpcNearbyTeamObj::set_has_teamtarget() {
  _has_bits_[0] |= 0x00000080u;
}
void TeamRpcNearbyTeamObj::clear_has_teamtarget() {
  _has_bits_[0] &= ~0x00000080u;
}
void TeamRpcNearbyTeamObj::clear_teamtarget() {
  teamtarget_ = -1;
  clear_has_teamtarget();
}
::google::protobuf::int32 TeamRpcNearbyTeamObj::teamtarget() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamObj.TeamTarget)
  return teamtarget_;
}
void TeamRpcNearbyTeamObj::set_teamtarget(::google::protobuf::int32 value) {
  set_has_teamtarget();
  teamtarget_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamObj.TeamTarget)
}

// optional sint32 TargetMinLv = 10 [default = -1];
bool TeamRpcNearbyTeamObj::has_targetminlv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TeamRpcNearbyTeamObj::set_has_targetminlv() {
  _has_bits_[0] |= 0x00000100u;
}
void TeamRpcNearbyTeamObj::clear_has_targetminlv() {
  _has_bits_[0] &= ~0x00000100u;
}
void TeamRpcNearbyTeamObj::clear_targetminlv() {
  targetminlv_ = -1;
  clear_has_targetminlv();
}
::google::protobuf::int32 TeamRpcNearbyTeamObj::targetminlv() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamObj.TargetMinLv)
  return targetminlv_;
}
void TeamRpcNearbyTeamObj::set_targetminlv(::google::protobuf::int32 value) {
  set_has_targetminlv();
  targetminlv_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamObj.TargetMinLv)
}

// optional sint32 TargetMaxLv = 11 [default = -1];
bool TeamRpcNearbyTeamObj::has_targetmaxlv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamRpcNearbyTeamObj::set_has_targetmaxlv() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamRpcNearbyTeamObj::clear_has_targetmaxlv() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamRpcNearbyTeamObj::clear_targetmaxlv() {
  targetmaxlv_ = -1;
  clear_has_targetmaxlv();
}
::google::protobuf::int32 TeamRpcNearbyTeamObj::targetmaxlv() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamObj.TargetMaxLv)
  return targetmaxlv_;
}
void TeamRpcNearbyTeamObj::set_targetmaxlv(::google::protobuf::int32 value) {
  set_has_targetmaxlv();
  targetmaxlv_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamObj.TargetMaxLv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcNearbyTeamAsk::kTargetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcNearbyTeamAsk::TeamRpcNearbyTeamAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcNearbyTeamAsk)
}
TeamRpcNearbyTeamAsk::TeamRpcNearbyTeamAsk(const TeamRpcNearbyTeamAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  targetid_ = from.targetid_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcNearbyTeamAsk)
}

void TeamRpcNearbyTeamAsk::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = -1;
}

TeamRpcNearbyTeamAsk::~TeamRpcNearbyTeamAsk() {
  // @@protoc_insertion_point(destructor:TeamRpcNearbyTeamAsk)
  SharedDtor();
}

void TeamRpcNearbyTeamAsk::SharedDtor() {
}

void TeamRpcNearbyTeamAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcNearbyTeamAsk::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcNearbyTeamAsk& TeamRpcNearbyTeamAsk::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcNearbyTeamAsk* TeamRpcNearbyTeamAsk::New(::google::protobuf::Arena* arena) const {
  TeamRpcNearbyTeamAsk* n = new TeamRpcNearbyTeamAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcNearbyTeamAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcNearbyTeamAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targetid_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcNearbyTeamAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcNearbyTeamAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TargetId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_targetid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &targetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcNearbyTeamAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcNearbyTeamAsk)
  return false;
#undef DO_
}

void TeamRpcNearbyTeamAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcNearbyTeamAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TargetId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->targetid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcNearbyTeamAsk)
}

::google::protobuf::uint8* TeamRpcNearbyTeamAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcNearbyTeamAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TargetId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->targetid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcNearbyTeamAsk)
  return target;
}

size_t TeamRpcNearbyTeamAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcNearbyTeamAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 TargetId = 1 [default = -1];
  if (has_targetid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->targetid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcNearbyTeamAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcNearbyTeamAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcNearbyTeamAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcNearbyTeamAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcNearbyTeamAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcNearbyTeamAsk)
    MergeFrom(*source);
  }
}

void TeamRpcNearbyTeamAsk::MergeFrom(const TeamRpcNearbyTeamAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcNearbyTeamAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_targetid()) {
    set_targetid(from.targetid());
  }
}

void TeamRpcNearbyTeamAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcNearbyTeamAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcNearbyTeamAsk::CopyFrom(const TeamRpcNearbyTeamAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcNearbyTeamAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcNearbyTeamAsk::IsInitialized() const {
  return true;
}

void TeamRpcNearbyTeamAsk::Swap(TeamRpcNearbyTeamAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcNearbyTeamAsk::InternalSwap(TeamRpcNearbyTeamAsk* other) {
  using std::swap;
  swap(targetid_, other->targetid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcNearbyTeamAsk::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcNearbyTeamAsk

// optional sint32 TargetId = 1 [default = -1];
bool TeamRpcNearbyTeamAsk::has_targetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcNearbyTeamAsk::set_has_targetid() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcNearbyTeamAsk::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcNearbyTeamAsk::clear_targetid() {
  targetid_ = -1;
  clear_has_targetid();
}
::google::protobuf::int32 TeamRpcNearbyTeamAsk::targetid() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamAsk.TargetId)
  return targetid_;
}
void TeamRpcNearbyTeamAsk::set_targetid(::google::protobuf::int32 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamAsk.TargetId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcNearbyTeamReply::kResultFieldNumber;
const int TeamRpcNearbyTeamReply::kTeamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcNearbyTeamReply::TeamRpcNearbyTeamReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcNearbyTeamReply)
}
TeamRpcNearbyTeamReply::TeamRpcNearbyTeamReply(const TeamRpcNearbyTeamReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      teams_(from.teams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcNearbyTeamReply)
}

void TeamRpcNearbyTeamReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

TeamRpcNearbyTeamReply::~TeamRpcNearbyTeamReply() {
  // @@protoc_insertion_point(destructor:TeamRpcNearbyTeamReply)
  SharedDtor();
}

void TeamRpcNearbyTeamReply::SharedDtor() {
}

void TeamRpcNearbyTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcNearbyTeamReply::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcNearbyTeamReply& TeamRpcNearbyTeamReply::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcNearbyTeamReply* TeamRpcNearbyTeamReply::New(::google::protobuf::Arena* arena) const {
  TeamRpcNearbyTeamReply* n = new TeamRpcNearbyTeamReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcNearbyTeamReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcNearbyTeamReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcNearbyTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcNearbyTeamReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TeamRpcNearbyTeamObj Teams = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcNearbyTeamReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcNearbyTeamReply)
  return false;
#undef DO_
}

void TeamRpcNearbyTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcNearbyTeamReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // repeated .TeamRpcNearbyTeamObj Teams = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teams(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcNearbyTeamReply)
}

::google::protobuf::uint8* TeamRpcNearbyTeamReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcNearbyTeamReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // repeated .TeamRpcNearbyTeamObj Teams = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->teams(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcNearbyTeamReply)
  return target;
}

size_t TeamRpcNearbyTeamReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcNearbyTeamReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .TeamRpcNearbyTeamObj Teams = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->teams_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teams(static_cast<int>(i)));
    }
  }

  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcNearbyTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcNearbyTeamReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcNearbyTeamReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcNearbyTeamReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcNearbyTeamReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcNearbyTeamReply)
    MergeFrom(*source);
  }
}

void TeamRpcNearbyTeamReply::MergeFrom(const TeamRpcNearbyTeamReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcNearbyTeamReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void TeamRpcNearbyTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcNearbyTeamReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcNearbyTeamReply::CopyFrom(const TeamRpcNearbyTeamReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcNearbyTeamReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcNearbyTeamReply::IsInitialized() const {
  return true;
}

void TeamRpcNearbyTeamReply::Swap(TeamRpcNearbyTeamReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcNearbyTeamReply::InternalSwap(TeamRpcNearbyTeamReply* other) {
  using std::swap;
  teams_.InternalSwap(&other->teams_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcNearbyTeamReply::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcNearbyTeamReply

// optional sint32 Result = 1 [default = -9999];
bool TeamRpcNearbyTeamReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcNearbyTeamReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcNearbyTeamReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcNearbyTeamReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TeamRpcNearbyTeamReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamReply.Result)
  return result_;
}
void TeamRpcNearbyTeamReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamReply.Result)
}

// repeated .TeamRpcNearbyTeamObj Teams = 2;
int TeamRpcNearbyTeamReply::teams_size() const {
  return teams_.size();
}
void TeamRpcNearbyTeamReply::clear_teams() {
  teams_.Clear();
}
const ::TeamRpcNearbyTeamObj& TeamRpcNearbyTeamReply::teams(int index) const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamReply.Teams)
  return teams_.Get(index);
}
::TeamRpcNearbyTeamObj* TeamRpcNearbyTeamReply::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:TeamRpcNearbyTeamReply.Teams)
  return teams_.Mutable(index);
}
::TeamRpcNearbyTeamObj* TeamRpcNearbyTeamReply::add_teams() {
  // @@protoc_insertion_point(field_add:TeamRpcNearbyTeamReply.Teams)
  return teams_.Add();
}
::google::protobuf::RepeatedPtrField< ::TeamRpcNearbyTeamObj >*
TeamRpcNearbyTeamReply::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:TeamRpcNearbyTeamReply.Teams)
  return &teams_;
}
const ::google::protobuf::RepeatedPtrField< ::TeamRpcNearbyTeamObj >&
TeamRpcNearbyTeamReply::teams() const {
  // @@protoc_insertion_point(field_list:TeamRpcNearbyTeamReply.Teams)
  return teams_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcApplyNoticeCaptainNotify::kApplyUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcApplyNoticeCaptainNotify::TeamRpcApplyNoticeCaptainNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcApplyNoticeCaptainNotify)
}
TeamRpcApplyNoticeCaptainNotify::TeamRpcApplyNoticeCaptainNotify(const TeamRpcApplyNoticeCaptainNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_applyuser()) {
    applyuser_ = new ::TeamApplyUserObj(*from.applyuser_);
  } else {
    applyuser_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:TeamRpcApplyNoticeCaptainNotify)
}

void TeamRpcApplyNoticeCaptainNotify::SharedCtor() {
  _cached_size_ = 0;
  applyuser_ = NULL;
}

TeamRpcApplyNoticeCaptainNotify::~TeamRpcApplyNoticeCaptainNotify() {
  // @@protoc_insertion_point(destructor:TeamRpcApplyNoticeCaptainNotify)
  SharedDtor();
}

void TeamRpcApplyNoticeCaptainNotify::SharedDtor() {
  if (this != internal_default_instance()) delete applyuser_;
}

void TeamRpcApplyNoticeCaptainNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcApplyNoticeCaptainNotify::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcApplyNoticeCaptainNotify& TeamRpcApplyNoticeCaptainNotify::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcApplyNoticeCaptainNotify* TeamRpcApplyNoticeCaptainNotify::New(::google::protobuf::Arena* arena) const {
  TeamRpcApplyNoticeCaptainNotify* n = new TeamRpcApplyNoticeCaptainNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcApplyNoticeCaptainNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcApplyNoticeCaptainNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_applyuser()) {
    GOOGLE_DCHECK(applyuser_ != NULL);
    applyuser_->::TeamApplyUserObj::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcApplyNoticeCaptainNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcApplyNoticeCaptainNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamApplyUserObj ApplyUser = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_applyuser()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcApplyNoticeCaptainNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcApplyNoticeCaptainNotify)
  return false;
#undef DO_
}

void TeamRpcApplyNoticeCaptainNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcApplyNoticeCaptainNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TeamApplyUserObj ApplyUser = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->applyuser_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcApplyNoticeCaptainNotify)
}

::google::protobuf::uint8* TeamRpcApplyNoticeCaptainNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcApplyNoticeCaptainNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TeamApplyUserObj ApplyUser = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->applyuser_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcApplyNoticeCaptainNotify)
  return target;
}

size_t TeamRpcApplyNoticeCaptainNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcApplyNoticeCaptainNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .TeamApplyUserObj ApplyUser = 5;
  if (has_applyuser()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->applyuser_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcApplyNoticeCaptainNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcApplyNoticeCaptainNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcApplyNoticeCaptainNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcApplyNoticeCaptainNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcApplyNoticeCaptainNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcApplyNoticeCaptainNotify)
    MergeFrom(*source);
  }
}

void TeamRpcApplyNoticeCaptainNotify::MergeFrom(const TeamRpcApplyNoticeCaptainNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcApplyNoticeCaptainNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_applyuser()) {
    mutable_applyuser()->::TeamApplyUserObj::MergeFrom(from.applyuser());
  }
}

void TeamRpcApplyNoticeCaptainNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcApplyNoticeCaptainNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcApplyNoticeCaptainNotify::CopyFrom(const TeamRpcApplyNoticeCaptainNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcApplyNoticeCaptainNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcApplyNoticeCaptainNotify::IsInitialized() const {
  return true;
}

void TeamRpcApplyNoticeCaptainNotify::Swap(TeamRpcApplyNoticeCaptainNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcApplyNoticeCaptainNotify::InternalSwap(TeamRpcApplyNoticeCaptainNotify* other) {
  using std::swap;
  swap(applyuser_, other->applyuser_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcApplyNoticeCaptainNotify::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcApplyNoticeCaptainNotify

// optional .TeamApplyUserObj ApplyUser = 5;
bool TeamRpcApplyNoticeCaptainNotify::has_applyuser() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcApplyNoticeCaptainNotify::set_has_applyuser() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcApplyNoticeCaptainNotify::clear_has_applyuser() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcApplyNoticeCaptainNotify::clear_applyuser() {
  if (applyuser_ != NULL) applyuser_->::TeamApplyUserObj::Clear();
  clear_has_applyuser();
}
const ::TeamApplyUserObj& TeamRpcApplyNoticeCaptainNotify::applyuser() const {
  const ::TeamApplyUserObj* p = applyuser_;
  // @@protoc_insertion_point(field_get:TeamRpcApplyNoticeCaptainNotify.ApplyUser)
  return p != NULL ? *p : *reinterpret_cast<const ::TeamApplyUserObj*>(
      &::_TeamApplyUserObj_default_instance_);
}
::TeamApplyUserObj* TeamRpcApplyNoticeCaptainNotify::mutable_applyuser() {
  set_has_applyuser();
  if (applyuser_ == NULL) {
    applyuser_ = new ::TeamApplyUserObj;
  }
  // @@protoc_insertion_point(field_mutable:TeamRpcApplyNoticeCaptainNotify.ApplyUser)
  return applyuser_;
}
::TeamApplyUserObj* TeamRpcApplyNoticeCaptainNotify::release_applyuser() {
  // @@protoc_insertion_point(field_release:TeamRpcApplyNoticeCaptainNotify.ApplyUser)
  clear_has_applyuser();
  ::TeamApplyUserObj* temp = applyuser_;
  applyuser_ = NULL;
  return temp;
}
void TeamRpcApplyNoticeCaptainNotify::set_allocated_applyuser(::TeamApplyUserObj* applyuser) {
  delete applyuser_;
  applyuser_ = applyuser;
  if (applyuser) {
    set_has_applyuser();
  } else {
    clear_has_applyuser();
  }
  // @@protoc_insertion_point(field_set_allocated:TeamRpcApplyNoticeCaptainNotify.ApplyUser)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcApplyHandleAgreeAsk::kUserIdFieldNumber;
const int TeamRpcApplyHandleAgreeAsk::kTeamIdFieldNumber;
const int TeamRpcApplyHandleAgreeAsk::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcApplyHandleAgreeAsk::TeamRpcApplyHandleAgreeAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcApplyHandleAgreeAsk)
}
TeamRpcApplyHandleAgreeAsk::TeamRpcApplyHandleAgreeAsk(const TeamRpcApplyHandleAgreeAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&handle_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(handle_));
  // @@protoc_insertion_point(copy_constructor:TeamRpcApplyHandleAgreeAsk)
}

void TeamRpcApplyHandleAgreeAsk::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(-1);
  teamid_ = -1;
  handle_ = -1;
}

TeamRpcApplyHandleAgreeAsk::~TeamRpcApplyHandleAgreeAsk() {
  // @@protoc_insertion_point(destructor:TeamRpcApplyHandleAgreeAsk)
  SharedDtor();
}

void TeamRpcApplyHandleAgreeAsk::SharedDtor() {
}

void TeamRpcApplyHandleAgreeAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcApplyHandleAgreeAsk::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcApplyHandleAgreeAsk& TeamRpcApplyHandleAgreeAsk::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcApplyHandleAgreeAsk* TeamRpcApplyHandleAgreeAsk::New(::google::protobuf::Arena* arena) const {
  TeamRpcApplyHandleAgreeAsk* n = new TeamRpcApplyHandleAgreeAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcApplyHandleAgreeAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcApplyHandleAgreeAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    userid_ = GOOGLE_LONGLONG(-1);
    teamid_ = -1;
    handle_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcApplyHandleAgreeAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcApplyHandleAgreeAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TeamId = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_teamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Handle = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcApplyHandleAgreeAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcApplyHandleAgreeAsk)
  return false;
#undef DO_
}

void TeamRpcApplyHandleAgreeAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcApplyHandleAgreeAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->userid(), output);
  }

  // optional sint32 TeamId = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->teamid(), output);
  }

  // optional sint32 Handle = 4 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcApplyHandleAgreeAsk)
}

::google::protobuf::uint8* TeamRpcApplyHandleAgreeAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcApplyHandleAgreeAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->userid(), target);
  }

  // optional sint32 TeamId = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->teamid(), target);
  }

  // optional sint32 Handle = 4 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcApplyHandleAgreeAsk)
  return target;
}

size_t TeamRpcApplyHandleAgreeAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcApplyHandleAgreeAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional sint64 UserId = 2 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

    // optional sint32 TeamId = 3 [default = -1];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teamid());
    }

    // optional sint32 Handle = 4 [default = -1];
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcApplyHandleAgreeAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcApplyHandleAgreeAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcApplyHandleAgreeAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcApplyHandleAgreeAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcApplyHandleAgreeAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcApplyHandleAgreeAsk)
    MergeFrom(*source);
  }
}

void TeamRpcApplyHandleAgreeAsk::MergeFrom(const TeamRpcApplyHandleAgreeAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcApplyHandleAgreeAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      teamid_ = from.teamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      handle_ = from.handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamRpcApplyHandleAgreeAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcApplyHandleAgreeAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcApplyHandleAgreeAsk::CopyFrom(const TeamRpcApplyHandleAgreeAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcApplyHandleAgreeAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcApplyHandleAgreeAsk::IsInitialized() const {
  return true;
}

void TeamRpcApplyHandleAgreeAsk::Swap(TeamRpcApplyHandleAgreeAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcApplyHandleAgreeAsk::InternalSwap(TeamRpcApplyHandleAgreeAsk* other) {
  using std::swap;
  swap(userid_, other->userid_);
  swap(teamid_, other->teamid_);
  swap(handle_, other->handle_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcApplyHandleAgreeAsk::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcApplyHandleAgreeAsk

// optional sint64 UserId = 2 [default = -1];
bool TeamRpcApplyHandleAgreeAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcApplyHandleAgreeAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcApplyHandleAgreeAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcApplyHandleAgreeAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 TeamRpcApplyHandleAgreeAsk::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcApplyHandleAgreeAsk.UserId)
  return userid_;
}
void TeamRpcApplyHandleAgreeAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcApplyHandleAgreeAsk.UserId)
}

// optional sint32 TeamId = 3 [default = -1];
bool TeamRpcApplyHandleAgreeAsk::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamRpcApplyHandleAgreeAsk::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamRpcApplyHandleAgreeAsk::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamRpcApplyHandleAgreeAsk::clear_teamid() {
  teamid_ = -1;
  clear_has_teamid();
}
::google::protobuf::int32 TeamRpcApplyHandleAgreeAsk::teamid() const {
  // @@protoc_insertion_point(field_get:TeamRpcApplyHandleAgreeAsk.TeamId)
  return teamid_;
}
void TeamRpcApplyHandleAgreeAsk::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcApplyHandleAgreeAsk.TeamId)
}

// optional sint32 Handle = 4 [default = -1];
bool TeamRpcApplyHandleAgreeAsk::has_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TeamRpcApplyHandleAgreeAsk::set_has_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void TeamRpcApplyHandleAgreeAsk::clear_has_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void TeamRpcApplyHandleAgreeAsk::clear_handle() {
  handle_ = -1;
  clear_has_handle();
}
::google::protobuf::int32 TeamRpcApplyHandleAgreeAsk::handle() const {
  // @@protoc_insertion_point(field_get:TeamRpcApplyHandleAgreeAsk.Handle)
  return handle_;
}
void TeamRpcApplyHandleAgreeAsk::set_handle(::google::protobuf::int32 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcApplyHandleAgreeAsk.Handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcApplyHandleAgreeReply::kResultFieldNumber;
const int TeamRpcApplyHandleAgreeReply::kUserIdFieldNumber;
const int TeamRpcApplyHandleAgreeReply::kTeamIdFieldNumber;
const int TeamRpcApplyHandleAgreeReply::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcApplyHandleAgreeReply::TeamRpcApplyHandleAgreeReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcApplyHandleAgreeReply)
}
TeamRpcApplyHandleAgreeReply::TeamRpcApplyHandleAgreeReply(const TeamRpcApplyHandleAgreeReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&handle_, &from.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&teamid_) -
    reinterpret_cast<char*>(&handle_)) + sizeof(teamid_));
  // @@protoc_insertion_point(copy_constructor:TeamRpcApplyHandleAgreeReply)
}

void TeamRpcApplyHandleAgreeReply::SharedCtor() {
  _cached_size_ = 0;
  handle_ = -1;
  userid_ = GOOGLE_LONGLONG(-1);
  result_ = -9999;
  teamid_ = -1;
}

TeamRpcApplyHandleAgreeReply::~TeamRpcApplyHandleAgreeReply() {
  // @@protoc_insertion_point(destructor:TeamRpcApplyHandleAgreeReply)
  SharedDtor();
}

void TeamRpcApplyHandleAgreeReply::SharedDtor() {
}

void TeamRpcApplyHandleAgreeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcApplyHandleAgreeReply::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcApplyHandleAgreeReply& TeamRpcApplyHandleAgreeReply::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcApplyHandleAgreeReply* TeamRpcApplyHandleAgreeReply::New(::google::protobuf::Arena* arena) const {
  TeamRpcApplyHandleAgreeReply* n = new TeamRpcApplyHandleAgreeReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcApplyHandleAgreeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcApplyHandleAgreeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    handle_ = -1;
    userid_ = GOOGLE_LONGLONG(-1);
    result_ = -9999;
    teamid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcApplyHandleAgreeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcApplyHandleAgreeReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 UserId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 TeamId = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_teamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &teamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Handle = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcApplyHandleAgreeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcApplyHandleAgreeReply)
  return false;
#undef DO_
}

void TeamRpcApplyHandleAgreeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcApplyHandleAgreeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->userid(), output);
  }

  // optional sint32 TeamId = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->teamid(), output);
  }

  // optional sint32 Handle = 4 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcApplyHandleAgreeReply)
}

::google::protobuf::uint8* TeamRpcApplyHandleAgreeReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcApplyHandleAgreeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->userid(), target);
  }

  // optional sint32 TeamId = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->teamid(), target);
  }

  // optional sint32 Handle = 4 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcApplyHandleAgreeReply)
  return target;
}

size_t TeamRpcApplyHandleAgreeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcApplyHandleAgreeReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional sint32 Handle = 4 [default = -1];
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->handle());
    }

    // optional sint64 UserId = 2 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 TeamId = 3 [default = -1];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->teamid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcApplyHandleAgreeReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcApplyHandleAgreeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcApplyHandleAgreeReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcApplyHandleAgreeReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcApplyHandleAgreeReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcApplyHandleAgreeReply)
    MergeFrom(*source);
  }
}

void TeamRpcApplyHandleAgreeReply::MergeFrom(const TeamRpcApplyHandleAgreeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcApplyHandleAgreeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      handle_ = from.handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      teamid_ = from.teamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamRpcApplyHandleAgreeReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcApplyHandleAgreeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcApplyHandleAgreeReply::CopyFrom(const TeamRpcApplyHandleAgreeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcApplyHandleAgreeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcApplyHandleAgreeReply::IsInitialized() const {
  return true;
}

void TeamRpcApplyHandleAgreeReply::Swap(TeamRpcApplyHandleAgreeReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcApplyHandleAgreeReply::InternalSwap(TeamRpcApplyHandleAgreeReply* other) {
  using std::swap;
  swap(handle_, other->handle_);
  swap(userid_, other->userid_);
  swap(result_, other->result_);
  swap(teamid_, other->teamid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcApplyHandleAgreeReply::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcApplyHandleAgreeReply

// optional sint32 Result = 1 [default = -9999];
bool TeamRpcApplyHandleAgreeReply::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TeamRpcApplyHandleAgreeReply::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void TeamRpcApplyHandleAgreeReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void TeamRpcApplyHandleAgreeReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TeamRpcApplyHandleAgreeReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcApplyHandleAgreeReply.Result)
  return result_;
}
void TeamRpcApplyHandleAgreeReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcApplyHandleAgreeReply.Result)
}

// optional sint64 UserId = 2 [default = -1];
bool TeamRpcApplyHandleAgreeReply::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamRpcApplyHandleAgreeReply::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamRpcApplyHandleAgreeReply::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamRpcApplyHandleAgreeReply::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 TeamRpcApplyHandleAgreeReply::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcApplyHandleAgreeReply.UserId)
  return userid_;
}
void TeamRpcApplyHandleAgreeReply::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcApplyHandleAgreeReply.UserId)
}

// optional sint32 TeamId = 3 [default = -1];
bool TeamRpcApplyHandleAgreeReply::has_teamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TeamRpcApplyHandleAgreeReply::set_has_teamid() {
  _has_bits_[0] |= 0x00000008u;
}
void TeamRpcApplyHandleAgreeReply::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000008u;
}
void TeamRpcApplyHandleAgreeReply::clear_teamid() {
  teamid_ = -1;
  clear_has_teamid();
}
::google::protobuf::int32 TeamRpcApplyHandleAgreeReply::teamid() const {
  // @@protoc_insertion_point(field_get:TeamRpcApplyHandleAgreeReply.TeamId)
  return teamid_;
}
void TeamRpcApplyHandleAgreeReply::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcApplyHandleAgreeReply.TeamId)
}

// optional sint32 Handle = 4 [default = -1];
bool TeamRpcApplyHandleAgreeReply::has_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcApplyHandleAgreeReply::set_has_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcApplyHandleAgreeReply::clear_has_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcApplyHandleAgreeReply::clear_handle() {
  handle_ = -1;
  clear_has_handle();
}
::google::protobuf::int32 TeamRpcApplyHandleAgreeReply::handle() const {
  // @@protoc_insertion_point(field_get:TeamRpcApplyHandleAgreeReply.Handle)
  return handle_;
}
void TeamRpcApplyHandleAgreeReply::set_handle(::google::protobuf::int32 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcApplyHandleAgreeReply.Handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcUpdateMyTeamNoticeNotify::kMyTeamDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcUpdateMyTeamNoticeNotify::TeamRpcUpdateMyTeamNoticeNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcUpdateMyTeamNoticeNotify)
}
TeamRpcUpdateMyTeamNoticeNotify::TeamRpcUpdateMyTeamNoticeNotify(const TeamRpcUpdateMyTeamNoticeNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_myteamdata()) {
    myteamdata_ = new ::TeamObj(*from.myteamdata_);
  } else {
    myteamdata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:TeamRpcUpdateMyTeamNoticeNotify)
}

void TeamRpcUpdateMyTeamNoticeNotify::SharedCtor() {
  _cached_size_ = 0;
  myteamdata_ = NULL;
}

TeamRpcUpdateMyTeamNoticeNotify::~TeamRpcUpdateMyTeamNoticeNotify() {
  // @@protoc_insertion_point(destructor:TeamRpcUpdateMyTeamNoticeNotify)
  SharedDtor();
}

void TeamRpcUpdateMyTeamNoticeNotify::SharedDtor() {
  if (this != internal_default_instance()) delete myteamdata_;
}

void TeamRpcUpdateMyTeamNoticeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcUpdateMyTeamNoticeNotify::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcUpdateMyTeamNoticeNotify& TeamRpcUpdateMyTeamNoticeNotify::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcUpdateMyTeamNoticeNotify* TeamRpcUpdateMyTeamNoticeNotify::New(::google::protobuf::Arena* arena) const {
  TeamRpcUpdateMyTeamNoticeNotify* n = new TeamRpcUpdateMyTeamNoticeNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcUpdateMyTeamNoticeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcUpdateMyTeamNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_myteamdata()) {
    GOOGLE_DCHECK(myteamdata_ != NULL);
    myteamdata_->::TeamObj::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcUpdateMyTeamNoticeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcUpdateMyTeamNoticeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamObj MyTeamData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myteamdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcUpdateMyTeamNoticeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcUpdateMyTeamNoticeNotify)
  return false;
#undef DO_
}

void TeamRpcUpdateMyTeamNoticeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcUpdateMyTeamNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TeamObj MyTeamData = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->myteamdata_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcUpdateMyTeamNoticeNotify)
}

::google::protobuf::uint8* TeamRpcUpdateMyTeamNoticeNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcUpdateMyTeamNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TeamObj MyTeamData = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->myteamdata_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcUpdateMyTeamNoticeNotify)
  return target;
}

size_t TeamRpcUpdateMyTeamNoticeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcUpdateMyTeamNoticeNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .TeamObj MyTeamData = 1;
  if (has_myteamdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->myteamdata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcUpdateMyTeamNoticeNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcUpdateMyTeamNoticeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcUpdateMyTeamNoticeNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcUpdateMyTeamNoticeNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcUpdateMyTeamNoticeNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcUpdateMyTeamNoticeNotify)
    MergeFrom(*source);
  }
}

void TeamRpcUpdateMyTeamNoticeNotify::MergeFrom(const TeamRpcUpdateMyTeamNoticeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcUpdateMyTeamNoticeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_myteamdata()) {
    mutable_myteamdata()->::TeamObj::MergeFrom(from.myteamdata());
  }
}

void TeamRpcUpdateMyTeamNoticeNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcUpdateMyTeamNoticeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcUpdateMyTeamNoticeNotify::CopyFrom(const TeamRpcUpdateMyTeamNoticeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcUpdateMyTeamNoticeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcUpdateMyTeamNoticeNotify::IsInitialized() const {
  return true;
}

void TeamRpcUpdateMyTeamNoticeNotify::Swap(TeamRpcUpdateMyTeamNoticeNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcUpdateMyTeamNoticeNotify::InternalSwap(TeamRpcUpdateMyTeamNoticeNotify* other) {
  using std::swap;
  swap(myteamdata_, other->myteamdata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcUpdateMyTeamNoticeNotify::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcUpdateMyTeamNoticeNotify

// optional .TeamObj MyTeamData = 1;
bool TeamRpcUpdateMyTeamNoticeNotify::has_myteamdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcUpdateMyTeamNoticeNotify::set_has_myteamdata() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcUpdateMyTeamNoticeNotify::clear_has_myteamdata() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcUpdateMyTeamNoticeNotify::clear_myteamdata() {
  if (myteamdata_ != NULL) myteamdata_->::TeamObj::Clear();
  clear_has_myteamdata();
}
const ::TeamObj& TeamRpcUpdateMyTeamNoticeNotify::myteamdata() const {
  const ::TeamObj* p = myteamdata_;
  // @@protoc_insertion_point(field_get:TeamRpcUpdateMyTeamNoticeNotify.MyTeamData)
  return p != NULL ? *p : *reinterpret_cast<const ::TeamObj*>(
      &::_TeamObj_default_instance_);
}
::TeamObj* TeamRpcUpdateMyTeamNoticeNotify::mutable_myteamdata() {
  set_has_myteamdata();
  if (myteamdata_ == NULL) {
    myteamdata_ = new ::TeamObj;
  }
  // @@protoc_insertion_point(field_mutable:TeamRpcUpdateMyTeamNoticeNotify.MyTeamData)
  return myteamdata_;
}
::TeamObj* TeamRpcUpdateMyTeamNoticeNotify::release_myteamdata() {
  // @@protoc_insertion_point(field_release:TeamRpcUpdateMyTeamNoticeNotify.MyTeamData)
  clear_has_myteamdata();
  ::TeamObj* temp = myteamdata_;
  myteamdata_ = NULL;
  return temp;
}
void TeamRpcUpdateMyTeamNoticeNotify::set_allocated_myteamdata(::TeamObj* myteamdata) {
  delete myteamdata_;
  myteamdata_ = myteamdata;
  if (myteamdata) {
    set_has_myteamdata();
  } else {
    clear_has_myteamdata();
  }
  // @@protoc_insertion_point(field_set_allocated:TeamRpcUpdateMyTeamNoticeNotify.MyTeamData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcQuitTeamNotify::TeamRpcQuitTeamNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcQuitTeamNotify)
}
TeamRpcQuitTeamNotify::TeamRpcQuitTeamNotify(const TeamRpcQuitTeamNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TeamRpcQuitTeamNotify)
}

void TeamRpcQuitTeamNotify::SharedCtor() {
  _cached_size_ = 0;
}

TeamRpcQuitTeamNotify::~TeamRpcQuitTeamNotify() {
  // @@protoc_insertion_point(destructor:TeamRpcQuitTeamNotify)
  SharedDtor();
}

void TeamRpcQuitTeamNotify::SharedDtor() {
}

void TeamRpcQuitTeamNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcQuitTeamNotify::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcQuitTeamNotify& TeamRpcQuitTeamNotify::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcQuitTeamNotify* TeamRpcQuitTeamNotify::New(::google::protobuf::Arena* arena) const {
  TeamRpcQuitTeamNotify* n = new TeamRpcQuitTeamNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcQuitTeamNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcQuitTeamNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcQuitTeamNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcQuitTeamNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcQuitTeamNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcQuitTeamNotify)
  return false;
#undef DO_
}

void TeamRpcQuitTeamNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcQuitTeamNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcQuitTeamNotify)
}

::google::protobuf::uint8* TeamRpcQuitTeamNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcQuitTeamNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcQuitTeamNotify)
  return target;
}

size_t TeamRpcQuitTeamNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcQuitTeamNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcQuitTeamNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcQuitTeamNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcQuitTeamNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcQuitTeamNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcQuitTeamNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcQuitTeamNotify)
    MergeFrom(*source);
  }
}

void TeamRpcQuitTeamNotify::MergeFrom(const TeamRpcQuitTeamNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcQuitTeamNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TeamRpcQuitTeamNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcQuitTeamNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcQuitTeamNotify::CopyFrom(const TeamRpcQuitTeamNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcQuitTeamNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcQuitTeamNotify::IsInitialized() const {
  return true;
}

void TeamRpcQuitTeamNotify::Swap(TeamRpcQuitTeamNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcQuitTeamNotify::InternalSwap(TeamRpcQuitTeamNotify* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcQuitTeamNotify::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcQuitTeamNotify

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcLeaveTeamNoticeNotify::kUserIdFieldNumber;
const int TeamRpcLeaveTeamNoticeNotify::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcLeaveTeamNoticeNotify::TeamRpcLeaveTeamNoticeNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcLeaveTeamNoticeNotify)
}
TeamRpcLeaveTeamNoticeNotify::TeamRpcLeaveTeamNoticeNotify(const TeamRpcLeaveTeamNoticeNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcLeaveTeamNoticeNotify)
}

void TeamRpcLeaveTeamNoticeNotify::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = -1;
}

TeamRpcLeaveTeamNoticeNotify::~TeamRpcLeaveTeamNoticeNotify() {
  // @@protoc_insertion_point(destructor:TeamRpcLeaveTeamNoticeNotify)
  SharedDtor();
}

void TeamRpcLeaveTeamNoticeNotify::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TeamRpcLeaveTeamNoticeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcLeaveTeamNoticeNotify::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcLeaveTeamNoticeNotify& TeamRpcLeaveTeamNoticeNotify::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcLeaveTeamNoticeNotify* TeamRpcLeaveTeamNoticeNotify::New(::google::protobuf::Arena* arena) const {
  TeamRpcLeaveTeamNoticeNotify* n = new TeamRpcLeaveTeamNoticeNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcLeaveTeamNoticeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcLeaveTeamNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    userid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcLeaveTeamNoticeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcLeaveTeamNoticeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 UserId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TeamRpcLeaveTeamNoticeNotify.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcLeaveTeamNoticeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcLeaveTeamNoticeNotify)
  return false;
#undef DO_
}

void TeamRpcLeaveTeamNoticeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcLeaveTeamNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->userid(), output);
  }

  // optional string UserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TeamRpcLeaveTeamNoticeNotify.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcLeaveTeamNoticeNotify)
}

::google::protobuf::uint8* TeamRpcLeaveTeamNoticeNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcLeaveTeamNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->userid(), target);
  }

  // optional string UserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TeamRpcLeaveTeamNoticeNotify.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcLeaveTeamNoticeNotify)
  return target;
}

size_t TeamRpcLeaveTeamNoticeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcLeaveTeamNoticeNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string UserName = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional sint32 UserId = 2 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->userid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcLeaveTeamNoticeNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcLeaveTeamNoticeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcLeaveTeamNoticeNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcLeaveTeamNoticeNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcLeaveTeamNoticeNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcLeaveTeamNoticeNotify)
    MergeFrom(*source);
  }
}

void TeamRpcLeaveTeamNoticeNotify::MergeFrom(const TeamRpcLeaveTeamNoticeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcLeaveTeamNoticeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamRpcLeaveTeamNoticeNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcLeaveTeamNoticeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcLeaveTeamNoticeNotify::CopyFrom(const TeamRpcLeaveTeamNoticeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcLeaveTeamNoticeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcLeaveTeamNoticeNotify::IsInitialized() const {
  return true;
}

void TeamRpcLeaveTeamNoticeNotify::Swap(TeamRpcLeaveTeamNoticeNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcLeaveTeamNoticeNotify::InternalSwap(TeamRpcLeaveTeamNoticeNotify* other) {
  using std::swap;
  username_.Swap(&other->username_);
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcLeaveTeamNoticeNotify::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcLeaveTeamNoticeNotify

// optional sint32 UserId = 2 [default = -1];
bool TeamRpcLeaveTeamNoticeNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamRpcLeaveTeamNoticeNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamRpcLeaveTeamNoticeNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamRpcLeaveTeamNoticeNotify::clear_userid() {
  userid_ = -1;
  clear_has_userid();
}
::google::protobuf::int32 TeamRpcLeaveTeamNoticeNotify::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcLeaveTeamNoticeNotify.UserId)
  return userid_;
}
void TeamRpcLeaveTeamNoticeNotify::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcLeaveTeamNoticeNotify.UserId)
}

// optional string UserName = 3;
bool TeamRpcLeaveTeamNoticeNotify::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcLeaveTeamNoticeNotify::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcLeaveTeamNoticeNotify::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcLeaveTeamNoticeNotify::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& TeamRpcLeaveTeamNoticeNotify::username() const {
  // @@protoc_insertion_point(field_get:TeamRpcLeaveTeamNoticeNotify.UserName)
  return username_.GetNoArena();
}
void TeamRpcLeaveTeamNoticeNotify::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TeamRpcLeaveTeamNoticeNotify.UserName)
}
#if LANG_CXX11
void TeamRpcLeaveTeamNoticeNotify::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TeamRpcLeaveTeamNoticeNotify.UserName)
}
#endif
void TeamRpcLeaveTeamNoticeNotify::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TeamRpcLeaveTeamNoticeNotify.UserName)
}
void TeamRpcLeaveTeamNoticeNotify::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TeamRpcLeaveTeamNoticeNotify.UserName)
}
::std::string* TeamRpcLeaveTeamNoticeNotify::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:TeamRpcLeaveTeamNoticeNotify.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TeamRpcLeaveTeamNoticeNotify::release_username() {
  // @@protoc_insertion_point(field_release:TeamRpcLeaveTeamNoticeNotify.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TeamRpcLeaveTeamNoticeNotify::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:TeamRpcLeaveTeamNoticeNotify.UserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcBreakUpNoticeNotify::kUserIdFieldNumber;
const int TeamRpcBreakUpNoticeNotify::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcBreakUpNoticeNotify::TeamRpcBreakUpNoticeNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcBreakUpNoticeNotify)
}
TeamRpcBreakUpNoticeNotify::TeamRpcBreakUpNoticeNotify(const TeamRpcBreakUpNoticeNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcBreakUpNoticeNotify)
}

void TeamRpcBreakUpNoticeNotify::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = GOOGLE_LONGLONG(-1);
}

TeamRpcBreakUpNoticeNotify::~TeamRpcBreakUpNoticeNotify() {
  // @@protoc_insertion_point(destructor:TeamRpcBreakUpNoticeNotify)
  SharedDtor();
}

void TeamRpcBreakUpNoticeNotify::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TeamRpcBreakUpNoticeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcBreakUpNoticeNotify::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcBreakUpNoticeNotify& TeamRpcBreakUpNoticeNotify::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcBreakUpNoticeNotify* TeamRpcBreakUpNoticeNotify::New(::google::protobuf::Arena* arena) const {
  TeamRpcBreakUpNoticeNotify* n = new TeamRpcBreakUpNoticeNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcBreakUpNoticeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcBreakUpNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    userid_ = GOOGLE_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcBreakUpNoticeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcBreakUpNoticeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TeamRpcBreakUpNoticeNotify.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcBreakUpNoticeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcBreakUpNoticeNotify)
  return false;
#undef DO_
}

void TeamRpcBreakUpNoticeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcBreakUpNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->userid(), output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TeamRpcBreakUpNoticeNotify.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcBreakUpNoticeNotify)
}

::google::protobuf::uint8* TeamRpcBreakUpNoticeNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcBreakUpNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->userid(), target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TeamRpcBreakUpNoticeNotify.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcBreakUpNoticeNotify)
  return target;
}

size_t TeamRpcBreakUpNoticeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcBreakUpNoticeNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional sint64 UserId = 1 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcBreakUpNoticeNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcBreakUpNoticeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcBreakUpNoticeNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcBreakUpNoticeNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcBreakUpNoticeNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcBreakUpNoticeNotify)
    MergeFrom(*source);
  }
}

void TeamRpcBreakUpNoticeNotify::MergeFrom(const TeamRpcBreakUpNoticeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcBreakUpNoticeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamRpcBreakUpNoticeNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcBreakUpNoticeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcBreakUpNoticeNotify::CopyFrom(const TeamRpcBreakUpNoticeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcBreakUpNoticeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcBreakUpNoticeNotify::IsInitialized() const {
  return true;
}

void TeamRpcBreakUpNoticeNotify::Swap(TeamRpcBreakUpNoticeNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcBreakUpNoticeNotify::InternalSwap(TeamRpcBreakUpNoticeNotify* other) {
  using std::swap;
  username_.Swap(&other->username_);
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcBreakUpNoticeNotify::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcBreakUpNoticeNotify

// optional sint64 UserId = 1 [default = -1];
bool TeamRpcBreakUpNoticeNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamRpcBreakUpNoticeNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamRpcBreakUpNoticeNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamRpcBreakUpNoticeNotify::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 TeamRpcBreakUpNoticeNotify::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcBreakUpNoticeNotify.UserId)
  return userid_;
}
void TeamRpcBreakUpNoticeNotify::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBreakUpNoticeNotify.UserId)
}

// optional string UserName = 2;
bool TeamRpcBreakUpNoticeNotify::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcBreakUpNoticeNotify::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcBreakUpNoticeNotify::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcBreakUpNoticeNotify::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& TeamRpcBreakUpNoticeNotify::username() const {
  // @@protoc_insertion_point(field_get:TeamRpcBreakUpNoticeNotify.UserName)
  return username_.GetNoArena();
}
void TeamRpcBreakUpNoticeNotify::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TeamRpcBreakUpNoticeNotify.UserName)
}
#if LANG_CXX11
void TeamRpcBreakUpNoticeNotify::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TeamRpcBreakUpNoticeNotify.UserName)
}
#endif
void TeamRpcBreakUpNoticeNotify::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TeamRpcBreakUpNoticeNotify.UserName)
}
void TeamRpcBreakUpNoticeNotify::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TeamRpcBreakUpNoticeNotify.UserName)
}
::std::string* TeamRpcBreakUpNoticeNotify::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:TeamRpcBreakUpNoticeNotify.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TeamRpcBreakUpNoticeNotify::release_username() {
  // @@protoc_insertion_point(field_release:TeamRpcBreakUpNoticeNotify.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TeamRpcBreakUpNoticeNotify::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:TeamRpcBreakUpNoticeNotify.UserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcReqMyTeamDataNotify::TeamRpcReqMyTeamDataNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcReqMyTeamDataNotify)
}
TeamRpcReqMyTeamDataNotify::TeamRpcReqMyTeamDataNotify(const TeamRpcReqMyTeamDataNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TeamRpcReqMyTeamDataNotify)
}

void TeamRpcReqMyTeamDataNotify::SharedCtor() {
  _cached_size_ = 0;
}

TeamRpcReqMyTeamDataNotify::~TeamRpcReqMyTeamDataNotify() {
  // @@protoc_insertion_point(destructor:TeamRpcReqMyTeamDataNotify)
  SharedDtor();
}

void TeamRpcReqMyTeamDataNotify::SharedDtor() {
}

void TeamRpcReqMyTeamDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcReqMyTeamDataNotify::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcReqMyTeamDataNotify& TeamRpcReqMyTeamDataNotify::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcReqMyTeamDataNotify* TeamRpcReqMyTeamDataNotify::New(::google::protobuf::Arena* arena) const {
  TeamRpcReqMyTeamDataNotify* n = new TeamRpcReqMyTeamDataNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcReqMyTeamDataNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcReqMyTeamDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcReqMyTeamDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcReqMyTeamDataNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcReqMyTeamDataNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcReqMyTeamDataNotify)
  return false;
#undef DO_
}

void TeamRpcReqMyTeamDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcReqMyTeamDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcReqMyTeamDataNotify)
}

::google::protobuf::uint8* TeamRpcReqMyTeamDataNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcReqMyTeamDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcReqMyTeamDataNotify)
  return target;
}

size_t TeamRpcReqMyTeamDataNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcReqMyTeamDataNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcReqMyTeamDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcReqMyTeamDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcReqMyTeamDataNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcReqMyTeamDataNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcReqMyTeamDataNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcReqMyTeamDataNotify)
    MergeFrom(*source);
  }
}

void TeamRpcReqMyTeamDataNotify::MergeFrom(const TeamRpcReqMyTeamDataNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcReqMyTeamDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TeamRpcReqMyTeamDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcReqMyTeamDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcReqMyTeamDataNotify::CopyFrom(const TeamRpcReqMyTeamDataNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcReqMyTeamDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcReqMyTeamDataNotify::IsInitialized() const {
  return true;
}

void TeamRpcReqMyTeamDataNotify::Swap(TeamRpcReqMyTeamDataNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcReqMyTeamDataNotify::InternalSwap(TeamRpcReqMyTeamDataNotify* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcReqMyTeamDataNotify::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcReqMyTeamDataNotify

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcDeleteFromApplyListNotify::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcDeleteFromApplyListNotify::TeamRpcDeleteFromApplyListNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcDeleteFromApplyListNotify)
}
TeamRpcDeleteFromApplyListNotify::TeamRpcDeleteFromApplyListNotify(const TeamRpcDeleteFromApplyListNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcDeleteFromApplyListNotify)
}

void TeamRpcDeleteFromApplyListNotify::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(-1);
}

TeamRpcDeleteFromApplyListNotify::~TeamRpcDeleteFromApplyListNotify() {
  // @@protoc_insertion_point(destructor:TeamRpcDeleteFromApplyListNotify)
  SharedDtor();
}

void TeamRpcDeleteFromApplyListNotify::SharedDtor() {
}

void TeamRpcDeleteFromApplyListNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcDeleteFromApplyListNotify::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcDeleteFromApplyListNotify& TeamRpcDeleteFromApplyListNotify::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcDeleteFromApplyListNotify* TeamRpcDeleteFromApplyListNotify::New(::google::protobuf::Arena* arena) const {
  TeamRpcDeleteFromApplyListNotify* n = new TeamRpcDeleteFromApplyListNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcDeleteFromApplyListNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcDeleteFromApplyListNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = GOOGLE_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcDeleteFromApplyListNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcDeleteFromApplyListNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcDeleteFromApplyListNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcDeleteFromApplyListNotify)
  return false;
#undef DO_
}

void TeamRpcDeleteFromApplyListNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcDeleteFromApplyListNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcDeleteFromApplyListNotify)
}

::google::protobuf::uint8* TeamRpcDeleteFromApplyListNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcDeleteFromApplyListNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcDeleteFromApplyListNotify)
  return target;
}

size_t TeamRpcDeleteFromApplyListNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcDeleteFromApplyListNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint64 UserId = 2 [default = -1];
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcDeleteFromApplyListNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcDeleteFromApplyListNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcDeleteFromApplyListNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcDeleteFromApplyListNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcDeleteFromApplyListNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcDeleteFromApplyListNotify)
    MergeFrom(*source);
  }
}

void TeamRpcDeleteFromApplyListNotify::MergeFrom(const TeamRpcDeleteFromApplyListNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcDeleteFromApplyListNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_userid()) {
    set_userid(from.userid());
  }
}

void TeamRpcDeleteFromApplyListNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcDeleteFromApplyListNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcDeleteFromApplyListNotify::CopyFrom(const TeamRpcDeleteFromApplyListNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcDeleteFromApplyListNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcDeleteFromApplyListNotify::IsInitialized() const {
  return true;
}

void TeamRpcDeleteFromApplyListNotify::Swap(TeamRpcDeleteFromApplyListNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcDeleteFromApplyListNotify::InternalSwap(TeamRpcDeleteFromApplyListNotify* other) {
  using std::swap;
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcDeleteFromApplyListNotify::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcDeleteFromApplyListNotify

// optional sint64 UserId = 2 [default = -1];
bool TeamRpcDeleteFromApplyListNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcDeleteFromApplyListNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcDeleteFromApplyListNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcDeleteFromApplyListNotify::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 TeamRpcDeleteFromApplyListNotify::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcDeleteFromApplyListNotify.UserId)
  return userid_;
}
void TeamRpcDeleteFromApplyListNotify::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcDeleteFromApplyListNotify.UserId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcAppointCaptainAsk::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcAppointCaptainAsk::TeamRpcAppointCaptainAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcAppointCaptainAsk)
}
TeamRpcAppointCaptainAsk::TeamRpcAppointCaptainAsk(const TeamRpcAppointCaptainAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcAppointCaptainAsk)
}

void TeamRpcAppointCaptainAsk::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(-1);
}

TeamRpcAppointCaptainAsk::~TeamRpcAppointCaptainAsk() {
  // @@protoc_insertion_point(destructor:TeamRpcAppointCaptainAsk)
  SharedDtor();
}

void TeamRpcAppointCaptainAsk::SharedDtor() {
}

void TeamRpcAppointCaptainAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcAppointCaptainAsk::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcAppointCaptainAsk& TeamRpcAppointCaptainAsk::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcAppointCaptainAsk* TeamRpcAppointCaptainAsk::New(::google::protobuf::Arena* arena) const {
  TeamRpcAppointCaptainAsk* n = new TeamRpcAppointCaptainAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcAppointCaptainAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcAppointCaptainAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = GOOGLE_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcAppointCaptainAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcAppointCaptainAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcAppointCaptainAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcAppointCaptainAsk)
  return false;
#undef DO_
}

void TeamRpcAppointCaptainAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcAppointCaptainAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcAppointCaptainAsk)
}

::google::protobuf::uint8* TeamRpcAppointCaptainAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcAppointCaptainAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcAppointCaptainAsk)
  return target;
}

size_t TeamRpcAppointCaptainAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcAppointCaptainAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint64 UserId = 1 [default = -1];
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcAppointCaptainAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcAppointCaptainAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcAppointCaptainAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcAppointCaptainAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcAppointCaptainAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcAppointCaptainAsk)
    MergeFrom(*source);
  }
}

void TeamRpcAppointCaptainAsk::MergeFrom(const TeamRpcAppointCaptainAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcAppointCaptainAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_userid()) {
    set_userid(from.userid());
  }
}

void TeamRpcAppointCaptainAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcAppointCaptainAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcAppointCaptainAsk::CopyFrom(const TeamRpcAppointCaptainAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcAppointCaptainAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcAppointCaptainAsk::IsInitialized() const {
  return true;
}

void TeamRpcAppointCaptainAsk::Swap(TeamRpcAppointCaptainAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcAppointCaptainAsk::InternalSwap(TeamRpcAppointCaptainAsk* other) {
  using std::swap;
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcAppointCaptainAsk::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcAppointCaptainAsk

// optional sint64 UserId = 1 [default = -1];
bool TeamRpcAppointCaptainAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcAppointCaptainAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcAppointCaptainAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcAppointCaptainAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 TeamRpcAppointCaptainAsk::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcAppointCaptainAsk.UserId)
  return userid_;
}
void TeamRpcAppointCaptainAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcAppointCaptainAsk.UserId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcAppointCaptainReply::kResultFieldNumber;
const int TeamRpcAppointCaptainReply::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcAppointCaptainReply::TeamRpcAppointCaptainReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcAppointCaptainReply)
}
TeamRpcAppointCaptainReply::TeamRpcAppointCaptainReply(const TeamRpcAppointCaptainReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:TeamRpcAppointCaptainReply)
}

void TeamRpcAppointCaptainReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  userid_ = GOOGLE_LONGLONG(-1);
}

TeamRpcAppointCaptainReply::~TeamRpcAppointCaptainReply() {
  // @@protoc_insertion_point(destructor:TeamRpcAppointCaptainReply)
  SharedDtor();
}

void TeamRpcAppointCaptainReply::SharedDtor() {
}

void TeamRpcAppointCaptainReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcAppointCaptainReply::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcAppointCaptainReply& TeamRpcAppointCaptainReply::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcAppointCaptainReply* TeamRpcAppointCaptainReply::New(::google::protobuf::Arena* arena) const {
  TeamRpcAppointCaptainReply* n = new TeamRpcAppointCaptainReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcAppointCaptainReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcAppointCaptainReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    result_ = -9999;
    userid_ = GOOGLE_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcAppointCaptainReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcAppointCaptainReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 UserId = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcAppointCaptainReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcAppointCaptainReply)
  return false;
#undef DO_
}

void TeamRpcAppointCaptainReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcAppointCaptainReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint64 UserId = 4 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcAppointCaptainReply)
}

::google::protobuf::uint8* TeamRpcAppointCaptainReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcAppointCaptainReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint64 UserId = 4 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcAppointCaptainReply)
  return target;
}

size_t TeamRpcAppointCaptainReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcAppointCaptainReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint64 UserId = 4 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcAppointCaptainReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcAppointCaptainReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcAppointCaptainReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcAppointCaptainReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcAppointCaptainReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcAppointCaptainReply)
    MergeFrom(*source);
  }
}

void TeamRpcAppointCaptainReply::MergeFrom(const TeamRpcAppointCaptainReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcAppointCaptainReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamRpcAppointCaptainReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcAppointCaptainReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcAppointCaptainReply::CopyFrom(const TeamRpcAppointCaptainReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcAppointCaptainReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcAppointCaptainReply::IsInitialized() const {
  return true;
}

void TeamRpcAppointCaptainReply::Swap(TeamRpcAppointCaptainReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcAppointCaptainReply::InternalSwap(TeamRpcAppointCaptainReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcAppointCaptainReply::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcAppointCaptainReply

// optional sint32 Result = 1 [default = -9999];
bool TeamRpcAppointCaptainReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcAppointCaptainReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcAppointCaptainReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcAppointCaptainReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TeamRpcAppointCaptainReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcAppointCaptainReply.Result)
  return result_;
}
void TeamRpcAppointCaptainReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcAppointCaptainReply.Result)
}

// optional sint64 UserId = 4 [default = -1];
bool TeamRpcAppointCaptainReply::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamRpcAppointCaptainReply::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamRpcAppointCaptainReply::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamRpcAppointCaptainReply::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 TeamRpcAppointCaptainReply::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcAppointCaptainReply.UserId)
  return userid_;
}
void TeamRpcAppointCaptainReply::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcAppointCaptainReply.UserId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcCaptainChangeNoticeNotify::kUserIdFieldNumber;
const int TeamRpcCaptainChangeNoticeNotify::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcCaptainChangeNoticeNotify::TeamRpcCaptainChangeNoticeNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcCaptainChangeNoticeNotify)
}
TeamRpcCaptainChangeNoticeNotify::TeamRpcCaptainChangeNoticeNotify(const TeamRpcCaptainChangeNoticeNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcCaptainChangeNoticeNotify)
}

void TeamRpcCaptainChangeNoticeNotify::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = GOOGLE_LONGLONG(-1);
}

TeamRpcCaptainChangeNoticeNotify::~TeamRpcCaptainChangeNoticeNotify() {
  // @@protoc_insertion_point(destructor:TeamRpcCaptainChangeNoticeNotify)
  SharedDtor();
}

void TeamRpcCaptainChangeNoticeNotify::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TeamRpcCaptainChangeNoticeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcCaptainChangeNoticeNotify::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcCaptainChangeNoticeNotify& TeamRpcCaptainChangeNoticeNotify::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcCaptainChangeNoticeNotify* TeamRpcCaptainChangeNoticeNotify::New(::google::protobuf::Arena* arena) const {
  TeamRpcCaptainChangeNoticeNotify* n = new TeamRpcCaptainChangeNoticeNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcCaptainChangeNoticeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcCaptainChangeNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    userid_ = GOOGLE_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcCaptainChangeNoticeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcCaptainChangeNoticeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TeamRpcCaptainChangeNoticeNotify.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcCaptainChangeNoticeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcCaptainChangeNoticeNotify)
  return false;
#undef DO_
}

void TeamRpcCaptainChangeNoticeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcCaptainChangeNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->userid(), output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TeamRpcCaptainChangeNoticeNotify.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcCaptainChangeNoticeNotify)
}

::google::protobuf::uint8* TeamRpcCaptainChangeNoticeNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcCaptainChangeNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->userid(), target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TeamRpcCaptainChangeNoticeNotify.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcCaptainChangeNoticeNotify)
  return target;
}

size_t TeamRpcCaptainChangeNoticeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcCaptainChangeNoticeNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional sint64 UserId = 1 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcCaptainChangeNoticeNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcCaptainChangeNoticeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcCaptainChangeNoticeNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcCaptainChangeNoticeNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcCaptainChangeNoticeNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcCaptainChangeNoticeNotify)
    MergeFrom(*source);
  }
}

void TeamRpcCaptainChangeNoticeNotify::MergeFrom(const TeamRpcCaptainChangeNoticeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcCaptainChangeNoticeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamRpcCaptainChangeNoticeNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcCaptainChangeNoticeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcCaptainChangeNoticeNotify::CopyFrom(const TeamRpcCaptainChangeNoticeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcCaptainChangeNoticeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcCaptainChangeNoticeNotify::IsInitialized() const {
  return true;
}

void TeamRpcCaptainChangeNoticeNotify::Swap(TeamRpcCaptainChangeNoticeNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcCaptainChangeNoticeNotify::InternalSwap(TeamRpcCaptainChangeNoticeNotify* other) {
  using std::swap;
  username_.Swap(&other->username_);
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcCaptainChangeNoticeNotify::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcCaptainChangeNoticeNotify

// optional sint64 UserId = 1 [default = -1];
bool TeamRpcCaptainChangeNoticeNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamRpcCaptainChangeNoticeNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamRpcCaptainChangeNoticeNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamRpcCaptainChangeNoticeNotify::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 TeamRpcCaptainChangeNoticeNotify::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcCaptainChangeNoticeNotify.UserId)
  return userid_;
}
void TeamRpcCaptainChangeNoticeNotify::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcCaptainChangeNoticeNotify.UserId)
}

// optional string UserName = 2;
bool TeamRpcCaptainChangeNoticeNotify::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcCaptainChangeNoticeNotify::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcCaptainChangeNoticeNotify::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcCaptainChangeNoticeNotify::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& TeamRpcCaptainChangeNoticeNotify::username() const {
  // @@protoc_insertion_point(field_get:TeamRpcCaptainChangeNoticeNotify.UserName)
  return username_.GetNoArena();
}
void TeamRpcCaptainChangeNoticeNotify::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TeamRpcCaptainChangeNoticeNotify.UserName)
}
#if LANG_CXX11
void TeamRpcCaptainChangeNoticeNotify::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TeamRpcCaptainChangeNoticeNotify.UserName)
}
#endif
void TeamRpcCaptainChangeNoticeNotify::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TeamRpcCaptainChangeNoticeNotify.UserName)
}
void TeamRpcCaptainChangeNoticeNotify::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TeamRpcCaptainChangeNoticeNotify.UserName)
}
::std::string* TeamRpcCaptainChangeNoticeNotify::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:TeamRpcCaptainChangeNoticeNotify.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TeamRpcCaptainChangeNoticeNotify::release_username() {
  // @@protoc_insertion_point(field_release:TeamRpcCaptainChangeNoticeNotify.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TeamRpcCaptainChangeNoticeNotify::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:TeamRpcCaptainChangeNoticeNotify.UserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcTeamMemberHPChangeNoticeNotify::kUserIdFieldNumber;
const int TeamRpcTeamMemberHPChangeNoticeNotify::kHPFieldNumber;
const int TeamRpcTeamMemberHPChangeNoticeNotify::kMaxHPFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcTeamMemberHPChangeNoticeNotify::TeamRpcTeamMemberHPChangeNoticeNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcTeamMemberHPChangeNoticeNotify)
}
TeamRpcTeamMemberHPChangeNoticeNotify::TeamRpcTeamMemberHPChangeNoticeNotify(const TeamRpcTeamMemberHPChangeNoticeNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxhp_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(maxhp_));
  // @@protoc_insertion_point(copy_constructor:TeamRpcTeamMemberHPChangeNoticeNotify)
}

void TeamRpcTeamMemberHPChangeNoticeNotify::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(-1);
  hp_ = -1;
  maxhp_ = -1;
}

TeamRpcTeamMemberHPChangeNoticeNotify::~TeamRpcTeamMemberHPChangeNoticeNotify() {
  // @@protoc_insertion_point(destructor:TeamRpcTeamMemberHPChangeNoticeNotify)
  SharedDtor();
}

void TeamRpcTeamMemberHPChangeNoticeNotify::SharedDtor() {
}

void TeamRpcTeamMemberHPChangeNoticeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcTeamMemberHPChangeNoticeNotify::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcTeamMemberHPChangeNoticeNotify& TeamRpcTeamMemberHPChangeNoticeNotify::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcTeamMemberHPChangeNoticeNotify* TeamRpcTeamMemberHPChangeNoticeNotify::New(::google::protobuf::Arena* arena) const {
  TeamRpcTeamMemberHPChangeNoticeNotify* n = new TeamRpcTeamMemberHPChangeNoticeNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcTeamMemberHPChangeNoticeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcTeamMemberHPChangeNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    userid_ = GOOGLE_LONGLONG(-1);
    hp_ = -1;
    maxhp_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcTeamMemberHPChangeNoticeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcTeamMemberHPChangeNoticeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 HP = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_hp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 MaxHP = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_maxhp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &maxhp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcTeamMemberHPChangeNoticeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcTeamMemberHPChangeNoticeNotify)
  return false;
#undef DO_
}

void TeamRpcTeamMemberHPChangeNoticeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcTeamMemberHPChangeNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->userid(), output);
  }

  // optional sint32 HP = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->hp(), output);
  }

  // optional sint32 MaxHP = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->maxhp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcTeamMemberHPChangeNoticeNotify)
}

::google::protobuf::uint8* TeamRpcTeamMemberHPChangeNoticeNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcTeamMemberHPChangeNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->userid(), target);
  }

  // optional sint32 HP = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->hp(), target);
  }

  // optional sint32 MaxHP = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->maxhp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcTeamMemberHPChangeNoticeNotify)
  return target;
}

size_t TeamRpcTeamMemberHPChangeNoticeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcTeamMemberHPChangeNoticeNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional sint64 UserId = 1 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

    // optional sint32 HP = 2 [default = -1];
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->hp());
    }

    // optional sint32 MaxHP = 3 [default = -1];
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->maxhp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcTeamMemberHPChangeNoticeNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcTeamMemberHPChangeNoticeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcTeamMemberHPChangeNoticeNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcTeamMemberHPChangeNoticeNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcTeamMemberHPChangeNoticeNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcTeamMemberHPChangeNoticeNotify)
    MergeFrom(*source);
  }
}

void TeamRpcTeamMemberHPChangeNoticeNotify::MergeFrom(const TeamRpcTeamMemberHPChangeNoticeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcTeamMemberHPChangeNoticeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000002u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000004u) {
      maxhp_ = from.maxhp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamRpcTeamMemberHPChangeNoticeNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcTeamMemberHPChangeNoticeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcTeamMemberHPChangeNoticeNotify::CopyFrom(const TeamRpcTeamMemberHPChangeNoticeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcTeamMemberHPChangeNoticeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcTeamMemberHPChangeNoticeNotify::IsInitialized() const {
  return true;
}

void TeamRpcTeamMemberHPChangeNoticeNotify::Swap(TeamRpcTeamMemberHPChangeNoticeNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcTeamMemberHPChangeNoticeNotify::InternalSwap(TeamRpcTeamMemberHPChangeNoticeNotify* other) {
  using std::swap;
  swap(userid_, other->userid_);
  swap(hp_, other->hp_);
  swap(maxhp_, other->maxhp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcTeamMemberHPChangeNoticeNotify::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcTeamMemberHPChangeNoticeNotify

// optional sint64 UserId = 1 [default = -1];
bool TeamRpcTeamMemberHPChangeNoticeNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcTeamMemberHPChangeNoticeNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcTeamMemberHPChangeNoticeNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcTeamMemberHPChangeNoticeNotify::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 TeamRpcTeamMemberHPChangeNoticeNotify::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcTeamMemberHPChangeNoticeNotify.UserId)
  return userid_;
}
void TeamRpcTeamMemberHPChangeNoticeNotify::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcTeamMemberHPChangeNoticeNotify.UserId)
}

// optional sint32 HP = 2 [default = -1];
bool TeamRpcTeamMemberHPChangeNoticeNotify::has_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamRpcTeamMemberHPChangeNoticeNotify::set_has_hp() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamRpcTeamMemberHPChangeNoticeNotify::clear_has_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamRpcTeamMemberHPChangeNoticeNotify::clear_hp() {
  hp_ = -1;
  clear_has_hp();
}
::google::protobuf::int32 TeamRpcTeamMemberHPChangeNoticeNotify::hp() const {
  // @@protoc_insertion_point(field_get:TeamRpcTeamMemberHPChangeNoticeNotify.HP)
  return hp_;
}
void TeamRpcTeamMemberHPChangeNoticeNotify::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcTeamMemberHPChangeNoticeNotify.HP)
}

// optional sint32 MaxHP = 3 [default = -1];
bool TeamRpcTeamMemberHPChangeNoticeNotify::has_maxhp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TeamRpcTeamMemberHPChangeNoticeNotify::set_has_maxhp() {
  _has_bits_[0] |= 0x00000004u;
}
void TeamRpcTeamMemberHPChangeNoticeNotify::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000004u;
}
void TeamRpcTeamMemberHPChangeNoticeNotify::clear_maxhp() {
  maxhp_ = -1;
  clear_has_maxhp();
}
::google::protobuf::int32 TeamRpcTeamMemberHPChangeNoticeNotify::maxhp() const {
  // @@protoc_insertion_point(field_get:TeamRpcTeamMemberHPChangeNoticeNotify.MaxHP)
  return maxhp_;
}
void TeamRpcTeamMemberHPChangeNoticeNotify::set_maxhp(::google::protobuf::int32 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcTeamMemberHPChangeNoticeNotify.MaxHP)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcInviteHandleNoticeNotify::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcInviteHandleNoticeNotify::TeamRpcInviteHandleNoticeNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcInviteHandleNoticeNotify)
}
TeamRpcInviteHandleNoticeNotify::TeamRpcInviteHandleNoticeNotify(const TeamRpcInviteHandleNoticeNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcInviteHandleNoticeNotify)
}

void TeamRpcInviteHandleNoticeNotify::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

TeamRpcInviteHandleNoticeNotify::~TeamRpcInviteHandleNoticeNotify() {
  // @@protoc_insertion_point(destructor:TeamRpcInviteHandleNoticeNotify)
  SharedDtor();
}

void TeamRpcInviteHandleNoticeNotify::SharedDtor() {
}

void TeamRpcInviteHandleNoticeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcInviteHandleNoticeNotify::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcInviteHandleNoticeNotify& TeamRpcInviteHandleNoticeNotify::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcInviteHandleNoticeNotify* TeamRpcInviteHandleNoticeNotify::New(::google::protobuf::Arena* arena) const {
  TeamRpcInviteHandleNoticeNotify* n = new TeamRpcInviteHandleNoticeNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcInviteHandleNoticeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcInviteHandleNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcInviteHandleNoticeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcInviteHandleNoticeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcInviteHandleNoticeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcInviteHandleNoticeNotify)
  return false;
#undef DO_
}

void TeamRpcInviteHandleNoticeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcInviteHandleNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcInviteHandleNoticeNotify)
}

::google::protobuf::uint8* TeamRpcInviteHandleNoticeNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcInviteHandleNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcInviteHandleNoticeNotify)
  return target;
}

size_t TeamRpcInviteHandleNoticeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcInviteHandleNoticeNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 2 [default = 0];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcInviteHandleNoticeNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcInviteHandleNoticeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcInviteHandleNoticeNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcInviteHandleNoticeNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcInviteHandleNoticeNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcInviteHandleNoticeNotify)
    MergeFrom(*source);
  }
}

void TeamRpcInviteHandleNoticeNotify::MergeFrom(const TeamRpcInviteHandleNoticeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcInviteHandleNoticeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void TeamRpcInviteHandleNoticeNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcInviteHandleNoticeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcInviteHandleNoticeNotify::CopyFrom(const TeamRpcInviteHandleNoticeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcInviteHandleNoticeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcInviteHandleNoticeNotify::IsInitialized() const {
  return true;
}

void TeamRpcInviteHandleNoticeNotify::Swap(TeamRpcInviteHandleNoticeNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcInviteHandleNoticeNotify::InternalSwap(TeamRpcInviteHandleNoticeNotify* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcInviteHandleNoticeNotify::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcInviteHandleNoticeNotify

// optional sint32 Result = 2 [default = 0];
bool TeamRpcInviteHandleNoticeNotify::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcInviteHandleNoticeNotify::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcInviteHandleNoticeNotify::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcInviteHandleNoticeNotify::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 TeamRpcInviteHandleNoticeNotify::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcInviteHandleNoticeNotify.Result)
  return result_;
}
void TeamRpcInviteHandleNoticeNotify::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcInviteHandleNoticeNotify.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcNearbyRoleObj::kUserIdFieldNumber;
const int TeamRpcNearbyRoleObj::kUserNameFieldNumber;
const int TeamRpcNearbyRoleObj::kLevelFieldNumber;
const int TeamRpcNearbyRoleObj::kProfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcNearbyRoleObj::TeamRpcNearbyRoleObj()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcNearbyRoleObj)
}
TeamRpcNearbyRoleObj::TeamRpcNearbyRoleObj(const TeamRpcNearbyRoleObj& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&prof_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(prof_));
  // @@protoc_insertion_point(copy_constructor:TeamRpcNearbyRoleObj)
}

void TeamRpcNearbyRoleObj::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = GOOGLE_LONGLONG(-1);
  level_ = -1;
  prof_ = -1;
}

TeamRpcNearbyRoleObj::~TeamRpcNearbyRoleObj() {
  // @@protoc_insertion_point(destructor:TeamRpcNearbyRoleObj)
  SharedDtor();
}

void TeamRpcNearbyRoleObj::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TeamRpcNearbyRoleObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcNearbyRoleObj::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcNearbyRoleObj& TeamRpcNearbyRoleObj::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcNearbyRoleObj* TeamRpcNearbyRoleObj::New(::google::protobuf::Arena* arena) const {
  TeamRpcNearbyRoleObj* n = new TeamRpcNearbyRoleObj;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcNearbyRoleObj::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcNearbyRoleObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    userid_ = GOOGLE_LONGLONG(-1);
    level_ = -1;
    prof_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcNearbyRoleObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcNearbyRoleObj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TeamRpcNearbyRoleObj.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Level = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Prof = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_prof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &prof_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcNearbyRoleObj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcNearbyRoleObj)
  return false;
#undef DO_
}

void TeamRpcNearbyRoleObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcNearbyRoleObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->userid(), output);
  }

  // optional string UserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TeamRpcNearbyRoleObj.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // optional sint32 Level = 4 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->level(), output);
  }

  // optional sint32 Prof = 5 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->prof(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcNearbyRoleObj)
}

::google::protobuf::uint8* TeamRpcNearbyRoleObj::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcNearbyRoleObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->userid(), target);
  }

  // optional string UserName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TeamRpcNearbyRoleObj.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // optional sint32 Level = 4 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->level(), target);
  }

  // optional sint32 Prof = 5 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->prof(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcNearbyRoleObj)
  return target;
}

size_t TeamRpcNearbyRoleObj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcNearbyRoleObj)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string UserName = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional sint64 UserId = 2 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

    // optional sint32 Level = 4 [default = -1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->level());
    }

    // optional sint32 Prof = 5 [default = -1];
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->prof());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcNearbyRoleObj::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcNearbyRoleObj)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcNearbyRoleObj* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcNearbyRoleObj>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcNearbyRoleObj)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcNearbyRoleObj)
    MergeFrom(*source);
  }
}

void TeamRpcNearbyRoleObj::MergeFrom(const TeamRpcNearbyRoleObj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcNearbyRoleObj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      prof_ = from.prof_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamRpcNearbyRoleObj::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcNearbyRoleObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcNearbyRoleObj::CopyFrom(const TeamRpcNearbyRoleObj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcNearbyRoleObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcNearbyRoleObj::IsInitialized() const {
  return true;
}

void TeamRpcNearbyRoleObj::Swap(TeamRpcNearbyRoleObj* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcNearbyRoleObj::InternalSwap(TeamRpcNearbyRoleObj* other) {
  using std::swap;
  username_.Swap(&other->username_);
  swap(userid_, other->userid_);
  swap(level_, other->level_);
  swap(prof_, other->prof_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcNearbyRoleObj::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcNearbyRoleObj

// optional sint64 UserId = 2 [default = -1];
bool TeamRpcNearbyRoleObj::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamRpcNearbyRoleObj::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamRpcNearbyRoleObj::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamRpcNearbyRoleObj::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 TeamRpcNearbyRoleObj::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyRoleObj.UserId)
  return userid_;
}
void TeamRpcNearbyRoleObj::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyRoleObj.UserId)
}

// optional string UserName = 3;
bool TeamRpcNearbyRoleObj::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcNearbyRoleObj::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcNearbyRoleObj::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcNearbyRoleObj::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& TeamRpcNearbyRoleObj::username() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyRoleObj.UserName)
  return username_.GetNoArena();
}
void TeamRpcNearbyRoleObj::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TeamRpcNearbyRoleObj.UserName)
}
#if LANG_CXX11
void TeamRpcNearbyRoleObj::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TeamRpcNearbyRoleObj.UserName)
}
#endif
void TeamRpcNearbyRoleObj::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TeamRpcNearbyRoleObj.UserName)
}
void TeamRpcNearbyRoleObj::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TeamRpcNearbyRoleObj.UserName)
}
::std::string* TeamRpcNearbyRoleObj::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:TeamRpcNearbyRoleObj.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TeamRpcNearbyRoleObj::release_username() {
  // @@protoc_insertion_point(field_release:TeamRpcNearbyRoleObj.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TeamRpcNearbyRoleObj::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:TeamRpcNearbyRoleObj.UserName)
}

// optional sint32 Level = 4 [default = -1];
bool TeamRpcNearbyRoleObj::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TeamRpcNearbyRoleObj::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
void TeamRpcNearbyRoleObj::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
void TeamRpcNearbyRoleObj::clear_level() {
  level_ = -1;
  clear_has_level();
}
::google::protobuf::int32 TeamRpcNearbyRoleObj::level() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyRoleObj.Level)
  return level_;
}
void TeamRpcNearbyRoleObj::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyRoleObj.Level)
}

// optional sint32 Prof = 5 [default = -1];
bool TeamRpcNearbyRoleObj::has_prof() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TeamRpcNearbyRoleObj::set_has_prof() {
  _has_bits_[0] |= 0x00000008u;
}
void TeamRpcNearbyRoleObj::clear_has_prof() {
  _has_bits_[0] &= ~0x00000008u;
}
void TeamRpcNearbyRoleObj::clear_prof() {
  prof_ = -1;
  clear_has_prof();
}
::google::protobuf::int32 TeamRpcNearbyRoleObj::prof() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyRoleObj.Prof)
  return prof_;
}
void TeamRpcNearbyRoleObj::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyRoleObj.Prof)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcNearbyRoleListAsk::TeamRpcNearbyRoleListAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcNearbyRoleListAsk)
}
TeamRpcNearbyRoleListAsk::TeamRpcNearbyRoleListAsk(const TeamRpcNearbyRoleListAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TeamRpcNearbyRoleListAsk)
}

void TeamRpcNearbyRoleListAsk::SharedCtor() {
  _cached_size_ = 0;
}

TeamRpcNearbyRoleListAsk::~TeamRpcNearbyRoleListAsk() {
  // @@protoc_insertion_point(destructor:TeamRpcNearbyRoleListAsk)
  SharedDtor();
}

void TeamRpcNearbyRoleListAsk::SharedDtor() {
}

void TeamRpcNearbyRoleListAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcNearbyRoleListAsk::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcNearbyRoleListAsk& TeamRpcNearbyRoleListAsk::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcNearbyRoleListAsk* TeamRpcNearbyRoleListAsk::New(::google::protobuf::Arena* arena) const {
  TeamRpcNearbyRoleListAsk* n = new TeamRpcNearbyRoleListAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcNearbyRoleListAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcNearbyRoleListAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcNearbyRoleListAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcNearbyRoleListAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcNearbyRoleListAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcNearbyRoleListAsk)
  return false;
#undef DO_
}

void TeamRpcNearbyRoleListAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcNearbyRoleListAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcNearbyRoleListAsk)
}

::google::protobuf::uint8* TeamRpcNearbyRoleListAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcNearbyRoleListAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcNearbyRoleListAsk)
  return target;
}

size_t TeamRpcNearbyRoleListAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcNearbyRoleListAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcNearbyRoleListAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcNearbyRoleListAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcNearbyRoleListAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcNearbyRoleListAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcNearbyRoleListAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcNearbyRoleListAsk)
    MergeFrom(*source);
  }
}

void TeamRpcNearbyRoleListAsk::MergeFrom(const TeamRpcNearbyRoleListAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcNearbyRoleListAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TeamRpcNearbyRoleListAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcNearbyRoleListAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcNearbyRoleListAsk::CopyFrom(const TeamRpcNearbyRoleListAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcNearbyRoleListAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcNearbyRoleListAsk::IsInitialized() const {
  return true;
}

void TeamRpcNearbyRoleListAsk::Swap(TeamRpcNearbyRoleListAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcNearbyRoleListAsk::InternalSwap(TeamRpcNearbyRoleListAsk* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcNearbyRoleListAsk::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcNearbyRoleListAsk

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcNearbyRoleListReply::kResultFieldNumber;
const int TeamRpcNearbyRoleListReply::kNearbyRoleListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcNearbyRoleListReply::TeamRpcNearbyRoleListReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcNearbyRoleListReply)
}
TeamRpcNearbyRoleListReply::TeamRpcNearbyRoleListReply(const TeamRpcNearbyRoleListReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      nearbyrolelist_(from.nearbyrolelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcNearbyRoleListReply)
}

void TeamRpcNearbyRoleListReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

TeamRpcNearbyRoleListReply::~TeamRpcNearbyRoleListReply() {
  // @@protoc_insertion_point(destructor:TeamRpcNearbyRoleListReply)
  SharedDtor();
}

void TeamRpcNearbyRoleListReply::SharedDtor() {
}

void TeamRpcNearbyRoleListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcNearbyRoleListReply::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcNearbyRoleListReply& TeamRpcNearbyRoleListReply::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcNearbyRoleListReply* TeamRpcNearbyRoleListReply::New(::google::protobuf::Arena* arena) const {
  TeamRpcNearbyRoleListReply* n = new TeamRpcNearbyRoleListReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcNearbyRoleListReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcNearbyRoleListReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nearbyrolelist_.Clear();
  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcNearbyRoleListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcNearbyRoleListReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TeamRpcNearbyRoleObj NearbyRoleList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nearbyrolelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcNearbyRoleListReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcNearbyRoleListReply)
  return false;
#undef DO_
}

void TeamRpcNearbyRoleListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcNearbyRoleListReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // repeated .TeamRpcNearbyRoleObj NearbyRoleList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nearbyrolelist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nearbyrolelist(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcNearbyRoleListReply)
}

::google::protobuf::uint8* TeamRpcNearbyRoleListReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcNearbyRoleListReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // repeated .TeamRpcNearbyRoleObj NearbyRoleList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nearbyrolelist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->nearbyrolelist(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcNearbyRoleListReply)
  return target;
}

size_t TeamRpcNearbyRoleListReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcNearbyRoleListReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .TeamRpcNearbyRoleObj NearbyRoleList = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->nearbyrolelist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nearbyrolelist(static_cast<int>(i)));
    }
  }

  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcNearbyRoleListReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcNearbyRoleListReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcNearbyRoleListReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcNearbyRoleListReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcNearbyRoleListReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcNearbyRoleListReply)
    MergeFrom(*source);
  }
}

void TeamRpcNearbyRoleListReply::MergeFrom(const TeamRpcNearbyRoleListReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcNearbyRoleListReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nearbyrolelist_.MergeFrom(from.nearbyrolelist_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void TeamRpcNearbyRoleListReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcNearbyRoleListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcNearbyRoleListReply::CopyFrom(const TeamRpcNearbyRoleListReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcNearbyRoleListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcNearbyRoleListReply::IsInitialized() const {
  return true;
}

void TeamRpcNearbyRoleListReply::Swap(TeamRpcNearbyRoleListReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcNearbyRoleListReply::InternalSwap(TeamRpcNearbyRoleListReply* other) {
  using std::swap;
  nearbyrolelist_.InternalSwap(&other->nearbyrolelist_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcNearbyRoleListReply::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcNearbyRoleListReply

// optional sint32 Result = 1 [default = -9999];
bool TeamRpcNearbyRoleListReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcNearbyRoleListReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcNearbyRoleListReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcNearbyRoleListReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TeamRpcNearbyRoleListReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyRoleListReply.Result)
  return result_;
}
void TeamRpcNearbyRoleListReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyRoleListReply.Result)
}

// repeated .TeamRpcNearbyRoleObj NearbyRoleList = 2;
int TeamRpcNearbyRoleListReply::nearbyrolelist_size() const {
  return nearbyrolelist_.size();
}
void TeamRpcNearbyRoleListReply::clear_nearbyrolelist() {
  nearbyrolelist_.Clear();
}
const ::TeamRpcNearbyRoleObj& TeamRpcNearbyRoleListReply::nearbyrolelist(int index) const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyRoleListReply.NearbyRoleList)
  return nearbyrolelist_.Get(index);
}
::TeamRpcNearbyRoleObj* TeamRpcNearbyRoleListReply::mutable_nearbyrolelist(int index) {
  // @@protoc_insertion_point(field_mutable:TeamRpcNearbyRoleListReply.NearbyRoleList)
  return nearbyrolelist_.Mutable(index);
}
::TeamRpcNearbyRoleObj* TeamRpcNearbyRoleListReply::add_nearbyrolelist() {
  // @@protoc_insertion_point(field_add:TeamRpcNearbyRoleListReply.NearbyRoleList)
  return nearbyrolelist_.Add();
}
::google::protobuf::RepeatedPtrField< ::TeamRpcNearbyRoleObj >*
TeamRpcNearbyRoleListReply::mutable_nearbyrolelist() {
  // @@protoc_insertion_point(field_mutable_list:TeamRpcNearbyRoleListReply.NearbyRoleList)
  return &nearbyrolelist_;
}
const ::google::protobuf::RepeatedPtrField< ::TeamRpcNearbyRoleObj >&
TeamRpcNearbyRoleListReply::nearbyrolelist() const {
  // @@protoc_insertion_point(field_list:TeamRpcNearbyRoleListReply.NearbyRoleList)
  return nearbyrolelist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcKickRoleAsk::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcKickRoleAsk::TeamRpcKickRoleAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcKickRoleAsk)
}
TeamRpcKickRoleAsk::TeamRpcKickRoleAsk(const TeamRpcKickRoleAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcKickRoleAsk)
}

void TeamRpcKickRoleAsk::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(-1);
}

TeamRpcKickRoleAsk::~TeamRpcKickRoleAsk() {
  // @@protoc_insertion_point(destructor:TeamRpcKickRoleAsk)
  SharedDtor();
}

void TeamRpcKickRoleAsk::SharedDtor() {
}

void TeamRpcKickRoleAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcKickRoleAsk::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcKickRoleAsk& TeamRpcKickRoleAsk::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcKickRoleAsk* TeamRpcKickRoleAsk::New(::google::protobuf::Arena* arena) const {
  TeamRpcKickRoleAsk* n = new TeamRpcKickRoleAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcKickRoleAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcKickRoleAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = GOOGLE_LONGLONG(-1);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcKickRoleAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcKickRoleAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcKickRoleAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcKickRoleAsk)
  return false;
#undef DO_
}

void TeamRpcKickRoleAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcKickRoleAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcKickRoleAsk)
}

::google::protobuf::uint8* TeamRpcKickRoleAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcKickRoleAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcKickRoleAsk)
  return target;
}

size_t TeamRpcKickRoleAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcKickRoleAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint64 UserId = 1 [default = -1];
  if (has_userid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcKickRoleAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcKickRoleAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcKickRoleAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcKickRoleAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcKickRoleAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcKickRoleAsk)
    MergeFrom(*source);
  }
}

void TeamRpcKickRoleAsk::MergeFrom(const TeamRpcKickRoleAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcKickRoleAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_userid()) {
    set_userid(from.userid());
  }
}

void TeamRpcKickRoleAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcKickRoleAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcKickRoleAsk::CopyFrom(const TeamRpcKickRoleAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcKickRoleAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcKickRoleAsk::IsInitialized() const {
  return true;
}

void TeamRpcKickRoleAsk::Swap(TeamRpcKickRoleAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcKickRoleAsk::InternalSwap(TeamRpcKickRoleAsk* other) {
  using std::swap;
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcKickRoleAsk::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcKickRoleAsk

// optional sint64 UserId = 1 [default = -1];
bool TeamRpcKickRoleAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcKickRoleAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcKickRoleAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcKickRoleAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 TeamRpcKickRoleAsk::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcKickRoleAsk.UserId)
  return userid_;
}
void TeamRpcKickRoleAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcKickRoleAsk.UserId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcKickRoleReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcKickRoleReply::TeamRpcKickRoleReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcKickRoleReply)
}
TeamRpcKickRoleReply::TeamRpcKickRoleReply(const TeamRpcKickRoleReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcKickRoleReply)
}

void TeamRpcKickRoleReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

TeamRpcKickRoleReply::~TeamRpcKickRoleReply() {
  // @@protoc_insertion_point(destructor:TeamRpcKickRoleReply)
  SharedDtor();
}

void TeamRpcKickRoleReply::SharedDtor() {
}

void TeamRpcKickRoleReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcKickRoleReply::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcKickRoleReply& TeamRpcKickRoleReply::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcKickRoleReply* TeamRpcKickRoleReply::New(::google::protobuf::Arena* arena) const {
  TeamRpcKickRoleReply* n = new TeamRpcKickRoleReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcKickRoleReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcKickRoleReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcKickRoleReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcKickRoleReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcKickRoleReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcKickRoleReply)
  return false;
#undef DO_
}

void TeamRpcKickRoleReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcKickRoleReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcKickRoleReply)
}

::google::protobuf::uint8* TeamRpcKickRoleReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcKickRoleReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcKickRoleReply)
  return target;
}

size_t TeamRpcKickRoleReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcKickRoleReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcKickRoleReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcKickRoleReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcKickRoleReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcKickRoleReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcKickRoleReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcKickRoleReply)
    MergeFrom(*source);
  }
}

void TeamRpcKickRoleReply::MergeFrom(const TeamRpcKickRoleReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcKickRoleReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void TeamRpcKickRoleReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcKickRoleReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcKickRoleReply::CopyFrom(const TeamRpcKickRoleReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcKickRoleReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcKickRoleReply::IsInitialized() const {
  return true;
}

void TeamRpcKickRoleReply::Swap(TeamRpcKickRoleReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcKickRoleReply::InternalSwap(TeamRpcKickRoleReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcKickRoleReply::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcKickRoleReply

// optional sint32 Result = 1 [default = -9999];
bool TeamRpcKickRoleReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcKickRoleReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcKickRoleReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcKickRoleReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TeamRpcKickRoleReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcKickRoleReply.Result)
  return result_;
}
void TeamRpcKickRoleReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcKickRoleReply.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcBeingKickedNoticeNotify::TeamRpcBeingKickedNoticeNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcBeingKickedNoticeNotify)
}
TeamRpcBeingKickedNoticeNotify::TeamRpcBeingKickedNoticeNotify(const TeamRpcBeingKickedNoticeNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TeamRpcBeingKickedNoticeNotify)
}

void TeamRpcBeingKickedNoticeNotify::SharedCtor() {
  _cached_size_ = 0;
}

TeamRpcBeingKickedNoticeNotify::~TeamRpcBeingKickedNoticeNotify() {
  // @@protoc_insertion_point(destructor:TeamRpcBeingKickedNoticeNotify)
  SharedDtor();
}

void TeamRpcBeingKickedNoticeNotify::SharedDtor() {
}

void TeamRpcBeingKickedNoticeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcBeingKickedNoticeNotify::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcBeingKickedNoticeNotify& TeamRpcBeingKickedNoticeNotify::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcBeingKickedNoticeNotify* TeamRpcBeingKickedNoticeNotify::New(::google::protobuf::Arena* arena) const {
  TeamRpcBeingKickedNoticeNotify* n = new TeamRpcBeingKickedNoticeNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcBeingKickedNoticeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcBeingKickedNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcBeingKickedNoticeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcBeingKickedNoticeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcBeingKickedNoticeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcBeingKickedNoticeNotify)
  return false;
#undef DO_
}

void TeamRpcBeingKickedNoticeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcBeingKickedNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcBeingKickedNoticeNotify)
}

::google::protobuf::uint8* TeamRpcBeingKickedNoticeNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcBeingKickedNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcBeingKickedNoticeNotify)
  return target;
}

size_t TeamRpcBeingKickedNoticeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcBeingKickedNoticeNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcBeingKickedNoticeNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcBeingKickedNoticeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcBeingKickedNoticeNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcBeingKickedNoticeNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcBeingKickedNoticeNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcBeingKickedNoticeNotify)
    MergeFrom(*source);
  }
}

void TeamRpcBeingKickedNoticeNotify::MergeFrom(const TeamRpcBeingKickedNoticeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcBeingKickedNoticeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TeamRpcBeingKickedNoticeNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcBeingKickedNoticeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcBeingKickedNoticeNotify::CopyFrom(const TeamRpcBeingKickedNoticeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcBeingKickedNoticeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcBeingKickedNoticeNotify::IsInitialized() const {
  return true;
}

void TeamRpcBeingKickedNoticeNotify::Swap(TeamRpcBeingKickedNoticeNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcBeingKickedNoticeNotify::InternalSwap(TeamRpcBeingKickedNoticeNotify* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcBeingKickedNoticeNotify::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcBeingKickedNoticeNotify

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcBreakUpAsk::TeamRpcBreakUpAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcBreakUpAsk)
}
TeamRpcBreakUpAsk::TeamRpcBreakUpAsk(const TeamRpcBreakUpAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TeamRpcBreakUpAsk)
}

void TeamRpcBreakUpAsk::SharedCtor() {
  _cached_size_ = 0;
}

TeamRpcBreakUpAsk::~TeamRpcBreakUpAsk() {
  // @@protoc_insertion_point(destructor:TeamRpcBreakUpAsk)
  SharedDtor();
}

void TeamRpcBreakUpAsk::SharedDtor() {
}

void TeamRpcBreakUpAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcBreakUpAsk::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcBreakUpAsk& TeamRpcBreakUpAsk::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcBreakUpAsk* TeamRpcBreakUpAsk::New(::google::protobuf::Arena* arena) const {
  TeamRpcBreakUpAsk* n = new TeamRpcBreakUpAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcBreakUpAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcBreakUpAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcBreakUpAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcBreakUpAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcBreakUpAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcBreakUpAsk)
  return false;
#undef DO_
}

void TeamRpcBreakUpAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcBreakUpAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcBreakUpAsk)
}

::google::protobuf::uint8* TeamRpcBreakUpAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcBreakUpAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcBreakUpAsk)
  return target;
}

size_t TeamRpcBreakUpAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcBreakUpAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcBreakUpAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcBreakUpAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcBreakUpAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcBreakUpAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcBreakUpAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcBreakUpAsk)
    MergeFrom(*source);
  }
}

void TeamRpcBreakUpAsk::MergeFrom(const TeamRpcBreakUpAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcBreakUpAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TeamRpcBreakUpAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcBreakUpAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcBreakUpAsk::CopyFrom(const TeamRpcBreakUpAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcBreakUpAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcBreakUpAsk::IsInitialized() const {
  return true;
}

void TeamRpcBreakUpAsk::Swap(TeamRpcBreakUpAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcBreakUpAsk::InternalSwap(TeamRpcBreakUpAsk* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcBreakUpAsk::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcBreakUpAsk

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcBreakUpReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcBreakUpReply::TeamRpcBreakUpReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcBreakUpReply)
}
TeamRpcBreakUpReply::TeamRpcBreakUpReply(const TeamRpcBreakUpReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcBreakUpReply)
}

void TeamRpcBreakUpReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

TeamRpcBreakUpReply::~TeamRpcBreakUpReply() {
  // @@protoc_insertion_point(destructor:TeamRpcBreakUpReply)
  SharedDtor();
}

void TeamRpcBreakUpReply::SharedDtor() {
}

void TeamRpcBreakUpReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcBreakUpReply::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcBreakUpReply& TeamRpcBreakUpReply::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcBreakUpReply* TeamRpcBreakUpReply::New(::google::protobuf::Arena* arena) const {
  TeamRpcBreakUpReply* n = new TeamRpcBreakUpReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcBreakUpReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcBreakUpReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcBreakUpReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcBreakUpReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcBreakUpReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcBreakUpReply)
  return false;
#undef DO_
}

void TeamRpcBreakUpReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcBreakUpReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcBreakUpReply)
}

::google::protobuf::uint8* TeamRpcBreakUpReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcBreakUpReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcBreakUpReply)
  return target;
}

size_t TeamRpcBreakUpReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcBreakUpReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcBreakUpReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcBreakUpReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcBreakUpReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcBreakUpReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcBreakUpReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcBreakUpReply)
    MergeFrom(*source);
  }
}

void TeamRpcBreakUpReply::MergeFrom(const TeamRpcBreakUpReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcBreakUpReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void TeamRpcBreakUpReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcBreakUpReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcBreakUpReply::CopyFrom(const TeamRpcBreakUpReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcBreakUpReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcBreakUpReply::IsInitialized() const {
  return true;
}

void TeamRpcBreakUpReply::Swap(TeamRpcBreakUpReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcBreakUpReply::InternalSwap(TeamRpcBreakUpReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcBreakUpReply::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcBreakUpReply

// optional sint32 Result = 1 [default = -9999];
bool TeamRpcBreakUpReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcBreakUpReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcBreakUpReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcBreakUpReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TeamRpcBreakUpReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcBreakUpReply.Result)
  return result_;
}
void TeamRpcBreakUpReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBreakUpReply.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcAddNewMemberNoticeNotify::kUserIdFieldNumber;
const int TeamRpcAddNewMemberNoticeNotify::kUserNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcAddNewMemberNoticeNotify::TeamRpcAddNewMemberNoticeNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcAddNewMemberNoticeNotify)
}
TeamRpcAddNewMemberNoticeNotify::TeamRpcAddNewMemberNoticeNotify(const TeamRpcAddNewMemberNoticeNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcAddNewMemberNoticeNotify)
}

void TeamRpcAddNewMemberNoticeNotify::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = GOOGLE_LONGLONG(-1);
}

TeamRpcAddNewMemberNoticeNotify::~TeamRpcAddNewMemberNoticeNotify() {
  // @@protoc_insertion_point(destructor:TeamRpcAddNewMemberNoticeNotify)
  SharedDtor();
}

void TeamRpcAddNewMemberNoticeNotify::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TeamRpcAddNewMemberNoticeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcAddNewMemberNoticeNotify::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcAddNewMemberNoticeNotify& TeamRpcAddNewMemberNoticeNotify::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcAddNewMemberNoticeNotify* TeamRpcAddNewMemberNoticeNotify::New(::google::protobuf::Arena* arena) const {
  TeamRpcAddNewMemberNoticeNotify* n = new TeamRpcAddNewMemberNoticeNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcAddNewMemberNoticeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcAddNewMemberNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    userid_ = GOOGLE_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcAddNewMemberNoticeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcAddNewMemberNoticeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 UserId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TeamRpcAddNewMemberNoticeNotify.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcAddNewMemberNoticeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcAddNewMemberNoticeNotify)
  return false;
#undef DO_
}

void TeamRpcAddNewMemberNoticeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcAddNewMemberNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->userid(), output);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TeamRpcAddNewMemberNoticeNotify.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcAddNewMemberNoticeNotify)
}

::google::protobuf::uint8* TeamRpcAddNewMemberNoticeNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcAddNewMemberNoticeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 UserId = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->userid(), target);
  }

  // optional string UserName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TeamRpcAddNewMemberNoticeNotify.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcAddNewMemberNoticeNotify)
  return target;
}

size_t TeamRpcAddNewMemberNoticeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcAddNewMemberNoticeNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional sint64 UserId = 1 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcAddNewMemberNoticeNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcAddNewMemberNoticeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcAddNewMemberNoticeNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcAddNewMemberNoticeNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcAddNewMemberNoticeNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcAddNewMemberNoticeNotify)
    MergeFrom(*source);
  }
}

void TeamRpcAddNewMemberNoticeNotify::MergeFrom(const TeamRpcAddNewMemberNoticeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcAddNewMemberNoticeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamRpcAddNewMemberNoticeNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcAddNewMemberNoticeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcAddNewMemberNoticeNotify::CopyFrom(const TeamRpcAddNewMemberNoticeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcAddNewMemberNoticeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcAddNewMemberNoticeNotify::IsInitialized() const {
  return true;
}

void TeamRpcAddNewMemberNoticeNotify::Swap(TeamRpcAddNewMemberNoticeNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcAddNewMemberNoticeNotify::InternalSwap(TeamRpcAddNewMemberNoticeNotify* other) {
  using std::swap;
  username_.Swap(&other->username_);
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcAddNewMemberNoticeNotify::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcAddNewMemberNoticeNotify

// optional sint64 UserId = 1 [default = -1];
bool TeamRpcAddNewMemberNoticeNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamRpcAddNewMemberNoticeNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamRpcAddNewMemberNoticeNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamRpcAddNewMemberNoticeNotify::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 TeamRpcAddNewMemberNoticeNotify::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcAddNewMemberNoticeNotify.UserId)
  return userid_;
}
void TeamRpcAddNewMemberNoticeNotify::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcAddNewMemberNoticeNotify.UserId)
}

// optional string UserName = 2;
bool TeamRpcAddNewMemberNoticeNotify::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcAddNewMemberNoticeNotify::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcAddNewMemberNoticeNotify::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcAddNewMemberNoticeNotify::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& TeamRpcAddNewMemberNoticeNotify::username() const {
  // @@protoc_insertion_point(field_get:TeamRpcAddNewMemberNoticeNotify.UserName)
  return username_.GetNoArena();
}
void TeamRpcAddNewMemberNoticeNotify::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TeamRpcAddNewMemberNoticeNotify.UserName)
}
#if LANG_CXX11
void TeamRpcAddNewMemberNoticeNotify::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TeamRpcAddNewMemberNoticeNotify.UserName)
}
#endif
void TeamRpcAddNewMemberNoticeNotify::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TeamRpcAddNewMemberNoticeNotify.UserName)
}
void TeamRpcAddNewMemberNoticeNotify::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TeamRpcAddNewMemberNoticeNotify.UserName)
}
::std::string* TeamRpcAddNewMemberNoticeNotify::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:TeamRpcAddNewMemberNoticeNotify.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TeamRpcAddNewMemberNoticeNotify::release_username() {
  // @@protoc_insertion_point(field_release:TeamRpcAddNewMemberNoticeNotify.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TeamRpcAddNewMemberNoticeNotify::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:TeamRpcAddNewMemberNoticeNotify.UserName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcCaptainAutoMatchAsk::kOperFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcCaptainAutoMatchAsk::TeamRpcCaptainAutoMatchAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcCaptainAutoMatchAsk)
}
TeamRpcCaptainAutoMatchAsk::TeamRpcCaptainAutoMatchAsk(const TeamRpcCaptainAutoMatchAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  oper_ = from.oper_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcCaptainAutoMatchAsk)
}

void TeamRpcCaptainAutoMatchAsk::SharedCtor() {
  _cached_size_ = 0;
  oper_ = -1;
}

TeamRpcCaptainAutoMatchAsk::~TeamRpcCaptainAutoMatchAsk() {
  // @@protoc_insertion_point(destructor:TeamRpcCaptainAutoMatchAsk)
  SharedDtor();
}

void TeamRpcCaptainAutoMatchAsk::SharedDtor() {
}

void TeamRpcCaptainAutoMatchAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcCaptainAutoMatchAsk::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcCaptainAutoMatchAsk& TeamRpcCaptainAutoMatchAsk::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcCaptainAutoMatchAsk* TeamRpcCaptainAutoMatchAsk::New(::google::protobuf::Arena* arena) const {
  TeamRpcCaptainAutoMatchAsk* n = new TeamRpcCaptainAutoMatchAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcCaptainAutoMatchAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcCaptainAutoMatchAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  oper_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcCaptainAutoMatchAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcCaptainAutoMatchAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Oper = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_oper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &oper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcCaptainAutoMatchAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcCaptainAutoMatchAsk)
  return false;
#undef DO_
}

void TeamRpcCaptainAutoMatchAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcCaptainAutoMatchAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Oper = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->oper(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcCaptainAutoMatchAsk)
}

::google::protobuf::uint8* TeamRpcCaptainAutoMatchAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcCaptainAutoMatchAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Oper = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->oper(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcCaptainAutoMatchAsk)
  return target;
}

size_t TeamRpcCaptainAutoMatchAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcCaptainAutoMatchAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Oper = 1 [default = -1];
  if (has_oper()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->oper());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcCaptainAutoMatchAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcCaptainAutoMatchAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcCaptainAutoMatchAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcCaptainAutoMatchAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcCaptainAutoMatchAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcCaptainAutoMatchAsk)
    MergeFrom(*source);
  }
}

void TeamRpcCaptainAutoMatchAsk::MergeFrom(const TeamRpcCaptainAutoMatchAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcCaptainAutoMatchAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_oper()) {
    set_oper(from.oper());
  }
}

void TeamRpcCaptainAutoMatchAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcCaptainAutoMatchAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcCaptainAutoMatchAsk::CopyFrom(const TeamRpcCaptainAutoMatchAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcCaptainAutoMatchAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcCaptainAutoMatchAsk::IsInitialized() const {
  return true;
}

void TeamRpcCaptainAutoMatchAsk::Swap(TeamRpcCaptainAutoMatchAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcCaptainAutoMatchAsk::InternalSwap(TeamRpcCaptainAutoMatchAsk* other) {
  using std::swap;
  swap(oper_, other->oper_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcCaptainAutoMatchAsk::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcCaptainAutoMatchAsk

// optional sint32 Oper = 1 [default = -1];
bool TeamRpcCaptainAutoMatchAsk::has_oper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcCaptainAutoMatchAsk::set_has_oper() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcCaptainAutoMatchAsk::clear_has_oper() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcCaptainAutoMatchAsk::clear_oper() {
  oper_ = -1;
  clear_has_oper();
}
::google::protobuf::int32 TeamRpcCaptainAutoMatchAsk::oper() const {
  // @@protoc_insertion_point(field_get:TeamRpcCaptainAutoMatchAsk.Oper)
  return oper_;
}
void TeamRpcCaptainAutoMatchAsk::set_oper(::google::protobuf::int32 value) {
  set_has_oper();
  oper_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcCaptainAutoMatchAsk.Oper)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcCaptainAutoMatchReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcCaptainAutoMatchReply::TeamRpcCaptainAutoMatchReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcCaptainAutoMatchReply)
}
TeamRpcCaptainAutoMatchReply::TeamRpcCaptainAutoMatchReply(const TeamRpcCaptainAutoMatchReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcCaptainAutoMatchReply)
}

void TeamRpcCaptainAutoMatchReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

TeamRpcCaptainAutoMatchReply::~TeamRpcCaptainAutoMatchReply() {
  // @@protoc_insertion_point(destructor:TeamRpcCaptainAutoMatchReply)
  SharedDtor();
}

void TeamRpcCaptainAutoMatchReply::SharedDtor() {
}

void TeamRpcCaptainAutoMatchReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcCaptainAutoMatchReply::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcCaptainAutoMatchReply& TeamRpcCaptainAutoMatchReply::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcCaptainAutoMatchReply* TeamRpcCaptainAutoMatchReply::New(::google::protobuf::Arena* arena) const {
  TeamRpcCaptainAutoMatchReply* n = new TeamRpcCaptainAutoMatchReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcCaptainAutoMatchReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcCaptainAutoMatchReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcCaptainAutoMatchReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcCaptainAutoMatchReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcCaptainAutoMatchReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcCaptainAutoMatchReply)
  return false;
#undef DO_
}

void TeamRpcCaptainAutoMatchReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcCaptainAutoMatchReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcCaptainAutoMatchReply)
}

::google::protobuf::uint8* TeamRpcCaptainAutoMatchReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcCaptainAutoMatchReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcCaptainAutoMatchReply)
  return target;
}

size_t TeamRpcCaptainAutoMatchReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcCaptainAutoMatchReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcCaptainAutoMatchReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcCaptainAutoMatchReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcCaptainAutoMatchReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcCaptainAutoMatchReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcCaptainAutoMatchReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcCaptainAutoMatchReply)
    MergeFrom(*source);
  }
}

void TeamRpcCaptainAutoMatchReply::MergeFrom(const TeamRpcCaptainAutoMatchReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcCaptainAutoMatchReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void TeamRpcCaptainAutoMatchReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcCaptainAutoMatchReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcCaptainAutoMatchReply::CopyFrom(const TeamRpcCaptainAutoMatchReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcCaptainAutoMatchReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcCaptainAutoMatchReply::IsInitialized() const {
  return true;
}

void TeamRpcCaptainAutoMatchReply::Swap(TeamRpcCaptainAutoMatchReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcCaptainAutoMatchReply::InternalSwap(TeamRpcCaptainAutoMatchReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcCaptainAutoMatchReply::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcCaptainAutoMatchReply

// optional sint32 Result = 1 [default = -9999];
bool TeamRpcCaptainAutoMatchReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcCaptainAutoMatchReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcCaptainAutoMatchReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcCaptainAutoMatchReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TeamRpcCaptainAutoMatchReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcCaptainAutoMatchReply.Result)
  return result_;
}
void TeamRpcCaptainAutoMatchReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcCaptainAutoMatchReply.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcNormalAutoMatchAsk::kOperFieldNumber;
const int TeamRpcNormalAutoMatchAsk::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcNormalAutoMatchAsk::TeamRpcNormalAutoMatchAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcNormalAutoMatchAsk)
}
TeamRpcNormalAutoMatchAsk::TeamRpcNormalAutoMatchAsk(const TeamRpcNormalAutoMatchAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&oper_, &from.oper_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&oper_)) + sizeof(target_));
  // @@protoc_insertion_point(copy_constructor:TeamRpcNormalAutoMatchAsk)
}

void TeamRpcNormalAutoMatchAsk::SharedCtor() {
  _cached_size_ = 0;
  oper_ = -1;
  target_ = -1;
}

TeamRpcNormalAutoMatchAsk::~TeamRpcNormalAutoMatchAsk() {
  // @@protoc_insertion_point(destructor:TeamRpcNormalAutoMatchAsk)
  SharedDtor();
}

void TeamRpcNormalAutoMatchAsk::SharedDtor() {
}

void TeamRpcNormalAutoMatchAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcNormalAutoMatchAsk::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcNormalAutoMatchAsk& TeamRpcNormalAutoMatchAsk::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcNormalAutoMatchAsk* TeamRpcNormalAutoMatchAsk::New(::google::protobuf::Arena* arena) const {
  TeamRpcNormalAutoMatchAsk* n = new TeamRpcNormalAutoMatchAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcNormalAutoMatchAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcNormalAutoMatchAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    oper_ = -1;
    target_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcNormalAutoMatchAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcNormalAutoMatchAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Oper = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_oper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &oper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Target = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcNormalAutoMatchAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcNormalAutoMatchAsk)
  return false;
#undef DO_
}

void TeamRpcNormalAutoMatchAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcNormalAutoMatchAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Oper = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->oper(), output);
  }

  // optional sint32 Target = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->target(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcNormalAutoMatchAsk)
}

::google::protobuf::uint8* TeamRpcNormalAutoMatchAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcNormalAutoMatchAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Oper = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->oper(), target);
  }

  // optional sint32 Target = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->target(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcNormalAutoMatchAsk)
  return target;
}

size_t TeamRpcNormalAutoMatchAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcNormalAutoMatchAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Oper = 1 [default = -1];
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->oper());
    }

    // optional sint32 Target = 2 [default = -1];
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->target());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcNormalAutoMatchAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcNormalAutoMatchAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcNormalAutoMatchAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcNormalAutoMatchAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcNormalAutoMatchAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcNormalAutoMatchAsk)
    MergeFrom(*source);
  }
}

void TeamRpcNormalAutoMatchAsk::MergeFrom(const TeamRpcNormalAutoMatchAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcNormalAutoMatchAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      oper_ = from.oper_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_ = from.target_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamRpcNormalAutoMatchAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcNormalAutoMatchAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcNormalAutoMatchAsk::CopyFrom(const TeamRpcNormalAutoMatchAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcNormalAutoMatchAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcNormalAutoMatchAsk::IsInitialized() const {
  return true;
}

void TeamRpcNormalAutoMatchAsk::Swap(TeamRpcNormalAutoMatchAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcNormalAutoMatchAsk::InternalSwap(TeamRpcNormalAutoMatchAsk* other) {
  using std::swap;
  swap(oper_, other->oper_);
  swap(target_, other->target_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcNormalAutoMatchAsk::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcNormalAutoMatchAsk

// optional sint32 Oper = 1 [default = -1];
bool TeamRpcNormalAutoMatchAsk::has_oper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcNormalAutoMatchAsk::set_has_oper() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcNormalAutoMatchAsk::clear_has_oper() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcNormalAutoMatchAsk::clear_oper() {
  oper_ = -1;
  clear_has_oper();
}
::google::protobuf::int32 TeamRpcNormalAutoMatchAsk::oper() const {
  // @@protoc_insertion_point(field_get:TeamRpcNormalAutoMatchAsk.Oper)
  return oper_;
}
void TeamRpcNormalAutoMatchAsk::set_oper(::google::protobuf::int32 value) {
  set_has_oper();
  oper_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNormalAutoMatchAsk.Oper)
}

// optional sint32 Target = 2 [default = -1];
bool TeamRpcNormalAutoMatchAsk::has_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamRpcNormalAutoMatchAsk::set_has_target() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamRpcNormalAutoMatchAsk::clear_has_target() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamRpcNormalAutoMatchAsk::clear_target() {
  target_ = -1;
  clear_has_target();
}
::google::protobuf::int32 TeamRpcNormalAutoMatchAsk::target() const {
  // @@protoc_insertion_point(field_get:TeamRpcNormalAutoMatchAsk.Target)
  return target_;
}
void TeamRpcNormalAutoMatchAsk::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNormalAutoMatchAsk.Target)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcNormalAutoMatchReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcNormalAutoMatchReply::TeamRpcNormalAutoMatchReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcNormalAutoMatchReply)
}
TeamRpcNormalAutoMatchReply::TeamRpcNormalAutoMatchReply(const TeamRpcNormalAutoMatchReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcNormalAutoMatchReply)
}

void TeamRpcNormalAutoMatchReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

TeamRpcNormalAutoMatchReply::~TeamRpcNormalAutoMatchReply() {
  // @@protoc_insertion_point(destructor:TeamRpcNormalAutoMatchReply)
  SharedDtor();
}

void TeamRpcNormalAutoMatchReply::SharedDtor() {
}

void TeamRpcNormalAutoMatchReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcNormalAutoMatchReply::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcNormalAutoMatchReply& TeamRpcNormalAutoMatchReply::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcNormalAutoMatchReply* TeamRpcNormalAutoMatchReply::New(::google::protobuf::Arena* arena) const {
  TeamRpcNormalAutoMatchReply* n = new TeamRpcNormalAutoMatchReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcNormalAutoMatchReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcNormalAutoMatchReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcNormalAutoMatchReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcNormalAutoMatchReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcNormalAutoMatchReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcNormalAutoMatchReply)
  return false;
#undef DO_
}

void TeamRpcNormalAutoMatchReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcNormalAutoMatchReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcNormalAutoMatchReply)
}

::google::protobuf::uint8* TeamRpcNormalAutoMatchReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcNormalAutoMatchReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcNormalAutoMatchReply)
  return target;
}

size_t TeamRpcNormalAutoMatchReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcNormalAutoMatchReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcNormalAutoMatchReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcNormalAutoMatchReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcNormalAutoMatchReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcNormalAutoMatchReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcNormalAutoMatchReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcNormalAutoMatchReply)
    MergeFrom(*source);
  }
}

void TeamRpcNormalAutoMatchReply::MergeFrom(const TeamRpcNormalAutoMatchReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcNormalAutoMatchReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void TeamRpcNormalAutoMatchReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcNormalAutoMatchReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcNormalAutoMatchReply::CopyFrom(const TeamRpcNormalAutoMatchReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcNormalAutoMatchReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcNormalAutoMatchReply::IsInitialized() const {
  return true;
}

void TeamRpcNormalAutoMatchReply::Swap(TeamRpcNormalAutoMatchReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcNormalAutoMatchReply::InternalSwap(TeamRpcNormalAutoMatchReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcNormalAutoMatchReply::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcNormalAutoMatchReply

// optional sint32 Result = 1 [default = -9999];
bool TeamRpcNormalAutoMatchReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcNormalAutoMatchReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcNormalAutoMatchReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcNormalAutoMatchReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TeamRpcNormalAutoMatchReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcNormalAutoMatchReply.Result)
  return result_;
}
void TeamRpcNormalAutoMatchReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNormalAutoMatchReply.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcFollowAsk::TeamRpcFollowAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcFollowAsk)
}
TeamRpcFollowAsk::TeamRpcFollowAsk(const TeamRpcFollowAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TeamRpcFollowAsk)
}

void TeamRpcFollowAsk::SharedCtor() {
  _cached_size_ = 0;
}

TeamRpcFollowAsk::~TeamRpcFollowAsk() {
  // @@protoc_insertion_point(destructor:TeamRpcFollowAsk)
  SharedDtor();
}

void TeamRpcFollowAsk::SharedDtor() {
}

void TeamRpcFollowAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcFollowAsk::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcFollowAsk& TeamRpcFollowAsk::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcFollowAsk* TeamRpcFollowAsk::New(::google::protobuf::Arena* arena) const {
  TeamRpcFollowAsk* n = new TeamRpcFollowAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcFollowAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcFollowAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcFollowAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcFollowAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcFollowAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcFollowAsk)
  return false;
#undef DO_
}

void TeamRpcFollowAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcFollowAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcFollowAsk)
}

::google::protobuf::uint8* TeamRpcFollowAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcFollowAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcFollowAsk)
  return target;
}

size_t TeamRpcFollowAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcFollowAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcFollowAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcFollowAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcFollowAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcFollowAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcFollowAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcFollowAsk)
    MergeFrom(*source);
  }
}

void TeamRpcFollowAsk::MergeFrom(const TeamRpcFollowAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcFollowAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TeamRpcFollowAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcFollowAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcFollowAsk::CopyFrom(const TeamRpcFollowAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcFollowAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcFollowAsk::IsInitialized() const {
  return true;
}

void TeamRpcFollowAsk::Swap(TeamRpcFollowAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcFollowAsk::InternalSwap(TeamRpcFollowAsk* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcFollowAsk::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcFollowAsk

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcFollowReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcFollowReply::TeamRpcFollowReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcFollowReply)
}
TeamRpcFollowReply::TeamRpcFollowReply(const TeamRpcFollowReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcFollowReply)
}

void TeamRpcFollowReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

TeamRpcFollowReply::~TeamRpcFollowReply() {
  // @@protoc_insertion_point(destructor:TeamRpcFollowReply)
  SharedDtor();
}

void TeamRpcFollowReply::SharedDtor() {
}

void TeamRpcFollowReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcFollowReply::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcFollowReply& TeamRpcFollowReply::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcFollowReply* TeamRpcFollowReply::New(::google::protobuf::Arena* arena) const {
  TeamRpcFollowReply* n = new TeamRpcFollowReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcFollowReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcFollowReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcFollowReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcFollowReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcFollowReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcFollowReply)
  return false;
#undef DO_
}

void TeamRpcFollowReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcFollowReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcFollowReply)
}

::google::protobuf::uint8* TeamRpcFollowReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcFollowReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcFollowReply)
  return target;
}

size_t TeamRpcFollowReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcFollowReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcFollowReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcFollowReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcFollowReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcFollowReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcFollowReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcFollowReply)
    MergeFrom(*source);
  }
}

void TeamRpcFollowReply::MergeFrom(const TeamRpcFollowReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcFollowReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void TeamRpcFollowReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcFollowReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcFollowReply::CopyFrom(const TeamRpcFollowReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcFollowReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcFollowReply::IsInitialized() const {
  return true;
}

void TeamRpcFollowReply::Swap(TeamRpcFollowReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcFollowReply::InternalSwap(TeamRpcFollowReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcFollowReply::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcFollowReply

// optional sint32 Result = 1 [default = -9999];
bool TeamRpcFollowReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcFollowReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcFollowReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcFollowReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TeamRpcFollowReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcFollowReply.Result)
  return result_;
}
void TeamRpcFollowReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcFollowReply.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcClearApplyListAsk::TeamRpcClearApplyListAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcClearApplyListAsk)
}
TeamRpcClearApplyListAsk::TeamRpcClearApplyListAsk(const TeamRpcClearApplyListAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TeamRpcClearApplyListAsk)
}

void TeamRpcClearApplyListAsk::SharedCtor() {
  _cached_size_ = 0;
}

TeamRpcClearApplyListAsk::~TeamRpcClearApplyListAsk() {
  // @@protoc_insertion_point(destructor:TeamRpcClearApplyListAsk)
  SharedDtor();
}

void TeamRpcClearApplyListAsk::SharedDtor() {
}

void TeamRpcClearApplyListAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcClearApplyListAsk::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcClearApplyListAsk& TeamRpcClearApplyListAsk::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcClearApplyListAsk* TeamRpcClearApplyListAsk::New(::google::protobuf::Arena* arena) const {
  TeamRpcClearApplyListAsk* n = new TeamRpcClearApplyListAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcClearApplyListAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcClearApplyListAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcClearApplyListAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcClearApplyListAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcClearApplyListAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcClearApplyListAsk)
  return false;
#undef DO_
}

void TeamRpcClearApplyListAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcClearApplyListAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcClearApplyListAsk)
}

::google::protobuf::uint8* TeamRpcClearApplyListAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcClearApplyListAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcClearApplyListAsk)
  return target;
}

size_t TeamRpcClearApplyListAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcClearApplyListAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcClearApplyListAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcClearApplyListAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcClearApplyListAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcClearApplyListAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcClearApplyListAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcClearApplyListAsk)
    MergeFrom(*source);
  }
}

void TeamRpcClearApplyListAsk::MergeFrom(const TeamRpcClearApplyListAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcClearApplyListAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TeamRpcClearApplyListAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcClearApplyListAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcClearApplyListAsk::CopyFrom(const TeamRpcClearApplyListAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcClearApplyListAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcClearApplyListAsk::IsInitialized() const {
  return true;
}

void TeamRpcClearApplyListAsk::Swap(TeamRpcClearApplyListAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcClearApplyListAsk::InternalSwap(TeamRpcClearApplyListAsk* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcClearApplyListAsk::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcClearApplyListAsk

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamRpcClearApplyListReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamRpcClearApplyListReply::TeamRpcClearApplyListReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TeamRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamRpcClearApplyListReply)
}
TeamRpcClearApplyListReply::TeamRpcClearApplyListReply(const TeamRpcClearApplyListReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:TeamRpcClearApplyListReply)
}

void TeamRpcClearApplyListReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

TeamRpcClearApplyListReply::~TeamRpcClearApplyListReply() {
  // @@protoc_insertion_point(destructor:TeamRpcClearApplyListReply)
  SharedDtor();
}

void TeamRpcClearApplyListReply::SharedDtor() {
}

void TeamRpcClearApplyListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRpcClearApplyListReply::descriptor() {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamRpcClearApplyListReply& TeamRpcClearApplyListReply::default_instance() {
  protobuf_TeamRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamRpcClearApplyListReply* TeamRpcClearApplyListReply::New(::google::protobuf::Arena* arena) const {
  TeamRpcClearApplyListReply* n = new TeamRpcClearApplyListReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamRpcClearApplyListReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamRpcClearApplyListReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamRpcClearApplyListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamRpcClearApplyListReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamRpcClearApplyListReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamRpcClearApplyListReply)
  return false;
#undef DO_
}

void TeamRpcClearApplyListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamRpcClearApplyListReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamRpcClearApplyListReply)
}

::google::protobuf::uint8* TeamRpcClearApplyListReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamRpcClearApplyListReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamRpcClearApplyListReply)
  return target;
}

size_t TeamRpcClearApplyListReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamRpcClearApplyListReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRpcClearApplyListReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamRpcClearApplyListReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamRpcClearApplyListReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamRpcClearApplyListReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamRpcClearApplyListReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamRpcClearApplyListReply)
    MergeFrom(*source);
  }
}

void TeamRpcClearApplyListReply::MergeFrom(const TeamRpcClearApplyListReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamRpcClearApplyListReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void TeamRpcClearApplyListReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamRpcClearApplyListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRpcClearApplyListReply::CopyFrom(const TeamRpcClearApplyListReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamRpcClearApplyListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRpcClearApplyListReply::IsInitialized() const {
  return true;
}

void TeamRpcClearApplyListReply::Swap(TeamRpcClearApplyListReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamRpcClearApplyListReply::InternalSwap(TeamRpcClearApplyListReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamRpcClearApplyListReply::GetMetadata() const {
  protobuf_TeamRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TeamRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamRpcClearApplyListReply

// optional sint32 Result = 1 [default = -9999];
bool TeamRpcClearApplyListReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamRpcClearApplyListReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamRpcClearApplyListReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamRpcClearApplyListReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TeamRpcClearApplyListReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcClearApplyListReply.Result)
  return result_;
}
void TeamRpcClearApplyListReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcClearApplyListReply.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
