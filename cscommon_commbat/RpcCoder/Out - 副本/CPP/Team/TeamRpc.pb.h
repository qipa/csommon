// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TeamRpc.proto

#ifndef PROTOBUF_TeamRpc_2eproto__INCLUDED
#define PROTOBUF_TeamRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "PublicStruct.pb.h"
// @@protoc_insertion_point(includes)
class TeamRpcAddNewMemberNoticeNotify;
class TeamRpcAddNewMemberNoticeNotifyDefaultTypeInternal;
extern TeamRpcAddNewMemberNoticeNotifyDefaultTypeInternal _TeamRpcAddNewMemberNoticeNotify_default_instance_;
class TeamRpcApplyForTeamAsk;
class TeamRpcApplyForTeamAskDefaultTypeInternal;
extern TeamRpcApplyForTeamAskDefaultTypeInternal _TeamRpcApplyForTeamAsk_default_instance_;
class TeamRpcApplyForTeamReply;
class TeamRpcApplyForTeamReplyDefaultTypeInternal;
extern TeamRpcApplyForTeamReplyDefaultTypeInternal _TeamRpcApplyForTeamReply_default_instance_;
class TeamRpcApplyHandleAgreeAsk;
class TeamRpcApplyHandleAgreeAskDefaultTypeInternal;
extern TeamRpcApplyHandleAgreeAskDefaultTypeInternal _TeamRpcApplyHandleAgreeAsk_default_instance_;
class TeamRpcApplyHandleAgreeReply;
class TeamRpcApplyHandleAgreeReplyDefaultTypeInternal;
extern TeamRpcApplyHandleAgreeReplyDefaultTypeInternal _TeamRpcApplyHandleAgreeReply_default_instance_;
class TeamRpcApplyNoticeCaptainNotify;
class TeamRpcApplyNoticeCaptainNotifyDefaultTypeInternal;
extern TeamRpcApplyNoticeCaptainNotifyDefaultTypeInternal _TeamRpcApplyNoticeCaptainNotify_default_instance_;
class TeamRpcAppointCaptainAsk;
class TeamRpcAppointCaptainAskDefaultTypeInternal;
extern TeamRpcAppointCaptainAskDefaultTypeInternal _TeamRpcAppointCaptainAsk_default_instance_;
class TeamRpcAppointCaptainReply;
class TeamRpcAppointCaptainReplyDefaultTypeInternal;
extern TeamRpcAppointCaptainReplyDefaultTypeInternal _TeamRpcAppointCaptainReply_default_instance_;
class TeamRpcBeInviteHandleAsk;
class TeamRpcBeInviteHandleAskDefaultTypeInternal;
extern TeamRpcBeInviteHandleAskDefaultTypeInternal _TeamRpcBeInviteHandleAsk_default_instance_;
class TeamRpcBeInviteHandleReply;
class TeamRpcBeInviteHandleReplyDefaultTypeInternal;
extern TeamRpcBeInviteHandleReplyDefaultTypeInternal _TeamRpcBeInviteHandleReply_default_instance_;
class TeamRpcBeInvitedNoticeNotify;
class TeamRpcBeInvitedNoticeNotifyDefaultTypeInternal;
extern TeamRpcBeInvitedNoticeNotifyDefaultTypeInternal _TeamRpcBeInvitedNoticeNotify_default_instance_;
class TeamRpcBeingKickedNoticeNotify;
class TeamRpcBeingKickedNoticeNotifyDefaultTypeInternal;
extern TeamRpcBeingKickedNoticeNotifyDefaultTypeInternal _TeamRpcBeingKickedNoticeNotify_default_instance_;
class TeamRpcBreakUpAsk;
class TeamRpcBreakUpAskDefaultTypeInternal;
extern TeamRpcBreakUpAskDefaultTypeInternal _TeamRpcBreakUpAsk_default_instance_;
class TeamRpcBreakUpNoticeNotify;
class TeamRpcBreakUpNoticeNotifyDefaultTypeInternal;
extern TeamRpcBreakUpNoticeNotifyDefaultTypeInternal _TeamRpcBreakUpNoticeNotify_default_instance_;
class TeamRpcBreakUpReply;
class TeamRpcBreakUpReplyDefaultTypeInternal;
extern TeamRpcBreakUpReplyDefaultTypeInternal _TeamRpcBreakUpReply_default_instance_;
class TeamRpcCaptainAutoMatchAsk;
class TeamRpcCaptainAutoMatchAskDefaultTypeInternal;
extern TeamRpcCaptainAutoMatchAskDefaultTypeInternal _TeamRpcCaptainAutoMatchAsk_default_instance_;
class TeamRpcCaptainAutoMatchReply;
class TeamRpcCaptainAutoMatchReplyDefaultTypeInternal;
extern TeamRpcCaptainAutoMatchReplyDefaultTypeInternal _TeamRpcCaptainAutoMatchReply_default_instance_;
class TeamRpcCaptainChangeNoticeNotify;
class TeamRpcCaptainChangeNoticeNotifyDefaultTypeInternal;
extern TeamRpcCaptainChangeNoticeNotifyDefaultTypeInternal _TeamRpcCaptainChangeNoticeNotify_default_instance_;
class TeamRpcChangeTeamTargetAsk;
class TeamRpcChangeTeamTargetAskDefaultTypeInternal;
extern TeamRpcChangeTeamTargetAskDefaultTypeInternal _TeamRpcChangeTeamTargetAsk_default_instance_;
class TeamRpcChangeTeamTargetReply;
class TeamRpcChangeTeamTargetReplyDefaultTypeInternal;
extern TeamRpcChangeTeamTargetReplyDefaultTypeInternal _TeamRpcChangeTeamTargetReply_default_instance_;
class TeamRpcClearApplyListAsk;
class TeamRpcClearApplyListAskDefaultTypeInternal;
extern TeamRpcClearApplyListAskDefaultTypeInternal _TeamRpcClearApplyListAsk_default_instance_;
class TeamRpcClearApplyListReply;
class TeamRpcClearApplyListReplyDefaultTypeInternal;
extern TeamRpcClearApplyListReplyDefaultTypeInternal _TeamRpcClearApplyListReply_default_instance_;
class TeamRpcCreateTeamAsk;
class TeamRpcCreateTeamAskDefaultTypeInternal;
extern TeamRpcCreateTeamAskDefaultTypeInternal _TeamRpcCreateTeamAsk_default_instance_;
class TeamRpcCreateTeamReply;
class TeamRpcCreateTeamReplyDefaultTypeInternal;
extern TeamRpcCreateTeamReplyDefaultTypeInternal _TeamRpcCreateTeamReply_default_instance_;
class TeamRpcDeleteFromApplyListNotify;
class TeamRpcDeleteFromApplyListNotifyDefaultTypeInternal;
extern TeamRpcDeleteFromApplyListNotifyDefaultTypeInternal _TeamRpcDeleteFromApplyListNotify_default_instance_;
class TeamRpcFollowAsk;
class TeamRpcFollowAskDefaultTypeInternal;
extern TeamRpcFollowAskDefaultTypeInternal _TeamRpcFollowAsk_default_instance_;
class TeamRpcFollowReply;
class TeamRpcFollowReplyDefaultTypeInternal;
extern TeamRpcFollowReplyDefaultTypeInternal _TeamRpcFollowReply_default_instance_;
class TeamRpcInviteHandleNoticeNotify;
class TeamRpcInviteHandleNoticeNotifyDefaultTypeInternal;
extern TeamRpcInviteHandleNoticeNotifyDefaultTypeInternal _TeamRpcInviteHandleNoticeNotify_default_instance_;
class TeamRpcInviteToTeamAsk;
class TeamRpcInviteToTeamAskDefaultTypeInternal;
extern TeamRpcInviteToTeamAskDefaultTypeInternal _TeamRpcInviteToTeamAsk_default_instance_;
class TeamRpcInviteToTeamReply;
class TeamRpcInviteToTeamReplyDefaultTypeInternal;
extern TeamRpcInviteToTeamReplyDefaultTypeInternal _TeamRpcInviteToTeamReply_default_instance_;
class TeamRpcKickRoleAsk;
class TeamRpcKickRoleAskDefaultTypeInternal;
extern TeamRpcKickRoleAskDefaultTypeInternal _TeamRpcKickRoleAsk_default_instance_;
class TeamRpcKickRoleReply;
class TeamRpcKickRoleReplyDefaultTypeInternal;
extern TeamRpcKickRoleReplyDefaultTypeInternal _TeamRpcKickRoleReply_default_instance_;
class TeamRpcLeaveTeamNoticeNotify;
class TeamRpcLeaveTeamNoticeNotifyDefaultTypeInternal;
extern TeamRpcLeaveTeamNoticeNotifyDefaultTypeInternal _TeamRpcLeaveTeamNoticeNotify_default_instance_;
class TeamRpcNearbyRoleListAsk;
class TeamRpcNearbyRoleListAskDefaultTypeInternal;
extern TeamRpcNearbyRoleListAskDefaultTypeInternal _TeamRpcNearbyRoleListAsk_default_instance_;
class TeamRpcNearbyRoleListReply;
class TeamRpcNearbyRoleListReplyDefaultTypeInternal;
extern TeamRpcNearbyRoleListReplyDefaultTypeInternal _TeamRpcNearbyRoleListReply_default_instance_;
class TeamRpcNearbyRoleObj;
class TeamRpcNearbyRoleObjDefaultTypeInternal;
extern TeamRpcNearbyRoleObjDefaultTypeInternal _TeamRpcNearbyRoleObj_default_instance_;
class TeamRpcNearbyTeamAsk;
class TeamRpcNearbyTeamAskDefaultTypeInternal;
extern TeamRpcNearbyTeamAskDefaultTypeInternal _TeamRpcNearbyTeamAsk_default_instance_;
class TeamRpcNearbyTeamObj;
class TeamRpcNearbyTeamObjDefaultTypeInternal;
extern TeamRpcNearbyTeamObjDefaultTypeInternal _TeamRpcNearbyTeamObj_default_instance_;
class TeamRpcNearbyTeamReply;
class TeamRpcNearbyTeamReplyDefaultTypeInternal;
extern TeamRpcNearbyTeamReplyDefaultTypeInternal _TeamRpcNearbyTeamReply_default_instance_;
class TeamRpcNormalAutoMatchAsk;
class TeamRpcNormalAutoMatchAskDefaultTypeInternal;
extern TeamRpcNormalAutoMatchAskDefaultTypeInternal _TeamRpcNormalAutoMatchAsk_default_instance_;
class TeamRpcNormalAutoMatchReply;
class TeamRpcNormalAutoMatchReplyDefaultTypeInternal;
extern TeamRpcNormalAutoMatchReplyDefaultTypeInternal _TeamRpcNormalAutoMatchReply_default_instance_;
class TeamRpcQuitTeamNotify;
class TeamRpcQuitTeamNotifyDefaultTypeInternal;
extern TeamRpcQuitTeamNotifyDefaultTypeInternal _TeamRpcQuitTeamNotify_default_instance_;
class TeamRpcReqMyTeamDataNotify;
class TeamRpcReqMyTeamDataNotifyDefaultTypeInternal;
extern TeamRpcReqMyTeamDataNotifyDefaultTypeInternal _TeamRpcReqMyTeamDataNotify_default_instance_;
class TeamRpcTeamMemberHPChangeNoticeNotify;
class TeamRpcTeamMemberHPChangeNoticeNotifyDefaultTypeInternal;
extern TeamRpcTeamMemberHPChangeNoticeNotifyDefaultTypeInternal _TeamRpcTeamMemberHPChangeNoticeNotify_default_instance_;
class TeamRpcUpdateMyTeamNoticeNotify;
class TeamRpcUpdateMyTeamNoticeNotifyDefaultTypeInternal;
extern TeamRpcUpdateMyTeamNoticeNotifyDefaultTypeInternal _TeamRpcUpdateMyTeamNoticeNotify_default_instance_;

namespace protobuf_TeamRpc_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_TeamRpc_2eproto

// ===================================================================

class TeamRpcCreateTeamAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcCreateTeamAsk) */ {
 public:
  TeamRpcCreateTeamAsk();
  virtual ~TeamRpcCreateTeamAsk();

  TeamRpcCreateTeamAsk(const TeamRpcCreateTeamAsk& from);

  inline TeamRpcCreateTeamAsk& operator=(const TeamRpcCreateTeamAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcCreateTeamAsk(TeamRpcCreateTeamAsk&& from) noexcept
    : TeamRpcCreateTeamAsk() {
    *this = ::std::move(from);
  }

  inline TeamRpcCreateTeamAsk& operator=(TeamRpcCreateTeamAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcCreateTeamAsk& default_instance();

  static inline const TeamRpcCreateTeamAsk* internal_default_instance() {
    return reinterpret_cast<const TeamRpcCreateTeamAsk*>(
               &_TeamRpcCreateTeamAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TeamRpcCreateTeamAsk* other);
  friend void swap(TeamRpcCreateTeamAsk& a, TeamRpcCreateTeamAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcCreateTeamAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcCreateTeamAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcCreateTeamAsk& from);
  void MergeFrom(const TeamRpcCreateTeamAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcCreateTeamAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 TargetMaxLv = 3 [default = -1];
  bool has_targetmaxlv() const;
  void clear_targetmaxlv();
  static const int kTargetMaxLvFieldNumber = 3;
  ::google::protobuf::int32 targetmaxlv() const;
  void set_targetmaxlv(::google::protobuf::int32 value);

  // optional sint32 TargetId = 1 [default = -1];
  bool has_targetid() const;
  void clear_targetid();
  static const int kTargetIdFieldNumber = 1;
  ::google::protobuf::int32 targetid() const;
  void set_targetid(::google::protobuf::int32 value);

  // optional sint32 TargetMinLv = 2 [default = -1];
  bool has_targetminlv() const;
  void clear_targetminlv();
  static const int kTargetMinLvFieldNumber = 2;
  ::google::protobuf::int32 targetminlv() const;
  void set_targetminlv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcCreateTeamAsk)
 private:
  void set_has_targetid();
  void clear_has_targetid();
  void set_has_targetminlv();
  void clear_has_targetminlv();
  void set_has_targetmaxlv();
  void clear_has_targetmaxlv();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 targetmaxlv_;
  ::google::protobuf::int32 targetid_;
  ::google::protobuf::int32 targetminlv_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcCreateTeamReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcCreateTeamReply) */ {
 public:
  TeamRpcCreateTeamReply();
  virtual ~TeamRpcCreateTeamReply();

  TeamRpcCreateTeamReply(const TeamRpcCreateTeamReply& from);

  inline TeamRpcCreateTeamReply& operator=(const TeamRpcCreateTeamReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcCreateTeamReply(TeamRpcCreateTeamReply&& from) noexcept
    : TeamRpcCreateTeamReply() {
    *this = ::std::move(from);
  }

  inline TeamRpcCreateTeamReply& operator=(TeamRpcCreateTeamReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcCreateTeamReply& default_instance();

  static inline const TeamRpcCreateTeamReply* internal_default_instance() {
    return reinterpret_cast<const TeamRpcCreateTeamReply*>(
               &_TeamRpcCreateTeamReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TeamRpcCreateTeamReply* other);
  friend void swap(TeamRpcCreateTeamReply& a, TeamRpcCreateTeamReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcCreateTeamReply* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcCreateTeamReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcCreateTeamReply& from);
  void MergeFrom(const TeamRpcCreateTeamReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcCreateTeamReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TeamObj TeamData = 2;
  bool has_teamdata() const;
  void clear_teamdata();
  static const int kTeamDataFieldNumber = 2;
  const ::TeamObj& teamdata() const;
  ::TeamObj* mutable_teamdata();
  ::TeamObj* release_teamdata();
  void set_allocated_teamdata(::TeamObj* teamdata);

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcCreateTeamReply)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_teamdata();
  void clear_has_teamdata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::TeamObj* teamdata_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcApplyForTeamAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcApplyForTeamAsk) */ {
 public:
  TeamRpcApplyForTeamAsk();
  virtual ~TeamRpcApplyForTeamAsk();

  TeamRpcApplyForTeamAsk(const TeamRpcApplyForTeamAsk& from);

  inline TeamRpcApplyForTeamAsk& operator=(const TeamRpcApplyForTeamAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcApplyForTeamAsk(TeamRpcApplyForTeamAsk&& from) noexcept
    : TeamRpcApplyForTeamAsk() {
    *this = ::std::move(from);
  }

  inline TeamRpcApplyForTeamAsk& operator=(TeamRpcApplyForTeamAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcApplyForTeamAsk& default_instance();

  static inline const TeamRpcApplyForTeamAsk* internal_default_instance() {
    return reinterpret_cast<const TeamRpcApplyForTeamAsk*>(
               &_TeamRpcApplyForTeamAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TeamRpcApplyForTeamAsk* other);
  friend void swap(TeamRpcApplyForTeamAsk& a, TeamRpcApplyForTeamAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcApplyForTeamAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcApplyForTeamAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcApplyForTeamAsk& from);
  void MergeFrom(const TeamRpcApplyForTeamAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcApplyForTeamAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 TeamId = 1 [default = -1];
  bool has_teamid() const;
  void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  ::google::protobuf::int32 teamid() const;
  void set_teamid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcApplyForTeamAsk)
 private:
  void set_has_teamid();
  void clear_has_teamid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 teamid_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcApplyForTeamReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcApplyForTeamReply) */ {
 public:
  TeamRpcApplyForTeamReply();
  virtual ~TeamRpcApplyForTeamReply();

  TeamRpcApplyForTeamReply(const TeamRpcApplyForTeamReply& from);

  inline TeamRpcApplyForTeamReply& operator=(const TeamRpcApplyForTeamReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcApplyForTeamReply(TeamRpcApplyForTeamReply&& from) noexcept
    : TeamRpcApplyForTeamReply() {
    *this = ::std::move(from);
  }

  inline TeamRpcApplyForTeamReply& operator=(TeamRpcApplyForTeamReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcApplyForTeamReply& default_instance();

  static inline const TeamRpcApplyForTeamReply* internal_default_instance() {
    return reinterpret_cast<const TeamRpcApplyForTeamReply*>(
               &_TeamRpcApplyForTeamReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TeamRpcApplyForTeamReply* other);
  friend void swap(TeamRpcApplyForTeamReply& a, TeamRpcApplyForTeamReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcApplyForTeamReply* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcApplyForTeamReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcApplyForTeamReply& from);
  void MergeFrom(const TeamRpcApplyForTeamReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcApplyForTeamReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional sint32 TeamId = 2 [default = -1];
  bool has_teamid() const;
  void clear_teamid();
  static const int kTeamIdFieldNumber = 2;
  ::google::protobuf::int32 teamid() const;
  void set_teamid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcApplyForTeamReply)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_teamid();
  void clear_has_teamid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 teamid_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcInviteToTeamAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcInviteToTeamAsk) */ {
 public:
  TeamRpcInviteToTeamAsk();
  virtual ~TeamRpcInviteToTeamAsk();

  TeamRpcInviteToTeamAsk(const TeamRpcInviteToTeamAsk& from);

  inline TeamRpcInviteToTeamAsk& operator=(const TeamRpcInviteToTeamAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcInviteToTeamAsk(TeamRpcInviteToTeamAsk&& from) noexcept
    : TeamRpcInviteToTeamAsk() {
    *this = ::std::move(from);
  }

  inline TeamRpcInviteToTeamAsk& operator=(TeamRpcInviteToTeamAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcInviteToTeamAsk& default_instance();

  static inline const TeamRpcInviteToTeamAsk* internal_default_instance() {
    return reinterpret_cast<const TeamRpcInviteToTeamAsk*>(
               &_TeamRpcInviteToTeamAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(TeamRpcInviteToTeamAsk* other);
  friend void swap(TeamRpcInviteToTeamAsk& a, TeamRpcInviteToTeamAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcInviteToTeamAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcInviteToTeamAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcInviteToTeamAsk& from);
  void MergeFrom(const TeamRpcInviteToTeamAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcInviteToTeamAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 UserId = 1 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TeamRpcInviteToTeamAsk)
 private:
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcInviteToTeamReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcInviteToTeamReply) */ {
 public:
  TeamRpcInviteToTeamReply();
  virtual ~TeamRpcInviteToTeamReply();

  TeamRpcInviteToTeamReply(const TeamRpcInviteToTeamReply& from);

  inline TeamRpcInviteToTeamReply& operator=(const TeamRpcInviteToTeamReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcInviteToTeamReply(TeamRpcInviteToTeamReply&& from) noexcept
    : TeamRpcInviteToTeamReply() {
    *this = ::std::move(from);
  }

  inline TeamRpcInviteToTeamReply& operator=(TeamRpcInviteToTeamReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcInviteToTeamReply& default_instance();

  static inline const TeamRpcInviteToTeamReply* internal_default_instance() {
    return reinterpret_cast<const TeamRpcInviteToTeamReply*>(
               &_TeamRpcInviteToTeamReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(TeamRpcInviteToTeamReply* other);
  friend void swap(TeamRpcInviteToTeamReply& a, TeamRpcInviteToTeamReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcInviteToTeamReply* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcInviteToTeamReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcInviteToTeamReply& from);
  void MergeFrom(const TeamRpcInviteToTeamReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcInviteToTeamReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional sint64 UserId = 2 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TeamRpcInviteToTeamReply)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcChangeTeamTargetAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcChangeTeamTargetAsk) */ {
 public:
  TeamRpcChangeTeamTargetAsk();
  virtual ~TeamRpcChangeTeamTargetAsk();

  TeamRpcChangeTeamTargetAsk(const TeamRpcChangeTeamTargetAsk& from);

  inline TeamRpcChangeTeamTargetAsk& operator=(const TeamRpcChangeTeamTargetAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcChangeTeamTargetAsk(TeamRpcChangeTeamTargetAsk&& from) noexcept
    : TeamRpcChangeTeamTargetAsk() {
    *this = ::std::move(from);
  }

  inline TeamRpcChangeTeamTargetAsk& operator=(TeamRpcChangeTeamTargetAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcChangeTeamTargetAsk& default_instance();

  static inline const TeamRpcChangeTeamTargetAsk* internal_default_instance() {
    return reinterpret_cast<const TeamRpcChangeTeamTargetAsk*>(
               &_TeamRpcChangeTeamTargetAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(TeamRpcChangeTeamTargetAsk* other);
  friend void swap(TeamRpcChangeTeamTargetAsk& a, TeamRpcChangeTeamTargetAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcChangeTeamTargetAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcChangeTeamTargetAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcChangeTeamTargetAsk& from);
  void MergeFrom(const TeamRpcChangeTeamTargetAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcChangeTeamTargetAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 TargetMaxLv = 4 [default = -1];
  bool has_targetmaxlv() const;
  void clear_targetmaxlv();
  static const int kTargetMaxLvFieldNumber = 4;
  ::google::protobuf::int32 targetmaxlv() const;
  void set_targetmaxlv(::google::protobuf::int32 value);

  // optional sint32 TargetId = 1 [default = -1];
  bool has_targetid() const;
  void clear_targetid();
  static const int kTargetIdFieldNumber = 1;
  ::google::protobuf::int32 targetid() const;
  void set_targetid(::google::protobuf::int32 value);

  // optional sint32 TargetMinLv = 3 [default = -1];
  bool has_targetminlv() const;
  void clear_targetminlv();
  static const int kTargetMinLvFieldNumber = 3;
  ::google::protobuf::int32 targetminlv() const;
  void set_targetminlv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcChangeTeamTargetAsk)
 private:
  void set_has_targetid();
  void clear_has_targetid();
  void set_has_targetminlv();
  void clear_has_targetminlv();
  void set_has_targetmaxlv();
  void clear_has_targetmaxlv();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 targetmaxlv_;
  ::google::protobuf::int32 targetid_;
  ::google::protobuf::int32 targetminlv_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcChangeTeamTargetReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcChangeTeamTargetReply) */ {
 public:
  TeamRpcChangeTeamTargetReply();
  virtual ~TeamRpcChangeTeamTargetReply();

  TeamRpcChangeTeamTargetReply(const TeamRpcChangeTeamTargetReply& from);

  inline TeamRpcChangeTeamTargetReply& operator=(const TeamRpcChangeTeamTargetReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcChangeTeamTargetReply(TeamRpcChangeTeamTargetReply&& from) noexcept
    : TeamRpcChangeTeamTargetReply() {
    *this = ::std::move(from);
  }

  inline TeamRpcChangeTeamTargetReply& operator=(TeamRpcChangeTeamTargetReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcChangeTeamTargetReply& default_instance();

  static inline const TeamRpcChangeTeamTargetReply* internal_default_instance() {
    return reinterpret_cast<const TeamRpcChangeTeamTargetReply*>(
               &_TeamRpcChangeTeamTargetReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(TeamRpcChangeTeamTargetReply* other);
  friend void swap(TeamRpcChangeTeamTargetReply& a, TeamRpcChangeTeamTargetReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcChangeTeamTargetReply* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcChangeTeamTargetReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcChangeTeamTargetReply& from);
  void MergeFrom(const TeamRpcChangeTeamTargetReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcChangeTeamTargetReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcChangeTeamTargetReply)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcBeInvitedNoticeNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcBeInvitedNoticeNotify) */ {
 public:
  TeamRpcBeInvitedNoticeNotify();
  virtual ~TeamRpcBeInvitedNoticeNotify();

  TeamRpcBeInvitedNoticeNotify(const TeamRpcBeInvitedNoticeNotify& from);

  inline TeamRpcBeInvitedNoticeNotify& operator=(const TeamRpcBeInvitedNoticeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcBeInvitedNoticeNotify(TeamRpcBeInvitedNoticeNotify&& from) noexcept
    : TeamRpcBeInvitedNoticeNotify() {
    *this = ::std::move(from);
  }

  inline TeamRpcBeInvitedNoticeNotify& operator=(TeamRpcBeInvitedNoticeNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcBeInvitedNoticeNotify& default_instance();

  static inline const TeamRpcBeInvitedNoticeNotify* internal_default_instance() {
    return reinterpret_cast<const TeamRpcBeInvitedNoticeNotify*>(
               &_TeamRpcBeInvitedNoticeNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(TeamRpcBeInvitedNoticeNotify* other);
  friend void swap(TeamRpcBeInvitedNoticeNotify& a, TeamRpcBeInvitedNoticeNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcBeInvitedNoticeNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcBeInvitedNoticeNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcBeInvitedNoticeNotify& from);
  void MergeFrom(const TeamRpcBeInvitedNoticeNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcBeInvitedNoticeNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 3;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string CaptainUserName = 4;
  bool has_captainusername() const;
  void clear_captainusername();
  static const int kCaptainUserNameFieldNumber = 4;
  const ::std::string& captainusername() const;
  void set_captainusername(const ::std::string& value);
  #if LANG_CXX11
  void set_captainusername(::std::string&& value);
  #endif
  void set_captainusername(const char* value);
  void set_captainusername(const char* value, size_t size);
  ::std::string* mutable_captainusername();
  ::std::string* release_captainusername();
  void set_allocated_captainusername(::std::string* captainusername);

  // optional sint32 TeamId = 1 [default = -1];
  bool has_teamid() const;
  void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  ::google::protobuf::int32 teamid() const;
  void set_teamid(::google::protobuf::int32 value);

  // optional sint64 UserId = 2 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TeamRpcBeInvitedNoticeNotify)
 private:
  void set_has_teamid();
  void clear_has_teamid();
  void set_has_userid();
  void clear_has_userid();
  void set_has_username();
  void clear_has_username();
  void set_has_captainusername();
  void clear_has_captainusername();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr captainusername_;
  ::google::protobuf::int32 teamid_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcBeInviteHandleAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcBeInviteHandleAsk) */ {
 public:
  TeamRpcBeInviteHandleAsk();
  virtual ~TeamRpcBeInviteHandleAsk();

  TeamRpcBeInviteHandleAsk(const TeamRpcBeInviteHandleAsk& from);

  inline TeamRpcBeInviteHandleAsk& operator=(const TeamRpcBeInviteHandleAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcBeInviteHandleAsk(TeamRpcBeInviteHandleAsk&& from) noexcept
    : TeamRpcBeInviteHandleAsk() {
    *this = ::std::move(from);
  }

  inline TeamRpcBeInviteHandleAsk& operator=(TeamRpcBeInviteHandleAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcBeInviteHandleAsk& default_instance();

  static inline const TeamRpcBeInviteHandleAsk* internal_default_instance() {
    return reinterpret_cast<const TeamRpcBeInviteHandleAsk*>(
               &_TeamRpcBeInviteHandleAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(TeamRpcBeInviteHandleAsk* other);
  friend void swap(TeamRpcBeInviteHandleAsk& a, TeamRpcBeInviteHandleAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcBeInviteHandleAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcBeInviteHandleAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcBeInviteHandleAsk& from);
  void MergeFrom(const TeamRpcBeInviteHandleAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcBeInviteHandleAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 UserId = 3 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 3;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // optional sint32 TeamId = 2 [default = -1];
  bool has_teamid() const;
  void clear_teamid();
  static const int kTeamIdFieldNumber = 2;
  ::google::protobuf::int32 teamid() const;
  void set_teamid(::google::protobuf::int32 value);

  // optional sint32 Handle = 4 [default = -1];
  bool has_handle() const;
  void clear_handle();
  static const int kHandleFieldNumber = 4;
  ::google::protobuf::int32 handle() const;
  void set_handle(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcBeInviteHandleAsk)
 private:
  void set_has_teamid();
  void clear_has_teamid();
  void set_has_userid();
  void clear_has_userid();
  void set_has_handle();
  void clear_has_handle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 teamid_;
  ::google::protobuf::int32 handle_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcBeInviteHandleReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcBeInviteHandleReply) */ {
 public:
  TeamRpcBeInviteHandleReply();
  virtual ~TeamRpcBeInviteHandleReply();

  TeamRpcBeInviteHandleReply(const TeamRpcBeInviteHandleReply& from);

  inline TeamRpcBeInviteHandleReply& operator=(const TeamRpcBeInviteHandleReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcBeInviteHandleReply(TeamRpcBeInviteHandleReply&& from) noexcept
    : TeamRpcBeInviteHandleReply() {
    *this = ::std::move(from);
  }

  inline TeamRpcBeInviteHandleReply& operator=(TeamRpcBeInviteHandleReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcBeInviteHandleReply& default_instance();

  static inline const TeamRpcBeInviteHandleReply* internal_default_instance() {
    return reinterpret_cast<const TeamRpcBeInviteHandleReply*>(
               &_TeamRpcBeInviteHandleReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(TeamRpcBeInviteHandleReply* other);
  friend void swap(TeamRpcBeInviteHandleReply& a, TeamRpcBeInviteHandleReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcBeInviteHandleReply* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcBeInviteHandleReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcBeInviteHandleReply& from);
  void MergeFrom(const TeamRpcBeInviteHandleReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcBeInviteHandleReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsCapatain = 5 [default = false];
  bool has_iscapatain() const;
  void clear_iscapatain();
  static const int kIsCapatainFieldNumber = 5;
  bool iscapatain() const;
  void set_iscapatain(bool value);

  // optional sint32 Handle = 4 [default = -1];
  bool has_handle() const;
  void clear_handle();
  static const int kHandleFieldNumber = 4;
  ::google::protobuf::int32 handle() const;
  void set_handle(::google::protobuf::int32 value);

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional sint32 TeamId = 2 [default = -1];
  bool has_teamid() const;
  void clear_teamid();
  static const int kTeamIdFieldNumber = 2;
  ::google::protobuf::int32 teamid() const;
  void set_teamid(::google::protobuf::int32 value);

  // optional sint64 UserId = 3 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 3;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TeamRpcBeInviteHandleReply)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_teamid();
  void clear_has_teamid();
  void set_has_userid();
  void clear_has_userid();
  void set_has_handle();
  void clear_has_handle();
  void set_has_iscapatain();
  void clear_has_iscapatain();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool iscapatain_;
  ::google::protobuf::int32 handle_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 teamid_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcNearbyTeamObj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcNearbyTeamObj) */ {
 public:
  TeamRpcNearbyTeamObj();
  virtual ~TeamRpcNearbyTeamObj();

  TeamRpcNearbyTeamObj(const TeamRpcNearbyTeamObj& from);

  inline TeamRpcNearbyTeamObj& operator=(const TeamRpcNearbyTeamObj& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcNearbyTeamObj(TeamRpcNearbyTeamObj&& from) noexcept
    : TeamRpcNearbyTeamObj() {
    *this = ::std::move(from);
  }

  inline TeamRpcNearbyTeamObj& operator=(TeamRpcNearbyTeamObj&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcNearbyTeamObj& default_instance();

  static inline const TeamRpcNearbyTeamObj* internal_default_instance() {
    return reinterpret_cast<const TeamRpcNearbyTeamObj*>(
               &_TeamRpcNearbyTeamObj_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(TeamRpcNearbyTeamObj* other);
  friend void swap(TeamRpcNearbyTeamObj& a, TeamRpcNearbyTeamObj& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcNearbyTeamObj* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcNearbyTeamObj* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcNearbyTeamObj& from);
  void MergeFrom(const TeamRpcNearbyTeamObj& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcNearbyTeamObj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string CaptainUserName = 4;
  bool has_captainusername() const;
  void clear_captainusername();
  static const int kCaptainUserNameFieldNumber = 4;
  const ::std::string& captainusername() const;
  void set_captainusername(const ::std::string& value);
  #if LANG_CXX11
  void set_captainusername(::std::string&& value);
  #endif
  void set_captainusername(const char* value);
  void set_captainusername(const char* value, size_t size);
  ::std::string* mutable_captainusername();
  ::std::string* release_captainusername();
  void set_allocated_captainusername(::std::string* captainusername);

  // optional sint32 TargetMaxLv = 11 [default = -1];
  bool has_targetmaxlv() const;
  void clear_targetmaxlv();
  static const int kTargetMaxLvFieldNumber = 11;
  ::google::protobuf::int32 targetmaxlv() const;
  void set_targetmaxlv(::google::protobuf::int32 value);

  // optional sint64 CaptainUserId = 3 [default = -1];
  bool has_captainuserid() const;
  void clear_captainuserid();
  static const int kCaptainUserIdFieldNumber = 3;
  ::google::protobuf::int64 captainuserid() const;
  void set_captainuserid(::google::protobuf::int64 value);

  // optional sint32 TeamId = 2 [default = -1];
  bool has_teamid() const;
  void clear_teamid();
  static const int kTeamIdFieldNumber = 2;
  ::google::protobuf::int32 teamid() const;
  void set_teamid(::google::protobuf::int32 value);

  // optional sint32 CaptainLevel = 6 [default = -1];
  bool has_captainlevel() const;
  void clear_captainlevel();
  static const int kCaptainLevelFieldNumber = 6;
  ::google::protobuf::int32 captainlevel() const;
  void set_captainlevel(::google::protobuf::int32 value);

  // optional sint32 MemberCount = 7 [default = -1];
  bool has_membercount() const;
  void clear_membercount();
  static const int kMemberCountFieldNumber = 7;
  ::google::protobuf::int32 membercount() const;
  void set_membercount(::google::protobuf::int32 value);

  // optional sint32 CaptainProf = 8 [default = -1];
  bool has_captainprof() const;
  void clear_captainprof();
  static const int kCaptainProfFieldNumber = 8;
  ::google::protobuf::int32 captainprof() const;
  void set_captainprof(::google::protobuf::int32 value);

  // optional sint32 TeamTarget = 9 [default = -1];
  bool has_teamtarget() const;
  void clear_teamtarget();
  static const int kTeamTargetFieldNumber = 9;
  ::google::protobuf::int32 teamtarget() const;
  void set_teamtarget(::google::protobuf::int32 value);

  // optional sint32 TargetMinLv = 10 [default = -1];
  bool has_targetminlv() const;
  void clear_targetminlv();
  static const int kTargetMinLvFieldNumber = 10;
  ::google::protobuf::int32 targetminlv() const;
  void set_targetminlv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcNearbyTeamObj)
 private:
  void set_has_teamid();
  void clear_has_teamid();
  void set_has_captainuserid();
  void clear_has_captainuserid();
  void set_has_captainusername();
  void clear_has_captainusername();
  void set_has_captainlevel();
  void clear_has_captainlevel();
  void set_has_membercount();
  void clear_has_membercount();
  void set_has_captainprof();
  void clear_has_captainprof();
  void set_has_teamtarget();
  void clear_has_teamtarget();
  void set_has_targetminlv();
  void clear_has_targetminlv();
  void set_has_targetmaxlv();
  void clear_has_targetmaxlv();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr captainusername_;
  ::google::protobuf::int32 targetmaxlv_;
  ::google::protobuf::int64 captainuserid_;
  ::google::protobuf::int32 teamid_;
  ::google::protobuf::int32 captainlevel_;
  ::google::protobuf::int32 membercount_;
  ::google::protobuf::int32 captainprof_;
  ::google::protobuf::int32 teamtarget_;
  ::google::protobuf::int32 targetminlv_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcNearbyTeamAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcNearbyTeamAsk) */ {
 public:
  TeamRpcNearbyTeamAsk();
  virtual ~TeamRpcNearbyTeamAsk();

  TeamRpcNearbyTeamAsk(const TeamRpcNearbyTeamAsk& from);

  inline TeamRpcNearbyTeamAsk& operator=(const TeamRpcNearbyTeamAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcNearbyTeamAsk(TeamRpcNearbyTeamAsk&& from) noexcept
    : TeamRpcNearbyTeamAsk() {
    *this = ::std::move(from);
  }

  inline TeamRpcNearbyTeamAsk& operator=(TeamRpcNearbyTeamAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcNearbyTeamAsk& default_instance();

  static inline const TeamRpcNearbyTeamAsk* internal_default_instance() {
    return reinterpret_cast<const TeamRpcNearbyTeamAsk*>(
               &_TeamRpcNearbyTeamAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(TeamRpcNearbyTeamAsk* other);
  friend void swap(TeamRpcNearbyTeamAsk& a, TeamRpcNearbyTeamAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcNearbyTeamAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcNearbyTeamAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcNearbyTeamAsk& from);
  void MergeFrom(const TeamRpcNearbyTeamAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcNearbyTeamAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 TargetId = 1 [default = -1];
  bool has_targetid() const;
  void clear_targetid();
  static const int kTargetIdFieldNumber = 1;
  ::google::protobuf::int32 targetid() const;
  void set_targetid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcNearbyTeamAsk)
 private:
  void set_has_targetid();
  void clear_has_targetid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 targetid_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcNearbyTeamReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcNearbyTeamReply) */ {
 public:
  TeamRpcNearbyTeamReply();
  virtual ~TeamRpcNearbyTeamReply();

  TeamRpcNearbyTeamReply(const TeamRpcNearbyTeamReply& from);

  inline TeamRpcNearbyTeamReply& operator=(const TeamRpcNearbyTeamReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcNearbyTeamReply(TeamRpcNearbyTeamReply&& from) noexcept
    : TeamRpcNearbyTeamReply() {
    *this = ::std::move(from);
  }

  inline TeamRpcNearbyTeamReply& operator=(TeamRpcNearbyTeamReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcNearbyTeamReply& default_instance();

  static inline const TeamRpcNearbyTeamReply* internal_default_instance() {
    return reinterpret_cast<const TeamRpcNearbyTeamReply*>(
               &_TeamRpcNearbyTeamReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(TeamRpcNearbyTeamReply* other);
  friend void swap(TeamRpcNearbyTeamReply& a, TeamRpcNearbyTeamReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcNearbyTeamReply* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcNearbyTeamReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcNearbyTeamReply& from);
  void MergeFrom(const TeamRpcNearbyTeamReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcNearbyTeamReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TeamRpcNearbyTeamObj Teams = 2;
  int teams_size() const;
  void clear_teams();
  static const int kTeamsFieldNumber = 2;
  const ::TeamRpcNearbyTeamObj& teams(int index) const;
  ::TeamRpcNearbyTeamObj* mutable_teams(int index);
  ::TeamRpcNearbyTeamObj* add_teams();
  ::google::protobuf::RepeatedPtrField< ::TeamRpcNearbyTeamObj >*
      mutable_teams();
  const ::google::protobuf::RepeatedPtrField< ::TeamRpcNearbyTeamObj >&
      teams() const;

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcNearbyTeamReply)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::TeamRpcNearbyTeamObj > teams_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcApplyNoticeCaptainNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcApplyNoticeCaptainNotify) */ {
 public:
  TeamRpcApplyNoticeCaptainNotify();
  virtual ~TeamRpcApplyNoticeCaptainNotify();

  TeamRpcApplyNoticeCaptainNotify(const TeamRpcApplyNoticeCaptainNotify& from);

  inline TeamRpcApplyNoticeCaptainNotify& operator=(const TeamRpcApplyNoticeCaptainNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcApplyNoticeCaptainNotify(TeamRpcApplyNoticeCaptainNotify&& from) noexcept
    : TeamRpcApplyNoticeCaptainNotify() {
    *this = ::std::move(from);
  }

  inline TeamRpcApplyNoticeCaptainNotify& operator=(TeamRpcApplyNoticeCaptainNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcApplyNoticeCaptainNotify& default_instance();

  static inline const TeamRpcApplyNoticeCaptainNotify* internal_default_instance() {
    return reinterpret_cast<const TeamRpcApplyNoticeCaptainNotify*>(
               &_TeamRpcApplyNoticeCaptainNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(TeamRpcApplyNoticeCaptainNotify* other);
  friend void swap(TeamRpcApplyNoticeCaptainNotify& a, TeamRpcApplyNoticeCaptainNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcApplyNoticeCaptainNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcApplyNoticeCaptainNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcApplyNoticeCaptainNotify& from);
  void MergeFrom(const TeamRpcApplyNoticeCaptainNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcApplyNoticeCaptainNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TeamApplyUserObj ApplyUser = 5;
  bool has_applyuser() const;
  void clear_applyuser();
  static const int kApplyUserFieldNumber = 5;
  const ::TeamApplyUserObj& applyuser() const;
  ::TeamApplyUserObj* mutable_applyuser();
  ::TeamApplyUserObj* release_applyuser();
  void set_allocated_applyuser(::TeamApplyUserObj* applyuser);

  // @@protoc_insertion_point(class_scope:TeamRpcApplyNoticeCaptainNotify)
 private:
  void set_has_applyuser();
  void clear_has_applyuser();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::TeamApplyUserObj* applyuser_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcApplyHandleAgreeAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcApplyHandleAgreeAsk) */ {
 public:
  TeamRpcApplyHandleAgreeAsk();
  virtual ~TeamRpcApplyHandleAgreeAsk();

  TeamRpcApplyHandleAgreeAsk(const TeamRpcApplyHandleAgreeAsk& from);

  inline TeamRpcApplyHandleAgreeAsk& operator=(const TeamRpcApplyHandleAgreeAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcApplyHandleAgreeAsk(TeamRpcApplyHandleAgreeAsk&& from) noexcept
    : TeamRpcApplyHandleAgreeAsk() {
    *this = ::std::move(from);
  }

  inline TeamRpcApplyHandleAgreeAsk& operator=(TeamRpcApplyHandleAgreeAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcApplyHandleAgreeAsk& default_instance();

  static inline const TeamRpcApplyHandleAgreeAsk* internal_default_instance() {
    return reinterpret_cast<const TeamRpcApplyHandleAgreeAsk*>(
               &_TeamRpcApplyHandleAgreeAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(TeamRpcApplyHandleAgreeAsk* other);
  friend void swap(TeamRpcApplyHandleAgreeAsk& a, TeamRpcApplyHandleAgreeAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcApplyHandleAgreeAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcApplyHandleAgreeAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcApplyHandleAgreeAsk& from);
  void MergeFrom(const TeamRpcApplyHandleAgreeAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcApplyHandleAgreeAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 UserId = 2 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // optional sint32 TeamId = 3 [default = -1];
  bool has_teamid() const;
  void clear_teamid();
  static const int kTeamIdFieldNumber = 3;
  ::google::protobuf::int32 teamid() const;
  void set_teamid(::google::protobuf::int32 value);

  // optional sint32 Handle = 4 [default = -1];
  bool has_handle() const;
  void clear_handle();
  static const int kHandleFieldNumber = 4;
  ::google::protobuf::int32 handle() const;
  void set_handle(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcApplyHandleAgreeAsk)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_teamid();
  void clear_has_teamid();
  void set_has_handle();
  void clear_has_handle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 teamid_;
  ::google::protobuf::int32 handle_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcApplyHandleAgreeReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcApplyHandleAgreeReply) */ {
 public:
  TeamRpcApplyHandleAgreeReply();
  virtual ~TeamRpcApplyHandleAgreeReply();

  TeamRpcApplyHandleAgreeReply(const TeamRpcApplyHandleAgreeReply& from);

  inline TeamRpcApplyHandleAgreeReply& operator=(const TeamRpcApplyHandleAgreeReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcApplyHandleAgreeReply(TeamRpcApplyHandleAgreeReply&& from) noexcept
    : TeamRpcApplyHandleAgreeReply() {
    *this = ::std::move(from);
  }

  inline TeamRpcApplyHandleAgreeReply& operator=(TeamRpcApplyHandleAgreeReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcApplyHandleAgreeReply& default_instance();

  static inline const TeamRpcApplyHandleAgreeReply* internal_default_instance() {
    return reinterpret_cast<const TeamRpcApplyHandleAgreeReply*>(
               &_TeamRpcApplyHandleAgreeReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(TeamRpcApplyHandleAgreeReply* other);
  friend void swap(TeamRpcApplyHandleAgreeReply& a, TeamRpcApplyHandleAgreeReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcApplyHandleAgreeReply* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcApplyHandleAgreeReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcApplyHandleAgreeReply& from);
  void MergeFrom(const TeamRpcApplyHandleAgreeReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcApplyHandleAgreeReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Handle = 4 [default = -1];
  bool has_handle() const;
  void clear_handle();
  static const int kHandleFieldNumber = 4;
  ::google::protobuf::int32 handle() const;
  void set_handle(::google::protobuf::int32 value);

  // optional sint64 UserId = 2 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional sint32 TeamId = 3 [default = -1];
  bool has_teamid() const;
  void clear_teamid();
  static const int kTeamIdFieldNumber = 3;
  ::google::protobuf::int32 teamid() const;
  void set_teamid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcApplyHandleAgreeReply)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_userid();
  void clear_has_userid();
  void set_has_teamid();
  void clear_has_teamid();
  void set_has_handle();
  void clear_has_handle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 handle_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 teamid_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcUpdateMyTeamNoticeNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcUpdateMyTeamNoticeNotify) */ {
 public:
  TeamRpcUpdateMyTeamNoticeNotify();
  virtual ~TeamRpcUpdateMyTeamNoticeNotify();

  TeamRpcUpdateMyTeamNoticeNotify(const TeamRpcUpdateMyTeamNoticeNotify& from);

  inline TeamRpcUpdateMyTeamNoticeNotify& operator=(const TeamRpcUpdateMyTeamNoticeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcUpdateMyTeamNoticeNotify(TeamRpcUpdateMyTeamNoticeNotify&& from) noexcept
    : TeamRpcUpdateMyTeamNoticeNotify() {
    *this = ::std::move(from);
  }

  inline TeamRpcUpdateMyTeamNoticeNotify& operator=(TeamRpcUpdateMyTeamNoticeNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcUpdateMyTeamNoticeNotify& default_instance();

  static inline const TeamRpcUpdateMyTeamNoticeNotify* internal_default_instance() {
    return reinterpret_cast<const TeamRpcUpdateMyTeamNoticeNotify*>(
               &_TeamRpcUpdateMyTeamNoticeNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(TeamRpcUpdateMyTeamNoticeNotify* other);
  friend void swap(TeamRpcUpdateMyTeamNoticeNotify& a, TeamRpcUpdateMyTeamNoticeNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcUpdateMyTeamNoticeNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcUpdateMyTeamNoticeNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcUpdateMyTeamNoticeNotify& from);
  void MergeFrom(const TeamRpcUpdateMyTeamNoticeNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcUpdateMyTeamNoticeNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TeamObj MyTeamData = 1;
  bool has_myteamdata() const;
  void clear_myteamdata();
  static const int kMyTeamDataFieldNumber = 1;
  const ::TeamObj& myteamdata() const;
  ::TeamObj* mutable_myteamdata();
  ::TeamObj* release_myteamdata();
  void set_allocated_myteamdata(::TeamObj* myteamdata);

  // @@protoc_insertion_point(class_scope:TeamRpcUpdateMyTeamNoticeNotify)
 private:
  void set_has_myteamdata();
  void clear_has_myteamdata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::TeamObj* myteamdata_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcQuitTeamNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcQuitTeamNotify) */ {
 public:
  TeamRpcQuitTeamNotify();
  virtual ~TeamRpcQuitTeamNotify();

  TeamRpcQuitTeamNotify(const TeamRpcQuitTeamNotify& from);

  inline TeamRpcQuitTeamNotify& operator=(const TeamRpcQuitTeamNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcQuitTeamNotify(TeamRpcQuitTeamNotify&& from) noexcept
    : TeamRpcQuitTeamNotify() {
    *this = ::std::move(from);
  }

  inline TeamRpcQuitTeamNotify& operator=(TeamRpcQuitTeamNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcQuitTeamNotify& default_instance();

  static inline const TeamRpcQuitTeamNotify* internal_default_instance() {
    return reinterpret_cast<const TeamRpcQuitTeamNotify*>(
               &_TeamRpcQuitTeamNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(TeamRpcQuitTeamNotify* other);
  friend void swap(TeamRpcQuitTeamNotify& a, TeamRpcQuitTeamNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcQuitTeamNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcQuitTeamNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcQuitTeamNotify& from);
  void MergeFrom(const TeamRpcQuitTeamNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcQuitTeamNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TeamRpcQuitTeamNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcLeaveTeamNoticeNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcLeaveTeamNoticeNotify) */ {
 public:
  TeamRpcLeaveTeamNoticeNotify();
  virtual ~TeamRpcLeaveTeamNoticeNotify();

  TeamRpcLeaveTeamNoticeNotify(const TeamRpcLeaveTeamNoticeNotify& from);

  inline TeamRpcLeaveTeamNoticeNotify& operator=(const TeamRpcLeaveTeamNoticeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcLeaveTeamNoticeNotify(TeamRpcLeaveTeamNoticeNotify&& from) noexcept
    : TeamRpcLeaveTeamNoticeNotify() {
    *this = ::std::move(from);
  }

  inline TeamRpcLeaveTeamNoticeNotify& operator=(TeamRpcLeaveTeamNoticeNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcLeaveTeamNoticeNotify& default_instance();

  static inline const TeamRpcLeaveTeamNoticeNotify* internal_default_instance() {
    return reinterpret_cast<const TeamRpcLeaveTeamNoticeNotify*>(
               &_TeamRpcLeaveTeamNoticeNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(TeamRpcLeaveTeamNoticeNotify* other);
  friend void swap(TeamRpcLeaveTeamNoticeNotify& a, TeamRpcLeaveTeamNoticeNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcLeaveTeamNoticeNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcLeaveTeamNoticeNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcLeaveTeamNoticeNotify& from);
  void MergeFrom(const TeamRpcLeaveTeamNoticeNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcLeaveTeamNoticeNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 3;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional sint32 UserId = 2 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcLeaveTeamNoticeNotify)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_username();
  void clear_has_username();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int32 userid_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcBreakUpNoticeNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcBreakUpNoticeNotify) */ {
 public:
  TeamRpcBreakUpNoticeNotify();
  virtual ~TeamRpcBreakUpNoticeNotify();

  TeamRpcBreakUpNoticeNotify(const TeamRpcBreakUpNoticeNotify& from);

  inline TeamRpcBreakUpNoticeNotify& operator=(const TeamRpcBreakUpNoticeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcBreakUpNoticeNotify(TeamRpcBreakUpNoticeNotify&& from) noexcept
    : TeamRpcBreakUpNoticeNotify() {
    *this = ::std::move(from);
  }

  inline TeamRpcBreakUpNoticeNotify& operator=(TeamRpcBreakUpNoticeNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcBreakUpNoticeNotify& default_instance();

  static inline const TeamRpcBreakUpNoticeNotify* internal_default_instance() {
    return reinterpret_cast<const TeamRpcBreakUpNoticeNotify*>(
               &_TeamRpcBreakUpNoticeNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(TeamRpcBreakUpNoticeNotify* other);
  friend void swap(TeamRpcBreakUpNoticeNotify& a, TeamRpcBreakUpNoticeNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcBreakUpNoticeNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcBreakUpNoticeNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcBreakUpNoticeNotify& from);
  void MergeFrom(const TeamRpcBreakUpNoticeNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcBreakUpNoticeNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional sint64 UserId = 1 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TeamRpcBreakUpNoticeNotify)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_username();
  void clear_has_username();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcReqMyTeamDataNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcReqMyTeamDataNotify) */ {
 public:
  TeamRpcReqMyTeamDataNotify();
  virtual ~TeamRpcReqMyTeamDataNotify();

  TeamRpcReqMyTeamDataNotify(const TeamRpcReqMyTeamDataNotify& from);

  inline TeamRpcReqMyTeamDataNotify& operator=(const TeamRpcReqMyTeamDataNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcReqMyTeamDataNotify(TeamRpcReqMyTeamDataNotify&& from) noexcept
    : TeamRpcReqMyTeamDataNotify() {
    *this = ::std::move(from);
  }

  inline TeamRpcReqMyTeamDataNotify& operator=(TeamRpcReqMyTeamDataNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcReqMyTeamDataNotify& default_instance();

  static inline const TeamRpcReqMyTeamDataNotify* internal_default_instance() {
    return reinterpret_cast<const TeamRpcReqMyTeamDataNotify*>(
               &_TeamRpcReqMyTeamDataNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(TeamRpcReqMyTeamDataNotify* other);
  friend void swap(TeamRpcReqMyTeamDataNotify& a, TeamRpcReqMyTeamDataNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcReqMyTeamDataNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcReqMyTeamDataNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcReqMyTeamDataNotify& from);
  void MergeFrom(const TeamRpcReqMyTeamDataNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcReqMyTeamDataNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TeamRpcReqMyTeamDataNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcDeleteFromApplyListNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcDeleteFromApplyListNotify) */ {
 public:
  TeamRpcDeleteFromApplyListNotify();
  virtual ~TeamRpcDeleteFromApplyListNotify();

  TeamRpcDeleteFromApplyListNotify(const TeamRpcDeleteFromApplyListNotify& from);

  inline TeamRpcDeleteFromApplyListNotify& operator=(const TeamRpcDeleteFromApplyListNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcDeleteFromApplyListNotify(TeamRpcDeleteFromApplyListNotify&& from) noexcept
    : TeamRpcDeleteFromApplyListNotify() {
    *this = ::std::move(from);
  }

  inline TeamRpcDeleteFromApplyListNotify& operator=(TeamRpcDeleteFromApplyListNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcDeleteFromApplyListNotify& default_instance();

  static inline const TeamRpcDeleteFromApplyListNotify* internal_default_instance() {
    return reinterpret_cast<const TeamRpcDeleteFromApplyListNotify*>(
               &_TeamRpcDeleteFromApplyListNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(TeamRpcDeleteFromApplyListNotify* other);
  friend void swap(TeamRpcDeleteFromApplyListNotify& a, TeamRpcDeleteFromApplyListNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcDeleteFromApplyListNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcDeleteFromApplyListNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcDeleteFromApplyListNotify& from);
  void MergeFrom(const TeamRpcDeleteFromApplyListNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcDeleteFromApplyListNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 UserId = 2 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TeamRpcDeleteFromApplyListNotify)
 private:
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcAppointCaptainAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcAppointCaptainAsk) */ {
 public:
  TeamRpcAppointCaptainAsk();
  virtual ~TeamRpcAppointCaptainAsk();

  TeamRpcAppointCaptainAsk(const TeamRpcAppointCaptainAsk& from);

  inline TeamRpcAppointCaptainAsk& operator=(const TeamRpcAppointCaptainAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcAppointCaptainAsk(TeamRpcAppointCaptainAsk&& from) noexcept
    : TeamRpcAppointCaptainAsk() {
    *this = ::std::move(from);
  }

  inline TeamRpcAppointCaptainAsk& operator=(TeamRpcAppointCaptainAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcAppointCaptainAsk& default_instance();

  static inline const TeamRpcAppointCaptainAsk* internal_default_instance() {
    return reinterpret_cast<const TeamRpcAppointCaptainAsk*>(
               &_TeamRpcAppointCaptainAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(TeamRpcAppointCaptainAsk* other);
  friend void swap(TeamRpcAppointCaptainAsk& a, TeamRpcAppointCaptainAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcAppointCaptainAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcAppointCaptainAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcAppointCaptainAsk& from);
  void MergeFrom(const TeamRpcAppointCaptainAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcAppointCaptainAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 UserId = 1 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TeamRpcAppointCaptainAsk)
 private:
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcAppointCaptainReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcAppointCaptainReply) */ {
 public:
  TeamRpcAppointCaptainReply();
  virtual ~TeamRpcAppointCaptainReply();

  TeamRpcAppointCaptainReply(const TeamRpcAppointCaptainReply& from);

  inline TeamRpcAppointCaptainReply& operator=(const TeamRpcAppointCaptainReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcAppointCaptainReply(TeamRpcAppointCaptainReply&& from) noexcept
    : TeamRpcAppointCaptainReply() {
    *this = ::std::move(from);
  }

  inline TeamRpcAppointCaptainReply& operator=(TeamRpcAppointCaptainReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcAppointCaptainReply& default_instance();

  static inline const TeamRpcAppointCaptainReply* internal_default_instance() {
    return reinterpret_cast<const TeamRpcAppointCaptainReply*>(
               &_TeamRpcAppointCaptainReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(TeamRpcAppointCaptainReply* other);
  friend void swap(TeamRpcAppointCaptainReply& a, TeamRpcAppointCaptainReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcAppointCaptainReply* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcAppointCaptainReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcAppointCaptainReply& from);
  void MergeFrom(const TeamRpcAppointCaptainReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcAppointCaptainReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional sint64 UserId = 4 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 4;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TeamRpcAppointCaptainReply)
 private:
  void set_has_result();
  void clear_has_result();
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcCaptainChangeNoticeNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcCaptainChangeNoticeNotify) */ {
 public:
  TeamRpcCaptainChangeNoticeNotify();
  virtual ~TeamRpcCaptainChangeNoticeNotify();

  TeamRpcCaptainChangeNoticeNotify(const TeamRpcCaptainChangeNoticeNotify& from);

  inline TeamRpcCaptainChangeNoticeNotify& operator=(const TeamRpcCaptainChangeNoticeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcCaptainChangeNoticeNotify(TeamRpcCaptainChangeNoticeNotify&& from) noexcept
    : TeamRpcCaptainChangeNoticeNotify() {
    *this = ::std::move(from);
  }

  inline TeamRpcCaptainChangeNoticeNotify& operator=(TeamRpcCaptainChangeNoticeNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcCaptainChangeNoticeNotify& default_instance();

  static inline const TeamRpcCaptainChangeNoticeNotify* internal_default_instance() {
    return reinterpret_cast<const TeamRpcCaptainChangeNoticeNotify*>(
               &_TeamRpcCaptainChangeNoticeNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(TeamRpcCaptainChangeNoticeNotify* other);
  friend void swap(TeamRpcCaptainChangeNoticeNotify& a, TeamRpcCaptainChangeNoticeNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcCaptainChangeNoticeNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcCaptainChangeNoticeNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcCaptainChangeNoticeNotify& from);
  void MergeFrom(const TeamRpcCaptainChangeNoticeNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcCaptainChangeNoticeNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional sint64 UserId = 1 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TeamRpcCaptainChangeNoticeNotify)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_username();
  void clear_has_username();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcTeamMemberHPChangeNoticeNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcTeamMemberHPChangeNoticeNotify) */ {
 public:
  TeamRpcTeamMemberHPChangeNoticeNotify();
  virtual ~TeamRpcTeamMemberHPChangeNoticeNotify();

  TeamRpcTeamMemberHPChangeNoticeNotify(const TeamRpcTeamMemberHPChangeNoticeNotify& from);

  inline TeamRpcTeamMemberHPChangeNoticeNotify& operator=(const TeamRpcTeamMemberHPChangeNoticeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcTeamMemberHPChangeNoticeNotify(TeamRpcTeamMemberHPChangeNoticeNotify&& from) noexcept
    : TeamRpcTeamMemberHPChangeNoticeNotify() {
    *this = ::std::move(from);
  }

  inline TeamRpcTeamMemberHPChangeNoticeNotify& operator=(TeamRpcTeamMemberHPChangeNoticeNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcTeamMemberHPChangeNoticeNotify& default_instance();

  static inline const TeamRpcTeamMemberHPChangeNoticeNotify* internal_default_instance() {
    return reinterpret_cast<const TeamRpcTeamMemberHPChangeNoticeNotify*>(
               &_TeamRpcTeamMemberHPChangeNoticeNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(TeamRpcTeamMemberHPChangeNoticeNotify* other);
  friend void swap(TeamRpcTeamMemberHPChangeNoticeNotify& a, TeamRpcTeamMemberHPChangeNoticeNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcTeamMemberHPChangeNoticeNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcTeamMemberHPChangeNoticeNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcTeamMemberHPChangeNoticeNotify& from);
  void MergeFrom(const TeamRpcTeamMemberHPChangeNoticeNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcTeamMemberHPChangeNoticeNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 UserId = 1 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // optional sint32 HP = 2 [default = -1];
  bool has_hp() const;
  void clear_hp();
  static const int kHPFieldNumber = 2;
  ::google::protobuf::int32 hp() const;
  void set_hp(::google::protobuf::int32 value);

  // optional sint32 MaxHP = 3 [default = -1];
  bool has_maxhp() const;
  void clear_maxhp();
  static const int kMaxHPFieldNumber = 3;
  ::google::protobuf::int32 maxhp() const;
  void set_maxhp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcTeamMemberHPChangeNoticeNotify)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_hp();
  void clear_has_hp();
  void set_has_maxhp();
  void clear_has_maxhp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 maxhp_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcInviteHandleNoticeNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcInviteHandleNoticeNotify) */ {
 public:
  TeamRpcInviteHandleNoticeNotify();
  virtual ~TeamRpcInviteHandleNoticeNotify();

  TeamRpcInviteHandleNoticeNotify(const TeamRpcInviteHandleNoticeNotify& from);

  inline TeamRpcInviteHandleNoticeNotify& operator=(const TeamRpcInviteHandleNoticeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcInviteHandleNoticeNotify(TeamRpcInviteHandleNoticeNotify&& from) noexcept
    : TeamRpcInviteHandleNoticeNotify() {
    *this = ::std::move(from);
  }

  inline TeamRpcInviteHandleNoticeNotify& operator=(TeamRpcInviteHandleNoticeNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcInviteHandleNoticeNotify& default_instance();

  static inline const TeamRpcInviteHandleNoticeNotify* internal_default_instance() {
    return reinterpret_cast<const TeamRpcInviteHandleNoticeNotify*>(
               &_TeamRpcInviteHandleNoticeNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(TeamRpcInviteHandleNoticeNotify* other);
  friend void swap(TeamRpcInviteHandleNoticeNotify& a, TeamRpcInviteHandleNoticeNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcInviteHandleNoticeNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcInviteHandleNoticeNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcInviteHandleNoticeNotify& from);
  void MergeFrom(const TeamRpcInviteHandleNoticeNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcInviteHandleNoticeNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 2 [default = 0];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcInviteHandleNoticeNotify)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcNearbyRoleObj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcNearbyRoleObj) */ {
 public:
  TeamRpcNearbyRoleObj();
  virtual ~TeamRpcNearbyRoleObj();

  TeamRpcNearbyRoleObj(const TeamRpcNearbyRoleObj& from);

  inline TeamRpcNearbyRoleObj& operator=(const TeamRpcNearbyRoleObj& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcNearbyRoleObj(TeamRpcNearbyRoleObj&& from) noexcept
    : TeamRpcNearbyRoleObj() {
    *this = ::std::move(from);
  }

  inline TeamRpcNearbyRoleObj& operator=(TeamRpcNearbyRoleObj&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcNearbyRoleObj& default_instance();

  static inline const TeamRpcNearbyRoleObj* internal_default_instance() {
    return reinterpret_cast<const TeamRpcNearbyRoleObj*>(
               &_TeamRpcNearbyRoleObj_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(TeamRpcNearbyRoleObj* other);
  friend void swap(TeamRpcNearbyRoleObj& a, TeamRpcNearbyRoleObj& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcNearbyRoleObj* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcNearbyRoleObj* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcNearbyRoleObj& from);
  void MergeFrom(const TeamRpcNearbyRoleObj& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcNearbyRoleObj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 3;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional sint64 UserId = 2 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // optional sint32 Level = 4 [default = -1];
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 4;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional sint32 Prof = 5 [default = -1];
  bool has_prof() const;
  void clear_prof();
  static const int kProfFieldNumber = 5;
  ::google::protobuf::int32 prof() const;
  void set_prof(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcNearbyRoleObj)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_username();
  void clear_has_username();
  void set_has_level();
  void clear_has_level();
  void set_has_prof();
  void clear_has_prof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 prof_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcNearbyRoleListAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcNearbyRoleListAsk) */ {
 public:
  TeamRpcNearbyRoleListAsk();
  virtual ~TeamRpcNearbyRoleListAsk();

  TeamRpcNearbyRoleListAsk(const TeamRpcNearbyRoleListAsk& from);

  inline TeamRpcNearbyRoleListAsk& operator=(const TeamRpcNearbyRoleListAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcNearbyRoleListAsk(TeamRpcNearbyRoleListAsk&& from) noexcept
    : TeamRpcNearbyRoleListAsk() {
    *this = ::std::move(from);
  }

  inline TeamRpcNearbyRoleListAsk& operator=(TeamRpcNearbyRoleListAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcNearbyRoleListAsk& default_instance();

  static inline const TeamRpcNearbyRoleListAsk* internal_default_instance() {
    return reinterpret_cast<const TeamRpcNearbyRoleListAsk*>(
               &_TeamRpcNearbyRoleListAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(TeamRpcNearbyRoleListAsk* other);
  friend void swap(TeamRpcNearbyRoleListAsk& a, TeamRpcNearbyRoleListAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcNearbyRoleListAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcNearbyRoleListAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcNearbyRoleListAsk& from);
  void MergeFrom(const TeamRpcNearbyRoleListAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcNearbyRoleListAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TeamRpcNearbyRoleListAsk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcNearbyRoleListReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcNearbyRoleListReply) */ {
 public:
  TeamRpcNearbyRoleListReply();
  virtual ~TeamRpcNearbyRoleListReply();

  TeamRpcNearbyRoleListReply(const TeamRpcNearbyRoleListReply& from);

  inline TeamRpcNearbyRoleListReply& operator=(const TeamRpcNearbyRoleListReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcNearbyRoleListReply(TeamRpcNearbyRoleListReply&& from) noexcept
    : TeamRpcNearbyRoleListReply() {
    *this = ::std::move(from);
  }

  inline TeamRpcNearbyRoleListReply& operator=(TeamRpcNearbyRoleListReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcNearbyRoleListReply& default_instance();

  static inline const TeamRpcNearbyRoleListReply* internal_default_instance() {
    return reinterpret_cast<const TeamRpcNearbyRoleListReply*>(
               &_TeamRpcNearbyRoleListReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(TeamRpcNearbyRoleListReply* other);
  friend void swap(TeamRpcNearbyRoleListReply& a, TeamRpcNearbyRoleListReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcNearbyRoleListReply* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcNearbyRoleListReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcNearbyRoleListReply& from);
  void MergeFrom(const TeamRpcNearbyRoleListReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcNearbyRoleListReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TeamRpcNearbyRoleObj NearbyRoleList = 2;
  int nearbyrolelist_size() const;
  void clear_nearbyrolelist();
  static const int kNearbyRoleListFieldNumber = 2;
  const ::TeamRpcNearbyRoleObj& nearbyrolelist(int index) const;
  ::TeamRpcNearbyRoleObj* mutable_nearbyrolelist(int index);
  ::TeamRpcNearbyRoleObj* add_nearbyrolelist();
  ::google::protobuf::RepeatedPtrField< ::TeamRpcNearbyRoleObj >*
      mutable_nearbyrolelist();
  const ::google::protobuf::RepeatedPtrField< ::TeamRpcNearbyRoleObj >&
      nearbyrolelist() const;

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcNearbyRoleListReply)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::TeamRpcNearbyRoleObj > nearbyrolelist_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcKickRoleAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcKickRoleAsk) */ {
 public:
  TeamRpcKickRoleAsk();
  virtual ~TeamRpcKickRoleAsk();

  TeamRpcKickRoleAsk(const TeamRpcKickRoleAsk& from);

  inline TeamRpcKickRoleAsk& operator=(const TeamRpcKickRoleAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcKickRoleAsk(TeamRpcKickRoleAsk&& from) noexcept
    : TeamRpcKickRoleAsk() {
    *this = ::std::move(from);
  }

  inline TeamRpcKickRoleAsk& operator=(TeamRpcKickRoleAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcKickRoleAsk& default_instance();

  static inline const TeamRpcKickRoleAsk* internal_default_instance() {
    return reinterpret_cast<const TeamRpcKickRoleAsk*>(
               &_TeamRpcKickRoleAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(TeamRpcKickRoleAsk* other);
  friend void swap(TeamRpcKickRoleAsk& a, TeamRpcKickRoleAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcKickRoleAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcKickRoleAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcKickRoleAsk& from);
  void MergeFrom(const TeamRpcKickRoleAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcKickRoleAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 UserId = 1 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TeamRpcKickRoleAsk)
 private:
  void set_has_userid();
  void clear_has_userid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcKickRoleReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcKickRoleReply) */ {
 public:
  TeamRpcKickRoleReply();
  virtual ~TeamRpcKickRoleReply();

  TeamRpcKickRoleReply(const TeamRpcKickRoleReply& from);

  inline TeamRpcKickRoleReply& operator=(const TeamRpcKickRoleReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcKickRoleReply(TeamRpcKickRoleReply&& from) noexcept
    : TeamRpcKickRoleReply() {
    *this = ::std::move(from);
  }

  inline TeamRpcKickRoleReply& operator=(TeamRpcKickRoleReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcKickRoleReply& default_instance();

  static inline const TeamRpcKickRoleReply* internal_default_instance() {
    return reinterpret_cast<const TeamRpcKickRoleReply*>(
               &_TeamRpcKickRoleReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(TeamRpcKickRoleReply* other);
  friend void swap(TeamRpcKickRoleReply& a, TeamRpcKickRoleReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcKickRoleReply* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcKickRoleReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcKickRoleReply& from);
  void MergeFrom(const TeamRpcKickRoleReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcKickRoleReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcKickRoleReply)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcBeingKickedNoticeNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcBeingKickedNoticeNotify) */ {
 public:
  TeamRpcBeingKickedNoticeNotify();
  virtual ~TeamRpcBeingKickedNoticeNotify();

  TeamRpcBeingKickedNoticeNotify(const TeamRpcBeingKickedNoticeNotify& from);

  inline TeamRpcBeingKickedNoticeNotify& operator=(const TeamRpcBeingKickedNoticeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcBeingKickedNoticeNotify(TeamRpcBeingKickedNoticeNotify&& from) noexcept
    : TeamRpcBeingKickedNoticeNotify() {
    *this = ::std::move(from);
  }

  inline TeamRpcBeingKickedNoticeNotify& operator=(TeamRpcBeingKickedNoticeNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcBeingKickedNoticeNotify& default_instance();

  static inline const TeamRpcBeingKickedNoticeNotify* internal_default_instance() {
    return reinterpret_cast<const TeamRpcBeingKickedNoticeNotify*>(
               &_TeamRpcBeingKickedNoticeNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(TeamRpcBeingKickedNoticeNotify* other);
  friend void swap(TeamRpcBeingKickedNoticeNotify& a, TeamRpcBeingKickedNoticeNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcBeingKickedNoticeNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcBeingKickedNoticeNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcBeingKickedNoticeNotify& from);
  void MergeFrom(const TeamRpcBeingKickedNoticeNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcBeingKickedNoticeNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TeamRpcBeingKickedNoticeNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcBreakUpAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcBreakUpAsk) */ {
 public:
  TeamRpcBreakUpAsk();
  virtual ~TeamRpcBreakUpAsk();

  TeamRpcBreakUpAsk(const TeamRpcBreakUpAsk& from);

  inline TeamRpcBreakUpAsk& operator=(const TeamRpcBreakUpAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcBreakUpAsk(TeamRpcBreakUpAsk&& from) noexcept
    : TeamRpcBreakUpAsk() {
    *this = ::std::move(from);
  }

  inline TeamRpcBreakUpAsk& operator=(TeamRpcBreakUpAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcBreakUpAsk& default_instance();

  static inline const TeamRpcBreakUpAsk* internal_default_instance() {
    return reinterpret_cast<const TeamRpcBreakUpAsk*>(
               &_TeamRpcBreakUpAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(TeamRpcBreakUpAsk* other);
  friend void swap(TeamRpcBreakUpAsk& a, TeamRpcBreakUpAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcBreakUpAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcBreakUpAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcBreakUpAsk& from);
  void MergeFrom(const TeamRpcBreakUpAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcBreakUpAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TeamRpcBreakUpAsk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcBreakUpReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcBreakUpReply) */ {
 public:
  TeamRpcBreakUpReply();
  virtual ~TeamRpcBreakUpReply();

  TeamRpcBreakUpReply(const TeamRpcBreakUpReply& from);

  inline TeamRpcBreakUpReply& operator=(const TeamRpcBreakUpReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcBreakUpReply(TeamRpcBreakUpReply&& from) noexcept
    : TeamRpcBreakUpReply() {
    *this = ::std::move(from);
  }

  inline TeamRpcBreakUpReply& operator=(TeamRpcBreakUpReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcBreakUpReply& default_instance();

  static inline const TeamRpcBreakUpReply* internal_default_instance() {
    return reinterpret_cast<const TeamRpcBreakUpReply*>(
               &_TeamRpcBreakUpReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(TeamRpcBreakUpReply* other);
  friend void swap(TeamRpcBreakUpReply& a, TeamRpcBreakUpReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcBreakUpReply* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcBreakUpReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcBreakUpReply& from);
  void MergeFrom(const TeamRpcBreakUpReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcBreakUpReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcBreakUpReply)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcAddNewMemberNoticeNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcAddNewMemberNoticeNotify) */ {
 public:
  TeamRpcAddNewMemberNoticeNotify();
  virtual ~TeamRpcAddNewMemberNoticeNotify();

  TeamRpcAddNewMemberNoticeNotify(const TeamRpcAddNewMemberNoticeNotify& from);

  inline TeamRpcAddNewMemberNoticeNotify& operator=(const TeamRpcAddNewMemberNoticeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcAddNewMemberNoticeNotify(TeamRpcAddNewMemberNoticeNotify&& from) noexcept
    : TeamRpcAddNewMemberNoticeNotify() {
    *this = ::std::move(from);
  }

  inline TeamRpcAddNewMemberNoticeNotify& operator=(TeamRpcAddNewMemberNoticeNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcAddNewMemberNoticeNotify& default_instance();

  static inline const TeamRpcAddNewMemberNoticeNotify* internal_default_instance() {
    return reinterpret_cast<const TeamRpcAddNewMemberNoticeNotify*>(
               &_TeamRpcAddNewMemberNoticeNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(TeamRpcAddNewMemberNoticeNotify* other);
  friend void swap(TeamRpcAddNewMemberNoticeNotify& a, TeamRpcAddNewMemberNoticeNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcAddNewMemberNoticeNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcAddNewMemberNoticeNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcAddNewMemberNoticeNotify& from);
  void MergeFrom(const TeamRpcAddNewMemberNoticeNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcAddNewMemberNoticeNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional sint64 UserId = 1 [default = -1];
  bool has_userid() const;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TeamRpcAddNewMemberNoticeNotify)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_username();
  void clear_has_username();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int64 userid_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcCaptainAutoMatchAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcCaptainAutoMatchAsk) */ {
 public:
  TeamRpcCaptainAutoMatchAsk();
  virtual ~TeamRpcCaptainAutoMatchAsk();

  TeamRpcCaptainAutoMatchAsk(const TeamRpcCaptainAutoMatchAsk& from);

  inline TeamRpcCaptainAutoMatchAsk& operator=(const TeamRpcCaptainAutoMatchAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcCaptainAutoMatchAsk(TeamRpcCaptainAutoMatchAsk&& from) noexcept
    : TeamRpcCaptainAutoMatchAsk() {
    *this = ::std::move(from);
  }

  inline TeamRpcCaptainAutoMatchAsk& operator=(TeamRpcCaptainAutoMatchAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcCaptainAutoMatchAsk& default_instance();

  static inline const TeamRpcCaptainAutoMatchAsk* internal_default_instance() {
    return reinterpret_cast<const TeamRpcCaptainAutoMatchAsk*>(
               &_TeamRpcCaptainAutoMatchAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(TeamRpcCaptainAutoMatchAsk* other);
  friend void swap(TeamRpcCaptainAutoMatchAsk& a, TeamRpcCaptainAutoMatchAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcCaptainAutoMatchAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcCaptainAutoMatchAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcCaptainAutoMatchAsk& from);
  void MergeFrom(const TeamRpcCaptainAutoMatchAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcCaptainAutoMatchAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Oper = 1 [default = -1];
  bool has_oper() const;
  void clear_oper();
  static const int kOperFieldNumber = 1;
  ::google::protobuf::int32 oper() const;
  void set_oper(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcCaptainAutoMatchAsk)
 private:
  void set_has_oper();
  void clear_has_oper();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 oper_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcCaptainAutoMatchReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcCaptainAutoMatchReply) */ {
 public:
  TeamRpcCaptainAutoMatchReply();
  virtual ~TeamRpcCaptainAutoMatchReply();

  TeamRpcCaptainAutoMatchReply(const TeamRpcCaptainAutoMatchReply& from);

  inline TeamRpcCaptainAutoMatchReply& operator=(const TeamRpcCaptainAutoMatchReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcCaptainAutoMatchReply(TeamRpcCaptainAutoMatchReply&& from) noexcept
    : TeamRpcCaptainAutoMatchReply() {
    *this = ::std::move(from);
  }

  inline TeamRpcCaptainAutoMatchReply& operator=(TeamRpcCaptainAutoMatchReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcCaptainAutoMatchReply& default_instance();

  static inline const TeamRpcCaptainAutoMatchReply* internal_default_instance() {
    return reinterpret_cast<const TeamRpcCaptainAutoMatchReply*>(
               &_TeamRpcCaptainAutoMatchReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(TeamRpcCaptainAutoMatchReply* other);
  friend void swap(TeamRpcCaptainAutoMatchReply& a, TeamRpcCaptainAutoMatchReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcCaptainAutoMatchReply* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcCaptainAutoMatchReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcCaptainAutoMatchReply& from);
  void MergeFrom(const TeamRpcCaptainAutoMatchReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcCaptainAutoMatchReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcCaptainAutoMatchReply)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcNormalAutoMatchAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcNormalAutoMatchAsk) */ {
 public:
  TeamRpcNormalAutoMatchAsk();
  virtual ~TeamRpcNormalAutoMatchAsk();

  TeamRpcNormalAutoMatchAsk(const TeamRpcNormalAutoMatchAsk& from);

  inline TeamRpcNormalAutoMatchAsk& operator=(const TeamRpcNormalAutoMatchAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcNormalAutoMatchAsk(TeamRpcNormalAutoMatchAsk&& from) noexcept
    : TeamRpcNormalAutoMatchAsk() {
    *this = ::std::move(from);
  }

  inline TeamRpcNormalAutoMatchAsk& operator=(TeamRpcNormalAutoMatchAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcNormalAutoMatchAsk& default_instance();

  static inline const TeamRpcNormalAutoMatchAsk* internal_default_instance() {
    return reinterpret_cast<const TeamRpcNormalAutoMatchAsk*>(
               &_TeamRpcNormalAutoMatchAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(TeamRpcNormalAutoMatchAsk* other);
  friend void swap(TeamRpcNormalAutoMatchAsk& a, TeamRpcNormalAutoMatchAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcNormalAutoMatchAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcNormalAutoMatchAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcNormalAutoMatchAsk& from);
  void MergeFrom(const TeamRpcNormalAutoMatchAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcNormalAutoMatchAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Oper = 1 [default = -1];
  bool has_oper() const;
  void clear_oper();
  static const int kOperFieldNumber = 1;
  ::google::protobuf::int32 oper() const;
  void set_oper(::google::protobuf::int32 value);

  // optional sint32 Target = 2 [default = -1];
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 2;
  ::google::protobuf::int32 target() const;
  void set_target(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcNormalAutoMatchAsk)
 private:
  void set_has_oper();
  void clear_has_oper();
  void set_has_target();
  void clear_has_target();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 oper_;
  ::google::protobuf::int32 target_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcNormalAutoMatchReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcNormalAutoMatchReply) */ {
 public:
  TeamRpcNormalAutoMatchReply();
  virtual ~TeamRpcNormalAutoMatchReply();

  TeamRpcNormalAutoMatchReply(const TeamRpcNormalAutoMatchReply& from);

  inline TeamRpcNormalAutoMatchReply& operator=(const TeamRpcNormalAutoMatchReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcNormalAutoMatchReply(TeamRpcNormalAutoMatchReply&& from) noexcept
    : TeamRpcNormalAutoMatchReply() {
    *this = ::std::move(from);
  }

  inline TeamRpcNormalAutoMatchReply& operator=(TeamRpcNormalAutoMatchReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcNormalAutoMatchReply& default_instance();

  static inline const TeamRpcNormalAutoMatchReply* internal_default_instance() {
    return reinterpret_cast<const TeamRpcNormalAutoMatchReply*>(
               &_TeamRpcNormalAutoMatchReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(TeamRpcNormalAutoMatchReply* other);
  friend void swap(TeamRpcNormalAutoMatchReply& a, TeamRpcNormalAutoMatchReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcNormalAutoMatchReply* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcNormalAutoMatchReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcNormalAutoMatchReply& from);
  void MergeFrom(const TeamRpcNormalAutoMatchReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcNormalAutoMatchReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcNormalAutoMatchReply)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcFollowAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcFollowAsk) */ {
 public:
  TeamRpcFollowAsk();
  virtual ~TeamRpcFollowAsk();

  TeamRpcFollowAsk(const TeamRpcFollowAsk& from);

  inline TeamRpcFollowAsk& operator=(const TeamRpcFollowAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcFollowAsk(TeamRpcFollowAsk&& from) noexcept
    : TeamRpcFollowAsk() {
    *this = ::std::move(from);
  }

  inline TeamRpcFollowAsk& operator=(TeamRpcFollowAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcFollowAsk& default_instance();

  static inline const TeamRpcFollowAsk* internal_default_instance() {
    return reinterpret_cast<const TeamRpcFollowAsk*>(
               &_TeamRpcFollowAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(TeamRpcFollowAsk* other);
  friend void swap(TeamRpcFollowAsk& a, TeamRpcFollowAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcFollowAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcFollowAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcFollowAsk& from);
  void MergeFrom(const TeamRpcFollowAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcFollowAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TeamRpcFollowAsk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcFollowReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcFollowReply) */ {
 public:
  TeamRpcFollowReply();
  virtual ~TeamRpcFollowReply();

  TeamRpcFollowReply(const TeamRpcFollowReply& from);

  inline TeamRpcFollowReply& operator=(const TeamRpcFollowReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcFollowReply(TeamRpcFollowReply&& from) noexcept
    : TeamRpcFollowReply() {
    *this = ::std::move(from);
  }

  inline TeamRpcFollowReply& operator=(TeamRpcFollowReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcFollowReply& default_instance();

  static inline const TeamRpcFollowReply* internal_default_instance() {
    return reinterpret_cast<const TeamRpcFollowReply*>(
               &_TeamRpcFollowReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(TeamRpcFollowReply* other);
  friend void swap(TeamRpcFollowReply& a, TeamRpcFollowReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcFollowReply* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcFollowReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcFollowReply& from);
  void MergeFrom(const TeamRpcFollowReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcFollowReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcFollowReply)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcClearApplyListAsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcClearApplyListAsk) */ {
 public:
  TeamRpcClearApplyListAsk();
  virtual ~TeamRpcClearApplyListAsk();

  TeamRpcClearApplyListAsk(const TeamRpcClearApplyListAsk& from);

  inline TeamRpcClearApplyListAsk& operator=(const TeamRpcClearApplyListAsk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcClearApplyListAsk(TeamRpcClearApplyListAsk&& from) noexcept
    : TeamRpcClearApplyListAsk() {
    *this = ::std::move(from);
  }

  inline TeamRpcClearApplyListAsk& operator=(TeamRpcClearApplyListAsk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcClearApplyListAsk& default_instance();

  static inline const TeamRpcClearApplyListAsk* internal_default_instance() {
    return reinterpret_cast<const TeamRpcClearApplyListAsk*>(
               &_TeamRpcClearApplyListAsk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(TeamRpcClearApplyListAsk* other);
  friend void swap(TeamRpcClearApplyListAsk& a, TeamRpcClearApplyListAsk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcClearApplyListAsk* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcClearApplyListAsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcClearApplyListAsk& from);
  void MergeFrom(const TeamRpcClearApplyListAsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcClearApplyListAsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TeamRpcClearApplyListAsk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamRpcClearApplyListReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamRpcClearApplyListReply) */ {
 public:
  TeamRpcClearApplyListReply();
  virtual ~TeamRpcClearApplyListReply();

  TeamRpcClearApplyListReply(const TeamRpcClearApplyListReply& from);

  inline TeamRpcClearApplyListReply& operator=(const TeamRpcClearApplyListReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRpcClearApplyListReply(TeamRpcClearApplyListReply&& from) noexcept
    : TeamRpcClearApplyListReply() {
    *this = ::std::move(from);
  }

  inline TeamRpcClearApplyListReply& operator=(TeamRpcClearApplyListReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRpcClearApplyListReply& default_instance();

  static inline const TeamRpcClearApplyListReply* internal_default_instance() {
    return reinterpret_cast<const TeamRpcClearApplyListReply*>(
               &_TeamRpcClearApplyListReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(TeamRpcClearApplyListReply* other);
  friend void swap(TeamRpcClearApplyListReply& a, TeamRpcClearApplyListReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRpcClearApplyListReply* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRpcClearApplyListReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRpcClearApplyListReply& from);
  void MergeFrom(const TeamRpcClearApplyListReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRpcClearApplyListReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Result = 1 [default = -9999];
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TeamRpcClearApplyListReply)
 private:
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend struct protobuf_TeamRpc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TeamRpcCreateTeamAsk

// optional sint32 TargetId = 1 [default = -1];
inline bool TeamRpcCreateTeamAsk::has_targetid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcCreateTeamAsk::set_has_targetid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcCreateTeamAsk::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcCreateTeamAsk::clear_targetid() {
  targetid_ = -1;
  clear_has_targetid();
}
inline ::google::protobuf::int32 TeamRpcCreateTeamAsk::targetid() const {
  // @@protoc_insertion_point(field_get:TeamRpcCreateTeamAsk.TargetId)
  return targetid_;
}
inline void TeamRpcCreateTeamAsk::set_targetid(::google::protobuf::int32 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcCreateTeamAsk.TargetId)
}

// optional sint32 TargetMinLv = 2 [default = -1];
inline bool TeamRpcCreateTeamAsk::has_targetminlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamRpcCreateTeamAsk::set_has_targetminlv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamRpcCreateTeamAsk::clear_has_targetminlv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamRpcCreateTeamAsk::clear_targetminlv() {
  targetminlv_ = -1;
  clear_has_targetminlv();
}
inline ::google::protobuf::int32 TeamRpcCreateTeamAsk::targetminlv() const {
  // @@protoc_insertion_point(field_get:TeamRpcCreateTeamAsk.TargetMinLv)
  return targetminlv_;
}
inline void TeamRpcCreateTeamAsk::set_targetminlv(::google::protobuf::int32 value) {
  set_has_targetminlv();
  targetminlv_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcCreateTeamAsk.TargetMinLv)
}

// optional sint32 TargetMaxLv = 3 [default = -1];
inline bool TeamRpcCreateTeamAsk::has_targetmaxlv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcCreateTeamAsk::set_has_targetmaxlv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcCreateTeamAsk::clear_has_targetmaxlv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcCreateTeamAsk::clear_targetmaxlv() {
  targetmaxlv_ = -1;
  clear_has_targetmaxlv();
}
inline ::google::protobuf::int32 TeamRpcCreateTeamAsk::targetmaxlv() const {
  // @@protoc_insertion_point(field_get:TeamRpcCreateTeamAsk.TargetMaxLv)
  return targetmaxlv_;
}
inline void TeamRpcCreateTeamAsk::set_targetmaxlv(::google::protobuf::int32 value) {
  set_has_targetmaxlv();
  targetmaxlv_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcCreateTeamAsk.TargetMaxLv)
}

// -------------------------------------------------------------------

// TeamRpcCreateTeamReply

// optional sint32 Result = 1 [default = -9999];
inline bool TeamRpcCreateTeamReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcCreateTeamReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcCreateTeamReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcCreateTeamReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 TeamRpcCreateTeamReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcCreateTeamReply.Result)
  return result_;
}
inline void TeamRpcCreateTeamReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcCreateTeamReply.Result)
}

// optional .TeamObj TeamData = 2;
inline bool TeamRpcCreateTeamReply::has_teamdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcCreateTeamReply::set_has_teamdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcCreateTeamReply::clear_has_teamdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcCreateTeamReply::clear_teamdata() {
  if (teamdata_ != NULL) teamdata_->::TeamObj::Clear();
  clear_has_teamdata();
}
inline const ::TeamObj& TeamRpcCreateTeamReply::teamdata() const {
  const ::TeamObj* p = teamdata_;
  // @@protoc_insertion_point(field_get:TeamRpcCreateTeamReply.TeamData)
  return p != NULL ? *p : *reinterpret_cast<const ::TeamObj*>(
      &::_TeamObj_default_instance_);
}
inline ::TeamObj* TeamRpcCreateTeamReply::mutable_teamdata() {
  set_has_teamdata();
  if (teamdata_ == NULL) {
    teamdata_ = new ::TeamObj;
  }
  // @@protoc_insertion_point(field_mutable:TeamRpcCreateTeamReply.TeamData)
  return teamdata_;
}
inline ::TeamObj* TeamRpcCreateTeamReply::release_teamdata() {
  // @@protoc_insertion_point(field_release:TeamRpcCreateTeamReply.TeamData)
  clear_has_teamdata();
  ::TeamObj* temp = teamdata_;
  teamdata_ = NULL;
  return temp;
}
inline void TeamRpcCreateTeamReply::set_allocated_teamdata(::TeamObj* teamdata) {
  delete teamdata_;
  teamdata_ = teamdata;
  if (teamdata) {
    set_has_teamdata();
  } else {
    clear_has_teamdata();
  }
  // @@protoc_insertion_point(field_set_allocated:TeamRpcCreateTeamReply.TeamData)
}

// -------------------------------------------------------------------

// TeamRpcApplyForTeamAsk

// optional sint32 TeamId = 1 [default = -1];
inline bool TeamRpcApplyForTeamAsk::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcApplyForTeamAsk::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcApplyForTeamAsk::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcApplyForTeamAsk::clear_teamid() {
  teamid_ = -1;
  clear_has_teamid();
}
inline ::google::protobuf::int32 TeamRpcApplyForTeamAsk::teamid() const {
  // @@protoc_insertion_point(field_get:TeamRpcApplyForTeamAsk.TeamId)
  return teamid_;
}
inline void TeamRpcApplyForTeamAsk::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcApplyForTeamAsk.TeamId)
}

// -------------------------------------------------------------------

// TeamRpcApplyForTeamReply

// optional sint32 Result = 1 [default = -9999];
inline bool TeamRpcApplyForTeamReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcApplyForTeamReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcApplyForTeamReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcApplyForTeamReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 TeamRpcApplyForTeamReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcApplyForTeamReply.Result)
  return result_;
}
inline void TeamRpcApplyForTeamReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcApplyForTeamReply.Result)
}

// optional sint32 TeamId = 2 [default = -1];
inline bool TeamRpcApplyForTeamReply::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcApplyForTeamReply::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcApplyForTeamReply::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcApplyForTeamReply::clear_teamid() {
  teamid_ = -1;
  clear_has_teamid();
}
inline ::google::protobuf::int32 TeamRpcApplyForTeamReply::teamid() const {
  // @@protoc_insertion_point(field_get:TeamRpcApplyForTeamReply.TeamId)
  return teamid_;
}
inline void TeamRpcApplyForTeamReply::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcApplyForTeamReply.TeamId)
}

// -------------------------------------------------------------------

// TeamRpcInviteToTeamAsk

// optional sint64 UserId = 1 [default = -1];
inline bool TeamRpcInviteToTeamAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcInviteToTeamAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcInviteToTeamAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcInviteToTeamAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 TeamRpcInviteToTeamAsk::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcInviteToTeamAsk.UserId)
  return userid_;
}
inline void TeamRpcInviteToTeamAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcInviteToTeamAsk.UserId)
}

// -------------------------------------------------------------------

// TeamRpcInviteToTeamReply

// optional sint32 Result = 1 [default = -9999];
inline bool TeamRpcInviteToTeamReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcInviteToTeamReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcInviteToTeamReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcInviteToTeamReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 TeamRpcInviteToTeamReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcInviteToTeamReply.Result)
  return result_;
}
inline void TeamRpcInviteToTeamReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcInviteToTeamReply.Result)
}

// optional sint64 UserId = 2 [default = -1];
inline bool TeamRpcInviteToTeamReply::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcInviteToTeamReply::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcInviteToTeamReply::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcInviteToTeamReply::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 TeamRpcInviteToTeamReply::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcInviteToTeamReply.UserId)
  return userid_;
}
inline void TeamRpcInviteToTeamReply::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcInviteToTeamReply.UserId)
}

// -------------------------------------------------------------------

// TeamRpcChangeTeamTargetAsk

// optional sint32 TargetId = 1 [default = -1];
inline bool TeamRpcChangeTeamTargetAsk::has_targetid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcChangeTeamTargetAsk::set_has_targetid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcChangeTeamTargetAsk::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcChangeTeamTargetAsk::clear_targetid() {
  targetid_ = -1;
  clear_has_targetid();
}
inline ::google::protobuf::int32 TeamRpcChangeTeamTargetAsk::targetid() const {
  // @@protoc_insertion_point(field_get:TeamRpcChangeTeamTargetAsk.TargetId)
  return targetid_;
}
inline void TeamRpcChangeTeamTargetAsk::set_targetid(::google::protobuf::int32 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcChangeTeamTargetAsk.TargetId)
}

// optional sint32 TargetMinLv = 3 [default = -1];
inline bool TeamRpcChangeTeamTargetAsk::has_targetminlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamRpcChangeTeamTargetAsk::set_has_targetminlv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamRpcChangeTeamTargetAsk::clear_has_targetminlv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamRpcChangeTeamTargetAsk::clear_targetminlv() {
  targetminlv_ = -1;
  clear_has_targetminlv();
}
inline ::google::protobuf::int32 TeamRpcChangeTeamTargetAsk::targetminlv() const {
  // @@protoc_insertion_point(field_get:TeamRpcChangeTeamTargetAsk.TargetMinLv)
  return targetminlv_;
}
inline void TeamRpcChangeTeamTargetAsk::set_targetminlv(::google::protobuf::int32 value) {
  set_has_targetminlv();
  targetminlv_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcChangeTeamTargetAsk.TargetMinLv)
}

// optional sint32 TargetMaxLv = 4 [default = -1];
inline bool TeamRpcChangeTeamTargetAsk::has_targetmaxlv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcChangeTeamTargetAsk::set_has_targetmaxlv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcChangeTeamTargetAsk::clear_has_targetmaxlv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcChangeTeamTargetAsk::clear_targetmaxlv() {
  targetmaxlv_ = -1;
  clear_has_targetmaxlv();
}
inline ::google::protobuf::int32 TeamRpcChangeTeamTargetAsk::targetmaxlv() const {
  // @@protoc_insertion_point(field_get:TeamRpcChangeTeamTargetAsk.TargetMaxLv)
  return targetmaxlv_;
}
inline void TeamRpcChangeTeamTargetAsk::set_targetmaxlv(::google::protobuf::int32 value) {
  set_has_targetmaxlv();
  targetmaxlv_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcChangeTeamTargetAsk.TargetMaxLv)
}

// -------------------------------------------------------------------

// TeamRpcChangeTeamTargetReply

// optional sint32 Result = 1 [default = -9999];
inline bool TeamRpcChangeTeamTargetReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcChangeTeamTargetReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcChangeTeamTargetReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcChangeTeamTargetReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 TeamRpcChangeTeamTargetReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcChangeTeamTargetReply.Result)
  return result_;
}
inline void TeamRpcChangeTeamTargetReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcChangeTeamTargetReply.Result)
}

// -------------------------------------------------------------------

// TeamRpcBeInvitedNoticeNotify

// optional sint32 TeamId = 1 [default = -1];
inline bool TeamRpcBeInvitedNoticeNotify::has_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamRpcBeInvitedNoticeNotify::set_has_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamRpcBeInvitedNoticeNotify::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamRpcBeInvitedNoticeNotify::clear_teamid() {
  teamid_ = -1;
  clear_has_teamid();
}
inline ::google::protobuf::int32 TeamRpcBeInvitedNoticeNotify::teamid() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInvitedNoticeNotify.TeamId)
  return teamid_;
}
inline void TeamRpcBeInvitedNoticeNotify::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBeInvitedNoticeNotify.TeamId)
}

// optional sint64 UserId = 2 [default = -1];
inline bool TeamRpcBeInvitedNoticeNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamRpcBeInvitedNoticeNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamRpcBeInvitedNoticeNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamRpcBeInvitedNoticeNotify::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 TeamRpcBeInvitedNoticeNotify::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInvitedNoticeNotify.UserId)
  return userid_;
}
inline void TeamRpcBeInvitedNoticeNotify::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBeInvitedNoticeNotify.UserId)
}

// optional string UserName = 3;
inline bool TeamRpcBeInvitedNoticeNotify::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcBeInvitedNoticeNotify::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcBeInvitedNoticeNotify::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcBeInvitedNoticeNotify::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& TeamRpcBeInvitedNoticeNotify::username() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInvitedNoticeNotify.UserName)
  return username_.GetNoArena();
}
inline void TeamRpcBeInvitedNoticeNotify::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TeamRpcBeInvitedNoticeNotify.UserName)
}
#if LANG_CXX11
inline void TeamRpcBeInvitedNoticeNotify::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TeamRpcBeInvitedNoticeNotify.UserName)
}
#endif
inline void TeamRpcBeInvitedNoticeNotify::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TeamRpcBeInvitedNoticeNotify.UserName)
}
inline void TeamRpcBeInvitedNoticeNotify::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TeamRpcBeInvitedNoticeNotify.UserName)
}
inline ::std::string* TeamRpcBeInvitedNoticeNotify::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:TeamRpcBeInvitedNoticeNotify.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamRpcBeInvitedNoticeNotify::release_username() {
  // @@protoc_insertion_point(field_release:TeamRpcBeInvitedNoticeNotify.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamRpcBeInvitedNoticeNotify::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:TeamRpcBeInvitedNoticeNotify.UserName)
}

// optional string CaptainUserName = 4;
inline bool TeamRpcBeInvitedNoticeNotify::has_captainusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcBeInvitedNoticeNotify::set_has_captainusername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcBeInvitedNoticeNotify::clear_has_captainusername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcBeInvitedNoticeNotify::clear_captainusername() {
  captainusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_captainusername();
}
inline const ::std::string& TeamRpcBeInvitedNoticeNotify::captainusername() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInvitedNoticeNotify.CaptainUserName)
  return captainusername_.GetNoArena();
}
inline void TeamRpcBeInvitedNoticeNotify::set_captainusername(const ::std::string& value) {
  set_has_captainusername();
  captainusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TeamRpcBeInvitedNoticeNotify.CaptainUserName)
}
#if LANG_CXX11
inline void TeamRpcBeInvitedNoticeNotify::set_captainusername(::std::string&& value) {
  set_has_captainusername();
  captainusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TeamRpcBeInvitedNoticeNotify.CaptainUserName)
}
#endif
inline void TeamRpcBeInvitedNoticeNotify::set_captainusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_captainusername();
  captainusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TeamRpcBeInvitedNoticeNotify.CaptainUserName)
}
inline void TeamRpcBeInvitedNoticeNotify::set_captainusername(const char* value, size_t size) {
  set_has_captainusername();
  captainusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TeamRpcBeInvitedNoticeNotify.CaptainUserName)
}
inline ::std::string* TeamRpcBeInvitedNoticeNotify::mutable_captainusername() {
  set_has_captainusername();
  // @@protoc_insertion_point(field_mutable:TeamRpcBeInvitedNoticeNotify.CaptainUserName)
  return captainusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamRpcBeInvitedNoticeNotify::release_captainusername() {
  // @@protoc_insertion_point(field_release:TeamRpcBeInvitedNoticeNotify.CaptainUserName)
  clear_has_captainusername();
  return captainusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamRpcBeInvitedNoticeNotify::set_allocated_captainusername(::std::string* captainusername) {
  if (captainusername != NULL) {
    set_has_captainusername();
  } else {
    clear_has_captainusername();
  }
  captainusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), captainusername);
  // @@protoc_insertion_point(field_set_allocated:TeamRpcBeInvitedNoticeNotify.CaptainUserName)
}

// -------------------------------------------------------------------

// TeamRpcBeInviteHandleAsk

// optional sint32 TeamId = 2 [default = -1];
inline bool TeamRpcBeInviteHandleAsk::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcBeInviteHandleAsk::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcBeInviteHandleAsk::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcBeInviteHandleAsk::clear_teamid() {
  teamid_ = -1;
  clear_has_teamid();
}
inline ::google::protobuf::int32 TeamRpcBeInviteHandleAsk::teamid() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInviteHandleAsk.TeamId)
  return teamid_;
}
inline void TeamRpcBeInviteHandleAsk::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBeInviteHandleAsk.TeamId)
}

// optional sint64 UserId = 3 [default = -1];
inline bool TeamRpcBeInviteHandleAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcBeInviteHandleAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcBeInviteHandleAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcBeInviteHandleAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 TeamRpcBeInviteHandleAsk::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInviteHandleAsk.UserId)
  return userid_;
}
inline void TeamRpcBeInviteHandleAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBeInviteHandleAsk.UserId)
}

// optional sint32 Handle = 4 [default = -1];
inline bool TeamRpcBeInviteHandleAsk::has_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamRpcBeInviteHandleAsk::set_has_handle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamRpcBeInviteHandleAsk::clear_has_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamRpcBeInviteHandleAsk::clear_handle() {
  handle_ = -1;
  clear_has_handle();
}
inline ::google::protobuf::int32 TeamRpcBeInviteHandleAsk::handle() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInviteHandleAsk.Handle)
  return handle_;
}
inline void TeamRpcBeInviteHandleAsk::set_handle(::google::protobuf::int32 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBeInviteHandleAsk.Handle)
}

// -------------------------------------------------------------------

// TeamRpcBeInviteHandleReply

// optional sint32 Result = 1 [default = -9999];
inline bool TeamRpcBeInviteHandleReply::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamRpcBeInviteHandleReply::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamRpcBeInviteHandleReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamRpcBeInviteHandleReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 TeamRpcBeInviteHandleReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInviteHandleReply.Result)
  return result_;
}
inline void TeamRpcBeInviteHandleReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBeInviteHandleReply.Result)
}

// optional sint32 TeamId = 2 [default = -1];
inline bool TeamRpcBeInviteHandleReply::has_teamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamRpcBeInviteHandleReply::set_has_teamid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamRpcBeInviteHandleReply::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamRpcBeInviteHandleReply::clear_teamid() {
  teamid_ = -1;
  clear_has_teamid();
}
inline ::google::protobuf::int32 TeamRpcBeInviteHandleReply::teamid() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInviteHandleReply.TeamId)
  return teamid_;
}
inline void TeamRpcBeInviteHandleReply::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBeInviteHandleReply.TeamId)
}

// optional sint64 UserId = 3 [default = -1];
inline bool TeamRpcBeInviteHandleReply::has_userid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamRpcBeInviteHandleReply::set_has_userid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamRpcBeInviteHandleReply::clear_has_userid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamRpcBeInviteHandleReply::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 TeamRpcBeInviteHandleReply::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInviteHandleReply.UserId)
  return userid_;
}
inline void TeamRpcBeInviteHandleReply::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBeInviteHandleReply.UserId)
}

// optional sint32 Handle = 4 [default = -1];
inline bool TeamRpcBeInviteHandleReply::has_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcBeInviteHandleReply::set_has_handle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcBeInviteHandleReply::clear_has_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcBeInviteHandleReply::clear_handle() {
  handle_ = -1;
  clear_has_handle();
}
inline ::google::protobuf::int32 TeamRpcBeInviteHandleReply::handle() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInviteHandleReply.Handle)
  return handle_;
}
inline void TeamRpcBeInviteHandleReply::set_handle(::google::protobuf::int32 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBeInviteHandleReply.Handle)
}

// optional bool IsCapatain = 5 [default = false];
inline bool TeamRpcBeInviteHandleReply::has_iscapatain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcBeInviteHandleReply::set_has_iscapatain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcBeInviteHandleReply::clear_has_iscapatain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcBeInviteHandleReply::clear_iscapatain() {
  iscapatain_ = false;
  clear_has_iscapatain();
}
inline bool TeamRpcBeInviteHandleReply::iscapatain() const {
  // @@protoc_insertion_point(field_get:TeamRpcBeInviteHandleReply.IsCapatain)
  return iscapatain_;
}
inline void TeamRpcBeInviteHandleReply::set_iscapatain(bool value) {
  set_has_iscapatain();
  iscapatain_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBeInviteHandleReply.IsCapatain)
}

// -------------------------------------------------------------------

// TeamRpcNearbyTeamObj

// optional sint32 TeamId = 2 [default = -1];
inline bool TeamRpcNearbyTeamObj::has_teamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamRpcNearbyTeamObj::set_has_teamid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamRpcNearbyTeamObj::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamRpcNearbyTeamObj::clear_teamid() {
  teamid_ = -1;
  clear_has_teamid();
}
inline ::google::protobuf::int32 TeamRpcNearbyTeamObj::teamid() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamObj.TeamId)
  return teamid_;
}
inline void TeamRpcNearbyTeamObj::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamObj.TeamId)
}

// optional sint64 CaptainUserId = 3 [default = -1];
inline bool TeamRpcNearbyTeamObj::has_captainuserid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamRpcNearbyTeamObj::set_has_captainuserid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamRpcNearbyTeamObj::clear_has_captainuserid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamRpcNearbyTeamObj::clear_captainuserid() {
  captainuserid_ = GOOGLE_LONGLONG(-1);
  clear_has_captainuserid();
}
inline ::google::protobuf::int64 TeamRpcNearbyTeamObj::captainuserid() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamObj.CaptainUserId)
  return captainuserid_;
}
inline void TeamRpcNearbyTeamObj::set_captainuserid(::google::protobuf::int64 value) {
  set_has_captainuserid();
  captainuserid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamObj.CaptainUserId)
}

// optional string CaptainUserName = 4;
inline bool TeamRpcNearbyTeamObj::has_captainusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcNearbyTeamObj::set_has_captainusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcNearbyTeamObj::clear_has_captainusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcNearbyTeamObj::clear_captainusername() {
  captainusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_captainusername();
}
inline const ::std::string& TeamRpcNearbyTeamObj::captainusername() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamObj.CaptainUserName)
  return captainusername_.GetNoArena();
}
inline void TeamRpcNearbyTeamObj::set_captainusername(const ::std::string& value) {
  set_has_captainusername();
  captainusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamObj.CaptainUserName)
}
#if LANG_CXX11
inline void TeamRpcNearbyTeamObj::set_captainusername(::std::string&& value) {
  set_has_captainusername();
  captainusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TeamRpcNearbyTeamObj.CaptainUserName)
}
#endif
inline void TeamRpcNearbyTeamObj::set_captainusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_captainusername();
  captainusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TeamRpcNearbyTeamObj.CaptainUserName)
}
inline void TeamRpcNearbyTeamObj::set_captainusername(const char* value, size_t size) {
  set_has_captainusername();
  captainusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TeamRpcNearbyTeamObj.CaptainUserName)
}
inline ::std::string* TeamRpcNearbyTeamObj::mutable_captainusername() {
  set_has_captainusername();
  // @@protoc_insertion_point(field_mutable:TeamRpcNearbyTeamObj.CaptainUserName)
  return captainusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamRpcNearbyTeamObj::release_captainusername() {
  // @@protoc_insertion_point(field_release:TeamRpcNearbyTeamObj.CaptainUserName)
  clear_has_captainusername();
  return captainusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamRpcNearbyTeamObj::set_allocated_captainusername(::std::string* captainusername) {
  if (captainusername != NULL) {
    set_has_captainusername();
  } else {
    clear_has_captainusername();
  }
  captainusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), captainusername);
  // @@protoc_insertion_point(field_set_allocated:TeamRpcNearbyTeamObj.CaptainUserName)
}

// optional sint32 CaptainLevel = 6 [default = -1];
inline bool TeamRpcNearbyTeamObj::has_captainlevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamRpcNearbyTeamObj::set_has_captainlevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamRpcNearbyTeamObj::clear_has_captainlevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamRpcNearbyTeamObj::clear_captainlevel() {
  captainlevel_ = -1;
  clear_has_captainlevel();
}
inline ::google::protobuf::int32 TeamRpcNearbyTeamObj::captainlevel() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamObj.CaptainLevel)
  return captainlevel_;
}
inline void TeamRpcNearbyTeamObj::set_captainlevel(::google::protobuf::int32 value) {
  set_has_captainlevel();
  captainlevel_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamObj.CaptainLevel)
}

// optional sint32 MemberCount = 7 [default = -1];
inline bool TeamRpcNearbyTeamObj::has_membercount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TeamRpcNearbyTeamObj::set_has_membercount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TeamRpcNearbyTeamObj::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TeamRpcNearbyTeamObj::clear_membercount() {
  membercount_ = -1;
  clear_has_membercount();
}
inline ::google::protobuf::int32 TeamRpcNearbyTeamObj::membercount() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamObj.MemberCount)
  return membercount_;
}
inline void TeamRpcNearbyTeamObj::set_membercount(::google::protobuf::int32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamObj.MemberCount)
}

// optional sint32 CaptainProf = 8 [default = -1];
inline bool TeamRpcNearbyTeamObj::has_captainprof() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TeamRpcNearbyTeamObj::set_has_captainprof() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TeamRpcNearbyTeamObj::clear_has_captainprof() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TeamRpcNearbyTeamObj::clear_captainprof() {
  captainprof_ = -1;
  clear_has_captainprof();
}
inline ::google::protobuf::int32 TeamRpcNearbyTeamObj::captainprof() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamObj.CaptainProf)
  return captainprof_;
}
inline void TeamRpcNearbyTeamObj::set_captainprof(::google::protobuf::int32 value) {
  set_has_captainprof();
  captainprof_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamObj.CaptainProf)
}

// optional sint32 TeamTarget = 9 [default = -1];
inline bool TeamRpcNearbyTeamObj::has_teamtarget() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TeamRpcNearbyTeamObj::set_has_teamtarget() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TeamRpcNearbyTeamObj::clear_has_teamtarget() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TeamRpcNearbyTeamObj::clear_teamtarget() {
  teamtarget_ = -1;
  clear_has_teamtarget();
}
inline ::google::protobuf::int32 TeamRpcNearbyTeamObj::teamtarget() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamObj.TeamTarget)
  return teamtarget_;
}
inline void TeamRpcNearbyTeamObj::set_teamtarget(::google::protobuf::int32 value) {
  set_has_teamtarget();
  teamtarget_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamObj.TeamTarget)
}

// optional sint32 TargetMinLv = 10 [default = -1];
inline bool TeamRpcNearbyTeamObj::has_targetminlv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TeamRpcNearbyTeamObj::set_has_targetminlv() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TeamRpcNearbyTeamObj::clear_has_targetminlv() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TeamRpcNearbyTeamObj::clear_targetminlv() {
  targetminlv_ = -1;
  clear_has_targetminlv();
}
inline ::google::protobuf::int32 TeamRpcNearbyTeamObj::targetminlv() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamObj.TargetMinLv)
  return targetminlv_;
}
inline void TeamRpcNearbyTeamObj::set_targetminlv(::google::protobuf::int32 value) {
  set_has_targetminlv();
  targetminlv_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamObj.TargetMinLv)
}

// optional sint32 TargetMaxLv = 11 [default = -1];
inline bool TeamRpcNearbyTeamObj::has_targetmaxlv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcNearbyTeamObj::set_has_targetmaxlv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcNearbyTeamObj::clear_has_targetmaxlv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcNearbyTeamObj::clear_targetmaxlv() {
  targetmaxlv_ = -1;
  clear_has_targetmaxlv();
}
inline ::google::protobuf::int32 TeamRpcNearbyTeamObj::targetmaxlv() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamObj.TargetMaxLv)
  return targetmaxlv_;
}
inline void TeamRpcNearbyTeamObj::set_targetmaxlv(::google::protobuf::int32 value) {
  set_has_targetmaxlv();
  targetmaxlv_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamObj.TargetMaxLv)
}

// -------------------------------------------------------------------

// TeamRpcNearbyTeamAsk

// optional sint32 TargetId = 1 [default = -1];
inline bool TeamRpcNearbyTeamAsk::has_targetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcNearbyTeamAsk::set_has_targetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcNearbyTeamAsk::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcNearbyTeamAsk::clear_targetid() {
  targetid_ = -1;
  clear_has_targetid();
}
inline ::google::protobuf::int32 TeamRpcNearbyTeamAsk::targetid() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamAsk.TargetId)
  return targetid_;
}
inline void TeamRpcNearbyTeamAsk::set_targetid(::google::protobuf::int32 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamAsk.TargetId)
}

// -------------------------------------------------------------------

// TeamRpcNearbyTeamReply

// optional sint32 Result = 1 [default = -9999];
inline bool TeamRpcNearbyTeamReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcNearbyTeamReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcNearbyTeamReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcNearbyTeamReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 TeamRpcNearbyTeamReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamReply.Result)
  return result_;
}
inline void TeamRpcNearbyTeamReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyTeamReply.Result)
}

// repeated .TeamRpcNearbyTeamObj Teams = 2;
inline int TeamRpcNearbyTeamReply::teams_size() const {
  return teams_.size();
}
inline void TeamRpcNearbyTeamReply::clear_teams() {
  teams_.Clear();
}
inline const ::TeamRpcNearbyTeamObj& TeamRpcNearbyTeamReply::teams(int index) const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyTeamReply.Teams)
  return teams_.Get(index);
}
inline ::TeamRpcNearbyTeamObj* TeamRpcNearbyTeamReply::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:TeamRpcNearbyTeamReply.Teams)
  return teams_.Mutable(index);
}
inline ::TeamRpcNearbyTeamObj* TeamRpcNearbyTeamReply::add_teams() {
  // @@protoc_insertion_point(field_add:TeamRpcNearbyTeamReply.Teams)
  return teams_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::TeamRpcNearbyTeamObj >*
TeamRpcNearbyTeamReply::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:TeamRpcNearbyTeamReply.Teams)
  return &teams_;
}
inline const ::google::protobuf::RepeatedPtrField< ::TeamRpcNearbyTeamObj >&
TeamRpcNearbyTeamReply::teams() const {
  // @@protoc_insertion_point(field_list:TeamRpcNearbyTeamReply.Teams)
  return teams_;
}

// -------------------------------------------------------------------

// TeamRpcApplyNoticeCaptainNotify

// optional .TeamApplyUserObj ApplyUser = 5;
inline bool TeamRpcApplyNoticeCaptainNotify::has_applyuser() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcApplyNoticeCaptainNotify::set_has_applyuser() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcApplyNoticeCaptainNotify::clear_has_applyuser() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcApplyNoticeCaptainNotify::clear_applyuser() {
  if (applyuser_ != NULL) applyuser_->::TeamApplyUserObj::Clear();
  clear_has_applyuser();
}
inline const ::TeamApplyUserObj& TeamRpcApplyNoticeCaptainNotify::applyuser() const {
  const ::TeamApplyUserObj* p = applyuser_;
  // @@protoc_insertion_point(field_get:TeamRpcApplyNoticeCaptainNotify.ApplyUser)
  return p != NULL ? *p : *reinterpret_cast<const ::TeamApplyUserObj*>(
      &::_TeamApplyUserObj_default_instance_);
}
inline ::TeamApplyUserObj* TeamRpcApplyNoticeCaptainNotify::mutable_applyuser() {
  set_has_applyuser();
  if (applyuser_ == NULL) {
    applyuser_ = new ::TeamApplyUserObj;
  }
  // @@protoc_insertion_point(field_mutable:TeamRpcApplyNoticeCaptainNotify.ApplyUser)
  return applyuser_;
}
inline ::TeamApplyUserObj* TeamRpcApplyNoticeCaptainNotify::release_applyuser() {
  // @@protoc_insertion_point(field_release:TeamRpcApplyNoticeCaptainNotify.ApplyUser)
  clear_has_applyuser();
  ::TeamApplyUserObj* temp = applyuser_;
  applyuser_ = NULL;
  return temp;
}
inline void TeamRpcApplyNoticeCaptainNotify::set_allocated_applyuser(::TeamApplyUserObj* applyuser) {
  delete applyuser_;
  applyuser_ = applyuser;
  if (applyuser) {
    set_has_applyuser();
  } else {
    clear_has_applyuser();
  }
  // @@protoc_insertion_point(field_set_allocated:TeamRpcApplyNoticeCaptainNotify.ApplyUser)
}

// -------------------------------------------------------------------

// TeamRpcApplyHandleAgreeAsk

// optional sint64 UserId = 2 [default = -1];
inline bool TeamRpcApplyHandleAgreeAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcApplyHandleAgreeAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcApplyHandleAgreeAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcApplyHandleAgreeAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 TeamRpcApplyHandleAgreeAsk::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcApplyHandleAgreeAsk.UserId)
  return userid_;
}
inline void TeamRpcApplyHandleAgreeAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcApplyHandleAgreeAsk.UserId)
}

// optional sint32 TeamId = 3 [default = -1];
inline bool TeamRpcApplyHandleAgreeAsk::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcApplyHandleAgreeAsk::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcApplyHandleAgreeAsk::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcApplyHandleAgreeAsk::clear_teamid() {
  teamid_ = -1;
  clear_has_teamid();
}
inline ::google::protobuf::int32 TeamRpcApplyHandleAgreeAsk::teamid() const {
  // @@protoc_insertion_point(field_get:TeamRpcApplyHandleAgreeAsk.TeamId)
  return teamid_;
}
inline void TeamRpcApplyHandleAgreeAsk::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcApplyHandleAgreeAsk.TeamId)
}

// optional sint32 Handle = 4 [default = -1];
inline bool TeamRpcApplyHandleAgreeAsk::has_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamRpcApplyHandleAgreeAsk::set_has_handle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamRpcApplyHandleAgreeAsk::clear_has_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamRpcApplyHandleAgreeAsk::clear_handle() {
  handle_ = -1;
  clear_has_handle();
}
inline ::google::protobuf::int32 TeamRpcApplyHandleAgreeAsk::handle() const {
  // @@protoc_insertion_point(field_get:TeamRpcApplyHandleAgreeAsk.Handle)
  return handle_;
}
inline void TeamRpcApplyHandleAgreeAsk::set_handle(::google::protobuf::int32 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcApplyHandleAgreeAsk.Handle)
}

// -------------------------------------------------------------------

// TeamRpcApplyHandleAgreeReply

// optional sint32 Result = 1 [default = -9999];
inline bool TeamRpcApplyHandleAgreeReply::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamRpcApplyHandleAgreeReply::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamRpcApplyHandleAgreeReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamRpcApplyHandleAgreeReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 TeamRpcApplyHandleAgreeReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcApplyHandleAgreeReply.Result)
  return result_;
}
inline void TeamRpcApplyHandleAgreeReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcApplyHandleAgreeReply.Result)
}

// optional sint64 UserId = 2 [default = -1];
inline bool TeamRpcApplyHandleAgreeReply::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcApplyHandleAgreeReply::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcApplyHandleAgreeReply::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcApplyHandleAgreeReply::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 TeamRpcApplyHandleAgreeReply::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcApplyHandleAgreeReply.UserId)
  return userid_;
}
inline void TeamRpcApplyHandleAgreeReply::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcApplyHandleAgreeReply.UserId)
}

// optional sint32 TeamId = 3 [default = -1];
inline bool TeamRpcApplyHandleAgreeReply::has_teamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamRpcApplyHandleAgreeReply::set_has_teamid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamRpcApplyHandleAgreeReply::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamRpcApplyHandleAgreeReply::clear_teamid() {
  teamid_ = -1;
  clear_has_teamid();
}
inline ::google::protobuf::int32 TeamRpcApplyHandleAgreeReply::teamid() const {
  // @@protoc_insertion_point(field_get:TeamRpcApplyHandleAgreeReply.TeamId)
  return teamid_;
}
inline void TeamRpcApplyHandleAgreeReply::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcApplyHandleAgreeReply.TeamId)
}

// optional sint32 Handle = 4 [default = -1];
inline bool TeamRpcApplyHandleAgreeReply::has_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcApplyHandleAgreeReply::set_has_handle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcApplyHandleAgreeReply::clear_has_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcApplyHandleAgreeReply::clear_handle() {
  handle_ = -1;
  clear_has_handle();
}
inline ::google::protobuf::int32 TeamRpcApplyHandleAgreeReply::handle() const {
  // @@protoc_insertion_point(field_get:TeamRpcApplyHandleAgreeReply.Handle)
  return handle_;
}
inline void TeamRpcApplyHandleAgreeReply::set_handle(::google::protobuf::int32 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcApplyHandleAgreeReply.Handle)
}

// -------------------------------------------------------------------

// TeamRpcUpdateMyTeamNoticeNotify

// optional .TeamObj MyTeamData = 1;
inline bool TeamRpcUpdateMyTeamNoticeNotify::has_myteamdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcUpdateMyTeamNoticeNotify::set_has_myteamdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcUpdateMyTeamNoticeNotify::clear_has_myteamdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcUpdateMyTeamNoticeNotify::clear_myteamdata() {
  if (myteamdata_ != NULL) myteamdata_->::TeamObj::Clear();
  clear_has_myteamdata();
}
inline const ::TeamObj& TeamRpcUpdateMyTeamNoticeNotify::myteamdata() const {
  const ::TeamObj* p = myteamdata_;
  // @@protoc_insertion_point(field_get:TeamRpcUpdateMyTeamNoticeNotify.MyTeamData)
  return p != NULL ? *p : *reinterpret_cast<const ::TeamObj*>(
      &::_TeamObj_default_instance_);
}
inline ::TeamObj* TeamRpcUpdateMyTeamNoticeNotify::mutable_myteamdata() {
  set_has_myteamdata();
  if (myteamdata_ == NULL) {
    myteamdata_ = new ::TeamObj;
  }
  // @@protoc_insertion_point(field_mutable:TeamRpcUpdateMyTeamNoticeNotify.MyTeamData)
  return myteamdata_;
}
inline ::TeamObj* TeamRpcUpdateMyTeamNoticeNotify::release_myteamdata() {
  // @@protoc_insertion_point(field_release:TeamRpcUpdateMyTeamNoticeNotify.MyTeamData)
  clear_has_myteamdata();
  ::TeamObj* temp = myteamdata_;
  myteamdata_ = NULL;
  return temp;
}
inline void TeamRpcUpdateMyTeamNoticeNotify::set_allocated_myteamdata(::TeamObj* myteamdata) {
  delete myteamdata_;
  myteamdata_ = myteamdata;
  if (myteamdata) {
    set_has_myteamdata();
  } else {
    clear_has_myteamdata();
  }
  // @@protoc_insertion_point(field_set_allocated:TeamRpcUpdateMyTeamNoticeNotify.MyTeamData)
}

// -------------------------------------------------------------------

// TeamRpcQuitTeamNotify

// -------------------------------------------------------------------

// TeamRpcLeaveTeamNoticeNotify

// optional sint32 UserId = 2 [default = -1];
inline bool TeamRpcLeaveTeamNoticeNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcLeaveTeamNoticeNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcLeaveTeamNoticeNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcLeaveTeamNoticeNotify::clear_userid() {
  userid_ = -1;
  clear_has_userid();
}
inline ::google::protobuf::int32 TeamRpcLeaveTeamNoticeNotify::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcLeaveTeamNoticeNotify.UserId)
  return userid_;
}
inline void TeamRpcLeaveTeamNoticeNotify::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcLeaveTeamNoticeNotify.UserId)
}

// optional string UserName = 3;
inline bool TeamRpcLeaveTeamNoticeNotify::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcLeaveTeamNoticeNotify::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcLeaveTeamNoticeNotify::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcLeaveTeamNoticeNotify::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& TeamRpcLeaveTeamNoticeNotify::username() const {
  // @@protoc_insertion_point(field_get:TeamRpcLeaveTeamNoticeNotify.UserName)
  return username_.GetNoArena();
}
inline void TeamRpcLeaveTeamNoticeNotify::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TeamRpcLeaveTeamNoticeNotify.UserName)
}
#if LANG_CXX11
inline void TeamRpcLeaveTeamNoticeNotify::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TeamRpcLeaveTeamNoticeNotify.UserName)
}
#endif
inline void TeamRpcLeaveTeamNoticeNotify::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TeamRpcLeaveTeamNoticeNotify.UserName)
}
inline void TeamRpcLeaveTeamNoticeNotify::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TeamRpcLeaveTeamNoticeNotify.UserName)
}
inline ::std::string* TeamRpcLeaveTeamNoticeNotify::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:TeamRpcLeaveTeamNoticeNotify.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamRpcLeaveTeamNoticeNotify::release_username() {
  // @@protoc_insertion_point(field_release:TeamRpcLeaveTeamNoticeNotify.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamRpcLeaveTeamNoticeNotify::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:TeamRpcLeaveTeamNoticeNotify.UserName)
}

// -------------------------------------------------------------------

// TeamRpcBreakUpNoticeNotify

// optional sint64 UserId = 1 [default = -1];
inline bool TeamRpcBreakUpNoticeNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcBreakUpNoticeNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcBreakUpNoticeNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcBreakUpNoticeNotify::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 TeamRpcBreakUpNoticeNotify::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcBreakUpNoticeNotify.UserId)
  return userid_;
}
inline void TeamRpcBreakUpNoticeNotify::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBreakUpNoticeNotify.UserId)
}

// optional string UserName = 2;
inline bool TeamRpcBreakUpNoticeNotify::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcBreakUpNoticeNotify::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcBreakUpNoticeNotify::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcBreakUpNoticeNotify::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& TeamRpcBreakUpNoticeNotify::username() const {
  // @@protoc_insertion_point(field_get:TeamRpcBreakUpNoticeNotify.UserName)
  return username_.GetNoArena();
}
inline void TeamRpcBreakUpNoticeNotify::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TeamRpcBreakUpNoticeNotify.UserName)
}
#if LANG_CXX11
inline void TeamRpcBreakUpNoticeNotify::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TeamRpcBreakUpNoticeNotify.UserName)
}
#endif
inline void TeamRpcBreakUpNoticeNotify::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TeamRpcBreakUpNoticeNotify.UserName)
}
inline void TeamRpcBreakUpNoticeNotify::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TeamRpcBreakUpNoticeNotify.UserName)
}
inline ::std::string* TeamRpcBreakUpNoticeNotify::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:TeamRpcBreakUpNoticeNotify.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamRpcBreakUpNoticeNotify::release_username() {
  // @@protoc_insertion_point(field_release:TeamRpcBreakUpNoticeNotify.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamRpcBreakUpNoticeNotify::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:TeamRpcBreakUpNoticeNotify.UserName)
}

// -------------------------------------------------------------------

// TeamRpcReqMyTeamDataNotify

// -------------------------------------------------------------------

// TeamRpcDeleteFromApplyListNotify

// optional sint64 UserId = 2 [default = -1];
inline bool TeamRpcDeleteFromApplyListNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcDeleteFromApplyListNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcDeleteFromApplyListNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcDeleteFromApplyListNotify::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 TeamRpcDeleteFromApplyListNotify::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcDeleteFromApplyListNotify.UserId)
  return userid_;
}
inline void TeamRpcDeleteFromApplyListNotify::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcDeleteFromApplyListNotify.UserId)
}

// -------------------------------------------------------------------

// TeamRpcAppointCaptainAsk

// optional sint64 UserId = 1 [default = -1];
inline bool TeamRpcAppointCaptainAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcAppointCaptainAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcAppointCaptainAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcAppointCaptainAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 TeamRpcAppointCaptainAsk::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcAppointCaptainAsk.UserId)
  return userid_;
}
inline void TeamRpcAppointCaptainAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcAppointCaptainAsk.UserId)
}

// -------------------------------------------------------------------

// TeamRpcAppointCaptainReply

// optional sint32 Result = 1 [default = -9999];
inline bool TeamRpcAppointCaptainReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcAppointCaptainReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcAppointCaptainReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcAppointCaptainReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 TeamRpcAppointCaptainReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcAppointCaptainReply.Result)
  return result_;
}
inline void TeamRpcAppointCaptainReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcAppointCaptainReply.Result)
}

// optional sint64 UserId = 4 [default = -1];
inline bool TeamRpcAppointCaptainReply::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcAppointCaptainReply::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcAppointCaptainReply::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcAppointCaptainReply::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 TeamRpcAppointCaptainReply::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcAppointCaptainReply.UserId)
  return userid_;
}
inline void TeamRpcAppointCaptainReply::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcAppointCaptainReply.UserId)
}

// -------------------------------------------------------------------

// TeamRpcCaptainChangeNoticeNotify

// optional sint64 UserId = 1 [default = -1];
inline bool TeamRpcCaptainChangeNoticeNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcCaptainChangeNoticeNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcCaptainChangeNoticeNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcCaptainChangeNoticeNotify::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 TeamRpcCaptainChangeNoticeNotify::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcCaptainChangeNoticeNotify.UserId)
  return userid_;
}
inline void TeamRpcCaptainChangeNoticeNotify::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcCaptainChangeNoticeNotify.UserId)
}

// optional string UserName = 2;
inline bool TeamRpcCaptainChangeNoticeNotify::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcCaptainChangeNoticeNotify::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcCaptainChangeNoticeNotify::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcCaptainChangeNoticeNotify::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& TeamRpcCaptainChangeNoticeNotify::username() const {
  // @@protoc_insertion_point(field_get:TeamRpcCaptainChangeNoticeNotify.UserName)
  return username_.GetNoArena();
}
inline void TeamRpcCaptainChangeNoticeNotify::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TeamRpcCaptainChangeNoticeNotify.UserName)
}
#if LANG_CXX11
inline void TeamRpcCaptainChangeNoticeNotify::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TeamRpcCaptainChangeNoticeNotify.UserName)
}
#endif
inline void TeamRpcCaptainChangeNoticeNotify::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TeamRpcCaptainChangeNoticeNotify.UserName)
}
inline void TeamRpcCaptainChangeNoticeNotify::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TeamRpcCaptainChangeNoticeNotify.UserName)
}
inline ::std::string* TeamRpcCaptainChangeNoticeNotify::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:TeamRpcCaptainChangeNoticeNotify.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamRpcCaptainChangeNoticeNotify::release_username() {
  // @@protoc_insertion_point(field_release:TeamRpcCaptainChangeNoticeNotify.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamRpcCaptainChangeNoticeNotify::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:TeamRpcCaptainChangeNoticeNotify.UserName)
}

// -------------------------------------------------------------------

// TeamRpcTeamMemberHPChangeNoticeNotify

// optional sint64 UserId = 1 [default = -1];
inline bool TeamRpcTeamMemberHPChangeNoticeNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcTeamMemberHPChangeNoticeNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcTeamMemberHPChangeNoticeNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcTeamMemberHPChangeNoticeNotify::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 TeamRpcTeamMemberHPChangeNoticeNotify::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcTeamMemberHPChangeNoticeNotify.UserId)
  return userid_;
}
inline void TeamRpcTeamMemberHPChangeNoticeNotify::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcTeamMemberHPChangeNoticeNotify.UserId)
}

// optional sint32 HP = 2 [default = -1];
inline bool TeamRpcTeamMemberHPChangeNoticeNotify::has_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcTeamMemberHPChangeNoticeNotify::set_has_hp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcTeamMemberHPChangeNoticeNotify::clear_has_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcTeamMemberHPChangeNoticeNotify::clear_hp() {
  hp_ = -1;
  clear_has_hp();
}
inline ::google::protobuf::int32 TeamRpcTeamMemberHPChangeNoticeNotify::hp() const {
  // @@protoc_insertion_point(field_get:TeamRpcTeamMemberHPChangeNoticeNotify.HP)
  return hp_;
}
inline void TeamRpcTeamMemberHPChangeNoticeNotify::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcTeamMemberHPChangeNoticeNotify.HP)
}

// optional sint32 MaxHP = 3 [default = -1];
inline bool TeamRpcTeamMemberHPChangeNoticeNotify::has_maxhp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamRpcTeamMemberHPChangeNoticeNotify::set_has_maxhp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamRpcTeamMemberHPChangeNoticeNotify::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamRpcTeamMemberHPChangeNoticeNotify::clear_maxhp() {
  maxhp_ = -1;
  clear_has_maxhp();
}
inline ::google::protobuf::int32 TeamRpcTeamMemberHPChangeNoticeNotify::maxhp() const {
  // @@protoc_insertion_point(field_get:TeamRpcTeamMemberHPChangeNoticeNotify.MaxHP)
  return maxhp_;
}
inline void TeamRpcTeamMemberHPChangeNoticeNotify::set_maxhp(::google::protobuf::int32 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcTeamMemberHPChangeNoticeNotify.MaxHP)
}

// -------------------------------------------------------------------

// TeamRpcInviteHandleNoticeNotify

// optional sint32 Result = 2 [default = 0];
inline bool TeamRpcInviteHandleNoticeNotify::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcInviteHandleNoticeNotify::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcInviteHandleNoticeNotify::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcInviteHandleNoticeNotify::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 TeamRpcInviteHandleNoticeNotify::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcInviteHandleNoticeNotify.Result)
  return result_;
}
inline void TeamRpcInviteHandleNoticeNotify::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcInviteHandleNoticeNotify.Result)
}

// -------------------------------------------------------------------

// TeamRpcNearbyRoleObj

// optional sint64 UserId = 2 [default = -1];
inline bool TeamRpcNearbyRoleObj::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcNearbyRoleObj::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcNearbyRoleObj::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcNearbyRoleObj::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 TeamRpcNearbyRoleObj::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyRoleObj.UserId)
  return userid_;
}
inline void TeamRpcNearbyRoleObj::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyRoleObj.UserId)
}

// optional string UserName = 3;
inline bool TeamRpcNearbyRoleObj::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcNearbyRoleObj::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcNearbyRoleObj::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcNearbyRoleObj::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& TeamRpcNearbyRoleObj::username() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyRoleObj.UserName)
  return username_.GetNoArena();
}
inline void TeamRpcNearbyRoleObj::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TeamRpcNearbyRoleObj.UserName)
}
#if LANG_CXX11
inline void TeamRpcNearbyRoleObj::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TeamRpcNearbyRoleObj.UserName)
}
#endif
inline void TeamRpcNearbyRoleObj::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TeamRpcNearbyRoleObj.UserName)
}
inline void TeamRpcNearbyRoleObj::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TeamRpcNearbyRoleObj.UserName)
}
inline ::std::string* TeamRpcNearbyRoleObj::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:TeamRpcNearbyRoleObj.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamRpcNearbyRoleObj::release_username() {
  // @@protoc_insertion_point(field_release:TeamRpcNearbyRoleObj.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamRpcNearbyRoleObj::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:TeamRpcNearbyRoleObj.UserName)
}

// optional sint32 Level = 4 [default = -1];
inline bool TeamRpcNearbyRoleObj::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamRpcNearbyRoleObj::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamRpcNearbyRoleObj::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamRpcNearbyRoleObj::clear_level() {
  level_ = -1;
  clear_has_level();
}
inline ::google::protobuf::int32 TeamRpcNearbyRoleObj::level() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyRoleObj.Level)
  return level_;
}
inline void TeamRpcNearbyRoleObj::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyRoleObj.Level)
}

// optional sint32 Prof = 5 [default = -1];
inline bool TeamRpcNearbyRoleObj::has_prof() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamRpcNearbyRoleObj::set_has_prof() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamRpcNearbyRoleObj::clear_has_prof() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamRpcNearbyRoleObj::clear_prof() {
  prof_ = -1;
  clear_has_prof();
}
inline ::google::protobuf::int32 TeamRpcNearbyRoleObj::prof() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyRoleObj.Prof)
  return prof_;
}
inline void TeamRpcNearbyRoleObj::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyRoleObj.Prof)
}

// -------------------------------------------------------------------

// TeamRpcNearbyRoleListAsk

// -------------------------------------------------------------------

// TeamRpcNearbyRoleListReply

// optional sint32 Result = 1 [default = -9999];
inline bool TeamRpcNearbyRoleListReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcNearbyRoleListReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcNearbyRoleListReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcNearbyRoleListReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 TeamRpcNearbyRoleListReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyRoleListReply.Result)
  return result_;
}
inline void TeamRpcNearbyRoleListReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNearbyRoleListReply.Result)
}

// repeated .TeamRpcNearbyRoleObj NearbyRoleList = 2;
inline int TeamRpcNearbyRoleListReply::nearbyrolelist_size() const {
  return nearbyrolelist_.size();
}
inline void TeamRpcNearbyRoleListReply::clear_nearbyrolelist() {
  nearbyrolelist_.Clear();
}
inline const ::TeamRpcNearbyRoleObj& TeamRpcNearbyRoleListReply::nearbyrolelist(int index) const {
  // @@protoc_insertion_point(field_get:TeamRpcNearbyRoleListReply.NearbyRoleList)
  return nearbyrolelist_.Get(index);
}
inline ::TeamRpcNearbyRoleObj* TeamRpcNearbyRoleListReply::mutable_nearbyrolelist(int index) {
  // @@protoc_insertion_point(field_mutable:TeamRpcNearbyRoleListReply.NearbyRoleList)
  return nearbyrolelist_.Mutable(index);
}
inline ::TeamRpcNearbyRoleObj* TeamRpcNearbyRoleListReply::add_nearbyrolelist() {
  // @@protoc_insertion_point(field_add:TeamRpcNearbyRoleListReply.NearbyRoleList)
  return nearbyrolelist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::TeamRpcNearbyRoleObj >*
TeamRpcNearbyRoleListReply::mutable_nearbyrolelist() {
  // @@protoc_insertion_point(field_mutable_list:TeamRpcNearbyRoleListReply.NearbyRoleList)
  return &nearbyrolelist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::TeamRpcNearbyRoleObj >&
TeamRpcNearbyRoleListReply::nearbyrolelist() const {
  // @@protoc_insertion_point(field_list:TeamRpcNearbyRoleListReply.NearbyRoleList)
  return nearbyrolelist_;
}

// -------------------------------------------------------------------

// TeamRpcKickRoleAsk

// optional sint64 UserId = 1 [default = -1];
inline bool TeamRpcKickRoleAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcKickRoleAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcKickRoleAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcKickRoleAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 TeamRpcKickRoleAsk::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcKickRoleAsk.UserId)
  return userid_;
}
inline void TeamRpcKickRoleAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcKickRoleAsk.UserId)
}

// -------------------------------------------------------------------

// TeamRpcKickRoleReply

// optional sint32 Result = 1 [default = -9999];
inline bool TeamRpcKickRoleReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcKickRoleReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcKickRoleReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcKickRoleReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 TeamRpcKickRoleReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcKickRoleReply.Result)
  return result_;
}
inline void TeamRpcKickRoleReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcKickRoleReply.Result)
}

// -------------------------------------------------------------------

// TeamRpcBeingKickedNoticeNotify

// -------------------------------------------------------------------

// TeamRpcBreakUpAsk

// -------------------------------------------------------------------

// TeamRpcBreakUpReply

// optional sint32 Result = 1 [default = -9999];
inline bool TeamRpcBreakUpReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcBreakUpReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcBreakUpReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcBreakUpReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 TeamRpcBreakUpReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcBreakUpReply.Result)
  return result_;
}
inline void TeamRpcBreakUpReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcBreakUpReply.Result)
}

// -------------------------------------------------------------------

// TeamRpcAddNewMemberNoticeNotify

// optional sint64 UserId = 1 [default = -1];
inline bool TeamRpcAddNewMemberNoticeNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcAddNewMemberNoticeNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcAddNewMemberNoticeNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcAddNewMemberNoticeNotify::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
inline ::google::protobuf::int64 TeamRpcAddNewMemberNoticeNotify::userid() const {
  // @@protoc_insertion_point(field_get:TeamRpcAddNewMemberNoticeNotify.UserId)
  return userid_;
}
inline void TeamRpcAddNewMemberNoticeNotify::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcAddNewMemberNoticeNotify.UserId)
}

// optional string UserName = 2;
inline bool TeamRpcAddNewMemberNoticeNotify::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcAddNewMemberNoticeNotify::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcAddNewMemberNoticeNotify::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcAddNewMemberNoticeNotify::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& TeamRpcAddNewMemberNoticeNotify::username() const {
  // @@protoc_insertion_point(field_get:TeamRpcAddNewMemberNoticeNotify.UserName)
  return username_.GetNoArena();
}
inline void TeamRpcAddNewMemberNoticeNotify::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TeamRpcAddNewMemberNoticeNotify.UserName)
}
#if LANG_CXX11
inline void TeamRpcAddNewMemberNoticeNotify::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TeamRpcAddNewMemberNoticeNotify.UserName)
}
#endif
inline void TeamRpcAddNewMemberNoticeNotify::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TeamRpcAddNewMemberNoticeNotify.UserName)
}
inline void TeamRpcAddNewMemberNoticeNotify::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TeamRpcAddNewMemberNoticeNotify.UserName)
}
inline ::std::string* TeamRpcAddNewMemberNoticeNotify::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:TeamRpcAddNewMemberNoticeNotify.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamRpcAddNewMemberNoticeNotify::release_username() {
  // @@protoc_insertion_point(field_release:TeamRpcAddNewMemberNoticeNotify.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamRpcAddNewMemberNoticeNotify::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:TeamRpcAddNewMemberNoticeNotify.UserName)
}

// -------------------------------------------------------------------

// TeamRpcCaptainAutoMatchAsk

// optional sint32 Oper = 1 [default = -1];
inline bool TeamRpcCaptainAutoMatchAsk::has_oper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcCaptainAutoMatchAsk::set_has_oper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcCaptainAutoMatchAsk::clear_has_oper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcCaptainAutoMatchAsk::clear_oper() {
  oper_ = -1;
  clear_has_oper();
}
inline ::google::protobuf::int32 TeamRpcCaptainAutoMatchAsk::oper() const {
  // @@protoc_insertion_point(field_get:TeamRpcCaptainAutoMatchAsk.Oper)
  return oper_;
}
inline void TeamRpcCaptainAutoMatchAsk::set_oper(::google::protobuf::int32 value) {
  set_has_oper();
  oper_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcCaptainAutoMatchAsk.Oper)
}

// -------------------------------------------------------------------

// TeamRpcCaptainAutoMatchReply

// optional sint32 Result = 1 [default = -9999];
inline bool TeamRpcCaptainAutoMatchReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcCaptainAutoMatchReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcCaptainAutoMatchReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcCaptainAutoMatchReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 TeamRpcCaptainAutoMatchReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcCaptainAutoMatchReply.Result)
  return result_;
}
inline void TeamRpcCaptainAutoMatchReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcCaptainAutoMatchReply.Result)
}

// -------------------------------------------------------------------

// TeamRpcNormalAutoMatchAsk

// optional sint32 Oper = 1 [default = -1];
inline bool TeamRpcNormalAutoMatchAsk::has_oper() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcNormalAutoMatchAsk::set_has_oper() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcNormalAutoMatchAsk::clear_has_oper() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcNormalAutoMatchAsk::clear_oper() {
  oper_ = -1;
  clear_has_oper();
}
inline ::google::protobuf::int32 TeamRpcNormalAutoMatchAsk::oper() const {
  // @@protoc_insertion_point(field_get:TeamRpcNormalAutoMatchAsk.Oper)
  return oper_;
}
inline void TeamRpcNormalAutoMatchAsk::set_oper(::google::protobuf::int32 value) {
  set_has_oper();
  oper_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNormalAutoMatchAsk.Oper)
}

// optional sint32 Target = 2 [default = -1];
inline bool TeamRpcNormalAutoMatchAsk::has_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamRpcNormalAutoMatchAsk::set_has_target() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamRpcNormalAutoMatchAsk::clear_has_target() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamRpcNormalAutoMatchAsk::clear_target() {
  target_ = -1;
  clear_has_target();
}
inline ::google::protobuf::int32 TeamRpcNormalAutoMatchAsk::target() const {
  // @@protoc_insertion_point(field_get:TeamRpcNormalAutoMatchAsk.Target)
  return target_;
}
inline void TeamRpcNormalAutoMatchAsk::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNormalAutoMatchAsk.Target)
}

// -------------------------------------------------------------------

// TeamRpcNormalAutoMatchReply

// optional sint32 Result = 1 [default = -9999];
inline bool TeamRpcNormalAutoMatchReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcNormalAutoMatchReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcNormalAutoMatchReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcNormalAutoMatchReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 TeamRpcNormalAutoMatchReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcNormalAutoMatchReply.Result)
  return result_;
}
inline void TeamRpcNormalAutoMatchReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcNormalAutoMatchReply.Result)
}

// -------------------------------------------------------------------

// TeamRpcFollowAsk

// -------------------------------------------------------------------

// TeamRpcFollowReply

// optional sint32 Result = 1 [default = -9999];
inline bool TeamRpcFollowReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcFollowReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcFollowReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcFollowReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 TeamRpcFollowReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcFollowReply.Result)
  return result_;
}
inline void TeamRpcFollowReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcFollowReply.Result)
}

// -------------------------------------------------------------------

// TeamRpcClearApplyListAsk

// -------------------------------------------------------------------

// TeamRpcClearApplyListReply

// optional sint32 Result = 1 [default = -9999];
inline bool TeamRpcClearApplyListReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRpcClearApplyListReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRpcClearApplyListReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRpcClearApplyListReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
inline ::google::protobuf::int32 TeamRpcClearApplyListReply::result() const {
  // @@protoc_insertion_point(field_get:TeamRpcClearApplyListReply.Result)
  return result_;
}
inline void TeamRpcClearApplyListReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TeamRpcClearApplyListReply.Result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TeamRpc_2eproto__INCLUDED
