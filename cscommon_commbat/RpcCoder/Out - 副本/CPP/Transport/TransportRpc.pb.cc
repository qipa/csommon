// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TransportRpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TransportRpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class TransportRpcSyncDataAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransportRpcSyncDataAsk>
     _instance;
} _TransportRpcSyncDataAsk_default_instance_;
class TransportRpcSyncDataReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransportRpcSyncDataReply>
     _instance;
} _TransportRpcSyncDataReply_default_instance_;
class TransportRpcFillAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransportRpcFillAsk>
     _instance;
} _TransportRpcFillAsk_default_instance_;
class TransportRpcFillReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransportRpcFillReply>
     _instance;
} _TransportRpcFillReply_default_instance_;
class TransportRpcHelpOtherAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransportRpcHelpOtherAsk>
     _instance;
} _TransportRpcHelpOtherAsk_default_instance_;
class TransportRpcHelpOtherReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransportRpcHelpOtherReply>
     _instance;
} _TransportRpcHelpOtherReply_default_instance_;
class TransportRpcAskHelpAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransportRpcAskHelpAsk>
     _instance;
} _TransportRpcAskHelpAsk_default_instance_;
class TransportRpcAskHelpReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransportRpcAskHelpReply>
     _instance;
} _TransportRpcAskHelpReply_default_instance_;
class TransportRpcSetSailAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransportRpcSetSailAsk>
     _instance;
} _TransportRpcSetSailAsk_default_instance_;
class TransportRpcSetSailReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransportRpcSetSailReply>
     _instance;
} _TransportRpcSetSailReply_default_instance_;
class TransportRpcAddTransportAskDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransportRpcAddTransportAsk>
     _instance;
} _TransportRpcAddTransportAsk_default_instance_;
class TransportRpcAddTransportReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransportRpcAddTransportReply>
     _instance;
} _TransportRpcAddTransportReply_default_instance_;
class TransportRpcIsHelpedNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransportRpcIsHelpedNotify>
     _instance;
} _TransportRpcIsHelpedNotify_default_instance_;

namespace protobuf_TransportRpc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[13];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcSyncDataAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcSyncDataAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcSyncDataReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcSyncDataReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcSyncDataReply, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcFillAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcFillAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcFillAsk, fillid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcFillReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcFillReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcFillReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcFillReply, fillid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcHelpOtherAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcHelpOtherAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcHelpOtherAsk, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcHelpOtherAsk, userid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcHelpOtherReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcHelpOtherReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcHelpOtherReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcHelpOtherReply, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcHelpOtherReply, userid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcAskHelpAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcAskHelpAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcAskHelpAsk, itemid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcAskHelpReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcAskHelpReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcAskHelpReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcAskHelpReply, itemid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcSetSailAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcSetSailAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcSetSailReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcSetSailReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcSetSailReply, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcAddTransportAsk, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcAddTransportAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcAddTransportAsk, lv_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcAddTransportReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcAddTransportReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcAddTransportReply, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcAddTransportReply, lv_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcIsHelpedNotify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcIsHelpedNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRpcIsHelpedNotify, templateid_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(TransportRpcSyncDataAsk)},
  { 5, 11, sizeof(TransportRpcSyncDataReply)},
  { 12, 18, sizeof(TransportRpcFillAsk)},
  { 19, 26, sizeof(TransportRpcFillReply)},
  { 28, 35, sizeof(TransportRpcHelpOtherAsk)},
  { 37, 45, sizeof(TransportRpcHelpOtherReply)},
  { 48, 54, sizeof(TransportRpcAskHelpAsk)},
  { 55, 62, sizeof(TransportRpcAskHelpReply)},
  { 64, 69, sizeof(TransportRpcSetSailAsk)},
  { 69, 75, sizeof(TransportRpcSetSailReply)},
  { 76, 82, sizeof(TransportRpcAddTransportAsk)},
  { 83, 90, sizeof(TransportRpcAddTransportReply)},
  { 92, 98, sizeof(TransportRpcIsHelpedNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransportRpcSyncDataAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransportRpcSyncDataReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransportRpcFillAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransportRpcFillReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransportRpcHelpOtherAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransportRpcHelpOtherReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransportRpcAskHelpAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransportRpcAskHelpReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransportRpcSetSailAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransportRpcSetSailReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransportRpcAddTransportAsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransportRpcAddTransportReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransportRpcIsHelpedNotify_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "TransportRpc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_PublicStruct_2eproto::InitDefaults();
  _TransportRpcSyncDataAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransportRpcSyncDataAsk_default_instance_);_TransportRpcSyncDataReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransportRpcSyncDataReply_default_instance_);_TransportRpcFillAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransportRpcFillAsk_default_instance_);_TransportRpcFillReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransportRpcFillReply_default_instance_);_TransportRpcHelpOtherAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransportRpcHelpOtherAsk_default_instance_);_TransportRpcHelpOtherReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransportRpcHelpOtherReply_default_instance_);_TransportRpcAskHelpAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransportRpcAskHelpAsk_default_instance_);_TransportRpcAskHelpReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransportRpcAskHelpReply_default_instance_);_TransportRpcSetSailAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransportRpcSetSailAsk_default_instance_);_TransportRpcSetSailReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransportRpcSetSailReply_default_instance_);_TransportRpcAddTransportAsk_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransportRpcAddTransportAsk_default_instance_);_TransportRpcAddTransportReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransportRpcAddTransportReply_default_instance_);_TransportRpcIsHelpedNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransportRpcIsHelpedNotify_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022TransportRpc.proto\032\022PublicStruct.proto"
      "\"\031\n\027TransportRpcSyncDataAsk\"2\n\031Transport"
      "RpcSyncDataReply\022\025\n\006Result\030\001 \001(\021:\005-9999\""
      ")\n\023TransportRpcFillAsk\022\022\n\006FillID\030\001 \001(\021:\002"
      "-1\"B\n\025TransportRpcFillReply\022\025\n\006Result\030\001 "
      "\001(\021:\005-9999\022\022\n\006FillID\030\002 \001(\021:\002-1\"B\n\030Transp"
      "ortRpcHelpOtherAsk\022\022\n\006ItemID\030\001 \001(\021:\002-1\022\022"
      "\n\006UserId\030\003 \001(\022:\002-1\"[\n\032TransportRpcHelpOt"
      "herReply\022\025\n\006Result\030\001 \001(\021:\005-9999\022\022\n\006ItemI"
      "D\030\002 \001(\021:\002-1\022\022\n\006UserId\030\004 \001(\022:\002-1\",\n\026Trans"
      "portRpcAskHelpAsk\022\022\n\006ItemID\030\001 \001(\021:\002-1\"E\n"
      "\030TransportRpcAskHelpReply\022\025\n\006Result\030\001 \001("
      "\021:\005-9999\022\022\n\006ItemID\030\003 \001(\021:\002-1\"\030\n\026Transpor"
      "tRpcSetSailAsk\"1\n\030TransportRpcSetSailRep"
      "ly\022\025\n\006Result\030\001 \001(\021:\005-9999\"-\n\033TransportRp"
      "cAddTransportAsk\022\016\n\002Lv\030\001 \001(\021:\002-1\"F\n\035Tran"
      "sportRpcAddTransportReply\022\025\n\006Result\030\001 \001("
      "\021:\005-9999\022\016\n\002Lv\030\002 \001(\021:\002-1\"4\n\032TransportRpc"
      "IsHelpedNotify\022\026\n\nTemplateId\030\001 \001(\021:\002-1"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 758);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TransportRpc.proto", &protobuf_RegisterTypes);
  ::protobuf_PublicStruct_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_TransportRpc_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransportRpcSyncDataAsk::TransportRpcSyncDataAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TransportRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransportRpcSyncDataAsk)
}
TransportRpcSyncDataAsk::TransportRpcSyncDataAsk(const TransportRpcSyncDataAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TransportRpcSyncDataAsk)
}

void TransportRpcSyncDataAsk::SharedCtor() {
  _cached_size_ = 0;
}

TransportRpcSyncDataAsk::~TransportRpcSyncDataAsk() {
  // @@protoc_insertion_point(destructor:TransportRpcSyncDataAsk)
  SharedDtor();
}

void TransportRpcSyncDataAsk::SharedDtor() {
}

void TransportRpcSyncDataAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportRpcSyncDataAsk::descriptor() {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransportRpcSyncDataAsk& TransportRpcSyncDataAsk::default_instance() {
  protobuf_TransportRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransportRpcSyncDataAsk* TransportRpcSyncDataAsk::New(::google::protobuf::Arena* arena) const {
  TransportRpcSyncDataAsk* n = new TransportRpcSyncDataAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransportRpcSyncDataAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TransportRpcSyncDataAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransportRpcSyncDataAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransportRpcSyncDataAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TransportRpcSyncDataAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransportRpcSyncDataAsk)
  return false;
#undef DO_
}

void TransportRpcSyncDataAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransportRpcSyncDataAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransportRpcSyncDataAsk)
}

::google::protobuf::uint8* TransportRpcSyncDataAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TransportRpcSyncDataAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransportRpcSyncDataAsk)
  return target;
}

size_t TransportRpcSyncDataAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransportRpcSyncDataAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportRpcSyncDataAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransportRpcSyncDataAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportRpcSyncDataAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransportRpcSyncDataAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransportRpcSyncDataAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransportRpcSyncDataAsk)
    MergeFrom(*source);
  }
}

void TransportRpcSyncDataAsk::MergeFrom(const TransportRpcSyncDataAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransportRpcSyncDataAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TransportRpcSyncDataAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransportRpcSyncDataAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRpcSyncDataAsk::CopyFrom(const TransportRpcSyncDataAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransportRpcSyncDataAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRpcSyncDataAsk::IsInitialized() const {
  return true;
}

void TransportRpcSyncDataAsk::Swap(TransportRpcSyncDataAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransportRpcSyncDataAsk::InternalSwap(TransportRpcSyncDataAsk* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransportRpcSyncDataAsk::GetMetadata() const {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransportRpcSyncDataAsk

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransportRpcSyncDataReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransportRpcSyncDataReply::TransportRpcSyncDataReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TransportRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransportRpcSyncDataReply)
}
TransportRpcSyncDataReply::TransportRpcSyncDataReply(const TransportRpcSyncDataReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:TransportRpcSyncDataReply)
}

void TransportRpcSyncDataReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

TransportRpcSyncDataReply::~TransportRpcSyncDataReply() {
  // @@protoc_insertion_point(destructor:TransportRpcSyncDataReply)
  SharedDtor();
}

void TransportRpcSyncDataReply::SharedDtor() {
}

void TransportRpcSyncDataReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportRpcSyncDataReply::descriptor() {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransportRpcSyncDataReply& TransportRpcSyncDataReply::default_instance() {
  protobuf_TransportRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransportRpcSyncDataReply* TransportRpcSyncDataReply::New(::google::protobuf::Arena* arena) const {
  TransportRpcSyncDataReply* n = new TransportRpcSyncDataReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransportRpcSyncDataReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TransportRpcSyncDataReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransportRpcSyncDataReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransportRpcSyncDataReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransportRpcSyncDataReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransportRpcSyncDataReply)
  return false;
#undef DO_
}

void TransportRpcSyncDataReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransportRpcSyncDataReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransportRpcSyncDataReply)
}

::google::protobuf::uint8* TransportRpcSyncDataReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TransportRpcSyncDataReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransportRpcSyncDataReply)
  return target;
}

size_t TransportRpcSyncDataReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransportRpcSyncDataReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportRpcSyncDataReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransportRpcSyncDataReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportRpcSyncDataReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransportRpcSyncDataReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransportRpcSyncDataReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransportRpcSyncDataReply)
    MergeFrom(*source);
  }
}

void TransportRpcSyncDataReply::MergeFrom(const TransportRpcSyncDataReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransportRpcSyncDataReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void TransportRpcSyncDataReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransportRpcSyncDataReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRpcSyncDataReply::CopyFrom(const TransportRpcSyncDataReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransportRpcSyncDataReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRpcSyncDataReply::IsInitialized() const {
  return true;
}

void TransportRpcSyncDataReply::Swap(TransportRpcSyncDataReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransportRpcSyncDataReply::InternalSwap(TransportRpcSyncDataReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransportRpcSyncDataReply::GetMetadata() const {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransportRpcSyncDataReply

// optional sint32 Result = 1 [default = -9999];
bool TransportRpcSyncDataReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransportRpcSyncDataReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TransportRpcSyncDataReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransportRpcSyncDataReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TransportRpcSyncDataReply::result() const {
  // @@protoc_insertion_point(field_get:TransportRpcSyncDataReply.Result)
  return result_;
}
void TransportRpcSyncDataReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TransportRpcSyncDataReply.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransportRpcFillAsk::kFillIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransportRpcFillAsk::TransportRpcFillAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TransportRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransportRpcFillAsk)
}
TransportRpcFillAsk::TransportRpcFillAsk(const TransportRpcFillAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fillid_ = from.fillid_;
  // @@protoc_insertion_point(copy_constructor:TransportRpcFillAsk)
}

void TransportRpcFillAsk::SharedCtor() {
  _cached_size_ = 0;
  fillid_ = -1;
}

TransportRpcFillAsk::~TransportRpcFillAsk() {
  // @@protoc_insertion_point(destructor:TransportRpcFillAsk)
  SharedDtor();
}

void TransportRpcFillAsk::SharedDtor() {
}

void TransportRpcFillAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportRpcFillAsk::descriptor() {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransportRpcFillAsk& TransportRpcFillAsk::default_instance() {
  protobuf_TransportRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransportRpcFillAsk* TransportRpcFillAsk::New(::google::protobuf::Arena* arena) const {
  TransportRpcFillAsk* n = new TransportRpcFillAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransportRpcFillAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TransportRpcFillAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fillid_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransportRpcFillAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransportRpcFillAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 FillID = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_fillid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &fillid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransportRpcFillAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransportRpcFillAsk)
  return false;
#undef DO_
}

void TransportRpcFillAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransportRpcFillAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 FillID = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->fillid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransportRpcFillAsk)
}

::google::protobuf::uint8* TransportRpcFillAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TransportRpcFillAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 FillID = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->fillid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransportRpcFillAsk)
  return target;
}

size_t TransportRpcFillAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransportRpcFillAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 FillID = 1 [default = -1];
  if (has_fillid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->fillid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportRpcFillAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransportRpcFillAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportRpcFillAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransportRpcFillAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransportRpcFillAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransportRpcFillAsk)
    MergeFrom(*source);
  }
}

void TransportRpcFillAsk::MergeFrom(const TransportRpcFillAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransportRpcFillAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fillid()) {
    set_fillid(from.fillid());
  }
}

void TransportRpcFillAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransportRpcFillAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRpcFillAsk::CopyFrom(const TransportRpcFillAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransportRpcFillAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRpcFillAsk::IsInitialized() const {
  return true;
}

void TransportRpcFillAsk::Swap(TransportRpcFillAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransportRpcFillAsk::InternalSwap(TransportRpcFillAsk* other) {
  using std::swap;
  swap(fillid_, other->fillid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransportRpcFillAsk::GetMetadata() const {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransportRpcFillAsk

// optional sint32 FillID = 1 [default = -1];
bool TransportRpcFillAsk::has_fillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransportRpcFillAsk::set_has_fillid() {
  _has_bits_[0] |= 0x00000001u;
}
void TransportRpcFillAsk::clear_has_fillid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransportRpcFillAsk::clear_fillid() {
  fillid_ = -1;
  clear_has_fillid();
}
::google::protobuf::int32 TransportRpcFillAsk::fillid() const {
  // @@protoc_insertion_point(field_get:TransportRpcFillAsk.FillID)
  return fillid_;
}
void TransportRpcFillAsk::set_fillid(::google::protobuf::int32 value) {
  set_has_fillid();
  fillid_ = value;
  // @@protoc_insertion_point(field_set:TransportRpcFillAsk.FillID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransportRpcFillReply::kResultFieldNumber;
const int TransportRpcFillReply::kFillIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransportRpcFillReply::TransportRpcFillReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TransportRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransportRpcFillReply)
}
TransportRpcFillReply::TransportRpcFillReply(const TransportRpcFillReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&fillid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(fillid_));
  // @@protoc_insertion_point(copy_constructor:TransportRpcFillReply)
}

void TransportRpcFillReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  fillid_ = -1;
}

TransportRpcFillReply::~TransportRpcFillReply() {
  // @@protoc_insertion_point(destructor:TransportRpcFillReply)
  SharedDtor();
}

void TransportRpcFillReply::SharedDtor() {
}

void TransportRpcFillReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportRpcFillReply::descriptor() {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransportRpcFillReply& TransportRpcFillReply::default_instance() {
  protobuf_TransportRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransportRpcFillReply* TransportRpcFillReply::New(::google::protobuf::Arena* arena) const {
  TransportRpcFillReply* n = new TransportRpcFillReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransportRpcFillReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TransportRpcFillReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    result_ = -9999;
    fillid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransportRpcFillReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransportRpcFillReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 FillID = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_fillid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &fillid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransportRpcFillReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransportRpcFillReply)
  return false;
#undef DO_
}

void TransportRpcFillReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransportRpcFillReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 FillID = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->fillid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransportRpcFillReply)
}

::google::protobuf::uint8* TransportRpcFillReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TransportRpcFillReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 FillID = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->fillid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransportRpcFillReply)
  return target;
}

size_t TransportRpcFillReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransportRpcFillReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 FillID = 2 [default = -1];
    if (has_fillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->fillid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportRpcFillReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransportRpcFillReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportRpcFillReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransportRpcFillReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransportRpcFillReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransportRpcFillReply)
    MergeFrom(*source);
  }
}

void TransportRpcFillReply::MergeFrom(const TransportRpcFillReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransportRpcFillReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      fillid_ = from.fillid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransportRpcFillReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransportRpcFillReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRpcFillReply::CopyFrom(const TransportRpcFillReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransportRpcFillReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRpcFillReply::IsInitialized() const {
  return true;
}

void TransportRpcFillReply::Swap(TransportRpcFillReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransportRpcFillReply::InternalSwap(TransportRpcFillReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(fillid_, other->fillid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransportRpcFillReply::GetMetadata() const {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransportRpcFillReply

// optional sint32 Result = 1 [default = -9999];
bool TransportRpcFillReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransportRpcFillReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TransportRpcFillReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransportRpcFillReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TransportRpcFillReply::result() const {
  // @@protoc_insertion_point(field_get:TransportRpcFillReply.Result)
  return result_;
}
void TransportRpcFillReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TransportRpcFillReply.Result)
}

// optional sint32 FillID = 2 [default = -1];
bool TransportRpcFillReply::has_fillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransportRpcFillReply::set_has_fillid() {
  _has_bits_[0] |= 0x00000002u;
}
void TransportRpcFillReply::clear_has_fillid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransportRpcFillReply::clear_fillid() {
  fillid_ = -1;
  clear_has_fillid();
}
::google::protobuf::int32 TransportRpcFillReply::fillid() const {
  // @@protoc_insertion_point(field_get:TransportRpcFillReply.FillID)
  return fillid_;
}
void TransportRpcFillReply::set_fillid(::google::protobuf::int32 value) {
  set_has_fillid();
  fillid_ = value;
  // @@protoc_insertion_point(field_set:TransportRpcFillReply.FillID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransportRpcHelpOtherAsk::kItemIDFieldNumber;
const int TransportRpcHelpOtherAsk::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransportRpcHelpOtherAsk::TransportRpcHelpOtherAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TransportRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransportRpcHelpOtherAsk)
}
TransportRpcHelpOtherAsk::TransportRpcHelpOtherAsk(const TransportRpcHelpOtherAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&itemid_, &from.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:TransportRpcHelpOtherAsk)
}

void TransportRpcHelpOtherAsk::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = -1;
  userid_ = GOOGLE_LONGLONG(-1);
}

TransportRpcHelpOtherAsk::~TransportRpcHelpOtherAsk() {
  // @@protoc_insertion_point(destructor:TransportRpcHelpOtherAsk)
  SharedDtor();
}

void TransportRpcHelpOtherAsk::SharedDtor() {
}

void TransportRpcHelpOtherAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportRpcHelpOtherAsk::descriptor() {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransportRpcHelpOtherAsk& TransportRpcHelpOtherAsk::default_instance() {
  protobuf_TransportRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransportRpcHelpOtherAsk* TransportRpcHelpOtherAsk::New(::google::protobuf::Arena* arena) const {
  TransportRpcHelpOtherAsk* n = new TransportRpcHelpOtherAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransportRpcHelpOtherAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TransportRpcHelpOtherAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    itemid_ = -1;
    userid_ = GOOGLE_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransportRpcHelpOtherAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransportRpcHelpOtherAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ItemID = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 UserId = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransportRpcHelpOtherAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransportRpcHelpOtherAsk)
  return false;
#undef DO_
}

void TransportRpcHelpOtherAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransportRpcHelpOtherAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ItemID = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->itemid(), output);
  }

  // optional sint64 UserId = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransportRpcHelpOtherAsk)
}

::google::protobuf::uint8* TransportRpcHelpOtherAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TransportRpcHelpOtherAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ItemID = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->itemid(), target);
  }

  // optional sint64 UserId = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransportRpcHelpOtherAsk)
  return target;
}

size_t TransportRpcHelpOtherAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransportRpcHelpOtherAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 ItemID = 1 [default = -1];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->itemid());
    }

    // optional sint64 UserId = 3 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportRpcHelpOtherAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransportRpcHelpOtherAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportRpcHelpOtherAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransportRpcHelpOtherAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransportRpcHelpOtherAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransportRpcHelpOtherAsk)
    MergeFrom(*source);
  }
}

void TransportRpcHelpOtherAsk::MergeFrom(const TransportRpcHelpOtherAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransportRpcHelpOtherAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransportRpcHelpOtherAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransportRpcHelpOtherAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRpcHelpOtherAsk::CopyFrom(const TransportRpcHelpOtherAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransportRpcHelpOtherAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRpcHelpOtherAsk::IsInitialized() const {
  return true;
}

void TransportRpcHelpOtherAsk::Swap(TransportRpcHelpOtherAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransportRpcHelpOtherAsk::InternalSwap(TransportRpcHelpOtherAsk* other) {
  using std::swap;
  swap(itemid_, other->itemid_);
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransportRpcHelpOtherAsk::GetMetadata() const {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransportRpcHelpOtherAsk

// optional sint32 ItemID = 1 [default = -1];
bool TransportRpcHelpOtherAsk::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransportRpcHelpOtherAsk::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
void TransportRpcHelpOtherAsk::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransportRpcHelpOtherAsk::clear_itemid() {
  itemid_ = -1;
  clear_has_itemid();
}
::google::protobuf::int32 TransportRpcHelpOtherAsk::itemid() const {
  // @@protoc_insertion_point(field_get:TransportRpcHelpOtherAsk.ItemID)
  return itemid_;
}
void TransportRpcHelpOtherAsk::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:TransportRpcHelpOtherAsk.ItemID)
}

// optional sint64 UserId = 3 [default = -1];
bool TransportRpcHelpOtherAsk::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransportRpcHelpOtherAsk::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void TransportRpcHelpOtherAsk::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransportRpcHelpOtherAsk::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 TransportRpcHelpOtherAsk::userid() const {
  // @@protoc_insertion_point(field_get:TransportRpcHelpOtherAsk.UserId)
  return userid_;
}
void TransportRpcHelpOtherAsk::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TransportRpcHelpOtherAsk.UserId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransportRpcHelpOtherReply::kResultFieldNumber;
const int TransportRpcHelpOtherReply::kItemIDFieldNumber;
const int TransportRpcHelpOtherReply::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransportRpcHelpOtherReply::TransportRpcHelpOtherReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TransportRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransportRpcHelpOtherReply)
}
TransportRpcHelpOtherReply::TransportRpcHelpOtherReply(const TransportRpcHelpOtherReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:TransportRpcHelpOtherReply)
}

void TransportRpcHelpOtherReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  itemid_ = -1;
  userid_ = GOOGLE_LONGLONG(-1);
}

TransportRpcHelpOtherReply::~TransportRpcHelpOtherReply() {
  // @@protoc_insertion_point(destructor:TransportRpcHelpOtherReply)
  SharedDtor();
}

void TransportRpcHelpOtherReply::SharedDtor() {
}

void TransportRpcHelpOtherReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportRpcHelpOtherReply::descriptor() {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransportRpcHelpOtherReply& TransportRpcHelpOtherReply::default_instance() {
  protobuf_TransportRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransportRpcHelpOtherReply* TransportRpcHelpOtherReply::New(::google::protobuf::Arena* arena) const {
  TransportRpcHelpOtherReply* n = new TransportRpcHelpOtherReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransportRpcHelpOtherReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TransportRpcHelpOtherReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    result_ = -9999;
    itemid_ = -1;
    userid_ = GOOGLE_LONGLONG(-1);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransportRpcHelpOtherReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransportRpcHelpOtherReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ItemID = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 UserId = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_userid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransportRpcHelpOtherReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransportRpcHelpOtherReply)
  return false;
#undef DO_
}

void TransportRpcHelpOtherReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransportRpcHelpOtherReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 ItemID = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->itemid(), output);
  }

  // optional sint64 UserId = 4 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransportRpcHelpOtherReply)
}

::google::protobuf::uint8* TransportRpcHelpOtherReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TransportRpcHelpOtherReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 ItemID = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->itemid(), target);
  }

  // optional sint64 UserId = 4 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransportRpcHelpOtherReply)
  return target;
}

size_t TransportRpcHelpOtherReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransportRpcHelpOtherReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 ItemID = 2 [default = -1];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->itemid());
    }

    // optional sint64 UserId = 4 [default = -1];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->userid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportRpcHelpOtherReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransportRpcHelpOtherReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportRpcHelpOtherReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransportRpcHelpOtherReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransportRpcHelpOtherReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransportRpcHelpOtherReply)
    MergeFrom(*source);
  }
}

void TransportRpcHelpOtherReply::MergeFrom(const TransportRpcHelpOtherReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransportRpcHelpOtherReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000004u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransportRpcHelpOtherReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransportRpcHelpOtherReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRpcHelpOtherReply::CopyFrom(const TransportRpcHelpOtherReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransportRpcHelpOtherReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRpcHelpOtherReply::IsInitialized() const {
  return true;
}

void TransportRpcHelpOtherReply::Swap(TransportRpcHelpOtherReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransportRpcHelpOtherReply::InternalSwap(TransportRpcHelpOtherReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(itemid_, other->itemid_);
  swap(userid_, other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransportRpcHelpOtherReply::GetMetadata() const {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransportRpcHelpOtherReply

// optional sint32 Result = 1 [default = -9999];
bool TransportRpcHelpOtherReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransportRpcHelpOtherReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TransportRpcHelpOtherReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransportRpcHelpOtherReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TransportRpcHelpOtherReply::result() const {
  // @@protoc_insertion_point(field_get:TransportRpcHelpOtherReply.Result)
  return result_;
}
void TransportRpcHelpOtherReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TransportRpcHelpOtherReply.Result)
}

// optional sint32 ItemID = 2 [default = -1];
bool TransportRpcHelpOtherReply::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransportRpcHelpOtherReply::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
void TransportRpcHelpOtherReply::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransportRpcHelpOtherReply::clear_itemid() {
  itemid_ = -1;
  clear_has_itemid();
}
::google::protobuf::int32 TransportRpcHelpOtherReply::itemid() const {
  // @@protoc_insertion_point(field_get:TransportRpcHelpOtherReply.ItemID)
  return itemid_;
}
void TransportRpcHelpOtherReply::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:TransportRpcHelpOtherReply.ItemID)
}

// optional sint64 UserId = 4 [default = -1];
bool TransportRpcHelpOtherReply::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransportRpcHelpOtherReply::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
void TransportRpcHelpOtherReply::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransportRpcHelpOtherReply::clear_userid() {
  userid_ = GOOGLE_LONGLONG(-1);
  clear_has_userid();
}
::google::protobuf::int64 TransportRpcHelpOtherReply::userid() const {
  // @@protoc_insertion_point(field_get:TransportRpcHelpOtherReply.UserId)
  return userid_;
}
void TransportRpcHelpOtherReply::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:TransportRpcHelpOtherReply.UserId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransportRpcAskHelpAsk::kItemIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransportRpcAskHelpAsk::TransportRpcAskHelpAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TransportRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransportRpcAskHelpAsk)
}
TransportRpcAskHelpAsk::TransportRpcAskHelpAsk(const TransportRpcAskHelpAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  itemid_ = from.itemid_;
  // @@protoc_insertion_point(copy_constructor:TransportRpcAskHelpAsk)
}

void TransportRpcAskHelpAsk::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = -1;
}

TransportRpcAskHelpAsk::~TransportRpcAskHelpAsk() {
  // @@protoc_insertion_point(destructor:TransportRpcAskHelpAsk)
  SharedDtor();
}

void TransportRpcAskHelpAsk::SharedDtor() {
}

void TransportRpcAskHelpAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportRpcAskHelpAsk::descriptor() {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransportRpcAskHelpAsk& TransportRpcAskHelpAsk::default_instance() {
  protobuf_TransportRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransportRpcAskHelpAsk* TransportRpcAskHelpAsk::New(::google::protobuf::Arena* arena) const {
  TransportRpcAskHelpAsk* n = new TransportRpcAskHelpAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransportRpcAskHelpAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TransportRpcAskHelpAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemid_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransportRpcAskHelpAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransportRpcAskHelpAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 ItemID = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransportRpcAskHelpAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransportRpcAskHelpAsk)
  return false;
#undef DO_
}

void TransportRpcAskHelpAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransportRpcAskHelpAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ItemID = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->itemid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransportRpcAskHelpAsk)
}

::google::protobuf::uint8* TransportRpcAskHelpAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TransportRpcAskHelpAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 ItemID = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->itemid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransportRpcAskHelpAsk)
  return target;
}

size_t TransportRpcAskHelpAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransportRpcAskHelpAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 ItemID = 1 [default = -1];
  if (has_itemid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->itemid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportRpcAskHelpAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransportRpcAskHelpAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportRpcAskHelpAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransportRpcAskHelpAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransportRpcAskHelpAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransportRpcAskHelpAsk)
    MergeFrom(*source);
  }
}

void TransportRpcAskHelpAsk::MergeFrom(const TransportRpcAskHelpAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransportRpcAskHelpAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_itemid()) {
    set_itemid(from.itemid());
  }
}

void TransportRpcAskHelpAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransportRpcAskHelpAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRpcAskHelpAsk::CopyFrom(const TransportRpcAskHelpAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransportRpcAskHelpAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRpcAskHelpAsk::IsInitialized() const {
  return true;
}

void TransportRpcAskHelpAsk::Swap(TransportRpcAskHelpAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransportRpcAskHelpAsk::InternalSwap(TransportRpcAskHelpAsk* other) {
  using std::swap;
  swap(itemid_, other->itemid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransportRpcAskHelpAsk::GetMetadata() const {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransportRpcAskHelpAsk

// optional sint32 ItemID = 1 [default = -1];
bool TransportRpcAskHelpAsk::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransportRpcAskHelpAsk::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
void TransportRpcAskHelpAsk::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransportRpcAskHelpAsk::clear_itemid() {
  itemid_ = -1;
  clear_has_itemid();
}
::google::protobuf::int32 TransportRpcAskHelpAsk::itemid() const {
  // @@protoc_insertion_point(field_get:TransportRpcAskHelpAsk.ItemID)
  return itemid_;
}
void TransportRpcAskHelpAsk::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:TransportRpcAskHelpAsk.ItemID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransportRpcAskHelpReply::kResultFieldNumber;
const int TransportRpcAskHelpReply::kItemIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransportRpcAskHelpReply::TransportRpcAskHelpReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TransportRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransportRpcAskHelpReply)
}
TransportRpcAskHelpReply::TransportRpcAskHelpReply(const TransportRpcAskHelpReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&itemid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(itemid_));
  // @@protoc_insertion_point(copy_constructor:TransportRpcAskHelpReply)
}

void TransportRpcAskHelpReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  itemid_ = -1;
}

TransportRpcAskHelpReply::~TransportRpcAskHelpReply() {
  // @@protoc_insertion_point(destructor:TransportRpcAskHelpReply)
  SharedDtor();
}

void TransportRpcAskHelpReply::SharedDtor() {
}

void TransportRpcAskHelpReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportRpcAskHelpReply::descriptor() {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransportRpcAskHelpReply& TransportRpcAskHelpReply::default_instance() {
  protobuf_TransportRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransportRpcAskHelpReply* TransportRpcAskHelpReply::New(::google::protobuf::Arena* arena) const {
  TransportRpcAskHelpReply* n = new TransportRpcAskHelpReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransportRpcAskHelpReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TransportRpcAskHelpReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    result_ = -9999;
    itemid_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransportRpcAskHelpReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransportRpcAskHelpReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ItemID = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransportRpcAskHelpReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransportRpcAskHelpReply)
  return false;
#undef DO_
}

void TransportRpcAskHelpReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransportRpcAskHelpReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 ItemID = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->itemid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransportRpcAskHelpReply)
}

::google::protobuf::uint8* TransportRpcAskHelpReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TransportRpcAskHelpReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 ItemID = 3 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->itemid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransportRpcAskHelpReply)
  return target;
}

size_t TransportRpcAskHelpReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransportRpcAskHelpReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 ItemID = 3 [default = -1];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->itemid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportRpcAskHelpReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransportRpcAskHelpReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportRpcAskHelpReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransportRpcAskHelpReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransportRpcAskHelpReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransportRpcAskHelpReply)
    MergeFrom(*source);
  }
}

void TransportRpcAskHelpReply::MergeFrom(const TransportRpcAskHelpReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransportRpcAskHelpReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      itemid_ = from.itemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransportRpcAskHelpReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransportRpcAskHelpReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRpcAskHelpReply::CopyFrom(const TransportRpcAskHelpReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransportRpcAskHelpReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRpcAskHelpReply::IsInitialized() const {
  return true;
}

void TransportRpcAskHelpReply::Swap(TransportRpcAskHelpReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransportRpcAskHelpReply::InternalSwap(TransportRpcAskHelpReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(itemid_, other->itemid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransportRpcAskHelpReply::GetMetadata() const {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransportRpcAskHelpReply

// optional sint32 Result = 1 [default = -9999];
bool TransportRpcAskHelpReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransportRpcAskHelpReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TransportRpcAskHelpReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransportRpcAskHelpReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TransportRpcAskHelpReply::result() const {
  // @@protoc_insertion_point(field_get:TransportRpcAskHelpReply.Result)
  return result_;
}
void TransportRpcAskHelpReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TransportRpcAskHelpReply.Result)
}

// optional sint32 ItemID = 3 [default = -1];
bool TransportRpcAskHelpReply::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransportRpcAskHelpReply::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
void TransportRpcAskHelpReply::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransportRpcAskHelpReply::clear_itemid() {
  itemid_ = -1;
  clear_has_itemid();
}
::google::protobuf::int32 TransportRpcAskHelpReply::itemid() const {
  // @@protoc_insertion_point(field_get:TransportRpcAskHelpReply.ItemID)
  return itemid_;
}
void TransportRpcAskHelpReply::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:TransportRpcAskHelpReply.ItemID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransportRpcSetSailAsk::TransportRpcSetSailAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TransportRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransportRpcSetSailAsk)
}
TransportRpcSetSailAsk::TransportRpcSetSailAsk(const TransportRpcSetSailAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TransportRpcSetSailAsk)
}

void TransportRpcSetSailAsk::SharedCtor() {
  _cached_size_ = 0;
}

TransportRpcSetSailAsk::~TransportRpcSetSailAsk() {
  // @@protoc_insertion_point(destructor:TransportRpcSetSailAsk)
  SharedDtor();
}

void TransportRpcSetSailAsk::SharedDtor() {
}

void TransportRpcSetSailAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportRpcSetSailAsk::descriptor() {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransportRpcSetSailAsk& TransportRpcSetSailAsk::default_instance() {
  protobuf_TransportRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransportRpcSetSailAsk* TransportRpcSetSailAsk::New(::google::protobuf::Arena* arena) const {
  TransportRpcSetSailAsk* n = new TransportRpcSetSailAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransportRpcSetSailAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TransportRpcSetSailAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransportRpcSetSailAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransportRpcSetSailAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TransportRpcSetSailAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransportRpcSetSailAsk)
  return false;
#undef DO_
}

void TransportRpcSetSailAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransportRpcSetSailAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransportRpcSetSailAsk)
}

::google::protobuf::uint8* TransportRpcSetSailAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TransportRpcSetSailAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransportRpcSetSailAsk)
  return target;
}

size_t TransportRpcSetSailAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransportRpcSetSailAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportRpcSetSailAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransportRpcSetSailAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportRpcSetSailAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransportRpcSetSailAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransportRpcSetSailAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransportRpcSetSailAsk)
    MergeFrom(*source);
  }
}

void TransportRpcSetSailAsk::MergeFrom(const TransportRpcSetSailAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransportRpcSetSailAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TransportRpcSetSailAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransportRpcSetSailAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRpcSetSailAsk::CopyFrom(const TransportRpcSetSailAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransportRpcSetSailAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRpcSetSailAsk::IsInitialized() const {
  return true;
}

void TransportRpcSetSailAsk::Swap(TransportRpcSetSailAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransportRpcSetSailAsk::InternalSwap(TransportRpcSetSailAsk* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransportRpcSetSailAsk::GetMetadata() const {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransportRpcSetSailAsk

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransportRpcSetSailReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransportRpcSetSailReply::TransportRpcSetSailReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TransportRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransportRpcSetSailReply)
}
TransportRpcSetSailReply::TransportRpcSetSailReply(const TransportRpcSetSailReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:TransportRpcSetSailReply)
}

void TransportRpcSetSailReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
}

TransportRpcSetSailReply::~TransportRpcSetSailReply() {
  // @@protoc_insertion_point(destructor:TransportRpcSetSailReply)
  SharedDtor();
}

void TransportRpcSetSailReply::SharedDtor() {
}

void TransportRpcSetSailReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportRpcSetSailReply::descriptor() {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransportRpcSetSailReply& TransportRpcSetSailReply::default_instance() {
  protobuf_TransportRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransportRpcSetSailReply* TransportRpcSetSailReply::New(::google::protobuf::Arena* arena) const {
  TransportRpcSetSailReply* n = new TransportRpcSetSailReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransportRpcSetSailReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TransportRpcSetSailReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = -9999;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransportRpcSetSailReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransportRpcSetSailReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransportRpcSetSailReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransportRpcSetSailReply)
  return false;
#undef DO_
}

void TransportRpcSetSailReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransportRpcSetSailReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransportRpcSetSailReply)
}

::google::protobuf::uint8* TransportRpcSetSailReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TransportRpcSetSailReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransportRpcSetSailReply)
  return target;
}

size_t TransportRpcSetSailReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransportRpcSetSailReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Result = 1 [default = -9999];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportRpcSetSailReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransportRpcSetSailReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportRpcSetSailReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransportRpcSetSailReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransportRpcSetSailReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransportRpcSetSailReply)
    MergeFrom(*source);
  }
}

void TransportRpcSetSailReply::MergeFrom(const TransportRpcSetSailReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransportRpcSetSailReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void TransportRpcSetSailReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransportRpcSetSailReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRpcSetSailReply::CopyFrom(const TransportRpcSetSailReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransportRpcSetSailReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRpcSetSailReply::IsInitialized() const {
  return true;
}

void TransportRpcSetSailReply::Swap(TransportRpcSetSailReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransportRpcSetSailReply::InternalSwap(TransportRpcSetSailReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransportRpcSetSailReply::GetMetadata() const {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransportRpcSetSailReply

// optional sint32 Result = 1 [default = -9999];
bool TransportRpcSetSailReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransportRpcSetSailReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TransportRpcSetSailReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransportRpcSetSailReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TransportRpcSetSailReply::result() const {
  // @@protoc_insertion_point(field_get:TransportRpcSetSailReply.Result)
  return result_;
}
void TransportRpcSetSailReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TransportRpcSetSailReply.Result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransportRpcAddTransportAsk::kLvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransportRpcAddTransportAsk::TransportRpcAddTransportAsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TransportRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransportRpcAddTransportAsk)
}
TransportRpcAddTransportAsk::TransportRpcAddTransportAsk(const TransportRpcAddTransportAsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lv_ = from.lv_;
  // @@protoc_insertion_point(copy_constructor:TransportRpcAddTransportAsk)
}

void TransportRpcAddTransportAsk::SharedCtor() {
  _cached_size_ = 0;
  lv_ = -1;
}

TransportRpcAddTransportAsk::~TransportRpcAddTransportAsk() {
  // @@protoc_insertion_point(destructor:TransportRpcAddTransportAsk)
  SharedDtor();
}

void TransportRpcAddTransportAsk::SharedDtor() {
}

void TransportRpcAddTransportAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportRpcAddTransportAsk::descriptor() {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransportRpcAddTransportAsk& TransportRpcAddTransportAsk::default_instance() {
  protobuf_TransportRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransportRpcAddTransportAsk* TransportRpcAddTransportAsk::New(::google::protobuf::Arena* arena) const {
  TransportRpcAddTransportAsk* n = new TransportRpcAddTransportAsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransportRpcAddTransportAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:TransportRpcAddTransportAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lv_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransportRpcAddTransportAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransportRpcAddTransportAsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Lv = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_lv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &lv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransportRpcAddTransportAsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransportRpcAddTransportAsk)
  return false;
#undef DO_
}

void TransportRpcAddTransportAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransportRpcAddTransportAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Lv = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->lv(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransportRpcAddTransportAsk)
}

::google::protobuf::uint8* TransportRpcAddTransportAsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TransportRpcAddTransportAsk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Lv = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->lv(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransportRpcAddTransportAsk)
  return target;
}

size_t TransportRpcAddTransportAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransportRpcAddTransportAsk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 Lv = 1 [default = -1];
  if (has_lv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->lv());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportRpcAddTransportAsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransportRpcAddTransportAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportRpcAddTransportAsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransportRpcAddTransportAsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransportRpcAddTransportAsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransportRpcAddTransportAsk)
    MergeFrom(*source);
  }
}

void TransportRpcAddTransportAsk::MergeFrom(const TransportRpcAddTransportAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransportRpcAddTransportAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lv()) {
    set_lv(from.lv());
  }
}

void TransportRpcAddTransportAsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransportRpcAddTransportAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRpcAddTransportAsk::CopyFrom(const TransportRpcAddTransportAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransportRpcAddTransportAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRpcAddTransportAsk::IsInitialized() const {
  return true;
}

void TransportRpcAddTransportAsk::Swap(TransportRpcAddTransportAsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransportRpcAddTransportAsk::InternalSwap(TransportRpcAddTransportAsk* other) {
  using std::swap;
  swap(lv_, other->lv_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransportRpcAddTransportAsk::GetMetadata() const {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransportRpcAddTransportAsk

// optional sint32 Lv = 1 [default = -1];
bool TransportRpcAddTransportAsk::has_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransportRpcAddTransportAsk::set_has_lv() {
  _has_bits_[0] |= 0x00000001u;
}
void TransportRpcAddTransportAsk::clear_has_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransportRpcAddTransportAsk::clear_lv() {
  lv_ = -1;
  clear_has_lv();
}
::google::protobuf::int32 TransportRpcAddTransportAsk::lv() const {
  // @@protoc_insertion_point(field_get:TransportRpcAddTransportAsk.Lv)
  return lv_;
}
void TransportRpcAddTransportAsk::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
  // @@protoc_insertion_point(field_set:TransportRpcAddTransportAsk.Lv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransportRpcAddTransportReply::kResultFieldNumber;
const int TransportRpcAddTransportReply::kLvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransportRpcAddTransportReply::TransportRpcAddTransportReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TransportRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransportRpcAddTransportReply)
}
TransportRpcAddTransportReply::TransportRpcAddTransportReply(const TransportRpcAddTransportReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&lv_) -
    reinterpret_cast<char*>(&result_)) + sizeof(lv_));
  // @@protoc_insertion_point(copy_constructor:TransportRpcAddTransportReply)
}

void TransportRpcAddTransportReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = -9999;
  lv_ = -1;
}

TransportRpcAddTransportReply::~TransportRpcAddTransportReply() {
  // @@protoc_insertion_point(destructor:TransportRpcAddTransportReply)
  SharedDtor();
}

void TransportRpcAddTransportReply::SharedDtor() {
}

void TransportRpcAddTransportReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportRpcAddTransportReply::descriptor() {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransportRpcAddTransportReply& TransportRpcAddTransportReply::default_instance() {
  protobuf_TransportRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransportRpcAddTransportReply* TransportRpcAddTransportReply::New(::google::protobuf::Arena* arena) const {
  TransportRpcAddTransportReply* n = new TransportRpcAddTransportReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransportRpcAddTransportReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TransportRpcAddTransportReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    result_ = -9999;
    lv_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransportRpcAddTransportReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransportRpcAddTransportReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Result = 1 [default = -9999];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 Lv = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_lv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &lv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransportRpcAddTransportReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransportRpcAddTransportReply)
  return false;
#undef DO_
}

void TransportRpcAddTransportReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransportRpcAddTransportReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->result(), output);
  }

  // optional sint32 Lv = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->lv(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransportRpcAddTransportReply)
}

::google::protobuf::uint8* TransportRpcAddTransportReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TransportRpcAddTransportReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 Result = 1 [default = -9999];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->result(), target);
  }

  // optional sint32 Lv = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->lv(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransportRpcAddTransportReply)
  return target;
}

size_t TransportRpcAddTransportReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransportRpcAddTransportReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional sint32 Result = 1 [default = -9999];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }

    // optional sint32 Lv = 2 [default = -1];
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->lv());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportRpcAddTransportReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransportRpcAddTransportReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportRpcAddTransportReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransportRpcAddTransportReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransportRpcAddTransportReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransportRpcAddTransportReply)
    MergeFrom(*source);
  }
}

void TransportRpcAddTransportReply::MergeFrom(const TransportRpcAddTransportReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransportRpcAddTransportReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      lv_ = from.lv_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransportRpcAddTransportReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransportRpcAddTransportReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRpcAddTransportReply::CopyFrom(const TransportRpcAddTransportReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransportRpcAddTransportReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRpcAddTransportReply::IsInitialized() const {
  return true;
}

void TransportRpcAddTransportReply::Swap(TransportRpcAddTransportReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransportRpcAddTransportReply::InternalSwap(TransportRpcAddTransportReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(lv_, other->lv_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransportRpcAddTransportReply::GetMetadata() const {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransportRpcAddTransportReply

// optional sint32 Result = 1 [default = -9999];
bool TransportRpcAddTransportReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransportRpcAddTransportReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TransportRpcAddTransportReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransportRpcAddTransportReply::clear_result() {
  result_ = -9999;
  clear_has_result();
}
::google::protobuf::int32 TransportRpcAddTransportReply::result() const {
  // @@protoc_insertion_point(field_get:TransportRpcAddTransportReply.Result)
  return result_;
}
void TransportRpcAddTransportReply::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:TransportRpcAddTransportReply.Result)
}

// optional sint32 Lv = 2 [default = -1];
bool TransportRpcAddTransportReply::has_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransportRpcAddTransportReply::set_has_lv() {
  _has_bits_[0] |= 0x00000002u;
}
void TransportRpcAddTransportReply::clear_has_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransportRpcAddTransportReply::clear_lv() {
  lv_ = -1;
  clear_has_lv();
}
::google::protobuf::int32 TransportRpcAddTransportReply::lv() const {
  // @@protoc_insertion_point(field_get:TransportRpcAddTransportReply.Lv)
  return lv_;
}
void TransportRpcAddTransportReply::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
  // @@protoc_insertion_point(field_set:TransportRpcAddTransportReply.Lv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransportRpcIsHelpedNotify::kTemplateIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransportRpcIsHelpedNotify::TransportRpcIsHelpedNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_TransportRpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransportRpcIsHelpedNotify)
}
TransportRpcIsHelpedNotify::TransportRpcIsHelpedNotify(const TransportRpcIsHelpedNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  templateid_ = from.templateid_;
  // @@protoc_insertion_point(copy_constructor:TransportRpcIsHelpedNotify)
}

void TransportRpcIsHelpedNotify::SharedCtor() {
  _cached_size_ = 0;
  templateid_ = -1;
}

TransportRpcIsHelpedNotify::~TransportRpcIsHelpedNotify() {
  // @@protoc_insertion_point(destructor:TransportRpcIsHelpedNotify)
  SharedDtor();
}

void TransportRpcIsHelpedNotify::SharedDtor() {
}

void TransportRpcIsHelpedNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportRpcIsHelpedNotify::descriptor() {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransportRpcIsHelpedNotify& TransportRpcIsHelpedNotify::default_instance() {
  protobuf_TransportRpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransportRpcIsHelpedNotify* TransportRpcIsHelpedNotify::New(::google::protobuf::Arena* arena) const {
  TransportRpcIsHelpedNotify* n = new TransportRpcIsHelpedNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransportRpcIsHelpedNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:TransportRpcIsHelpedNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  templateid_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransportRpcIsHelpedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransportRpcIsHelpedNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TemplateId = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_templateid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &templateid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransportRpcIsHelpedNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransportRpcIsHelpedNotify)
  return false;
#undef DO_
}

void TransportRpcIsHelpedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransportRpcIsHelpedNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TemplateId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->templateid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransportRpcIsHelpedNotify)
}

::google::protobuf::uint8* TransportRpcIsHelpedNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TransportRpcIsHelpedNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 TemplateId = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->templateid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransportRpcIsHelpedNotify)
  return target;
}

size_t TransportRpcIsHelpedNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransportRpcIsHelpedNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional sint32 TemplateId = 1 [default = -1];
  if (has_templateid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->templateid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportRpcIsHelpedNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransportRpcIsHelpedNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportRpcIsHelpedNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransportRpcIsHelpedNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransportRpcIsHelpedNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransportRpcIsHelpedNotify)
    MergeFrom(*source);
  }
}

void TransportRpcIsHelpedNotify::MergeFrom(const TransportRpcIsHelpedNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransportRpcIsHelpedNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_templateid()) {
    set_templateid(from.templateid());
  }
}

void TransportRpcIsHelpedNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransportRpcIsHelpedNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRpcIsHelpedNotify::CopyFrom(const TransportRpcIsHelpedNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransportRpcIsHelpedNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRpcIsHelpedNotify::IsInitialized() const {
  return true;
}

void TransportRpcIsHelpedNotify::Swap(TransportRpcIsHelpedNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransportRpcIsHelpedNotify::InternalSwap(TransportRpcIsHelpedNotify* other) {
  using std::swap;
  swap(templateid_, other->templateid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransportRpcIsHelpedNotify::GetMetadata() const {
  protobuf_TransportRpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TransportRpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransportRpcIsHelpedNotify

// optional sint32 TemplateId = 1 [default = -1];
bool TransportRpcIsHelpedNotify::has_templateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransportRpcIsHelpedNotify::set_has_templateid() {
  _has_bits_[0] |= 0x00000001u;
}
void TransportRpcIsHelpedNotify::clear_has_templateid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransportRpcIsHelpedNotify::clear_templateid() {
  templateid_ = -1;
  clear_has_templateid();
}
::google::protobuf::int32 TransportRpcIsHelpedNotify::templateid() const {
  // @@protoc_insertion_point(field_get:TransportRpcIsHelpedNotify.TemplateId)
  return templateid_;
}
void TransportRpcIsHelpedNotify::set_templateid(::google::protobuf::int32 value) {
  set_has_templateid();
  templateid_ = value;
  // @@protoc_insertion_point(field_set:TransportRpcIsHelpedNotify.TemplateId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
